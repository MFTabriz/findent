#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1343] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      152,  150,  149,  150,  146,  145,  150,  147,  148,   16,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,    4,    5,    2,
        3,    8,    9,    6,    7,   15,   14,   10,   12,   11,
       13,    1,  151,  151,  113,  151,  113,  151,  151,  151,
      151,  151,  151,  151,  142,  142,  141,  142,  142,  129,
      142,  142,  118,  117,  118,  122,  121,  122,  122,   18,

       20,   19,  143,    0,  145,    0,    0,   16,   17,   16,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       36,    0,    0,    0,    0,   72,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,  113,    0,  101,    0,    0,    0,  101,    0,    0,
        0,  113,    0,    0,    0,    0,    0,    0,  103,    0,
        0,    0,    0,  101,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
        0,    0,    0,    0,    0,    0,  135,  116,    0,    0,
        0,   18,  144,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   37,    0,    0,    0,    0,    0,
       53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   98,    0,
        0,    0,    0,    0,    0,    0,    0,  101,    0,    0,
        0,  101,    0,    0,    0,  101,    0,    0,    0,  101,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  102,    0,    0,    0,    0,  105,    0,    0,    0,
        0,    0,    0,  103,    0,    0,    0,  105,    0,    0,
        0,  101,    0,    0,    0,    0,    0,    0,  101,    0,
        0,  101,    0,  100,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  130,    0,    0,    0,    0,    0,  116,  116,    0,
      120,  119,    0,    0,    0,    0,    0,    0,   27,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   69,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   86,   87,    0,    0,    0,
        0,   94,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  103,    0,    0,  107,    0,    0,
      101,    0,  101,  101,    0,  101,    0,    0,  101,  101,

      101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  102,    0,    0,    0,  102,
        0,    0,  108,    0,  103,    0,    0,  105,    0,  107,
      103,    0,  103,  113,    0,  105,    0,    0,    0,    0,
        0,    0,    0,    0,  103,    0,  101,    0,    0,    0,
        0,  100,    0,    0,    0,  100,    0,    0,    0,    0,
        0,  111,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  136,    0,  116,    0,    0,

        0,    0,    0,    0,   24,    0,    0,    0,   31,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   52,    0,    0,    0,   57,    0,    0,
        0,    0,    0,    0,    0,    0,   68,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   96,    0,   99,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  103,    0,
      101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  102,    0,  102,
      102,    0,  102,    0,  103,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,    0,  100,  100,    0,  100,
        0,    0,    0,    0,    0,    0,  103,    0,    0,    0,
      105,    0,    0,    0,  110,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  133,  132,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  114,
      114,    0,    0,    0,   23,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   46,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   70,    0,   73,
        0,    0,    0,    0,   80,    0,    0,    0,    0,    0,
        0,   97,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  102,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  100,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  103,
      111,  103,    0,  105,    0,    0,    0,    0,  103,    0,
        0,    0,  105,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  131,    0,    0,    0,  138,    0,    0,
        0,    0,  115,  115,  114,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   32,   33,    0,    0,    0,
        0,    0,    0,    0,   40,    0,    0,    0,    0,    0,
       54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       65,   66,    0,    0,   74,   77,    0,   79,    0,    0,
        0,    0,   85,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  101,    0,    0,    0,    0,
      101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  107,    0,    0,    0,    0,  103,    0,
        0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
        0,  104,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  102,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  102,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  100,    0,    0,    0,    0,
      100,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  107,    0,    0,    0,    0,
      103,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  107,    0,    0,    0,    0,  103,    0,  110,
        0,  103,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  137,    0,    0,   75,    0,
        0,    0,    0,    0,    0,    0,    0,   34,   35,    0,
       41,    0,    0,    0,    0,    0,    0,   49,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   67,   71,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  101,    0,  101,    0,  101,    0,  101,    0,  106,

        0,  103,    0,  106,    0,  103,    0,  103,    0,    0,
        0,  106,    0,    0,  104,    0,  104,    0,    0,  103,
        0,    0,  106,    0,    0,    0,  102,    0,  102,    0,
      102,    0,  106,    0,  103,    0,  102,    0,  101,    0,
      101,    0,  100,    0,  100,    0,  100,    0,  100,    0,
      106,    0,  103,    0,  106,    0,  103,    0,  106,    0,
      103,    0,  106,    0,  103,    0,    0,    0,    0,    0,
        0,    0,  134,    0,    0,  139,    0,    0,   76,    0,
       22,   25,    0,    0,   28,    0,    0,    0,    0,    0,
       44,   47,    0,    0,    0,   55,    0,    0,   59,    0,

        0,   62,    0,    0,   78,    0,    0,    0,   84,   88,
        0,    0,   91,    0,    0,    0,  103,    0,  109,    0,
      103,    0,    0,  106,    0,  103,    0,  104,  112,  103,
        0,  106,    0,    0,    0,    0,    0,    0,  140,    0,
        0,   30,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   61,    0,    0,    0,    0,    0,   89,
       90,   92,    0,  103,    0,  103,    0,    0,    0,    0,
        0,    0,   26,    0,    0,    0,    0,    0,    0,    0,
       51,   56,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   29,    0,   38,    0,    0,   48,   50,

       58,   60,   64,    0,    0,    0,    0,  127,  128,    0,
       39,   42,    0,   63,    0,    0,    0,    0,    0,    0,
        0,   83,    0,    0,    0,    0,    0,   43,   81,    0,
        0,    0,    0,   82,    0,  123,    0,  124,   21,  125,
      126,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,   14,    1,    1,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       30,   37,   38,   39,   40,   41,   42,   43,   44,   30,
       45,    1,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   30,   58,   59,   60,   61,
       62,   63,   30,   64,   65,   66,   67,   68,   69,   70,
       71,   30,    1,   72,    1,   72,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    1,    4,    4,    5,    1,    6,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    7,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1
    } ;

static yyconst flex_uint16_t yy_base[1578] =
    {   0,
        0,   72,  144,  216,  286, 3238,   18,   20,   19,   21,
       23,   24,   48,   49,   50,   93, 3227, 3215, 3214,  353,
       33,  164, 3213,  120, 3189,  105, 3153, 3090, 3105, 3090,
     3073, 5968, 5968,   28, 5968,   24, 3040, 5968, 5968,   54,
       72, 3034,  220,   80,  389,  176,  180,  231,  223,  233,
      234,  235,   88,  280,  347,  229,  157, 5968, 5968, 5968,
     5968, 5968, 5968, 5968, 5968, 5968, 5968, 5968, 5968, 5968,
     5968, 5968, 5968, 2977, 5968,  121,  128,  453,  112,  131,
      177,  525,  271,  596, 5968,  173, 5968,  277,  379,  386,
      340, 2913, 5968, 5968, 2918, 5968, 5968,  194, 2908,    0,

     5968, 5968, 5968,  112,   34, 2876,    0, 2870,    0,  187,
      139,   85,  248,  283,  299,  354,  238,  346,  353,  343,
      410,  457,  529,  337,  256, 2844,  362,  458,  227,  459,
      372,  385,  463,  361,  468,  391, 2828,  470,  496,  498,
     2833, 5968,  198,  197,  244,  426,  437,  200,  438,  489,
      498,  427,  667,  493,  545,  553,  739,  556, 2791,  571,
      574,  558,  582, 2794,  557,  604,  585,  811,  656,  613,
      698,  774,  618,  641,  325,  600,  637,  275,  691,  835,
     2759,  836,  666,  676,  778,  459,  841,  633,  515, 2771,
      608,    0, 5968,  541,  149,  576,  819,  602,  613,  701,

      825,  673,  761,  816,  826,  699,  682,  746,  836,  750,
      882,  850,  867,  747,  824,  834,  597,  756,  856,  862,
      899,  827,  893,  900,  913,  920,  924,  938, 2753,  906,
      717,  648,  767,  499,  714,  785,  788, 2760,  790,  956,
      969, 2754,  792,  984,  869, 2749,  973,   99,  992, 2742,
     2741,  959,  888,  996, 1005, 1023, 1031, 1077, 1028, 1039,
     1044,  627, 1035, 1052, 1055, 1063, 2723, 1036, 1096, 2709,
      979, 1060, 1100, 5968, 1104, 1107, 1116, 2692, 1067, 1124,
     1127, 2682, 1108, 1135, 1143, 2673, 2672, 1132, 5968, 1151,
     1154, 2662, 1159,  719, 1158, 1167, 1176, 1194, 1195, 1203,

     1202, 1211, 1226, 1210, 1229, 1238, 1241, 1250,  280, 1180,
      904, 5968,  979,  444, 1268, 1256, 1269,  241,  988, 1058,
     5968, 5968,  887, 1091, 1193, 1251, 1262, 1134, 1149, 1257,
     1277, 1249, 1269, 1299, 1279, 1140, 1087, 1208, 1301, 1282,
     1285, 1302, 1305, 1310, 1312, 1315, 1307, 1317, 1320, 1318,
     1328, 1338, 1341, 1334, 1339, 2625, 1350, 1347, 1356, 1355,
     1370, 1379, 1372, 1383, 1381, 2624, 2613, 1382, 1398, 1371,
     1394, 2604, 1406, 1407, 1434, 1272, 1448, 1435, 1438, 1456,
     1464, 1445, 1472, 1455, 2603, 1424, 1480, 2599, 1469, 1484,
     5968, 1487, 2596, 5968, 1495, 2584, 2585, 1499, 5968, 2573,

     5968, 1502, 1503, 1511, 1514, 1522, 1524, 1532, 1519, 1540,
     1549, 1567, 1575, 1621, 1578, 1529, 1588, 1595, 1603, 1537,
     1611, 1579, 1640, 1643, 1600, 2559, 1651, 1653, 1667, 2528,
     1608, 1675, 2523, 1648, 5968, 1679, 1687, 2513, 1506, 5968,
     5968, 1695, 5968, 2510, 1698, 2492, 1656, 1702, 1710, 1707,
     1718, 1721, 1729, 2462, 5968, 1733, 5968, 1736, 1737, 1745,
     1748, 2427, 1756, 1758, 1766, 2426, 1753, 1774, 1783, 1801,
     1802,  801, 1763, 1810, 1813, 1818, 1829, 1830, 1837, 1838,
     1845, 1854, 1867, 1864, 1872, 1209, 1321, 1494, 1528, 1462,
     1547, 1883, 1862, 1887, 1897, 5968, 1906, 1671, 1236, 1508,

     1542, 1803, 1747, 1808, 1827, 1727, 1792, 1886, 1909, 1877,
     1875, 1889, 1568, 1769, 1897, 1911, 1917, 1844, 1924, 1918,
     1905, 1928, 1930, 2338, 1935, 1691, 1937, 2330, 1938, 1936,
     1945, 1950, 1951, 1948, 1955, 1964, 2327, 1962, 1966, 1967,
     1976, 1986, 1979, 1989, 1991, 1995, 2005, 1996, 1997, 2007,
     2008, 5968, 2012, 2316, 2032, 2037, 2053, 2040, 2049,  703,
     2062, 2329, 2066, 2326, 2070, 2076, 2079, 2083, 5968, 2086,
     5968, 2088, 2089, 2097, 2100, 2092,  726, 2102, 2315, 2108,
     2275, 2112, 2115, 2118, 2121, 2124, 2136, 2139, 2142, 2125,
     2154, 1024, 2158, 2264, 2162, 2143, 2166, 1398, 2169, 2234,

     2173, 2150, 2177, 2180, 2184, 2147, 2187, 5968, 2190, 2144,
     5968, 2193, 2127, 2197, 5968, 1645, 2128, 2200, 2073, 2204,
     2207, 2211, 2214, 2217, 2218, 2226, 2229, 2221, 1855, 2231,
     2042, 2237, 1983, 2241, 5968, 2244, 1980, 5968, 2247, 1951,
     2252, 2270, 2271, 2274, 2282, 2279, 1910, 2287, 2027, 2290,
     1913, 1880, 2299, 2302,  841, 2303, 2311, 2314, 2317, 2322,
     2325, 2332, 2333, 2340, 2343, 2348, 2351, 1974, 5968, 5968,
     2242, 1975, 2256, 2357, 2360, 2372, 2361, 2377, 2371, 2306,
      945, 2316, 2068, 2365, 1865, 2363, 2366, 2375, 2355, 2372,
     2389, 2385, 2374, 2391, 2388, 2384, 2387, 2393, 2403, 2415,

     2410, 1857, 2426, 2424, 2430, 2417, 2428, 2441, 2440, 2447,
     2431, 2450, 2453, 2452, 2463, 2457, 2438, 1836, 2476, 1832,
     2467, 2470, 2478, 2477, 2504, 2486, 2491, 2500, 2496, 2497,
     2505, 1819, 2536, 2522, 2570, 2540, 2552, 2543, 2578, 2556,
     2557, 2582, 2590, 2594, 2597, 2567, 2605, 2602, 2613, 2615,
     2623, 2610, 2620, 2631, 2634, 2642, 2644, 2652, 2655, 2660,
     2659, 2668, 2671, 2679, 2676, 2683, 2687, 2690, 2698, 2695,
     2702, 2710, 2707, 2718, 2721, 2729, 2732, 5968, 2734, 2737,
     2739, 2747, 2751, 2759, 2762, 2763, 2771, 2774, 2782, 2784,
     2792, 2779, 2789, 2800, 2803, 2811, 5968, 2820, 2838, 2839,

     2807, 2847, 2808, 2851, 2854, 2867, 2855, 2870, 2878, 5968,
     1794, 5968, 2881, 1777, 2886, 2885, 2894, 2897, 1765, 2905,
     2907, 2915, 1768, 2902, 2918, 2925, 2926, 2933, 2934, 2941,
     2942, 2949, 2516, 5968, 2480, 2529, 2704, 2958, 2959, 2951,
     2962, 2873, 5968, 2058, 2648, 5968, 2606, 2642, 2909, 2952,
     2954, 2957, 2692, 2948, 2764, 1736, 1726, 2884, 2924, 2779,
     2849, 2955, 2950, 2962, 1712, 2979, 2973, 2990, 2980, 2985,
     1701, 2972, 3000, 3006, 3008, 3005, 3007, 3010, 3012, 3015,
     1700, 1692, 3028, 3017, 1689, 1678, 3029, 1677, 3019, 3018,
     3032, 3031, 1668, 3043, 3048, 3039, 3047, 3046, 3082, 3085,

     3110, 3087, 3098, 3113, 3121, 1669, 3089, 3129, 3118, 3133,
     5968, 3137, 3145, 3149, 3157, 3161, 3164, 3165, 3173, 3176,
     3184, 3186, 3194, 1659, 3181, 3202, 3191, 3206, 5968, 3210,
     3218, 3222, 3230, 3234, 3237, 1066, 3244, 3241, 3252, 3255,
     3263, 3266, 3242, 3274, 3277, 3278, 3286, 3289, 3297, 3299,
     3307, 1658, 3294, 3315, 3318, 3304, 3326, 3334, 3323, 3338,
     3341, 3349, 5968, 3352, 3360, 3368, 3372, 3380, 3384, 3388,
     3391, 3357, 3399, 3396, 3407, 3410, 3418, 3421, 3426, 3425,
     3434, 3437, 3445, 3447, 3455, 1614, 3442, 3463, 3452, 3467,
     5968, 3471, 3479, 3483, 3491, 3495, 3504, 3522, 3523, 3526,

     3534, 3531, 3544, 3551, 3559, 1613, 3556, 3568, 3566, 3576,
     5968, 3579, 3587, 3591, 3599, 3602, 3603, 3611, 3614, 3622,
     3624, 3632, 1605, 3619, 3640, 3629, 3644, 5968, 3648, 1584,
     3656, 5968, 3659, 3664, 3667, 3672, 3680, 3683, 3688, 2796,
     2879, 3023, 3676, 3692, 3696, 5968, 3699, 3355, 5968, 3051,
     3088, 3103, 3678, 3328, 3692, 3164, 3700, 1569, 1556, 3107,
     5968, 3425, 3524, 3654, 3623, 3699, 3126, 3702, 3708, 3706,
     3276, 3268, 3715, 3711, 3713, 3163, 3727, 3731, 1522, 1513,
     3728, 3726, 3604, 3739, 3747, 3750, 3740, 3381, 3757, 3752,
     3788, 1513, 3792, 5968, 3812, 1490, 3816, 5968, 3824, 1487,

     3828, 5968, 3836, 1475, 3840, 5968, 3767, 1470, 3844, 3799,
     3852, 1466, 3774, 3860, 3863, 3868, 3871, 3803, 3849, 1467,
     3876, 3884, 1457, 3875, 3892, 3900, 1450, 3904, 5968, 3912,
     1412, 3920, 1409, 3924, 5968, 3928, 5968, 3936, 1356, 3940,
     5968, 3948, 1335, 3952, 5968, 3960, 1300, 3964, 5968, 3972,
     1295, 3976, 5968, 3984, 1278, 3988, 5968, 3996, 1221, 4000,
     5968, 4008, 1212, 4012, 5968, 4015, 4020, 4023, 4028, 4035,
     4036, 3103, 5968, 3352, 3968, 5968, 3896, 4044, 5968, 3790,
     1174, 1157, 4002, 3850, 1133, 3990, 3426, 3865, 3991, 4030,
     1117, 1114, 4034, 4035, 4041, 1068, 4025, 4042, 1042, 4026,

     4053, 1029, 4033, 3853,  996, 4048, 4055, 4057,  962,  952,
     4050, 4063,  927, 4079, 4073, 4105, 5968, 4108,  907, 4076,
     5968, 4116, 4124,  904, 4089,  883,  868,  859,  800, 5968,
     4132,  761, 4135, 4140, 4143, 3462, 3473, 4151, 5968, 4084,
     4085,  688, 4098, 3533, 4105, 4130, 4125, 4139, 4141, 4142,
     4150, 4146, 4148,  672, 4147, 4143, 4144, 4169, 4153,  626,
      603,  586, 4189, 5968, 4214, 5968, 4168, 4216, 4221, 3620,
     3644, 4203,  572, 4170, 3724, 4196, 4212, 3771, 4214, 4217,
      565,  535, 4215, 4216, 4226, 4210, 4225, 4228, 4230, 4250,
      530,  472, 4241,  420, 3745,  395, 4229, 4231,  380,  379,

      363,  284,  261, 4232, 4246, 4244, 4247, 3787, 4237, 4266,
     5968,  243, 4259,  191, 4257, 4258, 4272,  174,  158, 4281,
     4270,  118, 4289, 4273, 4261, 4274, 4293,   94,   53, 4300,
     4293, 4298, 4316,   37, 4286, 5968, 4289, 5968,    8, 5968,
     5968, 5968, 4369, 4376, 4383, 4390, 4397, 4404, 4411, 4418,
     4425, 4432, 4439, 4446, 4453, 4457, 4461, 4466, 4473, 4480,
     4487, 4494, 4501, 4508, 4515, 4522, 4528, 4531, 4535, 4542,
     4549, 4556, 4563, 4570, 4577, 4584, 4591, 4598, 4605, 4612,
     4619, 4626, 4633, 4640, 4647, 4654, 4661, 4668, 4675, 4682,
     4689, 4696, 4703, 4710, 4717, 4724, 4731, 4738, 4745, 4752,

     4759, 4766, 4773, 4780, 4787, 4794, 4801, 4808, 4815, 4822,
     4829, 4836, 4840, 4845, 4852, 4859, 4866, 4873, 4880, 4887,
     4894, 4901, 4908, 4915, 4922, 4929, 4936, 4943, 4950, 4957,
     4964, 4971, 4978, 4985, 4992, 4999, 5006, 5013, 5020, 5027,
     5034, 5041, 5045, 5050, 5057, 5064, 5071, 5078, 5085, 5092,
     5099, 5106, 5113, 5120, 5127, 5134, 5141, 5148, 5155, 5162,
     5169, 5176, 5183, 5190, 5197, 5204, 5211, 5218, 5225, 5232,
     5239, 5246, 5253, 5260, 5263, 5268, 5275, 5282, 5289, 5296,
     5303, 5310, 5317, 5324, 5331, 5338, 5345, 5352, 5359, 5366,
     5373, 5380, 5387, 5394, 5401, 5408, 5415, 5422, 5429, 5436,

     5443, 5450, 5457, 5464, 5471, 5478, 5485, 5492, 5499, 5503,
     5508, 5515, 5522, 5529, 5536, 5543, 5550, 5557, 5564, 5571,
     5578, 5585, 5592, 5599, 5606, 5613, 5620, 5627, 5634, 5641,
     5648, 5655, 5662, 5669, 5676, 5683, 5690, 5697, 5704, 5711,
     5718, 5725, 5732, 5739, 5746, 5753, 5760, 5764, 5769, 5776,
     5783, 5790, 5797, 5804, 5811, 5818, 5825, 5832, 5839, 5846,
     5853, 5860, 5867, 5874, 5881, 5888, 5895, 5902, 5909, 5916,
     5923, 5930, 5937, 5944, 5951, 5958, 5962
    } ;

static yyconst flex_int16_t yy_def[1578] =
    {   0,
     1343, 1343, 1344, 1344,    2,    5, 1345, 1345, 1346, 1346,
     1347, 1347, 1347, 1347, 1347, 1347, 1348, 1348, 1349, 1350,
     1351, 1351, 1352, 1352, 1353, 1353, 1354, 1354, 1355, 1355,
     1342, 1342, 1342, 1342, 1342, 1342, 1356, 1342, 1342, 1357,
     1342, 1342, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1358, 1342, 1359, 1360, 1361, 1362, 1363,
     1364, 1361, 1359, 1363, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1365,

     1342, 1342, 1342, 1342, 1342, 1356, 1366, 1367, 1368, 1357,
     1342, 1342, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1358, 1342, 1369, 1370, 1371, 1372, 1360, 1370, 1373, 1374,
     1375, 1370, 1376, 1377, 1378, 1379, 1376, 1377, 1380, 1381,
     1382, 1383, 1383, 1384, 1385, 1383, 1386, 1387, 1375, 1375,
     1375, 1375, 1375, 1375, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1388, 1342, 1342, 1342, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1342, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1389, 1390, 1391, 1370, 1392, 1384, 1390, 1380, 1393, 1391,
     1391, 1384, 1393, 1391, 1373, 1380, 1394, 1374, 1374, 1384,
     1394, 1395, 1396, 1397, 1398, 1399, 1400, 1398, 1396, 1401,
     1399, 1370, 1402, 1403, 1400, 1400, 1384, 1404, 1400, 1380,
     1342, 1401, 1401, 1342, 1401, 1397, 1397, 1384, 1401, 1397,
     1405, 1384, 1406, 1405, 1405, 1384, 1407, 1406, 1342, 1406,
     1405, 1384, 1408, 1370, 1409, 1410, 1411, 1412, 1395, 1395,

     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1342, 1342, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1414, 1415, 1416, 1415, 1417, 1416,
     1416, 1417, 1416, 1418, 1380, 1407, 1384, 1384, 1417, 1417,
     1342, 1417, 1384, 1342, 1416, 1384, 1419, 1419, 1342, 1384,

     1342, 1420, 1421, 1422, 1421, 1423, 1422, 1422, 1423, 1422,
     1424, 1425, 1426, 1424, 1425, 1427, 1428, 1426, 1426, 1429,
     1426, 1423, 1423, 1423, 1427, 1380, 1430, 1428, 1428, 1384,
     1430, 1428, 1384, 1429, 1342, 1429, 1426, 1384, 1342, 1342,
     1342, 1423, 1342, 1384, 1422, 1384, 1431, 1432, 1431, 1432,
     1432, 1431, 1431, 1407, 1342, 1432, 1342, 1433, 1434, 1435,
     1434, 1380, 1436, 1435, 1435, 1384, 1436, 1435, 1437, 1438,
     1438, 1439, 1440, 1441, 1442, 1442, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,

     1342, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1342, 1342, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1342, 1443, 1443, 1444, 1445, 1446, 1445, 1447, 1446,
     1446, 1447, 1446, 1447, 1447, 1447, 1446, 1407, 1342, 1447,
     1342, 1448, 1449, 1450, 1449, 1451, 1450, 1450, 1451, 1450,
     1451, 1451, 1451, 1450, 1448, 1452, 1453, 1448, 1452, 1454,
     1455, 1453, 1453, 1456, 1453, 1454, 1457, 1455, 1455, 1457,

     1455, 1456, 1456, 1453, 1451, 1457, 1457, 1342, 1457, 1384,
     1342, 1455, 1384, 1456, 1342, 1458, 1459, 1458, 1459, 1459,
     1458, 1459, 1458, 1460, 1461, 1462, 1461, 1463, 1462, 1462,
     1463, 1462, 1463, 1463, 1342, 1463, 1384, 1342, 1462, 1384,
     1464, 1465, 1465, 1466, 1467, 1466, 1468, 1469, 1467, 1467,
     1384, 1469, 1467, 1470, 1471, 1472, 1473, 1448, 1470, 1470,
     1448, 1448, 1448, 1448, 1448, 1448, 1470, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1474,
     1342, 1342, 1342, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1342, 1342, 1475, 1475, 1475,

     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1476, 1477, 1478, 1477, 1479, 1478, 1478, 1479,
     1479, 1479, 1478, 1479, 1480, 1481, 1482, 1481, 1483, 1482,
     1482, 1483, 1483, 1483, 1482, 1483, 1484, 1485, 1484, 1486,
     1487, 1488, 1489, 1489, 1490, 1487, 1491, 1488, 1488, 1491,
     1490, 1489, 1491, 1491, 1488, 1490, 1491, 1342, 1492, 1493,
     1493, 1492, 1493, 1492, 1494, 1495, 1496, 1495, 1497, 1496,
     1496, 1497, 1497, 1497, 1496, 1497, 1342, 1498, 1499, 1499,

     1500, 1501, 1500, 1502, 1501, 1501, 1502, 1502, 1502, 1342,
     1503, 1342, 1501, 1503, 1504, 1505, 1506, 1505, 1507, 1508,
     1506, 1506, 1503, 1508, 1509, 1509, 1504, 1509, 1509, 1509,
     1509, 1509, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1342,
     1342, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1511, 1512,

     1513, 1512, 1514, 1513, 1513, 1503, 1514, 1513, 1514, 1514,
     1342, 1514, 1513, 1514, 1513, 1514, 1509, 1515, 1516, 1515,
     1517, 1516, 1516, 1503, 1517, 1516, 1517, 1517, 1342, 1517,
     1516, 1517, 1516, 1517, 1518, 1519, 1518, 1520, 1521, 1522,
     1522, 1523, 1524, 1525, 1526, 1527, 1528, 1527, 1529, 1528,
     1528, 1503, 1529, 1528, 1530, 1531, 1530, 1530, 1531, 1531,
     1529, 1529, 1342, 1529, 1528, 1530, 1529, 1528, 1531, 1529,
     1532, 1533, 1532, 1533, 1533, 1532, 1533, 1532, 1534, 1535,
     1536, 1535, 1537, 1536, 1536, 1503, 1537, 1536, 1537, 1537,
     1342, 1537, 1536, 1537, 1536, 1537, 1538, 1539, 1539, 1540,

     1541, 1540, 1542, 1541, 1541, 1503, 1542, 1541, 1542, 1542,
     1342, 1542, 1541, 1542, 1541, 1543, 1544, 1545, 1544, 1546,
     1545, 1545, 1503, 1546, 1545, 1546, 1546, 1342, 1546, 1503,
     1545, 1342, 1547, 1547, 1543, 1547, 1547, 1547, 1547, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1342,
     1342, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1549, 1503, 1550, 1342, 1549, 1503, 1550, 1342, 1551, 1503,

     1552, 1342, 1551, 1503, 1552, 1342, 1553, 1554, 1555, 1556,
     1556, 1503, 1557, 1556, 1558, 1558, 1558, 1559, 1560, 1561,
     1562, 1562, 1503, 1555, 1562, 1563, 1503, 1564, 1342, 1563,
     1503, 1565, 1503, 1566, 1342, 1564, 1342, 1567, 1503, 1568,
     1342, 1569, 1503, 1570, 1342, 1569, 1503, 1570, 1342, 1571,
     1503, 1572, 1342, 1571, 1503, 1572, 1342, 1573, 1503, 1574,
     1342, 1573, 1503, 1574, 1342, 1575, 1575, 1576, 1575, 1576,
     1576, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1342, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,

     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1555, 1555, 1342, 1555, 1503, 1557,
     1342, 1557, 1556, 1503, 1559, 1561, 1561, 1561, 1503, 1342,
     1562, 1503, 1575, 1575, 1575, 1342, 1342, 1342, 1342, 1577,
     1577, 1577, 1577, 1342, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1555, 1342, 1557, 1342, 1576, 1575, 1576, 1342,
     1342, 1577, 1577, 1577, 1342, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1576,
     1342, 1342, 1577, 1577, 1342, 1577, 1577, 1577, 1577, 1577,

     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1342, 1342, 1577,
     1342, 1577, 1577, 1577, 1577, 1577, 1577, 1342, 1342, 1577,
     1577, 1577, 1577, 1577, 1342, 1342, 1577, 1577, 1577, 1577,
     1342, 1342, 1577, 1577, 1342, 1342, 1342, 1342, 1577, 1342,
     1342,    0, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,

     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,

     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342
    } ;

static yyconst flex_uint16_t yy_nxt[6041] =
    {   0,
       32,   32,   33,   34,   32,   32,   32,   32,   32,   35,
       32,   32,   32,   32,   36,   36,   32,   32,   32,   32,
       59,   63,   59,   63,  107,   67,   67,   60,   61,   60,
       61,  103,   68,   68,   86,   87,   86,   88,  105,  105,
       69,   69,  104,  104,   38,   32,   32,   32,  105,  105,
       67,   67,   67,  107,   71,   71,   71,   68,   68,   68,
      108,  109,   71,   64,   65,   64,   65,   70,   70,  107,
      107,   32,   32,   32,   39,   34,   32,   32,   32,   32,
       32,   35,   32,   32,   32,   32,   36,   36,   32,   32,
       32,   32,   70,   70,   70,   67,  107,   71,   71,   71,

      111,  400,   68,  251,  107,   71,   98,   97,   98,   99,
      107,  115,  133,  195,  159,  103,   38,   32,   32,   32,
      160,   71,   94,  144,   95,  145,  104,  104,  111,  146,
      148,   95,  149,  152,  107,  154,  150,   70,  115,  161,
      133,  195,   95,   32,   32,   32,   33,   34,   32,   32,
       32,   32,   32,   35,   32,   32,   32,   32,   36,   36,
       32,   32,   32,   32,   71,   89,   87,   89,   88,   90,
       95, 1326,  194,  107,  175,   91,  175,  176,  163,  164,
      163,  165,  324,   92,  140,  166,   91, 1325,   38,   32,
       32,   32,  107,  108,  109,  189,  107,  189,  190,  194,

      144,  235,  232,  107,  235,  236,  233,  107,  236,  324,
      121,  122,  140,  123,   91,   32,   32,   32,   39,   34,
       32,   32,   32,   32,   32,   35,   32,   32,   32,   32,
       36,   36,   32,   32,   32,   32,  107,  121,  122,  107,
      123,  113,  318,  107,  318,  107,  238,  107,  126,  107,
      107,  107,  239,  219,  107,  127,  128,  114,  200,  107,
       38,   32,   32,   32,  107,  124,  139,  129,  130,  113,
      125,  131,  107,  144,  132,  145,  126,  107,  177,  146,
      177,  219,  127,  128,  114,  196,  200,   32,   33,  215,
      167,   41,  124,  139,  129,  130,  107,  125,  131,  107,

      107,  132,  178,  309,  134,   42,   43,   44,   45,   46,
       47,   48,  196,  486,   49,  107,  215,   50,   51,  135,
      197,   52,   53,   54,   55,   56,  175,   57,  175,  176,
      178,  309,  134,  198,   43,   44,   45,   46,   47,   48,
      486,  185,   49,  185,   50,   51,  135,  197,   52,   53,
       54,   55,   56,  107,   57,   77,   78,   79,   80,  107,
      198,   81,  107,  107,   80,  186,  201,   82,   82,  107,
      107,  204,   83,  214,  136,   84,   80,  107,  107,  107,
      179,  137,  179,  176,  180,  202,  203,  182,  107,  182,
      138,  199,  225,  186,  201,  107,  107,  216,  181,  204,

      214,  107,  136,   84,   80,  107,  221,  107,  137,  116,
      183,  107,  202,  203,  184,  227,  117,  138,  199,  225,
      118,  222,  205,  119,  216,  120,  107,  241,  242,  241,
      243,  235,  206,  221,  244,  236,  107,  116,  183,  148,
      246,  149,  184,  227,  117,  150,  247,  118,  222,  207,
      119,  208,  120,  151,  151,  152,  153,  154,  151,  151,
      206,  156,  151,  151,  151,  151,  151,  157,  157,  151,
      151,  151,  151,  107,  107,  107,  207,  491,  208,  107,
      217,  209,  220,  223,  107,  224,  107,  314, 1309,  226,
      249,  250,  249,  251,  210,  159,  218,  151,  151,  151,

      152,  260,  253,  235,  491,  228,  254,  236,  217,  209,
      220,  223,  107,  224,  107,  314,  189,  226,  189,  190,
      229,  210,  230,  218,  151,  151,  151,  152,  157,  154,
      151,  151,  228,  161,  151,  151,  151,  151,  151,  157,
      157,  151,  151,  151,  151,  107, 1308,  262,  229,  263,
      230,  107,  211,  264,  266,  267,  266,  268,  159,  289,
      282,  269,  283,  323,  260,  290,  284,  212,  213,  151,
      151,  151,  273,  274,  273,  277,  278,  277,  279,  275,
      211,  107,  280,  285,  164,  285,  283,  294,  107,  295,
      284,  323,  107,  296,  212,  213,  151,  168,  152,  168,

      154,  177,  107,  177,  161,  291,  292,  291,  283,  321,
      322,  321,  284,  107,  325,  152,  169,  253,  107,  107,
      152,  254,  253,  170,  328,  178,  254,  171,  360,  107,
      172,  235,  173,  301,  318,  236,  319,  329,  177,  174,
      177,  325,  107,  152,  169,  253,  307,  320,  320,  254,
      238,  170,  328,  178,  171,  360,  379,  172,  152,  173,
      253,  301,  178,  308,  254,  329,  174,  252,  252,  152,
      255,  253,  252,  252,  307,  257,  252,  252,  252,  252,
      252,  258,  258,  252,  252,  252,  252,  299,  107,  107,
      178,  308,  179,  300,  179,  176,  180,  310,  107,  311,

      152,  312,  253,  339,  107,  393,  254,  740,  333,  313,
      181,  252,  252,  252,  299,  107,  385,  107,  302,  144,
      300,  376,  386,  235,  310,  377,  311,  236,  444,  312,
      752,  339,  303,  338,  330,  333,  313,  331,  252,  252,
      252,  152,  258,  253,  252,  252,  302,  254,  252,  252,
      252,  252,  252,  258,  258,  252,  252,  252,  252,  303,
      338,  330,  107,  107,  331,  287,  107,  357,  381,  242,
      381,  382,  107,  340,  342,  383,  152,  107,  253,  185,
      361,  185,  254,  252,  252,  252,  387,  388,  387,  287,
      238,  390,  391,  390,  394,  357,  379,  304,  392,  334,

      392,  340,  342,  186,  287,  235,  305,  306,  361,  236,
      252,  252,  297,  152,  297,  253,  252,  252,  252,  254,
      252,  252,  252,  252,  252,  304,  334,  252,  252,  252,
      252,  186,  107,  305,  306,  107,  182,  182,  182,  182,
      107,  107,  315,  107,  315,  235,  358,  326,  336,  236,
      107,  366,  107,  327,  335,  252,  252,  252,  252,  183,
      183, 1228,  332,  184,  184,  316,  107,  337,  341,  317,
     1228,  246,  107,  359,  358,  326,  336,  247,  107,  366,
      327,  335,  252,  107,  362, 1228,  355,  183,  183,  332,
      159,  184,  184,  316,  337,  341,  406,  317,  107,  356,

      359,  363,  343,  344,  345,  346,  347,  348,  287,  107,
      349,  287,  362,  355,  350,  107,  107,  351,  500,  352,
      353,  364,  107,  354,  367,  365,  356,  489,  363,  107,
      343,  344,  345,  346,  347,  348,  107,  369,  349,  368,
      107,  350,  374,  107,  351,  500,  352,  353,  846,  364,
      354,  367,  370,  365,  107,  489,  371,  372,  393,  846,
      382,  152,  373,  403,  383,  369,  368,  404,  107,  374,
      381,  242,  381,  382,  398,  399,  398,  383,  107,  370,
      439,  440,  439,  371,  372,  395,  396,  395,  382,  318,
      373,  498,  383,  249,  250,  249,  251,  408,  278,  408,

      409,  490,  499,  499,  410,  402,  402,  152,  411,  403,
      402,  402,  107,  413,  402,  402,  402,  402,  402,  414,
      414,  402,  402,  402,  402,  262,  433,  416,  765,  490,
      159,  417,  419,  267,  419,  420,  406,  426,  435,  421,
      423,  274,  423,  427,  436,  107,  262,  424,  416,  402,
      402,  402,  417,  429,  430,  429,  431,  433,  107,  420,
      432,  499,  441,  421,  419,  267,  419,  420,  424,  441,
      235,  421,  499,  499,  236,  424,  402,  402,  402,  152,
      414,  403,  402,  402,  107,  404,  402,  402,  402,  402,
      402,  414,  414,  402,  402,  402,  402,  437,  438,  437,

      420,  423,  274,  423,  421,  442,  443,  442,  424,  444,
      289,  409,  424,  501,  514,  410,  451,  408,  278,  408,
      409,  402,  402,  402,  410,  445,  446,  445,  409,  282,
      107,  448,  410,  107,  289,  449,  452,  292,  452,  448,
      451,  501,  514,  449,  453,  164,  453,  448,  402,  107,
      107,  449,  456,  457,  456,  452,  292,  452,  448,  451,
      462,  294,  449,  459,  505,  107,  463,  460,  465,  466,
      465,  467,  506,  107,  513,  468,  402,  469,  152,  469,
      403,  402,  402,  402,  404,  402,  402,  402,  402,  402,
      107,  505,  402,  402,  402,  402,  472,  152,  473,  403,

      506,  513,  474,  404,  152,  152,  403,  403,  487,  107,
      404,  404,  152,  152,  403,  403,  287,  488,  404,  404,
      402,  402,  402,  402,  107,  287,  475,  476,  152,  502,
      403,  152,  668,  403,  404,  477,  487,  404,  480,  681,
      152,  515,  403,  152,  488,  403,  404,  402,  478,  404,
      681,  681,  152,  475,  403,  476,  502,  492,  404,  492,
      668,  481,  477,  479,  482,  107,  480,  107,  515,  315,
      495,  315,  495,  107,  238,  478,  483,  503,  107,  484,
      559,  485,  287,  507,  504,  107,  509,  493,  481,  494,
      479,  482,  316,  107,  496,  107,  317,  508,  107,  287,

      510,  107,  497,  483,  287,  503,  484,  512,  485,  518,
      517,  507,  504,  509,  493,  107,  494,  107,  107,  511,
      316,  107,  496,  107,  317,  508,  107,  510,  107,  497,
      519,  107,  516,  107,  107,  512,  107,  518,  517,  287,
      525,  522,  521,  520,  107,  528,  669,  511,  523,  524,
      107,  526,  530,  529,  107,  107,  527,  107,  519,  516,
      287,  536,  532,  107,  531,  534,  107,  525,  522,  521,
      520,  107,  107,  528,  669,  523,  524,  533,  526,  530,
      529,  538,  537,  527,  535,  539,  107,  107,  107,  536,
      532,  531,  540,  534,  541,  107,  542,  107,  107,  107,

      610,  544,  770,  545,  533,  550,  543,  546,  538,  537,
      107,  535,  539,  287,  107,  552,  287,  547,  548,  540,
      549,  541,  107,  107,  542,  568,  569,  568,  551,  544,
      545,  554,  550,  543,  553,  546,  144,  238,  556,  565,
      391,  565,  557,  559,  547,  548,  566,  394,  549,  561,
      242,  561,  562,  566,  287,  551,  563,  385,  393,  554,
      562,  287,  553,  386,  563,  561,  242,  561,  562, 1228,
      287,  394,  563,  567,  396,  567,  562,  566,  271,  287,
      563,  387,  388,  387,  287,  565,  391,  565,  570,  571,
      570,  287,  566,  672,  287,  566,  567,  396,  567,  562,

      398,  399,  398,  563,  152,  159,  573,  439,  440,  439,
      574,  576,  578,  278,  578,  579,  159,  287,  670,  580,
      672,  441,  576,  582,  274,  582,  444,  583,  579,  107,
      583,  426,  580,  578,  278,  578,  579,  597,  107,  435,
      580,  584,  446,  584,  579,  603,  670,  682,  580,  572,
      572,  152,  585,  573,  572,  572,  671,  587,  572,  572,
      572,  572,  572,  588,  588,  572,  572,  572,  572,  262,
      673,  590,  107,  683,  682,  591,  593,  267,  593,  594,
      262,  441,  590,  595,  671,  107,  591,  583,  287,  599,
      430,  599,  600,  572,  572,  572,  601,  433,  673,  594,

      683,  696,  426,  595,  593,  267,  593,  594,  597,  287,
      611,  595,  604,  438,  604,  594,  609,  287,  287,  595,
      572,  572,  572,  152,  588,  573,  572,  572,  696,  574,
      572,  572,  572,  572,  572,  588,  588,  572,  572,  572,
      572,  582,  274,  582,  605,  443,  605,  282,  583,  780,
      435,  583,  607,  608,  607,  610,  603,  600,  282,  609,
      617,  601,  287,  287,  618,  572,  572,  572,  599,  430,
      599,  600,  318,  287,  680,  601,  612,  613,  612,  600,
      614,  615,  614,  601,  107,  681,  681,  603,  604,  438,
      604,  594,  572,  107,  107,  595,  605,  443,  605,  584,

      446,  584,  579,  583,  289,  107,  580,  107,  107,  289,
      620,  621,  292,  621,  617,  620,  107,  107,  618,  622,
      457,  622,  621,  292,  621,  617,  620,  708,  107,  618,
      623,  164,  623,  617,  622,  457,  622,  618,  294,  462,
      625,  620,  107,  107,  626,  628,  630,  466,  630,  631,
      462,  688,  107,  632,  708,  638,  628,  634,  635,  634,
      637,  636,  631,  107,  636,  647,  632,  630,  466,  630,
      631,  648,  287,  271,  632,  639,  640,  639,  631,  688,
      685,  287,  632,  572,  641,  152,  641,  573,  572,  572,
      572,  574,  572,  572,  572,  572,  572,  697,  287,  572,

      572,  572,  572,  472,  472,  644,  644,  685,  107,  645,
      645,  650,  651,  650,  652,  655,  689,  656,  653,  107,
      655,  657,  656,  684,  107,  697,  657,  572,  572,  572,
      572,  152,  152,  573,  573,  107,  686,  574,  574,  152,
      152,  573,  573,  107,  689,  574,  574,  152,  107,  573,
      687,  684,  107,  574,  572,  658,  152,  637,  573,  792,
      107,  660,  574,  674,  686,  674,  152,  659,  573,  152,
      661,  573,  574,  107,  152,  574,  573,  701,  687,  662,
      574,  107,  812,  658,  492,  663,  492,  664,  676,  660,
      676,  107,  666,  107,  659,  665,  667,  661,  495,  675,

      495,  693,  107,  694,  701,  107,  662,  678,  690,  678,
      677,  695,  663,  107,  493,  664,  494,  287,  271,  698,
      666,  107,  496,  665,  667,  107,  675,  107,  679,  693,
      497,  694,  691,  107,  107,  699,  690,  692,  677,  695,
      107,  493,  704,  494,  107,  703,  107,  698,  700,  702,
      496,  107,  107,  107,  107,  287,  679,  497,  706,  711,
      691,  107,  705,  699,  107,  692,  107,  107,  715,  704,
      709,  107,  714,  703,  707,  700,  710,  702,  107,  712,
      107,  713,  107,  107,  287,  638,  706,  711,  717,  705,
      716,  720,  107,  718,  719,  107,  715,  709,  833,  721,

      714,  707,  107,  710,  723,  107,  712,  107,  713,  724,
      722,  107,  107,  107,  835,  725,  717,  716,  726,  720,
      718,  107,  719,  107,  107,  727,  833,  721,  107,  811,
      730,  807,  723,  728,  144,  729,  734,  724,  722,  238,
      735,  835,  238,  725,  638,  737,  726,  731,  737,  732,
      742,  391,  742,  727,  739,  242,  739,  740,  730,  318,
      728,  318,  729,  739,  242,  739,  740,  743,  396,  743,
      740,  742,  391,  742,  731,  289,  732,  744,  571,  744,
      743,  396,  743,  740,  568,  569,  568,  744,  571,  744,
      152,  159,  746,  754,  274,  754,  747,  749,  751,  278,

      751,  752,  159,  751,  278,  751,  752,  848,  749,  755,
      446,  755,  752,  754,  274,  754,  756,  443,  756,  755,
      446,  755,  752,  152,  757,  746,  262,  426,  761,  758,
      289,  287,  762,  767,  848,  759,  759,  764,  267,  764,
      765,  152,  759,  746,  262,  426,  761,  747,  287,  611,
      762,  767,  435,  759,  759,  769,  430,  769,  770,  764,
      267,  764,  765,  772,  438,  772,  765,  774,  608,  774,
      769,  430,  769,  770,  775,  613,  775,  770,  776,  615,
      776,  772,  438,  772,  765,  756,  443,  756,  774,  608,
      774,  777,  778,  777,  775,  613,  775,  770,  776,  615,

      776,  782,  292,  782,  780,  783,  457,  783,  782,  292,
      782,  780,  783,  457,  783,  784,  164,  784,  780,  294,
      462,  786,  794,  635,  794,  787,  789,  791,  466,  791,
      792,  462,  791,  466,  791,  792,  611,  789,  795,  640,
      795,  792,  794,  635,  794,  796,  797,  796,  795,  640,
      795,  792,  745,  798,  152,  798,  746,  745,  745,  745,
      747,  745,  745,  745,  745,  745,  435,  834,  745,  745,
      745,  745,  472,  472,  801,  801,  647,  441,  802,  802,
      836,  647,  804,  806,  651,  806,  807,  804,  809,  810,
      809,  806,  651,  806,  807,  834,  745,  745,  745,  745,

      813,  814,  813,  807,  655,  819,  816,  844,  836,  845,
      817,  820,  822,  823,  822,  824,  152,  441,  746,  655,
      846,  816,  747,  745,  655,  817,  816,  152,  394,  746,
      817,  394,  107,  747,  152,  152,  746,  746,  825,  847,
      747,  747,  152,  107,  746,  152,  107,  746,  747,  826,
      152,  747,  746,  655,  107,  816,  747,  828,  674,  817,
      674,  837,  839,  837,  839,  827,  825,  847,  829,  830,
      832,  107,  841,  676,  841,  676,  831,  826,  678,  107,
      678,  107,  107,  850,  838,  828,  851,  849,  107,  840,
      107,  107,  827,  853,  675,  677,  829,  830,  832,  679,

      852,  107,  842,  831,  107,  107,  860,  107,  859,  107,
      854,  850,  838,  855,  851,  849,  857,  840,  861,  107,
      853,  675,  856,  677,  858,  863,  107,  679,  852,  842,
      287,  107,  862,  107,  860,  271,  859,  854,  864,  865,
      107,  855,  107,  857,  107,  861,  107,  107,  866,  856,
      867,  858,  869,  863,  107,  870,  107,  107,  868,  862,
      871,  872,  873,  107,  455,  864,  107,  865,  107,  107,
      875,  874,  876,  107,  883,  866,  877,  878,  867,  107,
      869,  882,  870,  107,  879,  868,  107,  871,  880,  872,
      873,  885,  107,  107,  107,  881,  287,  875,  887,  874,

      876,  883,  107, 1041,  877,  878,  886,  107,  888,  882,
      884,  879,  107,  107,  287,  880,  107,  287,  895,  885,
      107,  107,  881,  893,  238,  892,  887,  287,  894,  889,
      903, 1041,  287,  886,  896,  888,  897,  884,  144,  890,
      900,  891,  238,  898,  901,  393,  895,  907,  903, 1040,
      893,  908,  892,  910,  911,  910,  894,  889,  394,  394,
      912,  896, 1042,  897,  912,  912,  890,  271,  891,  159,
      898,  905,  906,  905,  907,  921, 1040,  287,  908,  913,
      242,  913,  907,  914,  391,  914,  908,  401,  287, 1042,
      912,  915,  396,  915,  907,  916,  571,  916,  908,  152,

      287,  918,  912,  287,  159,  919,  923,  924,  923,  925,
      921,  271,  441,  926,  928,  929,  928,  444,  930,  925,
      107,  930,  441,  926,  931,  278,  931,  925,  930,  107,
     1049,  926,  932,  274,  932,  933,  446,  933,  925,  930,
      107,  107,  926,  934,  443,  934,  936,  937,  938,  318,
      930,  318,  939,  941,  942,  941,  943,  936, 1049,  938,
      926,  426,  262,  944,  946, 1050,  287,  949,  947,  951,
      952,  951,  953,  433,  455,  956,  954,  287,  435,  957,
      958,  267,  958,  956,  960,  426,  287,  957,  962,  963,
      962,  949,  610, 1050,  953,  964,  287,  611,  954,  965,

      430,  965,  953,  964,  435,  837,  954,  837,  107,  611,
      960,  966,  438,  966,  956,  964, 1055,  271,  957,  967,
      608,  967,  968,  613,  968,  953,  964,  287,  838,  954,
      969,  615,  969,  970,  778,  970,  282,  960,  972,  289,
      964,  289,  973,  401, 1055,  975,  287,  975,  976,  292,
      976,  972,  977,  457,  977,  973,  838,  271,  287,  975,
      978,  164,  978,  972,  294,  462,  980,  973,  271,  107,
      981,  983,  985,  986,  985,  987,  462,  191,  187,  988,
      107,  638,  983,  990,  991,  990,  637,  992,  987, 1057,
      992,  638,  988,  993,  466,  993,  987,  992,  287,  271,

      988,  994,  635,  994,  995,  640,  995,  987,  992,  647,
      647,  988,  996,  797,  996, 1003, 1003, 1057, 1060,  992,
      917,  997,  152,  997,  918,  917,  917,  917,  919,  917,
      917,  917,  917,  917, 1172,  142,  917,  917,  917,  917,
      472,  472, 1000, 1000,  107, 1060, 1001, 1001, 1005, 1006,
     1005, 1007, 1010, 1011, 1010, 1008,  811,  812, 1007, 1012,
      107, 1172, 1008, 1012,  917,  917,  917,  917, 1013,  651,
     1013, 1007,  812, 1061, 1047, 1008, 1047,  109, 1012, 1014,
      810, 1014, 1015,  814, 1015, 1007, 1012,  819,  655, 1008,
     1017,  917,  107, 1020, 1018, 1022, 1023, 1022, 1024,  819,

      107, 1061, 1025, 1173, 1032, 1020, 1027, 1028, 1027, 1030,
     1029, 1024, 1048, 1029,  191, 1025, 1031,  823, 1031, 1024,
      152, 1058,  918, 1025,  188,  107,  919,  152,  655,  918,
     1017, 1173,  187,  919, 1018,  152,  152,  918,  918, 1048,
      107,  919,  919,  152,  152,  918,  918, 1051, 1058,  919,
      919,  152, 1045,  918, 1045, 1059, 1033,  919, 1034, 1043,
      839, 1043,  839,  841,  107,  841,  107, 1036,  107, 1039,
      107,  107, 1056,  107, 1051, 1035, 1046, 1054,  107,  142,
     1037, 1038, 1059, 1033, 1063, 1034, 1044,  840,  107,  107,
     1052, 1062, 1053,  842, 1036,  107,  107, 1039, 1064, 1065,

     1056,  107, 1035, 1070, 1046, 1054,  107, 1037, 1038, 1066,
     1068, 1063, 1067, 1069, 1044,  840,  107, 1052, 1062, 1053,
      842,  107,  107,  107,  107, 1064,  107, 1065,  107, 1074,
     1070,  107, 1076,  107,  107,  107, 1066, 1068, 1071, 1073,
     1067, 1069, 1072, 1075,  107,  107, 1077,  107,  107, 1078,
     1080, 1081, 1079,  112, 1083,  107,  107, 1074, 1082,  107,
     1076, 1174,  107,  107,  107, 1071, 1073, 1085, 1087, 1072,
     1075, 1084, 1342, 1077, 1090, 1179, 1078, 1080, 1089, 1081,
     1079, 1083, 1088, 1086,  144, 1082,  900,  238, 1174,  238,
      901,  394,  102,  903, 1085,  903, 1087,  912, 1084, 1093,

     1094, 1093, 1090, 1179,  107, 1089,  912,  102,   73, 1088,
     1086, 1091, 1092, 1091,  907,  393, 1180,  907,  908,  107,
      394,  908,  905,  906,  905,  907,  912, 1181, 1236,  908,
     1095, 1096, 1095,  907,  910,  911,  910,  908, 1097, 1098,
     1097,  912,  107, 1187, 1180,  912,  913,  242,  913,  907,
      914,  391,  914,  908, 1193, 1181, 1236,  912,  915,  396,
      915,  907,  916,  571,  916,  908,  152,  159,  918,  912,
     1187,   73,  919,  921, 1099, 1100, 1099,  925,  159,  107,
      107,  926, 1193,  441,  921, 1101, 1102, 1101,  444,  930,
      925,   97,  930,  441,  926,  923,  924,  923,  925,  930,

     1185, 1202,  926, 1103, 1104, 1103,  925,  928,  929,  928,
      926, 1105, 1106, 1105,  930,   94,   75,   73,  930,  931,
      278,  931,  925,  932,  274,  932,  926, 1185, 1202,   73,
      930,  933,  446,  933,  925,  934,  443,  934,  926,  936,
       39,  938,  930, 1108, 1120,  944,  936,  937,  938, 1109,
      930, 1342,  939, 1111, 1112, 1111, 1113, 1115, 1342,  943,
     1114, 1342, 1342,  926,  941,  942,  941,  943, 1117, 1342,
     1118,  926, 1342, 1342,  286, 1122, 1123, 1122, 1124,  262,
      426,  946, 1125, 1342,  107,  947,  949, 1126, 1127, 1126,
      953,  426,  107, 1198,  954, 1342,  611,  949, 1128, 1129,

     1128,  610,  964,  953, 1197,  964,  435,  954,  951,  952,
      951,  953,  960, 1342, 1342,  954, 1130, 1131, 1130,  953,
      433, 1198,  956,  954, 1342,  435,  957, 1132, 1133, 1132,
      956,  960, 1197, 1342,  957,  958,  267,  958,  956, 1134,
     1135, 1134,  957,  611,  107, 1342,  960, 1342, 1342,  964,
      962,  963,  962, 1136, 1137, 1136, 1177,  964, 1177,  289,
      964,  965,  430,  965,  953,  975, 1342, 1183,  954,  966,
      438,  966,  956,  967,  608,  967,  957, 1237, 1178, 1342,
      964,  968,  613,  968,  953,  969,  615,  969,  954,  970,
      778,  970,  960,  282, 1183,  972,  964,  107,  289,  973,

     1138, 1139, 1138,  972,  975, 1237, 1178,  973, 1140, 1141,
     1140,  976,  292,  976,  972,  975, 1212, 1342,  973,  977,
      457,  977,  978,  164,  978,  972,  975,  462,  294,  973,
      980, 1342, 1342,  983,  981, 1142, 1143, 1142,  987,  462,
     1342,  107,  988, 1212,  638,  983, 1144, 1145, 1144,  637,
      992,  987, 1342,  992,  638,  988,  985,  986,  985,  987,
      992, 1188, 1244,  988, 1146, 1147, 1146,  987,  990,  991,
      990,  988, 1148, 1149, 1148,  992, 1342, 1342, 1342,  992,
      993,  466,  993,  987,  994,  635,  994,  988, 1188, 1244,
     1270,  992,  995,  640,  995,  987,  996,  797,  996,  988,

     1342, 1271, 1342,  992,  917,  997,  152,  997,  918,  917,
      917,  917,  919,  917,  917,  917,  917,  917, 1270, 1342,
      917,  917,  917,  917,  472,  472, 1000, 1000,  647, 1271,
     1001, 1001, 1342,  647, 1003, 1150, 1151, 1150, 1007, 1003,
      107, 1342, 1008, 1342, 1342, 1152, 1153, 1152,  917,  917,
      917,  917, 1012,  811, 1342, 1007, 1189, 1275,  812, 1008,
     1005, 1006, 1005, 1007, 1012, 1342, 1342, 1008,  812, 1154,
     1155, 1154, 1007, 1342, 1012,  917, 1008, 1010, 1011, 1010,
     1156, 1157, 1156, 1189, 1012, 1275, 1342, 1012, 1013,  651,
     1013, 1007, 1014,  810, 1014, 1008, 1342, 1342, 1342, 1012,

     1015,  814, 1015, 1007,  655,  819, 1017, 1008, 1342, 1342,
     1018, 1020, 1158, 1159, 1158, 1024,  819, 1342, 1342, 1025,
      107, 1032, 1020, 1160, 1161, 1160, 1030, 1029, 1024, 1342,
     1029, 1032, 1025, 1022, 1023, 1022, 1024, 1029, 1207,  107,
     1025, 1162, 1163, 1162, 1024, 1027, 1028, 1027, 1025, 1164,
     1165, 1164, 1029, 1342, 1191, 1342, 1029, 1031,  823, 1031,
     1024,  152, 1291,  918, 1025, 1207,  152,  919,  918,  655,
      107, 1017,  919, 1342,  152, 1018,  918, 1043, 1190, 1043,
      919, 1191,  152, 1166,  918,  152, 1292,  918,  919, 1291,
      152,  919,  918, 1175,  107, 1175,  919, 1045, 1182, 1045,

     1047, 1167, 1047, 1342, 1044, 1342, 1190, 1170,  107, 1168,
     1342, 1166, 1184, 1292, 1169,  107,  107, 1176,  107, 1171,
     1186, 1046,  107, 1192,  107, 1194, 1182,  107, 1167,  107,
     1195,  107, 1044, 1201, 1200, 1170, 1168, 1196, 1048, 1199,
     1184, 1169,  107,  107,  107, 1176, 1171,  107, 1186, 1046,
     1203, 1192, 1205, 1194, 1342,  107,  107, 1295, 1195, 1206,
     1208, 1201, 1200,  107, 1196, 1048,  107, 1199,  107, 1108,
     1204, 1209, 1342,  107, 1210, 1109, 1221, 1211, 1203, 1342,
     1205, 1213, 1222, 1311, 1295, 1214, 1206,  107, 1208, 1091,
     1092, 1091,  907, 1093, 1094, 1093,  908, 1204, 1342, 1209,

      912, 1219, 1210, 1113, 1211, 1226,  107, 1114, 1298, 1213,
     1311,  454, 1214, 1095, 1096, 1095,  907, 1097, 1098, 1097,
      908, 1342, 1318, 1240,  912, 1099, 1100, 1099,  925, 1101,
     1102, 1101,  926, 1342, 1342, 1298,  930, 1103, 1104, 1103,
      925, 1105, 1106, 1105,  926, 1216, 1217, 1216,  930, 1318,
     1240, 1120, 1218, 1111, 1112, 1111, 1113,  930, 1342, 1342,
     1114, 1223, 1224, 1223, 1113, 1117,  107, 1118, 1114,  107,
     1117,  286, 1118, 1117, 1342, 1118,  286, 1230, 1229,  286,
     1124,  107, 1242, 1218, 1125, 1122, 1123, 1122, 1124, 1245,
     1342, 1256, 1125, 1231, 1232, 1231, 1124, 1177, 1342, 1177,

     1125, 1126, 1127, 1126,  953, 1128, 1129, 1128,  954, 1242,
     1342, 1342,  964, 1130, 1131, 1130,  953, 1245, 1256, 1178,
      954, 1132, 1133, 1132,  956, 1134, 1135, 1134,  957, 1136,
     1137, 1136,  960, 1342, 1342, 1342,  964, 1138, 1139, 1138,
      972, 1140, 1141, 1140,  973, 1342, 1342, 1178,  975, 1142,
     1143, 1142,  987, 1144, 1145, 1144,  988, 1342, 1342, 1342,
      992, 1146, 1147, 1146,  987, 1148, 1149, 1148,  988, 1175,
     1342, 1175,  992, 1150, 1151, 1150, 1007, 1152, 1153, 1152,
     1008, 1342, 1342, 1342, 1012, 1154, 1155, 1154, 1007, 1156,
     1157, 1156, 1008, 1176, 1342, 1342, 1012, 1158, 1159, 1158,

     1024, 1160, 1161, 1160, 1025, 1342,  107,  107, 1029, 1162,
     1163, 1162, 1024, 1164, 1165, 1164, 1025,  152,  107,  918,
     1029, 1176,  152,  919,  918,  655, 1246, 1017,  919, 1243,
      152, 1018,  918, 1241, 1342, 1233,  919,  655,  655, 1017,
     1017,  107,  107, 1018, 1018, 1238,  107, 1238, 1234,  107,
      107,  107, 1247, 1246, 1248, 1249, 1243,  107,  107, 1251,
     1241, 1250, 1252, 1233,  107, 1253,  107, 1235, 1239,  107,
     1257,  107, 1255,  107, 1260, 1230, 1234, 1258, 1221,  107,
     1247, 1218, 1248, 1249, 1222, 1254, 1251, 1261, 1342, 1250,
     1252, 1226, 1253, 1259, 1235,  107, 1239,  454, 1257, 1255,

      107,  107, 1260, 1262, 1342, 1258, 1216, 1217, 1216, 1263,
     1264, 1263, 1254, 1218,  107, 1261, 1218, 1265, 1266, 1265,
     1259,  107, 1272, 1273, 1222, 1223, 1224, 1223, 1113, 1274,
     1342, 1262, 1114, 1231, 1232, 1231, 1124,  152, 1276,  918,
     1125,  107,  152,  919,  918,  152,  107,  918,  919, 1272,
     1273,  919, 1238, 1278, 1238,  107, 1274,  107,  107,  107,
      107, 1277,  107,  107,  107, 1276,  107, 1267, 1283,  107,
      655, 1286, 1017, 1281, 1268, 1239, 1018, 1279, 1285, 1280,
     1269, 1278, 1287, 1282, 1284,  107,  107, 1289, 1277, 1342,
     1263, 1264, 1263, 1288, 1267, 1342, 1283, 1218, 1342, 1286,

     1281, 1268, 1342, 1239, 1279, 1285, 1280, 1269, 1294, 1287,
     1282, 1284,  107, 1342, 1289, 1265, 1266, 1265,  152,  107,
      918, 1288, 1222,  655,  919, 1017,  107, 1293,  107, 1018,
      107,  107,  107,  107, 1296, 1294, 1297, 1300, 1299, 1301,
     1302,  107,  107, 1304,  107,  107,  107,  107,  107, 1290,
     1303, 1306,  655, 1305, 1017, 1293, 1314,  107, 1018, 1313,
      107, 1296,  107,  107, 1297, 1300, 1299, 1301, 1302, 1307,
     1304, 1312, 1319,  107,  107,  107, 1290, 1310, 1303, 1306,
     1315, 1305,  107, 1316, 1314, 1317,  107, 1313,  107,  107,
     1322, 1320, 1342, 1321, 1323, 1331, 1307,  107, 1312, 1319,

     1324, 1327, 1342, 1328, 1310,  107, 1330, 1315, 1332,  107,
     1316, 1340, 1317, 1329, 1341, 1333,  107, 1322, 1335, 1320,
     1321, 1323, 1331, 1337, 1334, 1342, 1336, 1342, 1324, 1327,
     1328, 1338,  107, 1330, 1342, 1332, 1342, 1342, 1342, 1340,
     1339, 1329, 1341, 1333, 1342, 1342, 1335, 1342, 1342, 1342,
     1342, 1337, 1334, 1336, 1342, 1342, 1342, 1342, 1338, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1339,   37,
       37,   37,   37,   37,   37,   37,   40,   40,   40,   40,
       40,   40,   40,   58,   58,   58,   58,   58,   58,   58,
       62,   62,   62,   62,   62,   62,   62,   66,   66,   66,

       66,   66,   66,   66,   72,   72,   72,   72,   72,   72,
       72,   74,   74,   74,   74,   74,   74,   74,   76,   76,
       76,   76,   76,   76,   76,   85,   85,   85,   85,   85,
       85,   85,   93,   93,   93,   93,   93,   93,   93,   96,
       96,   96,   96,   96,   96,   96,  100,  100,  100,  100,
      100,  100,  100,  101,  101,  101,  101,  101,  101,  101,
      106,  106,  110, 1342,  110,  110,  141,  141,  141,  141,
      141,  141,  141,  143,  143,  143,  143,  143,  143,  143,
      147,  147,  147,  147,  147,  147,  147,  155,  155,  155,
      155,  155,  155,  155,  158,  158,  158,  158,  158,  158,

      158,  151,  151,  151,  151,  151,  151,  151,  162,  162,
      162,  162,  162,  162,  162,  192,  192,  192,  192,  192,
     1342,  192,  193,  193,  193,  193, 1342,  193,  193,  108,
     1342,  108,  109, 1342,  109,  231,  231,  231,  231,  231,
      231,  231,  234,  234,  234,  234,  234,  234,  234,  237,
      237,  237,  237,  237,  237,  237,  240,  240,  240,  240,
      240,  240,  240,  245,  245,  245,  245,  245,  245,  245,
      248,  248,  248,  248,  248,  248,  248,  252,  252,  252,
      252,  252,  252,  252,  256,  256,  256,  256,  256,  256,
      256,  259,  259,  259,  259,  259,  259,  259,  261,  261,

      261,  261,  261,  261,  261,  265,  265,  265,  265,  265,
      265,  265,  270,  270,  270,  270,  270,  270,  270,  272,
      272,  272,  272,  272,  272,  272,  276,  276,  276,  276,
      276,  276,  276,  281,  281,  281,  281,  281,  281,  281,
      286,  286,  286,  286,  286,  286,  286,  288,  288,  288,
      288,  288,  288,  288,  293,  293,  293,  293,  293,  293,
      293,  298,  298,  298,  298,  298,  298,  298,  192,  192,
      192,  192,  192, 1342,  192,  375,  375,  375,  375,  375,
      375,  375,  378,  378,  378,  378,  378,  378,  378,  380,
      380,  380,  380,  380,  380,  380,  384,  384,  384,  384,

      384,  384,  384,  389,  389,  389,  389,  389,  389,  389,
      397,  397,  397,  397,  397,  397,  397,  402,  402,  402,
      402,  402,  402,  402,  405,  405,  405,  405,  405,  405,
      405,  407,  407,  407,  407,  407,  407,  407,  412,  412,
      412,  412,  412,  412,  412,  415,  415,  415,  415,  415,
      415,  415,  418,  418,  418,  418,  418,  418,  418,  422,
      422,  422,  422,  422,  422,  422,  425,  425,  425,  425,
      425,  425,  425,  428,  428,  428,  428,  428,  428,  428,
      434,  434,  434,  434,  434,  434,  434,  447,  447,  447,
      447,  447,  447,  447,  450,  450,  450,  450,  450,  450,

      450,  454,  454,  454,  454,  454,  454,  454,  458,  458,
      458,  458,  458,  458,  458,  461,  461,  461,  461,  461,
      461,  461,  464,  464,  464,  464,  464,  464,  464,  470,
      470,  470,  470,  470,  470,  470,  471,  471,  471,  471,
      471,  471,  471,  106,  106,  555,  555,  555,  555,  555,
      555,  555,  558,  558,  558,  558,  558,  558,  558,  560,
      560,  560,  560,  560,  560,  560,  564,  564,  564,  564,
      564,  564,  564,  384,  384,  384,  384,  384,  384,  384,
      397,  397,  397,  397,  397,  397,  397,  572,  572,  572,
      572,  572,  572,  572,  575,  575,  575,  575,  575,  575,

      575,  577,  577,  577,  577,  577,  577,  577,  581,  581,
      581,  581,  581,  581,  581,  586,  586,  586,  586,  586,
      586,  586,  589,  589,  589,  589,  589,  589,  589,  592,
      592,  592,  592,  592,  592,  592,  596,  596,  596,  596,
      596,  596,  596,  598,  598,  598,  598,  598,  598,  598,
      602,  602,  602,  602,  602,  602,  602,  606,  606,  606,
      606,  606,  606,  606,  616,  616,  616,  616,  616,  616,
      616,  619,  619,  619,  619,  619,  619,  619,  624,  624,
      624,  624,  624,  624,  624,  627,  627,  627,  627,  627,
      627,  627,  629,  629,  629,  629,  629,  629,  629,  633,

      633,  633,  633,  633,  633,  633,  642,  642,  642,  642,
      642,  642,  642,  643,  643,  643,  643,  643,  643,  643,
      234,  234,  234,  234,  234,  234,  234,  646,  646,  646,
      646,  646,  646,  646,  649,  649,  649,  649,  649,  649,
      649,  654,  654,  654,  654,  654,  654,  654,  106,  106,
      733,  733,  733,  733,  733,  733,  733,  736,  736,  736,
      736,  736,  736,  736,  738,  738,  738,  738,  738,  738,
      738,  741,  741,  741,  741,  741,  741,  741,  745,  745,
      745,  745,  745,  745,  745,  748,  748,  748,  748,  748,
      748,  748,  750,  750,  750,  750,  750,  750,  750,  753,

      753,  753,  753,  753,  753,  753,  760,  760,  760,  760,
      760,  760,  760,  763,  763,  763,  763,  763,  763,  763,
      766,  766,  766,  766,  766,  766,  766,  768,  768,  768,
      768,  768,  768,  768,  771,  771,  771,  771,  771,  771,
      771,  773,  773,  773,  773,  773,  773,  773,  779,  779,
      779,  779,  779,  779,  779,  781,  781,  781,  781,  781,
      781,  781,  785,  785,  785,  785,  785,  785,  785,  788,
      788,  788,  788,  788,  788,  788,  790,  790,  790,  790,
      790,  790,  790,  793,  793,  793,  793,  793,  793,  793,
      799,  799,  799,  799,  799,  799,  799,  800,  800,  800,

      800,  800,  800,  800,  803,  803,  803,  803,  803,  803,
      803,  805,  805,  805,  805,  805,  805,  805,  270,  270,
      270,  270,  270,  270,  270,  808,  808,  808,  808,  808,
      808,  808,  815,  815,  815,  815,  815,  815,  815,  234,
      234,  234,  234,  234,  234,  234,  818,  818,  818,  818,
      818,  818,  818,  821,  821,  821,  821,  821,  821,  821,
      843,  843,  843,  843,  843,  843,  106,  106,  899,  899,
      899,  899,  899,  899,  899,  902,  902,  902,  902,  902,
      902,  902,  904,  904,  904,  904,  904,  904,  904,  909,
      909,  909,  909,  909,  909,  909,  917,  917,  917,  917,

      917,  917,  917,  920,  920,  920,  920,  920,  920,  920,
      922,  922,  922,  922,  922,  922,  922,  927,  927,  927,
      927,  927,  927,  927,  935,  935,  935,  935,  935,  935,
      935,  940,  940,  940,  940,  940,  940,  940,  945,  945,
      945,  945,  945,  945,  945,  948,  948,  948,  948,  948,
      948,  948,  950,  950,  950,  950,  950,  950,  950,  955,
      955,  955,  955,  955,  955,  955,  959,  959,  959,  959,
      959,  959,  959,  961,  961,  961,  961,  961,  961,  961,
      971,  971,  971,  971,  971,  971,  971,  974,  974,  974,
      974,  974,  974,  974,  979,  979,  979,  979,  979,  979,

      979,  982,  982,  982,  982,  982,  982,  982,  984,  984,
      984,  984,  984,  984,  984,  989,  989,  989,  989,  989,
      989,  989,  998,  998,  998,  998,  998,  998,  998,  999,
      999,  999,  999,  999,  999,  999, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1009, 1009, 1009, 1009, 1009, 1009, 1009,  286,  286,  286,
      286,  286,  286,  286, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1021, 1021,
     1021, 1021, 1021, 1021, 1021,  270,  270,  270,  270,  270,
      270,  270, 1026, 1026, 1026, 1026, 1026, 1026, 1026,  917,

      917,  917,  917,  917,  917,  917,  106,  106,  899,  899,
      899,  899,  899,  899,  899,  902,  902,  902,  902,  902,
      902,  902,  904,  904,  904,  904,  904,  904,  904,  909,
      909,  909,  909,  909,  909,  909,  920,  920,  920,  920,
      920,  920,  920,  922,  922,  922,  922,  922,  922,  922,
      927,  927,  927,  927,  927,  927,  927,  935,  935,  935,
      935,  935,  935,  935,  234,  234,  234,  234,  234,  234,
      234, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1110, 1110,
     1110, 1110, 1110, 1110, 1110,  940,  940,  940,  940,  940,
      940,  940, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1119,

     1119, 1119, 1119, 1119, 1119, 1119, 1121, 1121, 1121, 1121,
     1121, 1121, 1121,  945,  945,  945,  945,  945,  945,  945,
      948,  948,  948,  948,  948,  948,  948,  950,  950,  950,
      950,  950,  950,  950,  961,  961,  961,  961,  961,  961,
      961,  955,  955,  955,  955,  955,  955,  955,  959,  959,
      959,  959,  959,  959,  959,  971,  971,  971,  971,  971,
      971,  971,  974,  974,  974,  974,  974,  974,  974,  979,
      979,  979,  979,  979,  979,  979,  982,  982,  982,  982,
      982,  982,  982,  984,  984,  984,  984,  984,  984,  984,
      989,  989,  989,  989,  989,  989,  989,  998,  998,  998,

      998,  998,  998,  998,  999,  999,  999,  999,  999,  999,
      999, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
      917,  917,  917,  917,  917,  917,  917,  106,  106,  904,
      904,  904,  904,  904,  904,  904,  909,  909,  909,  909,
      909,  909,  909,  922,  922,  922,  922,  922,  922,  922,
      927,  927,  927,  927,  927,  927,  927, 1107, 1107, 1107,

     1107, 1107, 1107, 1107,  270,  270,  270,  270,  270,  270,
      270, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1227, 1227, 1342, 1227, 1227, 1227, 1227,
     1121, 1121, 1121, 1121, 1121, 1121, 1121,  950,  950,  950,
      950,  950,  950,  950,  961,  961,  961,  961,  961,  961,
      961,  955,  955,  955,  955,  955,  955,  955,  959,  959,
      959,  959,  959,  959,  959,  971,  971,  971,  971,  971,

      971,  971,  974,  974,  974,  974,  974,  974,  974,  984,
      984,  984,  984,  984,  984,  984,  989,  989,  989,  989,
      989,  989,  989, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1026, 1026, 1026, 1026, 1026, 1026,
     1026,  917,  917,  917,  917,  917,  917,  917, 1016, 1016,
     1016, 1016, 1016, 1016, 1016,  106,  106,   31, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,

     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342
    } ;

static yyconst flex_int16_t yy_chk[6041] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        7,    9,    8,   10, 1339,   11,   12,    7,    7,    8,
        8,   34,   11,   12,   21,   21,   21,   21,   36,   36,
       11,   12,   34,   34,    1,    1,    1,    1,  105,  105,
       13,   14,   15, 1334,   15,   15,   15,   13,   14,   15,
       40,   40,   15,    9,    9,   10,   10,   11,   12, 1329,
       40,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   13,   14,   15,   16,   44,   16,   16,   16,

       41,  248,   16,  248,   53,   16,   26,   26,   26,   26,
     1328,   44,   53,  112,   79,  104,    2,    2,    2,    2,
       79,   15,   24,   76,   24,   76,  104,  104,   41,   76,
       77,   24,   77,   80, 1322,   80,   77,   16,   44,   80,
       53,  112,   24,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   16,   22,   22,   22,   22,   22,
       24, 1319,  111,   57,   86,   22,   86,   86,   81,   81,
       81,   81,  195,   22,   57,   81,   22, 1318,    3,    3,
        3,    3,   46,  110,  110,   98,   47,   98,   98,  111,

      143,  144,  143,  110,  148,  144,  143, 1314,  148,  195,
       46,   47,   57,   47,   22,    3,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,   43,   46,   47,   49,
       47,   43,  318,  129,  318,   56,  145,   48,   49,   50,
       51,   52,  145,  129,  117,   49,   49,   43,  117, 1312,
        4,    4,    4,    4,  113,   48,   56,   50,   51,   43,
       48,   52,  125,   83,   52,   83,   49, 1303,   88,   83,
       88,  129,   49,   49,   43,  113,  117,    4,    5,  125,
       83,    5,   48,   56,   50,   51,   54,   48,   52,  114,

     1302,   52,   88,  178,   54,    5,    5,    5,    5,    5,
        5,    5,  113,  309,    5,  115,  125,    5,    5,   54,
      114,    5,    5,    5,    5,    5,  175,    5,  175,  175,
       88,  178,   54,  115,    5,    5,    5,    5,    5,    5,
      309,   91,    5,   91,    5,    5,   54,  114,    5,    5,
        5,    5,    5,  124,    5,   20,   20,   20,   20,  120,
      115,   20,  118,   55,   20,   91,  118,   20,   20,  119,
      116,  120,   20,  124,   55,   20,   20,  134,  127, 1301,
       89,   55,   89,   89,   89,  119,  119,   90,  131,   90,
       55,  116,  134,   91,  118, 1300, 1299,  127,   89,  120,

      124,  132,   55,   20,   20,   45,  131,  136,   55,   45,
       90, 1296,  119,  119,   90,  136,   45,   55,  116,  134,
       45,  132,  121,   45,  127,   45,  121,  146,  146,  146,
      146,  152,  121,  131,  146,  152, 1294,   45,   90,  147,
      149,  147,   90,  136,   45,  147,  149,   45,  132,  121,
       45,  121,   45,   78,   78,   78,   78,   78,   78,   78,
      121,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,  122,  128,  130,  121,  314,  121,  133,
      128,  122,  130,  133,  135,  133,  138,  186, 1292,  135,
      150,  150,  150,  150,  122,  154,  128,   78,   78,   78,

      151,  154,  151,  234,  314,  138,  151,  234,  128,  122,
      130,  133,  139,  133,  140,  186,  189,  135,  189,  189,
      139,  122,  140,  128,   78,   82,   82,   82,   82,   82,
       82,   82,  138,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,  123, 1291,  155,  139,  155,
      140, 1282,  123,  155,  156,  156,  156,  156,  158,  165,
      162,  156,  162,  194,  158,  165,  162,  123,  123,   82,
       82,   82,  160,  160,  160,  161,  161,  161,  161,  160,
      123, 1281,  161,  163,  163,  163,  163,  167, 1273,  167,
      163,  194,  196,  167,  123,  123,   82,   84,   84,   84,

       84,  176, 1262,  176,   84,  166,  166,  166,  166,  191,
      191,  191,  166,  217,  196,  170,   84,  170,  198, 1261,
      173,  170,  173,   84,  198,  176,  173,   84,  217,  199,
       84,  262,   84,  170,  188,  262,  188,  199,  177,   84,
      177,  196, 1260,  174,   84,  174,  173,  188,  188,  174,
      232,   84,  198,  176,   84,  217,  232,   84,  169,   84,
      169,  170,  177,  174,  169,  199,   84,  153,  153,  153,
      153,  153,  153,  153,  173,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  169, 1254,  202,
      177,  174,  179,  169,  179,  179,  179,  183,  207,  183,

      171,  184,  171,  207, 1242,  560,  171,  560,  202,  184,
      179,  153,  153,  153,  169,  206,  235,  200,  171,  231,
      169,  231,  235,  294,  183,  231,  183,  294,  577,  184,
      577,  207,  171,  206,  200,  202,  184,  200,  153,  157,
      157,  157,  157,  157,  157,  157,  171,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  171,
      206,  200,  208,  214,  200, 1232,  210,  214,  233,  233,
      233,  233,  218,  208,  210,  233,  172,  203,  172,  185,
      218,  185,  172,  157,  157,  157,  236,  236,  236,  236,
      237,  239,  239,  239,  243,  214,  237,  172,  239,  203,

      243,  208,  210,  185, 1229,  472,  172,  172,  218,  472,
      157,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  172,  203,  168,  168,  168,
      168,  185,  204,  172,  172,  197,  180,  182,  180,  182,
      215,  201,  187,  222,  187,  655,  215,  197,  205,  655,
      216,  222,  209,  197,  204,  168,  168,  168,  168,  180,
      182, 1228,  201,  180,  182,  187,  212,  205,  209,  187,
     1227,  245,  219,  216,  215,  197,  205,  245,  220,  222,
      197,  204,  168,  213,  219, 1226,  212,  180,  182,  201,
      253,  180,  182,  187,  205,  209,  253,  187,  211,  213,

      216,  220,  211,  211,  211,  211,  211,  211, 1224,  223,
      211, 1219,  219,  212,  211,  221,  224,  211,  323,  211,
      211,  221,  230,  211,  223,  221,  213,  311,  220,  225,
      211,  211,  211,  211,  211,  211,  226,  225,  211,  224,
      227,  211,  230, 1213,  211,  323,  211,  211,  681,  221,
      211,  223,  226,  221,  228,  311,  226,  227,  240,  681,
      240,  252,  228,  252,  240,  225,  224,  252, 1210,  230,
      241,  241,  241,  241,  247,  247,  247,  241, 1209,  226,
      271,  271,  271,  226,  227,  244,  244,  244,  244,  319,
      228,  319,  244,  249,  249,  249,  249,  254,  254,  254,

      254,  313,  319,  319,  254,  255,  255,  255,  255,  255,
      255,  255, 1205,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  256,  592,  256,  592,  313,
      259,  256,  257,  257,  257,  257,  259,  263,  268,  257,
      260,  260,  260,  263,  268, 1202,  261,  260,  261,  255,
      255,  255,  261,  264,  264,  264,  264,  265, 1199,  265,
      264,  320,  272,  265,  266,  266,  266,  266,  272,  279,
      936,  266,  320,  320,  936,  279,  255,  258,  258,  258,
      258,  258,  258,  258, 1196,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  269,  269,  269,

      269,  273,  273,  273,  269,  275,  275,  275,  273,  276,
      283,  276,  275,  324,  337,  276,  283,  277,  277,  277,
      277,  258,  258,  258,  277,  280,  280,  280,  280,  281,
     1192,  281,  280, 1191,  288,  281,  284,  284,  284,  284,
      288,  324,  337,  284,  285,  285,  285,  285,  258, 1185,
      328,  285,  290,  290,  290,  291,  291,  291,  291,  290,
      295,  293,  291,  293,  328,  329,  295,  293,  296,  296,
      296,  296,  329, 1182,  336,  296,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
     1181,  328,  297,  297,  297,  297,  298,  299,  298,  299,

      329,  336,  298,  299,  301,  300,  301,  300,  310,  325,
      301,  300,  304,  302,  304,  302, 1163,  310,  304,  302,
      297,  297,  297,  297,  338, 1159,  299,  300,  303,  325,
      303,  305,  486,  305,  303,  301,  310,  305,  304,  499,
      306,  338,  306,  307,  310,  307,  306,  297,  302,  307,
      499,  499,  308,  299,  308,  300,  325,  316,  308,  316,
      486,  305,  301,  303,  305,  332,  304,  326,  338,  315,
      317,  315,  317,  330,  376,  302,  306,  326,  327,  307,
      376,  308, 1155,  330,  327,  333,  332,  316,  305,  316,
      303,  305,  315,  331,  317,  335,  315,  331,  340, 1151,

      333,  341,  317,  306, 1147,  326,  307,  335,  308,  341,
      340,  330,  327,  332,  316,  334,  316,  339,  342,  334,
      315,  343,  317,  347,  315,  331,  344,  333,  345,  317,
      342,  346,  339,  348,  350,  335,  349,  341,  340, 1143,
      347,  344,  343,  342,  351,  349,  487,  334,  345,  346,
      354,  348,  350,  349,  352,  355,  348,  353,  342,  339,
     1139,  354,  352,  358,  351,  353,  357,  347,  344,  343,
      342,  360,  359,  349,  487,  345,  346,  352,  348,  350,
      349,  357,  355,  348,  353,  358,  361,  370,  363,  354,
      352,  351,  359,  353,  360,  362,  361,  365,  368,  364,

      598,  362,  598,  363,  352,  370,  361,  364,  357,  355,
      371,  353,  358, 1133,  369,  373, 1131,  365,  368,  359,
      369,  360,  373,  374,  361,  386,  386,  386,  371,  362,
      363,  374,  370,  361,  373,  364,  375,  378,  375,  379,
      379,  379,  375,  378,  365,  368,  379,  382,  369,  377,
      377,  377,  377,  382, 1127,  371,  377,  384,  380,  374,
      380, 1123,  373,  384,  380,  381,  381,  381,  381, 1120,
     1112,  389,  381,  383,  383,  383,  383,  389, 1108, 1104,
      383,  387,  387,  387,  387,  390,  390,  390,  392,  392,
      392, 1100,  390,  490, 1096,  392,  395,  395,  395,  395,

      398,  398,  398,  395,  402,  403,  402,  439,  439,  439,
      402,  403,  404,  404,  404,  404,  405, 1092,  488,  404,
      490,  409,  405,  406,  406,  406,  407,  409,  407, 1080,
      406,  416,  407,  408,  408,  408,  408,  416, 1079,  420,
      408,  410,  410,  410,  410,  420,  488,  500,  410,  411,
      411,  411,  411,  411,  411,  411,  489,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  412,
      491,  412, 1059,  501,  500,  412,  413,  413,  413,  413,
      415,  422,  415,  413,  489, 1058,  415,  422, 1030,  417,
      417,  417,  417,  411,  411,  411,  417,  418,  491,  418,

      501,  513,  425,  418,  419,  419,  419,  419,  425, 1023,
      431,  419,  421,  421,  421,  421,  431, 1006,  986,  421,
      411,  414,  414,  414,  414,  414,  414,  414,  513,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  423,  423,  423,  424,  424,  424,  616,  423,  616,
      434,  424,  427,  427,  427,  428,  434,  428,  447,  427,
      447,  428,  952,  924,  447,  414,  414,  414,  429,  429,
      429,  429,  498,  906,  498,  429,  432,  432,  432,  432,
      436,  436,  436,  432,  893,  498,  498,  436,  437,  437,
      437,  437,  414,  888,  886,  437,  442,  442,  442,  445,

      445,  445,  445,  442,  448,  885,  445,  526,  882,  450,
      448,  449,  449,  449,  449,  450,  881,  871,  449,  451,
      451,  451,  452,  452,  452,  452,  451,  526,  865,  452,
      453,  453,  453,  453,  456,  456,  456,  453,  458,  459,
      458,  456,  857,  506,  458,  459,  460,  460,  460,  460,
      461,  506,  856,  460,  526,  467,  461,  463,  463,  463,
      464,  467,  464,  503,  463,  473,  464,  465,  465,  465,
      465,  473,  823,  819,  465,  468,  468,  468,  468,  506,
      503,  814,  468,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  514,  811,  469,

      469,  469,  469,  470,  471,  470,  471,  503,  507,  470,
      471,  474,  474,  474,  474,  475,  507,  475,  474,  502,
      476,  475,  476,  502,  504,  514,  476,  469,  469,  469,
      469,  477,  478,  477,  478,  732,  504,  477,  478,  479,
      480,  479,  480,  505,  507,  479,  480,  481,  720,  481,
      505,  502,  718,  481,  469,  477,  482,  629,  482,  629,
      518,  479,  482,  493,  504,  493,  484,  478,  484,  483,
      480,  483,  484,  702,  485,  483,  485,  518,  505,  481,
      485,  685,  652,  477,  492,  482,  492,  483,  494,  479,
      494,  511,  484,  510,  478,  483,  485,  480,  495,  493,

      495,  510,  508,  511,  518,  512,  481,  497,  508,  497,
      494,  512,  482,  515,  492,  483,  492,  651,  647,  515,
      484,  521,  495,  483,  485,  509,  493,  516,  497,  510,
      495,  511,  509,  517,  520,  516,  508,  509,  494,  512,
      519,  492,  521,  492,  522,  520,  523,  515,  517,  519,
      495,  525,  530,  527,  529,  640,  497,  495,  523,  530,
      509,  531,  522,  516,  534,  509,  532,  533,  534,  521,
      527,  535,  533,  520,  525,  517,  529,  519,  538,  531,
      536,  532,  539,  540,  637,  633,  523,  530,  536,  522,
      535,  540,  541,  538,  539,  543,  534,  527,  668,  541,

      533,  525,  542,  529,  543,  544,  531,  545,  532,  544,
      542,  546,  548,  549,  672,  545,  536,  535,  546,  540,
      538,  547,  539,  550,  551,  547,  668,  541,  553,  649,
      550,  649,  543,  548,  555,  549,  555,  544,  542,  556,
      555,  672,  558,  545,  631,  556,  546,  551,  558,  553,
      559,  559,  559,  547,  557,  557,  557,  557,  550,  844,
      548,  844,  549,  561,  561,  561,  561,  563,  563,  563,
      563,  565,  565,  565,  551,  619,  553,  566,  566,  566,
      567,  567,  567,  567,  568,  568,  568,  570,  570,  570,
      572,  573,  572,  576,  576,  576,  572,  573,  574,  574,

      574,  574,  575,  578,  578,  578,  578,  683,  575,  580,
      580,  580,  580,  582,  582,  582,  583,  583,  583,  584,
      584,  584,  584,  585,  585,  585,  586,  590,  586,  585,
      617,  613,  586,  590,  683,  585,  585,  587,  587,  587,
      587,  588,  588,  588,  589,  596,  589,  588,  610,  606,
      589,  596,  602,  588,  588,  591,  591,  591,  591,  593,
      593,  593,  593,  595,  595,  595,  595,  597,  597,  597,
      599,  599,  599,  599,  601,  601,  601,  601,  603,  603,
      603,  604,  604,  604,  604,  605,  605,  605,  607,  607,
      607,  609,  609,  609,  612,  612,  612,  612,  614,  614,

      614,  618,  618,  618,  618,  620,  620,  620,  621,  621,
      621,  621,  622,  622,  622,  623,  623,  623,  623,  624,
      625,  624,  628,  628,  628,  624,  625,  626,  626,  626,
      626,  627,  630,  630,  630,  630,  600,  627,  632,  632,
      632,  632,  634,  634,  634,  636,  636,  636,  639,  639,
      639,  639,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  594,  671,  641,  641,
      641,  641,  642,  643,  642,  643,  644,  581,  642,  643,
      673,  646,  644,  645,  645,  645,  645,  646,  648,  648,
      648,  650,  650,  650,  650,  671,  641,  641,  641,  641,

      653,  653,  653,  653,  654,  656,  654,  680,  673,  680,
      654,  656,  657,  657,  657,  657,  658,  579,  658,  659,
      680,  659,  658,  641,  660,  659,  660,  661,  564,  661,
      660,  562,  554,  661,  662,  663,  662,  663,  658,  682,
      662,  663,  664,  537,  664,  665,  528,  665,  664,  661,
      666,  665,  666,  667,  524,  667,  666,  663,  674,  667,
      674,  675,  677,  675,  677,  662,  658,  682,  664,  665,
      666,  689,  679,  676,  679,  676,  665,  661,  678,  686,
      678,  684,  687,  686,  675,  663,  687,  684,  690,  677,
      693,  688,  662,  689,  674,  676,  664,  665,  666,  678,

      688,  692,  679,  665,  695,  691,  696,  694,  695,  698,
      690,  686,  675,  691,  687,  684,  693,  677,  697,  699,
      689,  674,  692,  676,  694,  699,  701,  678,  688,  679,
      466,  700,  698,  706,  696,  462,  695,  690,  699,  700,
      704,  691,  703,  693,  707,  697,  705,  711,  701,  692,
      703,  694,  705,  699,  717,  706,  709,  708,  704,  698,
      707,  708,  709,  710,  454,  699,  712,  700,  714,  713,
      711,  710,  712,  716,  717,  701,  712,  713,  703,  715,
      705,  716,  706,  721,  714,  704,  722,  707,  714,  708,
      709,  721,  719,  724,  723,  715,  446,  711,  723,  710,

      712,  717,  726,  835,  712,  713,  722,  727,  724,  716,
      719,  714,  729,  730,  444,  714,  728,  438,  729,  721,
      725,  731,  715,  727,  734,  726,  723,  433,  728,  725,
      734,  835,  430,  722,  729,  724,  730,  719,  733,  725,
      733,  725,  736,  731,  733,  738,  729,  738,  736,  833,
      727,  738,  726,  737,  737,  737,  728,  725,  740,  741,
      737,  729,  836,  730,  740,  741,  725,  426,  725,  746,
      731,  735,  735,  735,  735,  746,  833,  400,  735,  739,
      739,  739,  739,  742,  742,  742,  739,  397,  396,  836,
      742,  743,  743,  743,  743,  744,  744,  744,  743,  745,

      393,  745,  744,  388,  748,  745,  747,  747,  747,  747,
      748,  385,  752,  747,  749,  749,  749,  750,  752,  750,
      372,  749,  753,  750,  751,  751,  751,  751,  753,  367,
      847,  751,  754,  754,  754,  755,  755,  755,  755,  754,
      366,  356,  755,  756,  756,  756,  757,  757,  757,  845,
      756,  845,  757,  758,  758,  758,  758,  759,  847,  759,
      758,  761,  760,  759,  760,  848,  292,  761,  760,  762,
      762,  762,  762,  763,  287,  763,  762,  286,  765,  763,
      764,  764,  764,  764,  765,  766,  282,  764,  767,  767,
      767,  766,  768,  848,  768,  767,  278,  770,  768,  769,

      769,  769,  769,  770,  771,  837,  769,  837,  853,  773,
      771,  772,  772,  772,  772,  773,  853,  270,  772,  774,
      774,  774,  775,  775,  775,  775,  774,  267,  837,  775,
      776,  776,  776,  777,  777,  777,  779,  776,  779,  780,
      777,  781,  779,  251,  853,  780,  250,  781,  782,  782,
      782,  782,  783,  783,  783,  782,  837,  246,  242,  783,
      784,  784,  784,  784,  785,  786,  785,  784,  238,  229,
      785,  786,  787,  787,  787,  787,  788,  190,  181,  787,
      855,  792,  788,  789,  789,  789,  790,  792,  790,  855,
      789,  793,  790,  791,  791,  791,  791,  793,  164,  159,

      791,  794,  794,  794,  795,  795,  795,  795,  794,  801,
      803,  795,  796,  796,  796,  801,  803,  855,  860,  796,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798, 1040,  141,  798,  798,  798,  798,
      799,  800,  799,  800,  137,  860,  799,  800,  802,  802,
      802,  802,  804,  804,  804,  802,  805,  807,  805,  804,
      126, 1040,  805,  807,  798,  798,  798,  798,  806,  806,
      806,  806,  808,  861,  842,  806,  842,  108,  808,  809,
      809,  809,  813,  813,  813,  813,  809,  816,  815,  813,
      815,  798,  106,  816,  815,  817,  817,  817,  817,  818,

      858,  861,  817, 1041,  824,  818,  820,  820,  820,  821,
      824,  821,  842,  820,   99,  821,  822,  822,  822,  822,
      825,  858,  825,  822,   95,  849,  825,  826,  827,  826,
      827, 1041,   92,  826,  827,  828,  829,  828,  829,  842,
      859,  828,  829,  830,  831,  830,  831,  849,  858,  830,
      831,  832,  840,  832,  840,  859,  825,  832,  826,  838,
      839,  838,  839,  841,  854,  841,  863,  829,  850,  832,
      851,  862,  854,  852,  849,  828,  840,  852,  864,   74,
      830,  831,  859,  825,  863,  826,  838,  839,  872,  867,
      850,  862,  851,  841,  829,  866,  869,  832,  864,  866,

      854,  870,  828,  872,  840,  852,  868,  830,  831,  867,
      869,  863,  868,  870,  838,  839,  873,  850,  862,  851,
      841,  876,  874,  877,  875,  864,  878,  866,  879,  876,
      872,  880,  878,  884,  890,  889,  867,  869,  873,  875,
      868,  870,  874,  877,  883,  887,  879,  892,  891,  880,
      884,  887,  883,   42,  890,  896,   37,  876,  889,  894,
      878, 1042,  898,  897,  895,  873,  875,  892,  895,  874,
      877,  891,   31,  879,  898, 1050,  880,  884,  897,  887,
      883,  890,  896,  894,  899,  889,  899,  900, 1042,  902,
      899,  907,   30,  900,  892,  902,  895,  907,  891,  903,

      903,  903,  898, 1050, 1051,  897,  903,   29,   28,  896,
      894,  901,  901,  901,  901,  904, 1051,  904,  901, 1052,
      909,  904,  905,  905,  905,  905,  909, 1052, 1172,  905,
      908,  908,  908,  908,  910,  910,  910,  908,  912,  912,
      912,  910, 1067, 1060, 1051,  912,  913,  913,  913,  913,
      914,  914,  914,  913, 1067, 1052, 1172,  914,  915,  915,
      915,  915,  916,  916,  916,  915,  917,  918,  917,  916,
     1060,   27,  917,  918,  919,  919,  919,  919,  920, 1076,
     1056,  919, 1067,  925,  920,  921,  921,  921,  922,  925,
      922,   25,  921,  927,  922,  923,  923,  923,  923,  927,

     1056, 1076,  923,  926,  926,  926,  926,  928,  928,  928,
      926,  930,  930,  930,  928,   23,   19,   18,  930,  931,
      931,  931,  931,  932,  932,  932,  931, 1056, 1076,   17,
      932,  933,  933,  933,  933,  934,  934,  934,  933,  935,
        6,  935,  934,  938,  943,  935,  937,  937,  937,  938,
      943,    0,  937,  939,  939,  939,  939,  940,    0,  940,
      939,    0,    0,  940,  941,  941,  941,  941,  942,    0,
      942,  941,    0,    0,  942,  944,  944,  944,  944,  945,
      946,  945,  944,    0, 1072,  945,  946,  947,  947,  947,
      947,  948, 1071, 1072,  947,    0,  953,  948,  949,  949,

      949,  950,  953,  950, 1071,  949,  956,  950,  951,  951,
      951,  951,  956,    0,    0,  951,  954,  954,  954,  954,
      955, 1072,  955,  954,    0,  959,  955,  957,  957,  957,
      957,  959, 1071,    0,  957,  958,  958,  958,  958,  960,
      960,  960,  958,  961, 1054,    0,  960,    0,    0,  961,
      962,  962,  962,  964,  964,  964, 1048,  962, 1048,  972,
      964,  965,  965,  965,  965,  972,    0, 1054,  965,  966,
      966,  966,  966,  967,  967,  967,  966, 1174, 1048,    0,
      967,  968,  968,  968,  968,  969,  969,  969,  968,  970,
      970,  970,  969,  971, 1054,  971,  970, 1088,  974,  971,

      973,  973,  973,  973,  974, 1174, 1048,  973,  975,  975,
      975,  976,  976,  976,  976,  975, 1088,    0,  976,  977,
      977,  977,  978,  978,  978,  978,  977,  980,  979,  978,
      979,    0,    0,  980,  979,  981,  981,  981,  981,  982,
        0, 1062,  981, 1088,  987,  982,  983,  983,  983,  984,
      987,  984,    0,  983,  989,  984,  985,  985,  985,  985,
      989, 1062, 1187,  985,  988,  988,  988,  988,  990,  990,
      990,  988,  992,  992,  992,  990,    0,    0,    0,  992,
      993,  993,  993,  993,  994,  994,  994,  993, 1062, 1187,
     1236,  994,  995,  995,  995,  995,  996,  996,  996,  995,

        0, 1237,    0,  996,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997, 1236,    0,
      997,  997,  997,  997,  998,  999,  998,  999, 1000, 1237,
      998,  999,    0, 1002, 1000, 1001, 1001, 1001, 1001, 1002,
     1063,    0, 1001,    0,    0, 1003, 1003, 1003,  997,  997,
      997,  997, 1003, 1004,    0, 1004, 1063, 1244, 1007, 1004,
     1005, 1005, 1005, 1005, 1007,    0,    0, 1005, 1009, 1008,
     1008, 1008, 1008,    0, 1009,  997, 1008, 1010, 1010, 1010,
     1012, 1012, 1012, 1063, 1010, 1244,    0, 1012, 1013, 1013,
     1013, 1013, 1014, 1014, 1014, 1013,    0,    0,    0, 1014,

     1015, 1015, 1015, 1015, 1016, 1017, 1016, 1015,    0,    0,
     1016, 1017, 1018, 1018, 1018, 1018, 1019,    0,    0, 1018,
     1083, 1024, 1019, 1020, 1020, 1020, 1021, 1024, 1021,    0,
     1020, 1026, 1021, 1022, 1022, 1022, 1022, 1026, 1083, 1065,
     1022, 1025, 1025, 1025, 1025, 1027, 1027, 1027, 1025, 1029,
     1029, 1029, 1027,    0, 1065,    0, 1029, 1031, 1031, 1031,
     1031, 1033, 1270, 1033, 1031, 1083, 1034, 1033, 1034, 1035,
     1064, 1035, 1034,    0, 1036, 1035, 1036, 1043, 1064, 1043,
     1036, 1065, 1037, 1033, 1037, 1038, 1271, 1038, 1037, 1270,
     1039, 1038, 1039, 1044, 1053, 1044, 1039, 1045, 1053, 1045,

     1047, 1034, 1047,    0, 1043,    0, 1064, 1038, 1055, 1036,
        0, 1033, 1055, 1271, 1037, 1066, 1057, 1044, 1068, 1039,
     1057, 1045, 1070, 1066, 1069, 1068, 1053, 1074, 1034, 1075,
     1069, 1073, 1043, 1075, 1074, 1038, 1036, 1070, 1047, 1073,
     1055, 1037, 1082, 1077, 1081, 1044, 1039, 1078, 1057, 1045,
     1077, 1066, 1081, 1068,    0, 1084, 1087, 1275, 1069, 1082,
     1084, 1075, 1074, 1085, 1070, 1047, 1086, 1073, 1090, 1107,
     1078, 1085,    0, 1089, 1086, 1107, 1113, 1087, 1077,    0,
     1081, 1089, 1113, 1295, 1275, 1090, 1082, 1278, 1084, 1091,
     1091, 1091, 1091, 1093, 1093, 1093, 1091, 1078,    0, 1085,

     1093, 1110, 1086, 1110, 1087, 1118, 1180, 1110, 1278, 1089,
     1295, 1118, 1090, 1095, 1095, 1095, 1095, 1097, 1097, 1097,
     1095,    0, 1308, 1180, 1097, 1099, 1099, 1099, 1099, 1101,
     1101, 1101, 1099,    0,    0, 1278, 1101, 1103, 1103, 1103,
     1103, 1105, 1105, 1105, 1103, 1109, 1109, 1109, 1105, 1308,
     1180, 1119, 1109, 1111, 1111, 1111, 1111, 1119,    0,    0,
     1111, 1114, 1114, 1114, 1114, 1115, 1184, 1115, 1114, 1204,
     1116, 1115, 1116, 1117,    0, 1117, 1116, 1124, 1121, 1117,
     1121, 1188, 1184, 1124, 1121, 1122, 1122, 1122, 1122, 1188,
        0, 1204, 1122, 1125, 1125, 1125, 1125, 1177,    0, 1177,

     1125, 1126, 1126, 1126, 1126, 1128, 1128, 1128, 1126, 1184,
        0,    0, 1128, 1130, 1130, 1130, 1130, 1188, 1204, 1177,
     1130, 1132, 1132, 1132, 1132, 1134, 1134, 1134, 1132, 1136,
     1136, 1136, 1134,    0,    0,    0, 1136, 1138, 1138, 1138,
     1138, 1140, 1140, 1140, 1138,    0,    0, 1177, 1140, 1142,
     1142, 1142, 1142, 1144, 1144, 1144, 1142,    0,    0,    0,
     1144, 1146, 1146, 1146, 1146, 1148, 1148, 1148, 1146, 1175,
        0, 1175, 1148, 1150, 1150, 1150, 1150, 1152, 1152, 1152,
     1150,    0,    0,    0, 1152, 1154, 1154, 1154, 1154, 1156,
     1156, 1156, 1154, 1175,    0,    0, 1156, 1158, 1158, 1158,

     1158, 1160, 1160, 1160, 1158,    0, 1186, 1189, 1160, 1162,
     1162, 1162, 1162, 1164, 1164, 1164, 1162, 1166, 1183, 1166,
     1164, 1175, 1167, 1166, 1167, 1168, 1189, 1168, 1167, 1186,
     1169, 1168, 1169, 1183,    0, 1166, 1169, 1170, 1171, 1170,
     1171, 1197, 1200, 1170, 1171, 1178, 1190, 1178, 1167, 1203,
     1193, 1194, 1190, 1189, 1193, 1194, 1186, 1195, 1198, 1197,
     1183, 1195, 1198, 1166, 1206, 1200, 1211, 1169, 1178, 1201,
     1206, 1207, 1203, 1208, 1211, 1215, 1167, 1207, 1220, 1212,
     1190, 1215, 1193, 1194, 1220, 1201, 1197, 1212,    0, 1195,
     1198, 1225, 1200, 1208, 1169, 1214, 1178, 1225, 1206, 1203,

     1240, 1241, 1211, 1214,    0, 1207, 1216, 1216, 1216, 1218,
     1218, 1218, 1201, 1216, 1243, 1212, 1218, 1222, 1222, 1222,
     1208, 1245, 1240, 1241, 1222, 1223, 1223, 1223, 1223, 1243,
        0, 1214, 1223, 1231, 1231, 1231, 1231, 1233, 1245, 1233,
     1231, 1247, 1234, 1233, 1234, 1235, 1246, 1235, 1234, 1240,
     1241, 1235, 1238, 1247, 1238, 1248, 1243, 1249, 1250, 1256,
     1257, 1246, 1252, 1255, 1253, 1245, 1251, 1233, 1252, 1259,
     1267, 1256, 1267, 1250, 1234, 1238, 1267, 1248, 1255, 1249,
     1235, 1247, 1257, 1251, 1253, 1258, 1274, 1259, 1246,    0,
     1263, 1263, 1263, 1258, 1233,    0, 1252, 1263,    0, 1256,

     1250, 1234,    0, 1238, 1248, 1255, 1249, 1235, 1274, 1257,
     1251, 1253, 1276,    0, 1259, 1265, 1265, 1265, 1268, 1272,
     1268, 1258, 1265, 1269, 1268, 1269, 1286, 1272, 1277, 1269,
     1279, 1283, 1284, 1280, 1276, 1274, 1277, 1280, 1279, 1283,
     1284, 1287, 1285, 1286, 1288, 1297, 1289, 1298, 1304, 1268,
     1285, 1288, 1290, 1287, 1290, 1272, 1304, 1293, 1290, 1298,
     1306, 1276, 1305, 1307, 1277, 1280, 1279, 1283, 1284, 1289,
     1286, 1297, 1309, 1315, 1316, 1313, 1268, 1293, 1285, 1288,
     1305, 1287, 1310, 1306, 1304, 1307, 1321, 1298, 1317, 1324,
     1315, 1310,    0, 1313, 1316, 1325, 1289, 1320, 1297, 1309,

     1317, 1320,    0, 1321, 1293, 1323, 1324, 1305, 1326, 1327,
     1306, 1335, 1307, 1323, 1337, 1327, 1330, 1315, 1331, 1310,
     1313, 1316, 1325, 1332, 1330,    0, 1331,    0, 1317, 1320,
     1321, 1332, 1333, 1324,    0, 1326,    0,    0,    0, 1335,
     1333, 1323, 1337, 1327,    0,    0, 1331,    0,    0,    0,
        0, 1332, 1330, 1331,    0,    0,    0,    0, 1332,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1333, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1347, 1347, 1347,

     1347, 1347, 1347, 1347, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1356, 1356, 1357,    0, 1357, 1357, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362, 1362, 1362,

     1362, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365, 1365, 1365,
        0, 1365, 1366, 1366, 1366, 1366,    0, 1366, 1366, 1367,
        0, 1367, 1368,    0, 1368, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1378, 1378,

     1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1388, 1388,
     1388, 1388, 1388,    0, 1388, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1406, 1406, 1406, 1406, 1406, 1406,

     1406, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1413, 1413, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421, 1421,

     1421, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1423, 1423,
     1423, 1423, 1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1443, 1443,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1451,

     1451, 1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465,

     1465, 1465, 1465, 1465, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1474, 1474, 1474, 1474, 1474, 1474, 1475, 1475, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1477, 1477, 1477, 1477, 1477,
     1477, 1477, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480, 1480,

     1480, 1480, 1480, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1494, 1494, 1494, 1494, 1494, 1494,

     1494, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1509,

     1509, 1509, 1509, 1509, 1509, 1509, 1510, 1510, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1521, 1521,
     1521, 1521, 1521, 1521, 1521, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1524,

     1524, 1524, 1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525,
     1525, 1525, 1525, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1532, 1532, 1532, 1532, 1532,
     1532, 1532, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1534,
     1534, 1534, 1534, 1534, 1534, 1534, 1535, 1535, 1535, 1535,
     1535, 1535, 1535, 1536, 1536, 1536, 1536, 1536, 1536, 1536,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538,

     1538, 1538, 1538, 1538, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542,
     1542, 1542, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1545, 1545, 1545, 1545,
     1545, 1545, 1545, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1548, 1548, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1550, 1550, 1550, 1550,
     1550, 1550, 1550, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553,

     1553, 1553, 1553, 1553, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1557, 1557, 1557, 1557, 1557,
     1557, 1557, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1561, 1561,    0, 1561, 1561, 1561, 1561,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1567, 1567, 1567, 1567, 1567,

     1567, 1567, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1577, 1577, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,

     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest, lexer_string, lexer_lr;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;





//  following are keywords starting with c
#line 2314 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10
#define state_scanompfixed 11
#define state_scanompfree 12
#define state_incfilename 13
#define state_char 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 32 "lexer.l"


#line 2552 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1343 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5968 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 34 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 37 "lexer.l"
{ D(O("lrplus");O(lrlevel);Y;); 
                   lrlevel++;
		}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 41 "lexer.l"
{ D(O("lrmin");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 55 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); 
                    lexer_lr += yytext;
		} 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 58 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 63 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 84 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 92 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		lexer_lr = "";
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 100 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 108 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 109 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 112 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 124 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK

/* to be used in '#include <file>' */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("INCFILENAME");Y;); lexer_string = yytext; 
                             BEGIN state_char; 
			     return INCFILENAME; }
	YY_BREAK


case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 139 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 140 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("ENDTEAM");Y);            return ENDTEAM;           }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("INCLUDE");Y;);           return INCLUDE;           }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("INCLUDE_CPP");Y;);       return INCLUDE_CPP;       }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("INCLUDE_COCO");Y);       return INCLUDE_COCO;      }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 96:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 219 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 220 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 221 "lexer.l"
{ D(O("USE");Y);                return USE;               }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 222 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 226 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 227 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 228 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 229 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 230 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 231 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 232 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 233 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 234 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 235 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 236 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 237 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 238 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 239 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 114:
#line 244 "lexer.l"
case 115:
/* rule 115 can match eol */
#line 245 "lexer.l"
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 245 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 248 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 249 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 119:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 252 "lexer.l"
case 120:
YY_RULE_SETUP
#line 253 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 256 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 257 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 123:
YY_RULE_SETUP
#line 260 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 263 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 266 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 269 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 272 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 277 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 282 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 285 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 288 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 291 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 294 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 297 "lexer.l"
{ D(O("INCLUDE_CPP");Y;);
                                return INCLUDE_CPP;
		              }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 301 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 304 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 307 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 310 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 313 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 316 "lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 324 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 325 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 143:
YY_RULE_SETUP
#line 328 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       lexer_string = pline.get_value(std::string(yytext));
		       D(O("QSTRING");O(lexer_string);Y;);
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 144:
/* rule 144 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 353 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 359 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 366 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    lexer_lr = "";
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 374 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 381 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 383 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 384 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 386 "lexer.l"
ECHO;
	YY_BREAK
#line 3563 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_scanfixpre):
case YY_STATE_EOF(state_scanompfixed):
case YY_STATE_EOF(state_scanompfree):
case YY_STATE_EOF(state_incfilename):
case YY_STATE_EOF(state_char):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1343 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1343 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1342);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 386 "lexer.l"



void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case CHAR:          BEGIN(state_char);         break;
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case INCFILENAME:   BEGIN(state_incfilename);  break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}
std::string lexer_getstring()
{
   D(O("lexer_string");O(lexer_string););
   return lexer_string;
}
std::string lexer_getlr()
{
   D(O("lexer_lr");O(lexer_lr););
   return lexer_lr;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


