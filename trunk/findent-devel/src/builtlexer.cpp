#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 153
#define YY_END_OF_BUFFER 154
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[684] =
    {   0,
      154,  152,  153,  151,  153,  152,  153,  148,  152,  153,
      147,  152,  153,  152,  153,  149,  152,  153,  150,  151,
      153,   16,   17,  152,  153,  152,  153,  152,  153,  152,
      153,  152,  153,  152,  153,  152,  153,  152,  153,  152,
      153,  152,  153,  152,  153,  152,  153,  152,  153,  152,
      153,  152,  153,  152,  153,    4,  153,    5,  153,    2,
        4,  153,    3,    4,  153,    8,  153,    9,  153,    6,
        8,  153,    7,    8,  153,   15,  153,   14,  153,   10,
       15,  153,   12,   15,  153,   11,   15,  153,   13,   15,
      153,    1,  153,  153,  153,  113,  153,  153,  113,  153,

      153,  153,  153,  153,  153,  153,  153,  144,  153,  144,
      153,  143,  153,  144,  153,  144,  153,  129,  144,  153,
      144,  153,  144,  153,  118,  153,  117,  153,  118,  153,
      122,  153,  121,  153,  122,  153,  122,  153,   18,  153,
       20,  153,   19,  153,  145,  147,   16,   17,   17,   16,
       17,   36,   72,   91,  113,  101,  113,  101,  113,  103,
      113,  101,  105,  107,  108,  113,  129,  136,  116,   18,
      146,   37,   53,   96,  101,  103,  113,  101,  105,  107,
      113,  101,  103,  101,  107,  102,  113,  105,  107,  108,
      113,  103,  105,  107,  113,  105,  107,  113,  101,  108,

      113,  101,  103,  108,  113,  101,  105,  108,  113,  100,
      101,  113,  130,  116,  116,  120,  119,   27,   45,   69,
       84,   85,   92,   93,  103,  107,  101,  103,  105,  107,
      113,  101,  113,  101,  103,  113,  101,  105,  113,  101,
      103,  107,  101,  101,  103,  102,  103,  113,  102,  105,
      107,  113,  108,  113,  103,  108,  113,  105,  108,  113,
      107,  103,  113,  103,  105,  113,  113,  105,  113,  103,
      101,  103,  105,  108,  113,  100,  101,  103,  113,  100,
      101,  105,  107,  113,  111,  113,  137,  116,   24,   31,
       52,   57,   68,   94,   97,  103,  107,  101,  103,  105,

      113,  102,  103,  105,  107,  113,  102,  113,  102,  103,
      113,  102,  105,  113,  103,  105,  108,  113,  100,  101,
      103,  105,  107,  113,  100,  101,  113,  100,  101,  103,
      113,  100,  101,  105,  113,  103,  111,  113,  105,  107,
      111,  113,  110,  113,  133,  132,  114,  116,  114,   23,
       46,   70,   73,   78,   95,  102,  103,  105,  113,  100,
      101,  103,  105,  113,  103,  105,  107,  111,  113,  111,
      113,  103,  111,  113,  105,  111,  113,  103,  110,  113,
      105,  107,  110,  113,  131,  139,  115,  115,  116,  114,
      116,  114,   32,   33,   40,   54,   65,   66,   74,   75,

       77,   83,   98,  101,  107,  113,  101,  103,  107,  113,
      107,  113,  103,  107,  113,  112,  113,  104,  107,  113,
      102,  107,  113,  102,  103,  107,  113,  100,  101,  107,
      113,  100,  101,  103,  107,  113,  107,  111,  113,  103,
      107,  111,  113,  107,  110,  113,  103,  107,  110,  113,
      110,  113,  103,  110,  113,  138,   34,   35,   41,   49,
       67,   71,  101,  106,  107,  113,  101,  103,  106,  107,
      113,  101,  106,  113,  101,  103,  106,  113,  106,  107,
      113,  103,  106,  107,  113,  106,  113,  103,  106,  113,
      103,  112,  113,  106,  107,  109,  112,  113,  104,  113,

      104,  103,  104,  113,  106,  107,  112,  113,  102,  106,
      107,  113,  102,  103,  106,  107,  113,  102,  106,  113,
      106,  108,  113,  103,  106,  108,  113,  102,  103,  106,
      113,  101,  106,  108,  113,  101,  103,  106,  108,  113,
      100,  101,  106,  107,  113,  100,  101,  103,  106,  107,
      113,  100,  101,  106,  113,  100,  101,  103,  106,  113,
      106,  107,  111,  113,  103,  106,  107,  111,  113,  106,
      111,  113,  103,  106,  111,  113,  106,  107,  110,  113,
      103,  106,  107,  110,  113,  106,  110,  113,  103,  106,
      110,  113,16518,16519,  140,   22,   25,   28,   44,   47,

       55,   59,   62,   76,   82,   86,   89,  103,  106,  107,
      112,  113,  109,  112,  113,  103,  109,  112,  113,  106,
      109,  112,  113,  103,  104,  104,  112,  113,  103,  112,
      113,  106,  112,  113,16518,16519,16525,16526,   30,   61,
       99,   87,   88,   90,  103,  106,  112,  113,  103,  106,
      109,  112,  113,16525,16526,   26,   51,   56, 8326, 8327,
       29,   38,   48,   50,   58,   60,   64,  127,  128,   39,
       42,   63, 8334, 8333,   81,   43,   79,   80,  123,  124,
       21,  125,  126
    } ;

static const flex_int16_t yy_accept[1359] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    6,    8,   11,   14,   16,   19,   22,
       26,   28,   30,   32,   34,   36,   38,   40,   42,   44,
       46,   48,   50,   52,   54,   56,   58,   60,   63,   66,
       68,   70,   73,   76,   78,   80,   83,   86,   89,   92,
       94,   95,   96,   98,   99,  101,  102,  103,  104,  105,
      106,  107,  108,  110,  112,  114,  116,  118,  121,  123,
      125,  127,  129,  131,  133,  135,  137,  139,  141,  143,

      145,  146,  146,  147,  147,  147,  149,  150,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  153,  153,  153,
      153,  153,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  155,  155,  155,  155,  155,  156,  156,
      158,  158,  158,  158,  159,  159,  159,  159,  160,  160,
      160,  160,  160,  160,  160,  162,  162,  162,  162,  162,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  168,  168,  168,  168,
      168,  168,  168,  169,  170,  170,  170,  170,  171,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  173,

      173,  173,  173,  173,  173,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  178,  178,  178,  178,  182,  182,  182,
      182,  184,  184,  184,  184,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  188,  188,  188,
      188,  188,  192,  192,  192,  192,  192,  192,  192,  196,
      196,  196,  196,  199,  199,  199,  199,  202,  202,  202,
      202,  202,  202,  202,  206,  206,  206,  210,  210,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  214,  214,  214,
      214,  214,  214,  215,  216,  216,  217,  218,  218,  218,
      218,  218,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  222,
      223,  223,  223,  223,  223,  223,  224,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  226,
      226,  226,  227,  227,  227,  232,  232,  234,  237,  237,
      240,  240,  240,  243,  244,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      249,  249,  249,  249,  253,  253,  253,  255,  255,  258,
      258,  258,  261,  261,  262,  264,  264,  267,  268,  268,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  271,
      271,  276,  276,  276,  276,  276,  280,  280,  280,  280,
      285,  285,  285,  285,  285,  285,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      288,  288,  289,  289,  289,  289,  289,  290,  290,  290,

      290,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  292,  292,  292,  292,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  295,  295,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  298,  298,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

      302,  307,  307,  309,  312,  312,  315,  315,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  325,  325,
      328,  332,  332,  336,  336,  336,  336,  336,  336,  336,
      339,  339,  339,  339,  343,  343,  343,  343,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  346,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  349,  350,  350,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  352,  352,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      353,  353,  354,  354,  354,  354,  354,  355,  355,  355,
      355,  355,  355,  355,  355,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  370,  372,  375,  375,  378,  378,  378,
      378,  378,  381,  381,  381,  381,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  386,  386,  386,
      386,  387,  387,  387,  387,  387,  388,  390,  392,  393,
      393,  393,  393,  393,  393,  393,  393,  394,  395,  395,
      395,  395,  395,  395,  395,  395,  396,  396,  396,  396,
      396,  396,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  398,  399,  399,  399,  400,  401,  401,
      402,  402,  402,  402,  402,  403,  403,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  407,

      407,  407,  407,  407,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  413,  413,  413,
      413,  413,  416,  416,  416,  416,  416,  416,  416,  418,
      418,  418,  418,  418,  418,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  432,
      432,  432,  432,  432,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  440,

      440,  440,  440,  440,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  447,  447,  447,  447,
      447,  451,  451,  453,  453,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  458,
      459,  459,  460,  460,  460,  460,  460,  460,  460,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  462,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  467,  467,  472,  472,  475,  475,
      479,  479,  482,  482,  486,  486,  488,  488,  491,  491,

      494,  494,  494,  494,  499,  499,  499,  501,  501,  502,
      502,  502,  505,  505,  505,  509,  509,  509,  509,  513,
      513,  518,  518,  521,  521,  524,  524,  528,  528,  532,
      532,  536,  536,  541,  541,  546,  546,  552,  552,  556,
      556,  561,  561,  565,  565,  570,  570,  573,  573,  577,
      577,  581,  581,  586,  586,  589,  589,  593,  593,  593,
      593,  593,  593,  593,  593,  595,  595,  595,  596,  596,
      596,  596,  597,  598,  598,  598,  599,  599,  599,  599,
      599,  599,  600,  601,  601,  601,  601,  602,  602,  602,
      603,  603,  603,  603,  604,  604,  604,  605,  605,  605,

      605,  606,  607,  607,  607,  608,  608,  608,  608,  613,
      613,  616,  616,  620,  620,  620,  624,  624,  626,  626,
      627,  629,  632,  632,  635,  635,  635,  635,  635,  637,
      637,  637,  637,  637,  639,  639,  639,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  641,
      642,  642,  642,  642,  642,  642,  643,  644,  645,  645,
      649,  649,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  656,  656,  656,  656,  657,  657,  657,  657,
      657,  657,  657,  657,  658,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  660,  660,  661,  661,

      661,  661,  661,  662,  662,  663,  663,  663,  664,  665,
      666,  667,  668,  668,  668,  668,  668,  669,  670,  670,
      670,  670,  671,  672,  672,  673,  673,  673,  673,  673,
      673,  673,  674,  674,  675,  675,  675,  676,  676,  676,
      676,  676,  676,  677,  678,  678,  678,  678,  678,  679,
      679,  680,  680,  681,  682,  683,  684,  684
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,    1,   15,   16,    1,    1,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       33,   40,   41,   42,   43,   44,   45,   46,   47,   33,
       48,    1,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   33,   61,   62,   63,   64,
       65,   66,   33,   67,   68,   69,   70,   71,   72,   73,
       74,   33,    1,   75,    1,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    3,    4,
        1,    1,    1,    1,    1,    1,    5,    5,    6,    1,
        1,    7,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    8,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1598] =
    {   0,
        0,   75,  150,  225,  298, 3572,   21,   23,   22,   24,
       26,   96,   52,   53,   54,  127, 3561, 3541, 3529,  368,
       37,  254, 3528,  257, 3517,   41, 3497, 3478, 3496, 3495,
     3465, 6301, 6301,   50, 6301,   13, 3432, 6301, 6301,   44,
      155,   84,  157,  231,   85,  244,  299,  232,  234,  245,
       87,  276,  350,  248,  158, 6301, 6301, 6301, 6301, 6301,
     6301, 6301, 6301, 6301, 6301, 6301, 6301, 6301, 6301, 6301,
     6301, 3433, 6301,  102,  106,  424,  111,  128,  180,  499,
      393,  573, 6301,  189, 6301,  250,  385,  289,  355, 3384,
     6301, 6301, 3396, 6301, 6301,  201, 3394,    0, 6301, 6301,

     6301,  123,  119, 3352,    0, 3361,    0,  202,  279,  380,
      355,  392,  430,  431,  432,  246,  509,  504,  515,  262,
      433, 3350,  247,  439,  273,  159,  460,  519,  437,  511,
      323,  434, 3334,  514,  438,  508, 3335, 6301,  210,   27,
      397,  482,  534,  108,  403,  473,  584,  202,  647,  407,
      585,  596,  722,  461, 3327,  612,  624,  600,  669, 3315,
      540,  673,  614,  797,  711,  679,  818,  822,  688,  826,
      375,  564,  690,  570,  683,  822, 3283,  833,  714,  724,
      758,  577,  836,  700,  400, 3296,  639,    0, 6301,  772,
      841,  731,  736,  844,  577,  573,  825,  834,  843,  852,

      740,  735,  803,  739,  899,  855,  880,  744,  879,  512,
      872,  881,  900,  637,  920,  893,  885,  832,  894,  917,
      939,  929,  942, 3263,  923,  705,  702,  978,  300,  772,
      982,  774, 3200,  993,  852, 1005, 3157,  780, 1009,  966,
     3139,  697,   55, 1018, 3142, 3143,  989, 1014, 1023, 1033,
     1054, 1058, 1108, 1055, 1067, 1069,  409, 1063, 1082, 1085,
     1094, 3133, 1090, 1130, 3102, 1027, 1091, 1134, 6301, 1139,
     1142, 1157, 3088, 1136, 1161, 1145, 3086, 1165, 1174, 1183,
     3083, 3039, 1170, 6301, 1187, 1196, 3007, 1199,  546, 1171,
     1208, 1218, 1239, 1240, 1243, 1249, 1253, 1267, 1252, 1271,

     1275, 1285, 1293,  503, 1219,  654, 6301,  946,  649, 1287,
     1314, 1302,  629,  987, 1085, 6301, 6301, 1242, 1048, 1303,
     1135, 1246, 1295, 1184, 1264, 1301, 1321, 1175,  849, 1233,
     1304, 1307, 1292, 1337, 1329, 1319, 1345, 1327, 1339, 1351,
     1343, 1353, 1360, 1352, 1356, 1377, 1364, 1381, 2987, 1383,
     1372, 1387, 1366, 1392, 1411, 1412, 1401, 1402, 2953, 2941,
     1416, 1415, 1427, 1420, 1425, 2929, 1448, 1421, 1463, 1469,
     1484, 1472, 1489, 1492, 1501, 1497, 1510, 1506, 2936, 1212,
     1519, 2907, 1507, 1523, 6301, 1526, 2906, 6301, 1535, 2888,
     2876, 1539, 6301, 2873, 6301, 1541, 1544, 1553, 1549, 1558,

     1561, 1570, 1566, 1579, 1589, 1610, 1614, 1664, 1618, 1567,
     1630, 1626, 1639, 1575, 1643, 1576, 1648, 1652, 1685, 2858,
     1687, 1689, 1698, 2844, 1695, 1713, 2843, 1701, 6301, 1717,
     1726, 2832, 1546, 6301, 6301, 1722, 6301, 2823, 1738, 2797,
     1741, 1735, 1750, 1746, 1755, 1759, 1768, 2786, 6301, 1764,
     6301, 1772, 1773, 1782, 1778, 2734, 1787, 1790, 1799, 2725,
     1795, 1808, 1818, 1839, 1840,  764, 1796, 1849, 1852, 1853,
     1867, 1868, 1871, 1877, 1880, 1881, 1897, 1891, 1900, 1421,
     1441, 1570, 1674, 1045, 1680, 1902, 1913, 1920, 1930, 6301,
     1929, 1944, 1514, 1911, 1828, 1677, 1923, 1870, 1941, 1939,

     1952, 1949, 1775, 1954, 1550, 1690, 1963, 1957, 1876, 1951,
     1967, 1777, 1933, 1934, 1971, 2699, 1973, 1979, 1972, 2682,
     1976, 1983, 1985, 1995, 1981, 2002, 2001, 2009, 2667, 2013,
     2003, 2014, 2022, 2028, 2032, 2020, 2036, 2033, 2047, 2039,
     2049, 2040, 2060, 2050, 6301, 2054, 2656, 1909, 2071, 1812,
     2073, 1657,  641, 2098, 2662, 2114, 2619, 2094, 2102, 2121,
     2108, 6301, 2125, 6301, 2127, 2075, 2131, 2111, 2136, 1013,
     2139, 2599, 2143, 2596, 2147, 2150, 2153, 2156, 2159, 2173,
     2176, 2160, 2179, 2193, 1148, 2197, 2559, 2201, 2180, 2205,
     1167, 2208, 2554, 2212, 2539, 2216, 2219, 2223, 2518, 2226,

     6301, 2229, 2515, 6301, 2232, 2483, 2236, 6301, 1459, 2427,
     2239, 2411, 2243, 2246, 2250, 2253, 2182, 2181, 2257, 2260,
     2262, 1562, 2269, 2374, 2273, 2368, 2265, 6301, 2277, 2354,
     6301, 2280, 2350, 2285, 2306, 2307, 2310, 2319, 2315, 2309,
     2324, 1622, 2327, 2310, 2311, 2335, 2338, 1491, 2339, 2342,
     2347, 2348, 2351, 2359, 2360, 2363, 2369, 2375, 2378, 2379,
     1832, 6301, 6301, 2033, 1587, 2339, 2390, 2394, 2398, 2404,
     2409, 2405, 1844,  463, 2367, 2284, 2399, 2418, 2391, 2357,
     2415, 2419, 2408, 2371, 2409, 2435, 2415, 2381, 2436, 2426,
     2443, 2441, 2283, 2449, 2447, 2455, 2453, 2467, 2437, 2471,

     2463, 2459, 2474, 2475, 2479, 2477, 2482, 2495, 2496, 2169,
     2489, 2152, 2505, 2497, 2507, 2515, 2527, 2522, 2524, 2520,
     2528, 2529, 2530, 2534, 2149, 2564, 2569, 2586, 2572, 2602,
     2604, 2613, 2575, 2591, 2617, 2626, 2622, 2630, 2631, 2640,
     2636, 2645, 2648, 2657, 2653, 2654, 2666, 2669, 2678, 2680,
     2689, 2692, 2693, 2697, 2706, 2709, 2718, 2703, 2714, 2723,
     2726, 2735, 2731, 2732, 2744, 2740, 2749, 2753, 2758, 2762,
     6301, 2764, 2767, 2768, 2777, 2781, 2790, 2793, 2787, 2802,
     2798, 2807, 2810, 2819, 2815, 2816, 2828, 2831, 2840, 6301,
     2850, 2871, 2872, 2836, 2881, 2837, 2885, 2887, 2900, 2903,

     2904, 2913, 6301, 2126, 6301, 2916, 2103, 2919, 2924, 2928,
     2925, 2084, 2937, 2939, 2948, 2086, 2933, 2951, 2952, 2960,
     2961, 2964, 2970, 2974, 2973, 2544, 6301, 2531, 2573, 2771,
     2983, 2986, 2609, 2992, 2996, 6301, 2025, 2650, 6301, 2926,
     2940, 2962, 2967, 2659, 2980, 2757, 1992, 1925, 2826, 2670,
     2634, 2760, 2983, 2973, 2984, 1922, 3011, 2986, 2995, 3003,
     2877, 1901, 3010, 2991, 3022, 3013, 3028, 3033, 3039, 3042,
     3036, 3038, 1889, 1860, 3050, 3040, 1856, 1845, 3060, 1761,
     3051, 3052, 3062, 3068, 1760, 3046, 1728, 3061, 3063, 3064,
     3079, 3113, 3099, 3126, 3112, 3138, 3140, 3149, 1728, 3117,

     3153, 3157, 3162, 6301, 3166, 3175, 3171, 3184, 3180, 3188,
     3189, 3198, 3194, 3203, 3206, 3215, 1705, 3211, 3224, 3212,
     3228, 6301, 3233, 3237, 3242, 3246, 3251, 3254, 2162, 3262,
     3259, 3271, 3274, 3283, 3286, 3260, 3295, 3298, 3268, 3307,
     3280, 3311, 3313, 3322, 1688, 3292, 3326, 3330, 3331, 3340,
     3344, 3348, 3353, 3349, 3358, 6301, 3362, 3371, 3375, 3380,
     3384, 3389, 3393, 3395, 3398, 3407, 3403, 3412, 3416, 3421,
     3425, 3429, 3430, 3439, 3435, 3444, 3447, 3456, 1668, 3452,
     3465, 3453, 3469, 6301, 3474, 3478, 3483, 3487, 3492, 3502,
     3523, 3524, 3527, 3536, 3532, 3545, 3551, 3555, 1658, 3533,

     3564, 3560, 3569, 6301, 3578, 3581, 3590, 3593, 3596, 3599,
     3608, 3604, 3613, 3616, 3625, 1617, 3621, 3634, 3622, 3638,
     6301, 3643, 1583, 3647, 6301, 3651, 3655, 3659, 3663, 3667,
     3671, 3675, 3055, 2852, 3065, 3680, 3684, 3685, 6301, 3690,
     3689, 3676, 3615, 3678, 3249, 3682, 3193, 3696, 1534, 1516,
     3104, 6301, 3434, 3526, 3690, 3700, 3698, 3679, 3106, 3702,
     3703, 3726, 3724, 3731, 3648, 3705, 3730, 3728, 3736, 3732,
     1515, 1500, 3733, 3745, 3747, 3752, 3750, 3755, 3239, 3749,
     3765, 3753, 3820, 1479, 3797, 6301, 3824, 1473, 3829, 6301,
     3833, 1456, 3838, 6301, 3842, 1447, 3847, 6301, 3680, 1428,

     3851, 3793, 3860, 1411, 3770, 3864, 3868, 3872, 3876, 3810,
     3873, 1400, 3882, 3886, 1392, 3890, 3899, 3903, 1345, 3908,
     6301, 3912, 1328, 3921, 1325, 3917, 6301, 3926, 6301, 3930,
     1295, 3935, 6301, 3939, 1292, 3944, 6301, 3948, 1242, 3953,
     6301, 3957, 1212, 3962, 6301, 3966, 1200, 3971, 6301, 3975,
     1190, 3980, 6301, 3984, 1187, 3989, 6301, 3992, 3993, 4001,
     4002, 4005, 4014, 3166, 4016, 3167, 4019, 6301, 4024, 4027,
     3990, 1163, 1098, 3757, 3994, 1086, 3995, 3397, 4013, 4020,
     4014, 1072, 1057, 4018, 4028, 4037, 1056, 4039, 4043, 1023,
     4030, 4024, 4052, 1013, 4031, 4056,  982, 4059, 4062, 4044,

      958,  945, 4063, 4071,  910, 4074, 4093, 4104, 6301, 4129,
      905, 4102, 6301, 4132, 4141,  838, 4107,  831,  830,  827,
      784, 6301, 4145,  781, 4149, 4119, 4153, 3262, 4158,  774,
      734, 3307, 4163, 4164, 4119, 4134,  692, 3837, 3548, 4150,
     4154, 4158, 4153, 4155, 4161, 4162, 4174, 4164,  617,  604,
     4163, 4160, 4167, 4182, 4189,  588,  572,  552, 4203, 6301,
     4230, 6301, 4232, 4236, 4240, 3532,  559, 4245,  540, 4253,
     4156, 4256,    0,    0, 4225,  542, 4240, 4215, 4242, 4246,
     4244, 4249, 4245,  510,  507, 4252, 4259, 4264, 4253, 4267,
     4269, 4251, 4288,  469, 4326, 6301, 4331, 6301,  440,  412,

      390, 4270,  364, 4234,  325, 4276, 4282,  275,  271,  265,
      236,  230, 4285, 4287, 4288, 4297, 4279, 4280, 4353, 4358,
     4307, 6301,  199, 4325,  185, 4328, 4331, 4319,  171,  163,
     4370, 6301, 4378, 6301, 4351, 4348,  129, 4349, 4359, 4345,
     4346, 4367,  126,  109, 4369, 4358, 4362, 4381,   91, 4035,
     6301, 4080, 6301,    9, 6301, 6301, 6301, 4437, 4445, 4453,
     4461, 4469, 4477, 4485, 4493, 4501, 4509, 4517, 4525, 4533,
     4537, 4541, 4547, 4555, 4563, 4571, 4579, 4587, 4595, 4603,
     4611, 4617, 4620, 4625, 4633, 4641, 4649, 4657, 4665, 4673,
     4681, 4689, 4697, 4705, 4713, 4721, 4729, 4737, 4745, 4753,

     4761, 4769, 4777, 4785, 4793, 4801, 4809, 4817, 4825, 4833,
     4841, 4849, 4857, 4865, 4873, 4881, 4889, 4897, 4905, 4913,
     4921, 4929, 4937, 4945, 4953, 4961, 4969, 4973, 4979, 4987,
     4995, 5003, 5011, 5019, 5027, 5035, 5043, 5051, 5059, 5067,
     5075, 5083, 5091, 5099, 5107, 5115, 5123, 5131, 5139, 5147,
     5155, 5163, 5171, 5179, 5187, 5195, 5203, 5211, 5215, 5221,
     5229, 5237, 5245, 5253, 5261, 5269, 5277, 5285, 5293, 5301,
     5309, 5317, 5325, 5333, 5341, 5349, 5357, 5365, 5373, 5381,
     5389, 5397, 5405, 5413, 5421, 5429, 5437, 5445, 5453, 5461,
     5464, 5470, 5478, 5486, 5494, 5502, 5510, 5518, 5526, 5534,

     5542, 5550, 5558, 5566, 5574, 5582, 5590, 5598, 5606, 5614,
     5622, 5630, 5638, 5646, 5654, 5662, 5670, 5678, 5686, 5694,
     5702, 5710, 5718, 5726, 5734, 5738, 5744, 5752, 5760, 5768,
     5776, 5784, 5792, 5800, 5808, 5816, 5824, 5832, 5840, 5848,
     5856, 5864, 5872, 5880, 5888, 5896, 5904, 5912, 5920, 5928,
     5936, 5944, 5952, 5960, 5968, 5976, 5984, 5992, 6000, 6008,
     6016, 6024, 6032, 6036, 6042, 6050, 6058, 6066, 6074, 6082,
     6090, 6098, 6106, 6114, 6122, 6130, 6138, 6146, 6154, 6162,
     6170, 6178, 6186, 6194, 6202, 6210, 6218, 6226, 6234, 6242,
     6250, 6258, 6262, 6268, 6276, 6284, 6292

    } ;

static const flex_int16_t yy_def[1598] =
    {   0,
     1358, 1358, 1359, 1359,    2,    5, 1360, 1360, 1361, 1361,
     1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363, 1364, 1365,
     1366, 1366, 1367, 1367, 1368, 1368, 1369, 1369, 1370, 1370,
     1357, 1357, 1357, 1357, 1357, 1357, 1371, 1357, 1357, 1372,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1373, 1357, 1374, 1375, 1376, 1377, 1378, 1379, 1376,
     1374, 1378, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1380, 1357, 1357,

     1357, 1357, 1357, 1371, 1381, 1382, 1383, 1372, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1373, 1357, 1384, 1385,
     1386, 1387, 1375, 1385, 1388, 1389, 1390, 1385, 1391, 1392,
     1393, 1394, 1391, 1392, 1395, 1396, 1397, 1398, 1398, 1399,
     1400, 1398, 1401, 1402, 1390, 1390, 1390, 1390, 1390, 1390,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1403, 1357, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1357, 1371,

     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1404, 1405, 1406, 1385, 1407,
     1399, 1405, 1395, 1408, 1406, 1406, 1399, 1408, 1406, 1388,
     1395, 1409, 1389, 1389, 1399, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1413, 1411, 1416, 1414, 1385, 1417, 1418, 1415,
     1415, 1399, 1419, 1415, 1395, 1357, 1416, 1416, 1357, 1416,
     1412, 1412, 1399, 1416, 1412, 1420, 1399, 1421, 1420, 1420,
     1399, 1422, 1421, 1357, 1421, 1420, 1399, 1423, 1385, 1424,
     1425, 1426, 1427, 1410, 1410, 1410, 1410, 1410, 1410, 1410,

     1410, 1410, 1410, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1357, 1357,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1429, 1430,
     1431, 1430, 1432, 1431, 1431, 1432, 1431, 1433, 1395, 1422,
     1399, 1399, 1432, 1432, 1357, 1432, 1399, 1357, 1431, 1399,
     1434, 1434, 1357, 1399, 1357, 1435, 1436, 1437, 1436, 1438,

     1437, 1437, 1438, 1437, 1439, 1440, 1441, 1439, 1440, 1442,
     1443, 1441, 1441, 1444, 1441, 1438, 1438, 1438, 1442, 1395,
     1445, 1443, 1443, 1399, 1445, 1443, 1399, 1444, 1357, 1444,
     1441, 1399, 1357, 1357, 1357, 1438, 1357, 1399, 1437, 1399,
     1446, 1447, 1446, 1447, 1447, 1446, 1446, 1422, 1357, 1447,
     1357, 1448, 1449, 1450, 1449, 1395, 1451, 1450, 1450, 1399,
     1451, 1450, 1452, 1453, 1453, 1454, 1455, 1456, 1457, 1457,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1459, 1459, 1459, 1459, 1459, 1459, 1459,

     1459, 1459, 1459, 1459, 1357, 1357, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1357, 1459, 1459, 1460, 1461, 1462,
     1461, 1463, 1462, 1462, 1463, 1462, 1463, 1463, 1463, 1462,
     1422, 1357, 1463, 1357, 1464, 1465, 1466, 1465, 1467, 1466,
     1466, 1467, 1466, 1467, 1467, 1467, 1466, 1464, 1468, 1469,
     1464, 1468, 1470, 1471, 1469, 1469, 1472, 1469, 1470, 1473,
     1471, 1471, 1473, 1471, 1472, 1472, 1469, 1467, 1473, 1473,

     1357, 1473, 1399, 1357, 1471, 1399, 1472, 1357, 1474, 1475,
     1474, 1475, 1475, 1474, 1475, 1474, 1476, 1477, 1478, 1477,
     1479, 1478, 1478, 1479, 1478, 1479, 1479, 1357, 1479, 1399,
     1357, 1478, 1399, 1480, 1481, 1481, 1482, 1483, 1482, 1484,
     1485, 1483, 1483, 1399, 1485, 1483, 1486, 1487, 1488, 1489,
     1464, 1486, 1486, 1464, 1464, 1464, 1464, 1464, 1464, 1486,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1490, 1357, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1357, 1357, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,

     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1492, 1493, 1494, 1493, 1495,
     1494, 1494, 1495, 1495, 1495, 1494, 1495, 1496, 1497, 1498,
     1497, 1499, 1498, 1498, 1499, 1499, 1499, 1498, 1499, 1500,
     1501, 1500, 1502, 1503, 1504, 1505, 1505, 1506, 1503, 1507,
     1504, 1504, 1507, 1506, 1505, 1507, 1507, 1504, 1506, 1507,
     1357, 1508, 1509, 1509, 1508, 1509, 1508, 1510, 1511, 1512,
     1511, 1513, 1512, 1512, 1513, 1513, 1513, 1512, 1513, 1357,
     1514, 1515, 1515, 1516, 1517, 1516, 1518, 1517, 1517, 1518,

     1518, 1518, 1357, 1519, 1357, 1517, 1519, 1520, 1521, 1522,
     1521, 1523, 1524, 1522, 1522, 1519, 1524, 1525, 1525, 1520,
     1525, 1525, 1525, 1525, 1525, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1357, 1357, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1527, 1528, 1529, 1528, 1530, 1529, 1529, 1519, 1530,

     1529, 1530, 1530, 1357, 1530, 1529, 1530, 1529, 1530, 1525,
     1531, 1532, 1531, 1533, 1532, 1532, 1519, 1533, 1532, 1533,
     1533, 1357, 1533, 1532, 1533, 1532, 1533, 1534, 1535, 1534,
     1536, 1537, 1538, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
     1543, 1545, 1544, 1544, 1519, 1545, 1544, 1546, 1547, 1546,
     1546, 1547, 1547, 1545, 1545, 1357, 1545, 1544, 1546, 1545,
     1544, 1547, 1545, 1548, 1549, 1548, 1549, 1549, 1548, 1549,
     1548, 1550, 1551, 1552, 1551, 1553, 1552, 1552, 1519, 1553,
     1552, 1553, 1553, 1357, 1553, 1552, 1553, 1552, 1553, 1554,
     1555, 1555, 1556, 1557, 1556, 1558, 1557, 1557, 1519, 1558,

     1557, 1558, 1558, 1357, 1558, 1557, 1558, 1557, 1559, 1560,
     1561, 1560, 1562, 1561, 1561, 1519, 1562, 1561, 1562, 1562,
     1357, 1562, 1519, 1561, 1357, 1563, 1563, 1559, 1563, 1563,
     1563, 1563, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1357, 1357, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1565, 1519, 1566, 1357, 1565, 1519, 1566, 1357,
     1567, 1519, 1568, 1357, 1567, 1519, 1568, 1357, 1569, 1570,

     1571, 1572, 1572, 1519, 1573, 1572, 1574, 1574, 1574, 1575,
     1576, 1577, 1578, 1578, 1519, 1571, 1578, 1579, 1519, 1580,
     1357, 1579, 1519, 1581, 1519, 1582, 1357, 1580, 1357, 1583,
     1519, 1584, 1357, 1585, 1519, 1586, 1357, 1585, 1519, 1586,
     1357, 1587, 1519, 1588, 1357, 1587, 1519, 1588, 1357, 1589,
     1519, 1590, 1357, 1589, 1519, 1590, 1357, 1591, 1591, 1592,
     1591, 1592, 1592, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1357, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,

     1593, 1593, 1593, 1593, 1593, 1593, 1571, 1571, 1357, 1571,
     1519, 1573, 1357, 1573, 1572, 1519, 1575, 1577, 1577, 1577,
     1519, 1357, 1578, 1519, 1591, 1591, 1591, 1357, 1357, 1594,
     1595, 1357, 1357, 1357, 1593, 1593, 1593, 1593, 1357, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1571, 1357,
     1573, 1357, 1592, 1591, 1592, 1357, 1594, 1594, 1595, 1595,
     1357, 1357, 1596, 1597, 1593, 1593, 1593, 1357, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1592, 1357, 1594, 1357, 1595, 1357, 1357, 1596,

     1597, 1593, 1593, 1357, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1357, 1357, 1596, 1597,
     1593, 1357, 1593, 1593, 1593, 1593, 1593, 1593, 1357, 1357,
     1596, 1357, 1597, 1357, 1593, 1593, 1593, 1593, 1593, 1357,
     1357, 1593, 1593, 1593, 1593, 1357, 1357, 1593, 1593, 1357,
     1357, 1357, 1357, 1593, 1357, 1357,    0, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,

     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,

     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357

    } ;

static const flex_int16_t yy_nxt[6377] =
    {   0,
       32,   32,   33,   34,   32,   32,   32,   32,   32,   32,
       32,   35,   32,   32,   32,   32,   36,   36,   32,   32,
       32,   32,   32,   57,   61,   57,   61,  105,   65,  103,
      103,  230,   58,   59,   58,   59,  231,   66,   84,   85,
       84,   86,   96,   95,   96,   97,   67,   38,   32,   32,
       32,  106,  107,  101,   65,   65,   65,  394,   69,  246,
       69,   69,  105,   66,   66,   66,  102,  102,   69,   62,
       63,   62,   63,   68,   32,   32,   32,   39,   34,   32,
       32,   32,   32,   32,   32,   32,   35,   32,   32,   32,
       32,   36,   36,   32,   32,   32,   32,   32,   65,   68,

       68,   68,  105,  105,  140,  105,  141,   66,  144,  105,
      145,  142,  230,  155,  129,  146,   67,  231,  111,  118,
      156,  119,   38,   32,   32,   32,  101,  105,   69,   65,
      148,   69,  150,   69,   69,  103,  103,  157,   66,  102,
      102,   69,  129,   68,  105,  111,  118,  105,  119,   32,
       32,   32,   33,   34,   32,   32,   32,   32,   32,   32,
       32,   35,   32,   32,   32,   32,   36,   36,   32,   32,
       32,   32,   32,  105,   68,  105,  105,  105, 1341,  109,
      112,  159,  160,  159,  161,  214, 1340,  113,  136,  162,
      171,  114,  171,  172,  115,  110,  116,   38,   32,   32,

       32,   69,  185,  105,  185,  186,  230,  109,  112,  106,
      107,  231,  140,  214,  227,  113,  136,  105,  114,  228,
      105,  115,  110,  116,   32,   32,   32,   39,   34,   32,
       32,   32,   32,   32,   32,   32,   35,   32,   32,   32,
       32,   36,   36,   32,   32,   32,   32,   32,  105,  105,
      105,  173,  105,  173,  105,   87,   85,   87,   86,   92,
       88,   93,  105,  105,  105,  105,  105,   89,  117,  125,
       93,  126,   38,   32,   32,   32,   90,  198,  174,   89,
      105,  120,   93,  105,  127,  210,  121,  128,  135,  105,
      178,  105,  178,  105,  105,  117,  125,  105,  126,   32,

       33,  208,  213,  130,  230,  198,  174,   89,  120,  231,
       93,  127,  210,  121,  128,  135,  179,  105,  131,  190,
      180,   41,   42,   43,   44,   45,   46,  122,  208,   47,
      213,  130,   48,   49,  123,  124,   50,   51,   52,   53,
       54,  105,   55,  105,  179,  131,  190,  221,  180,   41,
       42,   43,   44,   45,   46,  122,  181,   47,  181,   48,
       49,  123,  124,   50,   51,   52,   53,   54,  105,   55,
       75,   76,   77,  105,   78,  221,  171,   79,  171,  172,
      132,   78,  105,  182,   80,   80,  175,  133,  175,  172,
       81,  176,  192,   82,   78,  140,  134,  141,  105,  233,

     1320,  185,  142,  185,  186,  241,  234,  177,  132,  155,
      105,  182,  242,  230,  133,  163,  255, 1319,  231,  192,
      191,   82,   78,  134,  147,  147,  148,  149,  150,  147,
      147,  147,  193,  152,  147,  147,  147,  147,  147,  147,
      153,  153,  147,  147,  147,  147,  147,  191,  105,  105,
      105,  105,  105,  194,  195,  105,  105,  105, 1318,  193,
      217,  222,  218,  155,  211,  224,  839,  196,  197,  209,
      255,  147,  147,  147,  244,  245,  244,  246,  105,  839,
      212,  194,  195,  236,  237,  236,  238, 1317,  217,  222,
      218,  239,  211,  224,  196,  197,  209,  215,  147,  147,

      147,  148,  153,  150,  147,  147,  147,  212,  157,  147,
      147,  147,  147,  147,  147,  153,  153,  147,  147,  147,
      147,  147,  105,  199,  215,  105,  105,  105,  105,  105,
      105,  203,  105,  105,  200,  225,  144,  105,  145,  480,
      219,  205,  284,  146,  204,  220,  147,  147,  147,  285,
      230,  201,  223,  202,  352,  231,  206,  207,  216,  203,
      105, 1270,  200,  225, 1268,  173,  480,  173,  219,  205,
      105,  204,  220,  147,  164,  148,  164,  150,  201,  223,
      202,  352,  157,  206,  207,  216,  148,  257,  248,  258,
      105,  105,  174,  249,  259,  105,  165,  261,  262,  261,

      263,  304,  277,  166,  278,  264,  105,  167,  309,  279,
      168,  326,  169,  268,  269,  268,  289,  325,  290,  170,
      174,  270,  105,  291,  165,  272,  273,  272,  274,  304,
      313,  166,  313,  275,  167,  105,  309,  168,  326,  169,
      316,  317,  316,  387,  325,  733,  170,  247,  247,  148,
      250,  248,  247,  247,  247,  105,  252,  247,  247,  247,
      247,  247,  247,  253,  253,  247,  247,  247,  247,  247,
      280,  160,  280,  278,  286,  287,  286,  278,  279,  356,
      483,  148,  279,  248,  175,  485,  175,  172,  249,  176,
      148,  173,  248,  173,  247,  247,  247,  249,  392,  393,

      392,  313,  296,  314,  233,  177,  356,  140,  483,  370,
      105,  373,  485,  148,  371,  248,  315,  315,  174,  302,
      249,  247,  247,  247,  148,  253,  248,  247,  247,  247,
      296,  249,  247,  247,  247,  247,  247,  247,  253,  253,
      247,  247,  247,  247,  247,  294,  174,  302,  305,  105,
      306,  295,  307,  105,  105, 1270,  321,  105,  105,  181,
      308,  181,  105,  322,  332,  333,  335,  350,  230,  247,
      247,  247,  294,  231,  379,  305,  233,  306,  295, 1268,
      307,  380,  388,  373,  321,  282,  182,  308,  282,  386,
      105,  322,  332,  333,  335,  350,  247,  247,  292,  148,

      292,  248,  247,  247,  247,  247,  249,  247,  247,  247,
      247,  247,  247,  318,  182,  247,  247,  247,  247,  247,
      148,  105,  248,  178,  148,  178,  248,  249,  148, 1220,
      248,  249, 1220, 1220,  178,  249,  178,  310,  334,  310,
      318,  297,  282,  105,  247,  247,  247,  247,  299,  179,
      105,  303,  105,  180,  387,  298,  376,  300,  301,  105,
      179,  377,  105,  311,  180,  334,  327,  312,  329,  297,
      105,  247,  319,  105,  361,  328,  299,  179,  320,  303,
      323,  180,  298,  324,  300,  301,  505,  330,  179,  331,
      105,  311,  180,  327,  348,  312,  329,  105,  105,  105,

      319,  361,  328,  105,  351,  320,  353,  323,  354,  282,
      324,  105,  105,  505,  330,  349,  331,  105,  105,  360,
      359,  348,  336,  337,  338,  339,  340,  341,  105,  362,
      342,  355,  351,  353,  343,  105,  354,  344,  105,  345,
      346,  105,  349,  347,  363,  357,  360,  105,  359,  358,
      336,  337,  338,  339,  340,  341,  362,  105,  342,  355,
      105,  343,  368,  105,  344,  366,  345,  346,  241,  367,
      347,  484,  363,  357,  364,  242,  105,  358,  365,  375,
      237,  375,  376,  381,  382,  381,  282,  377,  313,  368,
      492,  148,  366,  397,  384,  385,  384,  367,  398,  484,

      105,  364,  386,  493,  493,  365,  375,  237,  375,  376,
      389,  390,  389,  376,  377,  438,  155,  745,  377,  244,
      245,  244,  246,  400,  402,  273,  402,  403,  433,  434,
      433,  105,  404,  396,  396,  148,  405,  397,  396,  396,
      396,  105,  407,  396,  396,  396,  396,  396,  396,  408,
      408,  396,  396,  396,  396,  396,  257,  155,  410,  413,
      262,  413,  414,  411,  400,  420,  105,  415,  417,  269,
      417,  257,  421,  410,  105,  105,  418,  495,  411,  665,
      396,  396,  396,  423,  424,  423,  425,  427,  493,  414,
      105,  426,  429,  435,  415,  413,  262,  413,  414,  430,

      418,  493,  493,  415,  105,  495,  665,  396,  396,  396,
      148,  408,  397,  396,  396,  396,  105,  398,  396,  396,
      396,  396,  396,  396,  408,  408,  396,  396,  396,  396,
      396,  431,  432,  431,  414,  417,  269,  417,  435,  415,
      436,  437,  436,  418,  438,  418,  403,  277,  418,  442,
      427,  404,  758,  105,  443,  396,  396,  396,  402,  273,
      402,  403,  439,  440,  439,  403,  404,  284,  497,  603,
      404,  763,  284,  456,  445,  446,  287,  446,  442,  445,
      457,  105,  396,  443,  447,  160,  447,  442,  450,  451,
      450,  282,  443,  105,  282,  497,  445,  446,  287,  446,

      442,  289,  105,  453,  282,  443,  504,  500,  454,  459,
      460,  459,  461,  561,  562,  561,  282,  462,  396,  463,
      148,  463,  397,  396,  396,  396,  396,  398,  396,  396,
      396,  396,  396,  396,  504,  500,  396,  396,  396,  396,
      396,  466,  148,  467,  397,  148,  282,  397,  468,  398,
      481,  148,  398,  397,  148,  148,  397,  397,  398,  482,
      105,  398,  398,  506,  105,  396,  396,  396,  396,  148,
      470,  397,  498,  148,  469,  397,  398,  148,  481,  397,
      398,  494,  105,  474,  398,  471,  482,  148,  310,  397,
      310,  506,  396,  472,  398,  148,  282,  397,  470,  282,

      498,  469,  398,  489,  501,  489,  475,  473,  494,  476,
      105,  474,  471,  105,  311,  486,  477,  486,  312,  105,
      472,  105,  105,  509,  499,  105,  478,  479,  496,  282,
      490,  501,  282,  475,  473,  502,  476,  105,  491,  105,
      507,  508,  311,  477,  503,  105,  312,  105,  487,  282,
      488,  509,  499,  478,  479,  105,  496,  105,  490,  513,
      511,  105,  502,  105,  510,  491,  515,  507,  508,  105,
      105,  105,  503,  512,  105,  487,  516,  488,  105,  514,
      518,  520,  105,  524,  105,  519,  513,  517,  511,  521,
      105,  523,  510,  515,  528,  105,  282,  522,  525,  105,

      512,  105, 1220,  516,  526,  105,  514,  518,  533,  520,
      105,  524,  519,  531,  517,  282,  521,  530,  523,  105,
      105,  534,  528,  527,  522,  525,  532,  529,  538,  105,
      105,  535,  526,  105,  105,  533,  536,  266,  105,  105,
      531,  539,  541,  105,  530,  105,  537,  661,  547,  534,
      527,  282,  542,  532,  529,  540,  538,  543,  535,  545,
      282,  277,  544,  773,  536,  140,  105,  549,  539,  662,
      541,  233,  550,  537,  233,  661,  547,  282,  552,  546,
      542,  552,  540,  282,  543,  554,  237,  554,  555,  544,
      558,  385,  558,  556,  387,  230,  555,  662,  559,  388,

      231,  556,  554,  237,  554,  555,  559,  546,  379,  388,
      556,  560,  390,  560,  555,  380,  559,  674,  105,  556,
      381,  382,  381,  282,  558,  385,  558,  563,  564,  563,
      674,  674,  559,  105,  105,  559,  560,  390,  560,  555,
      392,  393,  392,  148,  556,  566,  155,  433,  434,  433,
      567,  155,  105,  569,  571,  273,  571,  572,  569,  575,
      269,  575,  573,  438,  630,  572,  785,  576,  435,  420,
      573,  571,  273,  571,  572,  576,  590,  429,  435,  573,
      577,  440,  577,  572,  596,  576,  687,  282,  573,  565,
      565,  148,  578,  566,  565,  565,  565,  663,  580,  565,

      565,  565,  565,  565,  565,  581,  581,  565,  565,  565,
      565,  565,  257,  687,  583,  586,  262,  586,  587,  584,
      257,  282,  583,  588,  804,  663,  800,  584,  427,  828,
      587,  592,  424,  592,  593,  588,  565,  565,  565,  594,
      586,  262,  586,  587,  597,  432,  597,  587,  588,  575,
      269,  575,  588,  598,  437,  598,  828,  576,  735,  385,
      735,  576,  282,  565,  565,  565,  148,  581,  566,  565,
      565,  565,  282,  567,  565,  565,  565,  565,  565,  565,
      581,  581,  565,  565,  565,  565,  565,  420,  600,  601,
      600,  603,  282,  593,  590,  105,  602,  604,  594,  592,

      424,  592,  593,  429,  602,  664,  666,  594,  677,  282,
      596,  565,  565,  565,  605,  606,  605,  593,  607,  608,
      607,  688,  594,  598,  437,  598,  596,  597,  432,  597,
      587,  576,  282,  664,  666,  588,  677,  284,  565,  577,
      440,  577,  572,  277,  613,  610,  105,  573,  284,  688,
      611,  614,  287,  614,  610,  613,  615,  451,  615,  611,
      614,  287,  614,  610,  613,  615,  451,  615,  611,  616,
      160,  616,  610,  613,  289,  456,  618,  611,  105,  105,
      456,  619,  621,  623,  460,  623,  624,  621,  627,  628,
      627,  625,  630,  105,  624,  105,  629,  631,  640,  625,

      623,  460,  623,  624,  629,  641,  685,  694,  625,  632,
      633,  632,  624,  732,  237,  732,  733,  625,  565,  634,
      148,  634,  566,  565,  565,  565,  565,  567,  565,  565,
      565,  565,  565,  565,  685,  694,  565,  565,  565,  565,
      565,  466,  466,  637,  637,  837,  105,  838,  638,  638,
      643,  644,  643,  645,  648,  648,  649,  649,  646,  826,
      839,  650,  650,  105,  676,  565,  565,  565,  565,  148,
      148,  566,  566,  148,  105,  566,  567,  567,  105,  148,
      567,  566,  148,  148,  566,  566,  567,  826,  105,  567,
      567,  676,  565,  148,  105,  566,  651,  679,  653,  148,

      567,  566,  148,  486,  566,  486,  567,  105,  652,  567,
      691,  140,  654,  727,  667,  656,  667,  655,  728,  105,
      657,  669,  659,  669,  651,  679,  653,  660,  658,  105,
      671,  489,  671,  489,  675,  652,  487,  691,  488,  654,
      105,  105,  656,  105,  655,  313,  670,  673,  657,  678,
      659,  105,  105,  668,  672,  660,  658,  105,  490,  105,
      674,  674,  675,  487,  681,  488,  491,  105,  680,  105,
      105,  696,  105,  695,  670,  105,  684,  678,  682,  686,
      668,  105,  672,  683,  690,  105,  490,  692,  689,  105,
      105,  105,  681,  491,  105,  693,  680,  105,  696,  105,

      695,  105,  697,  105,  684,  706,  682,  686,  700,  702,
      105,  683,  690,  105,  692,  698,  689,  701,  699,  105,
      105,  105,  703,  693,  704,  707,  313,  105,  313,  705,
      697,  105,  105,  706,  711,  700,  709,  702,  105,  708,
      105,  712,  698,  716,  701,  699,  105,  710,  713,  703,
      105,  105,  704,  707,  105,  714,  705,  105,  105,  718,
      715,  827,  711,  717,  709,  105,  708,  105,  105,  712,
      719,  716,  105,  233,  710,  233,  713,  155,  105,  720,
      730,  722,  730,  714,  742,  721,  723,  718,  715,  827,
      282,  717,  724,  266,  725,  735,  385,  735,  719,  732,

      237,  732,  733,  737,  564,  737,  720,  282,  722,  561,
      562,  561,  721,  155,  723,  736,  390,  736,  733,  724,
      742,  725,  736,  390,  736,  733,  737,  564,  737,  148,
      282,  739,  744,  273,  744,  745,  740,  747,  269,  747,
      744,  273,  744,  745,  748,  440,  748,  745,  747,  269,
      747,  749,  437,  749,  748,  440,  748,  745,  148,  750,
      739,  257,  257,  754,  754,  751,  230,  105,  755,  755,
      105,  231,  752,  752,  757,  262,  757,  758,  148,  752,
      739,  420,  420,  456,  289,  740,  779,  105,  760,  760,
      782,  780,  752,  752,  762,  424,  762,  763,  757,  262,

      757,  758,  765,  432,  765,  758,  767,  601,  767,  762,
      424,  762,  763,  768,  606,  768,  763,  769,  608,  769,
      765,  432,  765,  758,  749,  437,  749,  767,  601,  767,
      770,  771,  770,  768,  606,  768,  763,  769,  608,  769,
      775,  287,  775,  773,  776,  451,  776,  775,  287,  775,
      773,  776,  451,  776,  777,  160,  777,  773,  784,  460,
      784,  785,  456,  787,  628,  787,  787,  628,  787,  782,
      784,  460,  784,  785,  788,  633,  788,  785,  789,  790,
      789,  788,  633,  788,  785,  738,  791,  148,  791,  739,
      738,  738,  738,  738,  740,  738,  738,  738,  738,  738,

      738,  105,  105,  738,  738,  738,  738,  738,  466,  466,
      794,  794,  640,  805,  282,  795,  795,  640,  266,  797,
      799,  644,  799,  800,  797,  802,  803,  802,  799,  644,
      799,  800,  738,  738,  738,  738,  806,  807,  806,  800,
      648,  812,  809,  815,  816,  815,  817,  810,  813,  148,
      648,  739,  809,  648,  282,  809,  740,  810,  282,  738,
      810,  148,  148,  739,  739,  148,  829,  739,  740,  740,
      631,  148,  740,  739,  818,  105,  631,  148,  740,  739,
      148,  648,  739,  809,  740,  105,  819,  740,  810,  105,
      821,  667,  840,  667,  829,  830,  820,  830,  844,  669,

      822,  669,  818,  825,  823,  832,  834,  832,  834,  105,
      671,  824,  671,  284,  819,  852,  848,  105,  821,  843,
      840,  831,  841,  820,  670,  844,  105,  105,  822,  284,
      668,  825,  823,  105,  672,  833,  105,  105,  824,  835,
      851,  842,  852,  848,  105,  849,  846,  843,  847,  831,
      841,  854,  670,  105,  105,  105,  845,  668,  850,  105,
      863,  105,  672,  833,  855,  105,  835,  105,  851,  842,
      856,  105,  849,  105,  846,  847,  858,  105,  853,  854,
      860,  105,  857,  845,  859,  105,  850,  282,  863,  105,
      865,  855,  105,  105,  861,  105,  864,  105,  856,  867,

      105,  866,  862,  868,  858,  853,  870,  105,  860,  857,
      869,  859,  871,  105,  105,  105,  872,  873,  865,  282,
      604,  861,  874,  105,  864,  105,  876,  867,  866,  862,
      879,  868,  877,  105,  870,  875,  878,  869,  105,  871,
      105,  429,  105,  872,  873,  105,  105,  105,  105,  880,
      874,  886,  105,  876,  888,  881,  604, 1034,  879,  885,
      877,  429,  875,  878,  884,  882,  140,  883,  893,  887,
      889,  233,  890,  894,  233,  891,  880,  388,  896,  886,
     1033,  896,  888,  881,  905, 1034,  885,  898,  899,  898,
      900,  884,  882,  388,  883,  901,  887,  889,  435,  890,

      905,  435,  891,  903,  904,  903,  387, 1033,  900, 1035,
     1038,  905, 1038,  901,  906,  237,  906,  900,  907,  385,
      907,  388,  901,  909,  564,  909,  905,  908,  390,  908,
      900,  905,  148,  155,  911,  901, 1035, 1039,  155,  912,
      914,  916,  917,  916,  918,  914,  921,  922,  921,  919,
      438,  313,  918,  313,  923,  435,  435,  919,  924,  273,
      924,  918,  923,  923,  388, 1039,  919,  925,  269,  925,
      926,  440,  926,  918,  105,  923, 1051,  105,  919,  927,
      437,  927,  929,  930,  931,  105, 1046,  923,  105,  932,
      934,  935,  934,  936,  929,  257,  931,  939,  919,  420,

      105,  937,  940, 1051, 1050,  429,  942,  944,  945,  944,
      946,  427,  953,  949, 1046,  947,  420,  105,  950,  951,
      262,  951,  949,  942,  955,  956,  955,  950,  603,  282,
      946, 1050,  957,  604,  429,  947,  958,  424,  958,  946,
      957,  953,  604,  266,  947,  959,  432,  959,  949,  957,
      960,  601,  960,  950,  961,  606,  961,  946,  957,  962,
      608,  962,  947,  963,  771,  963,  277,  953,  965,  284,
      284,  957,  830,  966,  830,  105,  968,  968,  969,  287,
      969,  965,  970,  451,  970, 1048,  966, 1052,  449,  456,
      968,  971,  160,  971,  965,  289,  976,  973,  831,  966,

      456,  282,  974,  978,  979,  978,  980,  976,  983,  984,
      983,  981,  630, 1048,  980, 1052,  985,  631,  631,  981,
      986,  460,  986,  980,  985,  985,  831,  282,  981,  987,
      628,  987,  988,  633,  988,  980,  282,  985,  640,  640,
      981,  989,  790,  989,  105,  996,  996,  282,  282,  985,
      910,  990,  148,  990,  911,  910,  910,  910,  910,  912,
      910,  910,  910,  910,  910,  910, 1049,  266,  910,  910,
      910,  910,  910,  466,  466,  993,  993,  282,  395, 1165,
      994,  994,  998,  999,  998, 1000, 1003, 1004, 1003,  804,
     1001, 1000,  282, 1049, 1005,  105, 1001,  910,  910,  910,

      910, 1006,  644, 1006, 1000,  805,  805, 1165, 1060, 1001,
      282,  282, 1005, 1005, 1007,  803, 1007, 1008,  807, 1008,
     1000,  648, 1005, 1010,  910, 1001,  812,  812, 1011, 1015,
     1016, 1015, 1017, 1013, 1013, 1025, 1060, 1018, 1020, 1021,
     1020, 1023, 1022, 1017,  105,  266, 1022,  105, 1018, 1024,
      816, 1024, 1017,  148,  148,  911,  911, 1018,  105,  105,
      912,  912,  648,  148, 1010,  911,  148, 1042,  911, 1011,
      912,  105,  148,  912,  911,  148,  148,  911,  911,  912,
      105, 1043,  912,  912, 1036,  105, 1036,  832, 1027,  832,
     1045,  105, 1026,  834, 1042,  834, 1032, 1040,  105, 1040,

     1029,  105,  105, 1044,  105,  105, 1028, 1047, 1043,  105,
     1054,  282, 1030,  105, 1037, 1027, 1031,  833, 1045, 1026,
     1058,  105, 1053, 1055, 1032, 1057,  835, 1029,  105,  105,
     1044,  105, 1062, 1028, 1056, 1047, 1059, 1054, 1041, 1030,
      105,  449, 1037, 1031, 1061,  833,  105, 1064, 1058, 1053,
     1055,  105, 1057,  835,  105, 1065,  105,  105,  105, 1062,
      105, 1063, 1056, 1059,  105, 1041, 1067, 1068,  105,  105,
      105, 1061, 1066, 1069, 1064, 1070, 1072, 1071,  105,  105,
      105,  105,  105, 1065, 1079, 1073,  105,  282, 1063, 1078,
      282, 1075,  282, 1074, 1067, 1068, 1164,  105, 1081, 1066,

     1069,  233, 1070, 1072, 1076, 1071, 1166, 1077,  896, 1080,
     1082,  266, 1079, 1073,  233,  140, 1078,  893, 1075,  388,
     1074,  896,  894, 1164,  105, 1081,  905, 1083, 1084, 1083,
      900, 1076, 1185, 1166, 1077,  901, 1080,  282, 1082, 1085,
     1086, 1085,  387, 1178,  900,  395,  282,  905,  266,  901,
      898,  899,  898,  900, 1087, 1088, 1087,  900,  901,  388,
     1185,  282,  901,  903,  904,  903,  905, 1089, 1090, 1089,
     1178,  905,  907,  385,  907,  905,  906,  237,  906,  900,
      905,  909,  564,  909,  901,  908,  390,  908,  900,  905,
      148,  155,  911,  901, 1228, 1232,  155,  912,  914, 1091,

     1092, 1091,  918,  914, 1093, 1094, 1093,  919,  438,  266,
      918,  105,  923,  435,  435,  919,  916,  917,  916,  918,
      923,  923, 1228, 1232,  919, 1095, 1096, 1095,  918,  921,
      922,  921, 1176,  919, 1097, 1098, 1097,  923,  924,  273,
      924,  918,  923,  925,  269,  925,  919,  926,  440,  926,
      918,  923,  927,  437,  927,  919,  929,  105,  931, 1176,
      923, 1100, 1112,  937,  929,  930,  931,  105, 1101,  923,
      420,  932, 1103, 1104, 1103, 1105, 1107,  942,  936, 1203,
     1106,  105,  420,  919,  934,  935,  934,  936, 1109,  942,
     1110, 1174,  919, 1266,  604,  281, 1114, 1115, 1114, 1116,

      257,  957,  939,  187, 1117,  183, 1203,  940, 1118, 1119,
     1118,  946, 1120, 1121, 1120,  603,  947,  946, 1174,  282,
      957, 1266,  947,  944,  945,  944,  946, 1122, 1123, 1122,
      946,  947,  427,  429,  949,  947,  266,  138, 1271,  950,
      953, 1124, 1125, 1124,  949,  951,  262,  951,  949,  950,
      429,  604,  105,  950, 1126, 1127, 1126,  953,  957,  955,
      956,  955,  953, 1128, 1129, 1128, 1271,  957,  105,  107,
      105,  957,  958,  424,  958,  946,  959,  432,  959,  949,
      947,  960,  601,  960,  950,  961,  606,  961,  946,  957,
      962,  608,  962,  947,  963,  771,  963,  277,  953,  965,

      284,  187,  957,  184,  966,  284,  183,  968, 1130, 1131,
     1130,  965,  968, 1132, 1133, 1132,  966,  969,  287,  969,
      965,  968,  970,  451,  970,  966,  971,  160,  971,  965,
      968,  289,  456,  973,  966,  138, 1239,  456,  974,  976,
     1134, 1135, 1134,  980,  976, 1136, 1137, 1136,  981,  630,
      105,  980,  105,  985,  631,  631,  981,  978,  979,  978,
      980,  985,  985, 1239, 1357,  981, 1138, 1139, 1138,  980,
      983,  984,  983, 1179,  981, 1140, 1141, 1140,  985,  986,
      460,  986,  980,  985,  987,  628,  987,  981,  988,  633,
      988,  980,  985,  989,  790,  989,  981,  100,  100,   71,

     1179,  985,  910,  990,  148,  990,  911,  910,  910,  910,
      910,  912,  910,  910,  910,  910,  910,  910,   71,   95,
      910,  910,  910,  910,  910,  466,  466,  993,  993,  640,
       92,   73,  994,  994,  640,  805,  996, 1142, 1143, 1142,
     1000,  996, 1005,   71,  105, 1001, 1144, 1145, 1144,  910,
      910,  910,  910,  804, 1005, 1000,  998,  999,  998, 1000,
     1001, 1180,  805,   71, 1001, 1146, 1147, 1146, 1000, 1005,
     1003, 1004, 1003, 1001,   39, 1278,  910, 1294, 1005, 1148,
     1149, 1148, 1006,  644, 1006, 1000, 1357, 1005, 1180, 1357,
     1001, 1007,  803, 1007, 1008,  807, 1008, 1000,  648, 1005,

     1010,  812, 1001, 1278, 1294, 1011,  812, 1357, 1013, 1150,
     1151, 1150, 1017, 1013, 1152, 1153, 1152, 1018, 1023, 1357,
     1017, 1357, 1022, 1025, 1025, 1018, 1015, 1016, 1015, 1017,
     1022, 1022, 1357,  105, 1018, 1154, 1155, 1154, 1017, 1020,
     1021, 1020, 1172, 1018, 1156, 1157, 1156, 1022, 1024,  816,
     1024, 1017, 1022,  148, 1357,  911, 1018,  148, 1357,  911,
      912,  648, 1357, 1010,  912,  148,  105,  911, 1011,  148,
     1172,  911,  912,  148, 1191,  911,  912,  148, 1158,  911,
      912, 1036, 1100, 1036,  912, 1167, 1038, 1167, 1038, 1101,
     1169, 1040, 1169, 1040,  105, 1159,  105,  105, 1162, 1357,

      105, 1173, 1191, 1160, 1161, 1175, 1158, 1171,  105, 1163,
     1184, 1037, 1168, 1039,  105, 1170,  105, 1181,  105, 1177,
      105,  105, 1159,  105, 1357, 1183, 1162, 1186, 1192, 1173,
     1160, 1161, 1041, 1175, 1182, 1171, 1163, 1187, 1184, 1037,
     1168, 1039,  105, 1170,  105, 1181,  105, 1177,  105,  105,
      105,  105, 1189, 1183,  105, 1186, 1192, 1188, 1190, 1041,
     1197, 1182, 1195,  105, 1187,  105, 1193,  105,  105, 1194,
      105,  105, 1213,  105, 1196,  105, 1200, 1201, 1357, 1214,
     1189, 1198, 1202,  105, 1199, 1188, 1190, 1204, 1197, 1206,
     1195, 1236, 1205, 1193, 1357, 1211, 1194, 1105, 1085, 1086,

     1085, 1196, 1106, 1357, 1200, 1201,  905, 1357, 1198, 1357,
     1202, 1199, 1218, 1357, 1204, 1357, 1206, 1357, 1236,  448,
     1205, 1083, 1084, 1083,  900, 1087, 1088, 1087,  900,  901,
     1089, 1090, 1089,  901, 1091, 1092, 1091,  918,  905, 1093,
     1094, 1093,  919, 1095, 1096, 1095,  918,  923, 1097, 1098,
     1097,  919, 1208, 1209, 1208,  105,  923, 1357, 1357, 1357,
     1210, 1103, 1104, 1103, 1105, 1215, 1216, 1215, 1105, 1106,
     1109, 1277, 1110, 1106, 1109, 1112, 1110,  281, 1109, 1357,
     1110,  281,  923, 1357, 1221,  281, 1116, 1114, 1115, 1114,
     1116, 1117, 1222, 1357, 1357, 1117, 1357, 1357, 1277, 1210,

     1223, 1224, 1223, 1116, 1118, 1119, 1118,  946, 1117, 1120,
     1121, 1120,  947, 1122, 1123, 1122,  946,  957, 1126, 1127,
     1126,  947, 1124, 1125, 1124,  949,  953, 1128, 1129, 1128,
      950, 1130, 1131, 1130,  965,  957, 1132, 1133, 1132,  966,
     1134, 1135, 1134,  980,  968, 1136, 1137, 1136,  981, 1138,
     1139, 1138,  980,  985, 1140, 1141, 1140,  981, 1142, 1143,
     1142, 1000,  985, 1144, 1145, 1144, 1001, 1146, 1147, 1146,
     1000, 1005, 1148, 1149, 1148, 1001, 1150, 1151, 1150, 1017,
     1005, 1152, 1153, 1152, 1018, 1154, 1155, 1154, 1017, 1022,
     1156, 1157, 1156, 1018,  148,  148,  911,  911, 1022, 1357,

     1357,  912,  912,  648,  148, 1010,  911,  648,  105, 1010,
     1011,  912,  105,  105, 1011, 1225,  648, 1229, 1010, 1229,
     1167, 1230, 1167, 1011, 1226, 1169, 1235, 1169, 1233, 1237,
     1233,  105,  105, 1357, 1357, 1231,  105, 1238,  105, 1242,
     1240, 1243,  105, 1225, 1227, 1357,  105, 1168,  105,  105,
     1170, 1244, 1226, 1235, 1234,  105, 1237,  105, 1241, 1249,
     1245,  105,  105, 1355, 1238, 1357, 1247, 1242, 1240, 1243,
      105, 1227, 1248, 1251,  105, 1168, 1246,  105, 1170, 1244,
      105,  105, 1234, 1255, 1253, 1241, 1249, 1254, 1245,  105,
     1256, 1355,  105, 1250, 1247, 1222, 1357, 1252, 1257, 1248,

     1251, 1258, 1210, 1246, 1213, 1208, 1209, 1208, 1356, 1218,
     1255, 1214, 1253, 1210, 1357, 1254,  448, 1357, 1256, 1357,
     1250,  148, 1357,  911, 1252, 1357, 1257, 1357,  912, 1258,
     1259, 1260, 1259, 1261, 1262, 1261, 1356,  105, 1210, 1357,
     1357, 1214, 1215, 1216, 1215, 1105, 1223, 1224, 1223, 1116,
     1106,  148,  105,  911, 1117,  148, 1264,  911,  912, 1229,
     1275, 1229,  912, 1230, 1233, 1272, 1233, 1272,  105, 1273,
     1357,  105,  105,  105, 1274, 1276,  105, 1231,  105,  105,
      105,  105,  105, 1264, 1263,  105, 1279, 1275, 1280, 1281,
     1234, 1289,  105, 1265, 1282, 1284, 1283, 1288, 1285, 1286,

      105, 1299, 1276, 1287, 1259, 1260, 1259,  105, 1290, 1291,
     1357, 1263, 1210, 1279, 1357, 1280, 1357, 1281, 1234, 1289,
     1265, 1282, 1284, 1283, 1288, 1285, 1292, 1286, 1299, 1357,
     1287, 1261, 1262, 1261,  648, 1290, 1010, 1291,  148, 1214,
      911, 1011,  648,  105, 1010,  912, 1295, 1296, 1295, 1011,
     1268, 1304, 1302, 1292, 1297, 1298, 1297, 1272,  105, 1272,
      105, 1273,  105,  105,  105, 1357, 1274,  105, 1309,  105,
      105,  105, 1293, 1306, 1270, 1322, 1308,  105, 1304, 1310,
     1302, 1303,  105, 1305, 1307,  105, 1311,  105,  105, 1313,
      648, 1312, 1010, 1316,  105, 1315, 1309, 1011, 1314, 1293,

      105, 1306, 1322,  105, 1308,  105,  105, 1310, 1303, 1321,
     1305, 1307, 1325, 1324, 1311,  105, 1313, 1329, 1330, 1312,
     1316, 1323, 1357, 1315, 1326,  105, 1314, 1295, 1296, 1295,
     1327, 1268, 1297, 1298, 1297, 1335, 1321,  105, 1328, 1357,
     1325, 1324, 1357,  105, 1329, 1330,  105, 1357, 1323,  105,
     1339, 1326, 1270, 1357, 1331, 1332, 1331, 1327, 1319, 1333,
     1334, 1333, 1336, 1335, 1337, 1328,  105,  105, 1320,  105,
     1338, 1331, 1332, 1331, 1342, 1319, 1344,  105, 1339, 1333,
     1334, 1333, 1346, 1347, 1343,  105, 1350,  105, 1320, 1336,
     1352, 1337, 1348, 1357, 1351, 1345, 1349, 1338, 1353,  105,

     1357, 1357, 1342, 1357, 1344, 1357, 1357, 1357, 1354, 1346,
     1347, 1343, 1357, 1357, 1350, 1357, 1357, 1357, 1352, 1357,
     1348, 1351, 1345, 1357, 1349, 1353, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1354,   37,   37,   37,
       37,   37,   37,   37,   37,   40,   40,   40,   40,   40,
       40,   40,   40,   56,   56,   56,   56,   56,   56,   56,
       56,   60,   60,   60,   60,   60,   60,   60,   60,   64,
       64,   64,   64,   64,   64,   64,   64,   70,   70,   70,
       70,   70,   70,   70,   70,   72,   72,   72,   72,   72,
       72,   72,   72,   74,   74,   74,   74,   74,   74,   74,

       74,   83,   83,   83,   83,   83,   83,   83,   83,   91,
       91,   91,   91,   91,   91,   91,   91,   94,   94,   94,
       94,   94,   94,   94,   94,   98,   98,   98,   98,   98,
       98,   98,   98,   99,   99,   99,   99,   99,   99,   99,
       99,  104,  104,  108, 1357,  108,  108,  137,  137,  137,
      137,  137,  137,  137,  137,  139,  139,  139,  139,  139,
      139,  139,  139,  143,  143,  143,  143,  143,  143,  143,
      143,  151,  151,  151,  151,  151,  151,  151,  151,  154,
      154,  154,  154,  154,  154,  154,  154,  147,  147,  147,
      147,  147,  147,  147,  147,  158,  158,  158,  158,  158,

      158,  158,  158,  188,  188,  188,  188,  188,  188, 1357,
      188,  189,  189,  189,  189,  189, 1357,  189,  189,  106,
     1357,  106,  107, 1357,  107,  226,  226,  226,  226,  226,
      226,  226,  226,  229,  229,  229,  229,  229,  229,  229,
      229,  232,  232,  232,  232,  232,  232,  232,  232,  235,
      235,  235,  235,  235,  235,  235,  235,  240,  240,  240,
      240,  240,  240,  240,  240,  243,  243,  243,  243,  243,
      243,  243,  243,  247,  247,  247,  247,  247,  247,  247,
      247,  251,  251,  251,  251,  251,  251,  251,  251,  254,
      254,  254,  254,  254,  254,  254,  254,  256,  256,  256,

      256,  256,  256,  256,  256,  260,  260,  260,  260,  260,
      260,  260,  260,  265,  265,  265,  265,  265,  265,  265,
      265,  267,  267,  267,  267,  267,  267,  267,  267,  271,
      271,  271,  271,  271,  271,  271,  271,  276,  276,  276,
      276,  276,  276,  276,  276,  281,  281,  281,  281,  281,
      281,  281,  281,  283,  283,  283,  283,  283,  283,  283,
      283,  288,  288,  288,  288,  288,  288,  288,  288,  293,
      293,  293,  293,  293,  293,  293,  293,  188,  188,  188,
      188,  188,  188, 1357,  188,  369,  369,  369,  369,  369,
      369,  369,  369,  372,  372,  372,  372,  372,  372,  372,

      372,  374,  374,  374,  374,  374,  374,  374,  374,  378,
      378,  378,  378,  378,  378,  378,  378,  383,  383,  383,
      383,  383,  383,  383,  383,  391,  391,  391,  391,  391,
      391,  391,  391,  396,  396,  396,  396,  396,  396,  396,
      396,  399,  399,  399,  399,  399,  399,  399,  399,  401,
      401,  401,  401,  401,  401,  401,  401,  406,  406,  406,
      406,  406,  406,  406,  406,  409,  409,  409,  409,  409,
      409,  409,  409,  412,  412,  412,  412,  412,  412,  412,
      412,  416,  416,  416,  416,  416,  416,  416,  416,  419,
      419,  419,  419,  419,  419,  419,  419,  422,  422,  422,

      422,  422,  422,  422,  422,  428,  428,  428,  428,  428,
      428,  428,  428,  441,  441,  441,  441,  441,  441,  441,
      441,  444,  444,  444,  444,  444,  444,  444,  444,  448,
      448,  448,  448,  448,  448,  448,  448,  452,  452,  452,
      452,  452,  452,  452,  452,  455,  455,  455,  455,  455,
      455,  455,  455,  458,  458,  458,  458,  458,  458,  458,
      458,  464,  464,  464,  464,  464,  464,  464,  464,  465,
      465,  465,  465,  465,  465,  465,  465,  104,  104,  548,
      548,  548,  548,  548,  548,  548,  548,  551,  551,  551,
      551,  551,  551,  551,  551,  553,  553,  553,  553,  553,

      553,  553,  553,  557,  557,  557,  557,  557,  557,  557,
      557,  378,  378,  378,  378,  378,  378,  378,  378,  391,
      391,  391,  391,  391,  391,  391,  391,  565,  565,  565,
      565,  565,  565,  565,  565,  568,  568,  568,  568,  568,
      568,  568,  568,  570,  570,  570,  570,  570,  570,  570,
      570,  574,  574,  574,  574,  574,  574,  574,  574,  579,
      579,  579,  579,  579,  579,  579,  579,  582,  582,  582,
      582,  582,  582,  582,  582,  585,  585,  585,  585,  585,
      585,  585,  585,  589,  589,  589,  589,  589,  589,  589,
      589,  591,  591,  591,  591,  591,  591,  591,  591,  595,

      595,  595,  595,  595,  595,  595,  595,  599,  599,  599,
      599,  599,  599,  599,  599,  609,  609,  609,  609,  609,
      609,  609,  609,  612,  612,  612,  612,  612,  612,  612,
      612,  617,  617,  617,  617,  617,  617,  617,  617,  620,
      620,  620,  620,  620,  620,  620,  620,  622,  622,  622,
      622,  622,  622,  622,  622,  626,  626,  626,  626,  626,
      626,  626,  626,  635,  635,  635,  635,  635,  635,  635,
      635,  636,  636,  636,  636,  636,  636,  636,  636,  229,
      229,  229,  229,  229,  229,  229,  229,  639,  639,  639,
      639,  639,  639,  639,  639,  642,  642,  642,  642,  642,

      642,  642,  642,  647,  647,  647,  647,  647,  647,  647,
      647,  565,  565,  565,  565,  565,  565,  565,  565,  104,
      104,  726,  726,  726,  726,  726,  726,  726,  726,  729,
      729,  729,  729,  729,  729,  729,  729,  731,  731,  731,
      731,  731,  731,  731,  731,  734,  734,  734,  734,  734,
      734,  734,  734,  738,  738,  738,  738,  738,  738,  738,
      738,  741,  741,  741,  741,  741,  741,  741,  741,  743,
      743,  743,  743,  743,  743,  743,  743,  746,  746,  746,
      746,  746,  746,  746,  746,  753,  753,  753,  753,  753,
      753,  753,  753,  756,  756,  756,  756,  756,  756,  756,

      756,  759,  759,  759,  759,  759,  759,  759,  759,  761,
      761,  761,  761,  761,  761,  761,  761,  764,  764,  764,
      764,  764,  764,  764,  764,  766,  766,  766,  766,  766,
      766,  766,  766,  772,  772,  772,  772,  772,  772,  772,
      772,  774,  774,  774,  774,  774,  774,  774,  774,  778,
      778,  778,  778,  778,  778,  778,  778,  781,  781,  781,
      781,  781,  781,  781,  781,  783,  783,  783,  783,  783,
      783,  783,  783,  786,  786,  786,  786,  786,  786,  786,
      786,  792,  792,  792,  792,  792,  792,  792,  792,  793,
      793,  793,  793,  793,  793,  793,  793,  796,  796,  796,

      796,  796,  796,  796,  796,  798,  798,  798,  798,  798,
      798,  798,  798,  265,  265,  265,  265,  265,  265,  265,
      265,  801,  801,  801,  801,  801,  801,  801,  801,  808,
      808,  808,  808,  808,  808,  808,  808,  229,  229,  229,
      229,  229,  229,  229,  229,  811,  811,  811,  811,  811,
      811,  811,  811,  814,  814,  814,  814,  814,  814,  814,
      814,  836,  836,  836,  836,  836,  836,  836,  104,  104,
      892,  892,  892,  892,  892,  892,  892,  892,  895,  895,
      895,  895,  895,  895,  895,  895,  897,  897,  897,  897,
      897,  897,  897,  897,  902,  902,  902,  902,  902,  902,

      902,  902,  910,  910,  910,  910,  910,  910,  910,  910,
      913,  913,  913,  913,  913,  913,  913,  913,  915,  915,
      915,  915,  915,  915,  915,  915,  920,  920,  920,  920,
      920,  920,  920,  920,  928,  928,  928,  928,  928,  928,
      928,  928,  933,  933,  933,  933,  933,  933,  933,  933,
      938,  938,  938,  938,  938,  938,  938,  938,  941,  941,
      941,  941,  941,  941,  941,  941,  943,  943,  943,  943,
      943,  943,  943,  943,  948,  948,  948,  948,  948,  948,
      948,  948,  952,  952,  952,  952,  952,  952,  952,  952,
      954,  954,  954,  954,  954,  954,  954,  954,  964,  964,

      964,  964,  964,  964,  964,  964,  967,  967,  967,  967,
      967,  967,  967,  967,  972,  972,  972,  972,  972,  972,
      972,  972,  975,  975,  975,  975,  975,  975,  975,  975,
      977,  977,  977,  977,  977,  977,  977,  977,  982,  982,
      982,  982,  982,  982,  982,  982,  991,  991,  991,  991,
      991,  991,  991,  991,  992,  992,  992,  992,  992,  992,
      992,  992,  995,  995,  995,  995,  995,  995,  995,  995,
      997,  997,  997,  997,  997,  997,  997,  997, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002,  281,  281,  281,  281,
      281,  281,  281,  281, 1009, 1009, 1009, 1009, 1009, 1009,

     1009, 1009, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,  265,  265,
      265,  265,  265,  265,  265,  265, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019,  910,  910,  910,  910,  910,  910,
      910,  910,  104,  104,  892,  892,  892,  892,  892,  892,
      892,  892,  895,  895,  895,  895,  895,  895,  895,  895,
      897,  897,  897,  897,  897,  897,  897,  897,  902,  902,
      902,  902,  902,  902,  902,  902,  913,  913,  913,  913,
      913,  913,  913,  913,  915,  915,  915,  915,  915,  915,
      915,  915,  920,  920,  920,  920,  920,  920,  920,  920,

      928,  928,  928,  928,  928,  928,  928,  928,  229,  229,
      229,  229,  229,  229,  229,  229, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102,  933,  933,  933,  933,  933,  933,  933,  933,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113,  938,  938,  938,  938,  938,  938,
      938,  938,  941,  941,  941,  941,  941,  941,  941,  941,
      943,  943,  943,  943,  943,  943,  943,  943,  954,  954,
      954,  954,  954,  954,  954,  954,  948,  948,  948,  948,

      948,  948,  948,  948,  952,  952,  952,  952,  952,  952,
      952,  952,  964,  964,  964,  964,  964,  964,  964,  964,
      967,  967,  967,  967,  967,  967,  967,  967,  972,  972,
      972,  972,  972,  972,  972,  972,  975,  975,  975,  975,
      975,  975,  975,  975,  977,  977,  977,  977,  977,  977,
      977,  977,  982,  982,  982,  982,  982,  982,  982,  982,
      991,  991,  991,  991,  991,  991,  991,  991,  992,  992,
      992,  992,  992,  992,  992,  992,  995,  995,  995,  995,
      995,  995,  995,  995,  997,  997,  997,  997,  997,  997,
      997,  997, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,

     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019,  910,  910,  910,  910,  910,  910,  910,  910,
      104,  104,  897,  897,  897,  897,  897,  897,  897,  897,
      902,  902,  902,  902,  902,  902,  902,  902,  915,  915,
      915,  915,  915,  915,  915,  915,  920,  920,  920,  920,
      920,  920,  920,  920, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099,  265,  265,  265,  265,  265,  265,  265,  265,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1102, 1102,

     1102, 1102, 1102, 1102, 1102, 1102, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1219, 1219,
     1219, 1357, 1219, 1219, 1219, 1219, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113,  943,  943,  943,  943,  943,  943,
      943,  943,  954,  954,  954,  954,  954,  954,  954,  954,
      948,  948,  948,  948,  948,  948,  948,  948,  952,  952,
      952,  952,  952,  952,  952,  952,  964,  964,  964,  964,
      964,  964,  964,  964,  967,  967,  967,  967,  967,  967,

      967,  967,  977,  977,  977,  977,  977,  977,  977,  977,
      982,  982,  982,  982,  982,  982,  982,  982,  997,  997,
      997,  997,  997,  997,  997,  997, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
      910,  910,  910,  910,  910,  910,  910,  910, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009,  104,  104, 1267, 1357,
     1267, 1267, 1267, 1267, 1267, 1267, 1269, 1357, 1269, 1269,
     1269, 1269, 1269, 1269, 1300, 1357, 1300, 1300, 1300, 1300,
     1300, 1300, 1301, 1357, 1301, 1301, 1301, 1301, 1301, 1301,

       31, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357
    } ;

static const flex_int16_t yy_chk[6377] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    9,    8,   10, 1354,   11,   36,
       36,  140,    7,    7,    8,    8,  140,   11,   21,   21,
       21,   21,   26,   26,   26,   26,   11,    1,    1,    1,
        1,   40,   40,   34,   13,   14,   15,  243,   15,  243,
       15,   15,   40,   13,   14,   15,   34,   34,   15,    9,
        9,   10,   10,   11,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   12,   13,

       14,   15,   42,   45,   74,   51,   74,   12,   75, 1349,
       75,   74,  144,   77,   51,   75,   12,  144,   42,   45,
       77,   45,    2,    2,    2,    2,  102, 1344,   15,   16,
       78,   16,   78,   16,   16,  103,  103,   78,   16,  102,
      102,   16,   51,   12, 1343,   42,   45, 1337,   45,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   41,   16,   43,   55,  126, 1330,   41,
       43,   79,   79,   79,   79,  126, 1329,   43,   55,   79,
       84,   43,   84,   84,   43,   41,   43,    3,    3,    3,

        3,   16,   96, 1325,   96,   96,  148,   41,   43,  108,
      108,  148,  139,  126,  139,   43,   55, 1323,   43,  139,
      108,   43,   41,   43,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4, 1312,   44,
       48,   86,   49,   86, 1311,   22,   22,   22,   22,   24,
       22,   24,   46,   50,  116,  123,   54,   22,   44,   48,
       24,   49,    4,    4,    4,    4,   22,  116,   86,   22,
      120,   46,   24, 1310,   50,  123,   46,   50,   54, 1309,
       88,  125,   88, 1308,   52,   44,   48,  109,   49,    4,

        5,  120,  125,   52,  229,  116,   86,   22,   46,  229,
       24,   50,  123,   46,   50,   54,   88,   47,   52,  109,
       88,    5,    5,    5,    5,    5,    5,   47,  120,    5,
      125,   52,    5,    5,   47,   47,    5,    5,    5,    5,
        5,  131,    5, 1305,   88,   52,  109,  131,   88,    5,
        5,    5,    5,    5,    5,   47,   89,    5,   89,    5,
        5,   47,   47,    5,    5,    5,    5,    5,   53,    5,
       20,   20,   20,  111,   20,  131,  171,   20,  171,  171,
       53,   20, 1303,   89,   20,   20,   87,   53,   87,   87,
       20,   87,  111,   20,   20,   81,   53,   81,  110,  141,

     1301,  185,   81,  185,  185,  145,  141,   87,   53,  150,
      112,   89,  145,  257,   53,   81,  150, 1300,  257,  111,
      110,   20,   20,   53,   76,   76,   76,   76,   76,   76,
       76,   76,  112,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  110,  113,  114,
      115,  121,  132,  113,  114,  129,  135,  124, 1299,  112,
      129,  132,  129,  154,  124,  135,  674,  115,  115,  121,
      154,   76,   76,   76,  146,  146,  146,  146,  127,  674,
      124,  113,  114,  142,  142,  142,  142, 1294,  129,  132,
      129,  142,  124,  135,  115,  115,  121,  127,   76,   80,

       80,   80,   80,   80,   80,   80,   80,  124,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,  118,  117,  127, 1285,  136,  117, 1284,  130,
      210,  118,  134,  119,  117,  136,  143,  128,  143,  304,
      130,  119,  161,  143,  118,  130,   80,   80,   80,  161,
      289,  117,  134,  117,  210,  289,  119,  119,  128,  118,
     1276, 1269,  117,  136, 1267,  172,  304,  172,  130,  119,
     1258,  118,  130,   80,   82,   82,   82,   82,  117,  134,
      117,  210,   82,  119,  119,  128,  147,  151,  147,  151,
     1257,  196,  172,  147,  151,  195,   82,  152,  152,  152,

      152,  174,  158,   82,  158,  152, 1256,   82,  182,  158,
       82,  196,   82,  156,  156,  156,  163,  195,  163,   82,
      172,  156, 1250,  163,   82,  157,  157,  157,  157,  174,
      313,   82,  313,  157,   82, 1249,  182,   82,  196,   82,
      187,  187,  187,  553,  195,  553,   82,  149,  149,  149,
      149,  149,  149,  149,  149,  214,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      159,  159,  159,  159,  162,  162,  162,  162,  159,  214,
      306,  166,  162,  166,  175,  309,  175,  175,  166,  175,
      169,  173,  169,  173,  149,  149,  149,  169,  242,  242,

      242,  184,  166,  184,  227,  175,  214,  226,  306,  226,
     1237,  227,  309,  165,  226,  165,  184,  184,  173,  169,
      165,  149,  153,  153,  153,  153,  153,  153,  153,  153,
      166,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  165,  173,  169,  179,  192,
      179,  165,  180,  202,  193, 1231,  192,  204,  201,  181,
      180,  181,  208,  193,  201,  202,  204,  208,  466,  153,
      153,  153,  165,  466,  230,  179,  232,  179,  165, 1230,
      180,  230,  238,  232,  192, 1224,  181,  180, 1221,  238,
      190,  193,  201,  202,  204,  208,  153,  164,  164,  164,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  190,  181,  164,  164,  164,  164,  164,
      167,  203,  167,  176,  168,  176,  168,  167,  170, 1220,
      170,  168, 1219, 1218,  178,  170,  178,  183,  203,  183,
      190,  167, 1216,  197,  164,  164,  164,  164,  168,  176,
      218,  170,  198,  176,  235,  167,  235,  168,  168,  191,
      178,  235,  194,  183,  178,  203,  197,  183,  199,  167,
      200,  164,  191,  206,  218,  198,  168,  176,  191,  170,
      194,  176,  167,  194,  168,  168,  329,  199,  178,  200,
      211,  183,  178,  197,  206,  183,  199,  209,  207,  212,

      191,  218,  198,  217,  209,  191,  211,  194,  212, 1211,
      194,  216,  219,  329,  199,  207,  200,  205,  213,  217,
      216,  206,  205,  205,  205,  205,  205,  205, 1205,  219,
      205,  213,  209,  211,  205,  220,  212,  205,  215,  205,
      205,  225,  207,  205,  220,  215,  217,  222,  216,  215,
      205,  205,  205,  205,  205,  205,  219,  221,  205,  213,
      223,  205,  225, 1202,  205,  222,  205,  205,  240,  223,
      205,  308,  220,  215,  221,  240, 1201,  215,  221,  228,
      228,  228,  228,  231,  231,  231,  231,  228,  314,  225,
      314,  247,  222,  247,  234,  234,  234,  223,  247,  308,

     1197,  221,  234,  314,  314,  221,  236,  236,  236,  236,
      239,  239,  239,  239,  236,  570,  248,  570,  239,  244,
      244,  244,  244,  248,  249,  249,  249,  249,  266,  266,
      266, 1194,  249,  250,  250,  250,  250,  250,  250,  250,
      250, 1190,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  251,  254,  251,  252,
      252,  252,  252,  251,  254,  258,  319,  252,  255,  255,
      255,  256,  258,  256, 1187, 1183,  255,  319,  256,  484,
      250,  250,  250,  259,  259,  259,  259,  260,  315,  260,
     1182,  259,  263,  267,  260,  261,  261,  261,  261,  263,

      267,  315,  315,  261, 1176,  319,  484,  250,  253,  253,
      253,  253,  253,  253,  253,  253, 1173,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  264,  264,  264,  264,  268,  268,  268,  274,  264,
      270,  270,  270,  268,  271,  274,  271,  276,  270,  276,
      585,  271,  585,  321,  276,  253,  253,  253,  272,  272,
      272,  272,  275,  275,  275,  275,  272,  278,  321,  591,
      275,  591,  283,  290,  278,  279,  279,  279,  279,  283,
      290, 1172,  253,  279,  280,  280,  280,  280,  285,  285,
      285, 1155,  280,  328, 1151,  321,  285,  286,  286,  286,

      286,  288,  324,  288, 1147,  286,  328,  324,  288,  291,
      291,  291,  291,  380,  380,  380, 1143,  291,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  328,  324,  292,  292,  292,  292,
      292,  293,  294,  293,  294,  295, 1139,  295,  293,  294,
      305,  296,  295,  296,  299,  297,  299,  297,  296,  305,
      318,  299,  297,  330,  322,  292,  292,  292,  292,  298,
      295,  298,  322,  300,  294,  300,  298,  301,  305,  301,
      300,  318,  325,  299,  301,  296,  305,  302,  310,  302,
      310,  330,  292,  297,  302,  303, 1135,  303,  295, 1131,

      322,  294,  303,  312,  325,  312,  300,  298,  318,  300,
      333,  299,  296,  323,  310,  311,  301,  311,  310,  326,
      297,  320,  331,  333,  323,  332,  302,  303,  320, 1125,
      312,  325, 1123,  300,  298,  326,  300,  336,  312,  327,
      331,  332,  310,  301,  327,  338,  310,  335,  311, 1119,
      311,  333,  323,  302,  303,  334,  320,  339,  312,  336,
      335,  341,  326,  337,  334,  312,  338,  331,  332,  340,
      344,  342,  327,  335,  345,  311,  339,  311,  343,  337,
      341,  342,  347,  345,  353,  341,  336,  340,  335,  342,
      351,  344,  334,  338,  347,  346, 1115,  343,  345,  348,

      335,  350, 1112,  339,  346,  352,  337,  341,  353,  342,
      354,  345,  341,  351,  340, 1104,  342,  350,  344,  357,
      358,  354,  347,  346,  343,  345,  352,  348,  357,  355,
      356,  354,  346,  362,  361,  353,  355, 1100,  364,  368,
      351,  358,  362,  365,  350,  363,  356,  480,  368,  354,
      346, 1096,  363,  352,  348,  361,  357,  364,  354,  367,
     1092,  609,  365,  609,  355,  369,  367,  369,  358,  481,
      362,  370,  369,  356,  372,  480,  368, 1088,  370,  367,
      363,  372,  361, 1084,  364,  371,  371,  371,  371,  365,
      373,  373,  373,  371,  374,  648,  374,  481,  373,  376,

      648,  374,  375,  375,  375,  375,  376,  367,  378,  383,
      375,  377,  377,  377,  377,  378,  383,  493, 1072,  377,
      381,  381,  381,  381,  384,  384,  384,  386,  386,  386,
      493,  493,  384, 1071, 1050,  386,  389,  389,  389,  389,
      392,  392,  392,  396,  389,  396,  397,  433,  433,  433,
      396,  399, 1049,  397,  398,  398,  398,  398,  399,  400,
      400,  400,  398,  401,  622,  401,  622,  400,  403,  410,
      401,  402,  402,  402,  402,  403,  410,  414,  416,  402,
      404,  404,  404,  404,  414,  416,  505, 1023,  404,  405,
      405,  405,  405,  405,  405,  405,  405,  482,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  406,  505,  406,  407,  407,  407,  407,  406,
      409, 1016,  409,  407,  642,  482,  642,  409,  412,  665,
      412,  411,  411,  411,  411,  412,  405,  405,  405,  411,
      413,  413,  413,  413,  415,  415,  415,  415,  413,  417,
      417,  417,  415,  418,  418,  418,  665,  417,  552,  552,
      552,  418,  999,  405,  408,  408,  408,  408,  408,  408,
      408,  408,  979,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  419,  421,  421,
      421,  422,  945,  422,  419,  496,  421,  425,  422,  423,

      423,  423,  423,  428,  425,  483,  485,  423,  496,  917,
      428,  408,  408,  408,  426,  426,  426,  426,  430,  430,
      430,  506,  426,  436,  436,  436,  430,  431,  431,  431,
      431,  436,  899,  483,  485,  431,  496,  442,  408,  439,
      439,  439,  439,  441,  442,  441,  887,  439,  444,  506,
      441,  443,  443,  443,  443,  444,  445,  445,  445,  443,
      446,  446,  446,  446,  445,  450,  450,  450,  446,  447,
      447,  447,  447,  450,  452,  453,  452,  447,  885,  880,
      455,  452,  453,  454,  454,  454,  454,  455,  457,  457,
      457,  454,  458,  503,  458,  512,  457,  461,  467,  458,

      459,  459,  459,  459,  461,  467,  503,  512,  459,  462,
      462,  462,  462,  550,  550,  550,  550,  462,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  503,  512,  463,  463,  463,  463,
      463,  464,  465,  464,  465,  673,  495,  673,  464,  465,
      468,  468,  468,  468,  469,  470,  469,  470,  468,  661,
      673,  469,  470,  878,  495,  463,  463,  463,  463,  471,
      472,  471,  472,  473,  877,  473,  471,  472,  874,  474,
      473,  474,  475,  476,  475,  476,  474,  661,  498,  475,
      476,  495,  463,  478,  509,  478,  471,  498,  473,  477,

      478,  477,  479,  486,  479,  486,  477,  873,  472,  479,
      509,  548,  474,  548,  487,  476,  487,  475,  548,  862,
      477,  488,  478,  488,  471,  498,  473,  479,  477,  494,
      491,  489,  491,  489,  494,  472,  486,  509,  486,  474,
      856,  497,  476,  848,  475,  492,  488,  492,  477,  497,
      478,  513,  514,  487,  491,  479,  477,  500,  489,  499,
      492,  492,  494,  486,  500,  486,  489,  502,  499,  510,
      501,  514,  504,  513,  488,  508,  502,  497,  501,  504,
      487,  507,  491,  501,  508,  511,  489,  510,  507,  515,
      519,  517,  500,  489,  521,  511,  499,  518,  514,  525,

      513,  522,  515,  523,  502,  525,  501,  504,  519,  522,
      847,  501,  508,  524,  510,  517,  507,  521,  518,  527,
      526,  531,  523,  511,  524,  526,  837,  528,  837,  524,
      515,  530,  532,  525,  531,  519,  528,  522,  536,  527,
      533,  532,  517,  536,  521,  518,  534,  530,  533,  523,
      535,  538,  524,  526,  537,  534,  524,  540,  542,  538,
      535,  664,  531,  537,  528,  539,  527,  541,  544,  532,
      539,  536,  546,  549,  530,  551,  533,  566,  543,  540,
      549,  542,  551,  534,  566,  541,  543,  538,  535,  664,
      816,  537,  544,  812,  546,  558,  558,  558,  539,  554,

      554,  554,  554,  559,  559,  559,  540,  807,  542,  561,
      561,  561,  541,  568,  543,  556,  556,  556,  556,  544,
      568,  546,  560,  560,  560,  560,  563,  563,  563,  565,
      804,  565,  567,  567,  567,  567,  565,  569,  569,  569,
      571,  571,  571,  571,  573,  573,  573,  573,  575,  575,
      575,  576,  576,  576,  577,  577,  577,  577,  578,  578,
      578,  579,  582,  579,  582,  578,  929,  725,  579,  582,
      712,  929,  578,  578,  580,  580,  580,  580,  581,  581,
      581,  583,  589,  618,  617,  581,  617,  710,  583,  589,
      618,  617,  581,  581,  584,  584,  584,  584,  586,  586,

      586,  586,  588,  588,  588,  588,  590,  590,  590,  592,
      592,  592,  592,  594,  594,  594,  594,  596,  596,  596,
      597,  597,  597,  597,  598,  598,  598,  600,  600,  600,
      602,  602,  602,  605,  605,  605,  605,  607,  607,  607,
      611,  611,  611,  611,  613,  613,  613,  614,  614,  614,
      614,  615,  615,  615,  616,  616,  616,  616,  619,  619,
      619,  619,  620,  621,  621,  621,  627,  627,  627,  620,
      623,  623,  623,  623,  625,  625,  625,  625,  629,  629,
      629,  632,  632,  632,  632,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,

      634,  693,  676,  634,  634,  634,  634,  634,  635,  636,
      635,  636,  637,  645,  644,  635,  636,  639,  640,  637,
      638,  638,  638,  638,  639,  641,  641,  641,  643,  643,
      643,  643,  634,  634,  634,  634,  646,  646,  646,  646,
      647,  649,  647,  650,  650,  650,  650,  647,  649,  651,
      652,  651,  652,  653,  633,  653,  651,  652,  630,  634,
      653,  654,  655,  654,  655,  656,  666,  656,  654,  655,
      626,  657,  656,  657,  651,  680,  624,  658,  657,  658,
      659,  660,  659,  660,  658,  675,  654,  659,  660,  684,
      656,  667,  675,  667,  666,  668,  655,  668,  680,  669,

      657,  669,  651,  659,  658,  670,  672,  670,  672,  679,
      671,  658,  671,  612,  654,  688,  684,  677,  656,  679,
      675,  668,  677,  655,  669,  680,  683,  685,  657,  610,
      667,  659,  658,  681,  671,  670,  678,  682,  658,  672,
      687,  678,  688,  684,  690,  685,  682,  679,  683,  668,
      677,  690,  669,  686,  689,  699,  681,  667,  686,  692,
      699,  691,  671,  670,  690,  695,  672,  694,  687,  678,
      691,  697,  685,  696,  682,  683,  694,  702,  689,  690,
      696,  701,  692,  681,  695,  698,  686,  606,  699,  700,
      701,  690,  703,  704,  697,  706,  700,  705,  691,  703,

      707,  702,  698,  703,  694,  689,  705,  711,  696,  692,
      704,  695,  706,  708,  709,  714,  706,  707,  701,  603,
      599,  697,  708,  713,  700,  715,  711,  703,  702,  698,
      715,  703,  713,  716,  705,  709,  714,  704,  720,  706,
      718,  595,  719,  706,  707,  717,  721,  722,  723,  716,
      708,  720,  724,  711,  722,  717,  593,  828,  715,  719,
      713,  587,  709,  714,  718,  717,  726,  717,  726,  721,
      722,  727,  723,  726,  729,  724,  716,  733,  727,  720,
      826,  729,  722,  717,  733,  828,  719,  728,  728,  728,
      728,  718,  717,  734,  717,  728,  721,  722,  574,  723,

      734,  572,  724,  730,  730,  730,  731,  826,  731,  829,
      833,  730,  833,  731,  732,  732,  732,  732,  735,  735,
      735,  557,  732,  737,  737,  737,  735,  736,  736,  736,
      736,  737,  738,  739,  738,  736,  829,  833,  741,  738,
      739,  740,  740,  740,  740,  741,  742,  742,  742,  740,
      743,  838,  743,  838,  742,  745,  746,  743,  744,  744,
      744,  744,  745,  746,  555,  833,  744,  747,  747,  747,
      748,  748,  748,  748,  547,  747,  851,  844,  748,  749,
      749,  749,  750,  750,  750,  529,  844,  749,  850,  750,
      751,  751,  751,  751,  752,  753,  752,  753,  751,  754,

      520,  752,  753,  851,  850,  758,  754,  755,  755,  755,
      755,  756,  758,  756,  844,  755,  759,  516,  756,  757,
      757,  757,  757,  759,  760,  760,  760,  757,  761,  460,
      761,  850,  760,  763,  764,  761,  762,  762,  762,  762,
      763,  764,  766,  456,  762,  765,  765,  765,  765,  766,
      767,  767,  767,  765,  768,  768,  768,  768,  767,  769,
      769,  769,  768,  770,  770,  770,  772,  769,  772,  773,
      774,  770,  830,  772,  830,  846,  773,  774,  775,  775,
      775,  775,  776,  776,  776,  846,  775,  852,  448,  779,
      776,  777,  777,  777,  777,  778,  779,  778,  830,  777,

      781,  440,  778,  780,  780,  780,  780,  781,  782,  782,
      782,  780,  783,  846,  783,  852,  782,  785,  786,  783,
      784,  784,  784,  784,  785,  786,  830,  438,  784,  787,
      787,  787,  788,  788,  788,  788,  432,  787,  794,  796,
      788,  789,  789,  789,  849,  794,  796,  427,  424,  789,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  849,  420,  791,  791,
      791,  791,  791,  792,  793,  792,  793,  394,  391, 1034,
      792,  793,  795,  795,  795,  795,  797,  797,  797,  798,
      795,  798,  390,  849,  797,  861,  798,  791,  791,  791,

      791,  799,  799,  799,  799,  800,  801, 1034,  861,  799,
      387,  382,  800,  801,  802,  802,  802,  806,  806,  806,
      806,  808,  802,  808,  791,  806,  809,  811,  808,  810,
      810,  810,  810,  809,  811,  817,  861,  810,  813,  813,
      813,  814,  817,  814,  840,  379,  813,  366,  814,  815,
      815,  815,  815,  818,  819,  818,  819,  815,  841,  360,
      818,  819,  820,  821,  820,  821,  822,  840,  822,  820,
      821,  359,  823,  822,  823,  825,  824,  825,  824,  823,
      842,  841,  825,  824,  831,  843,  831,  832,  819,  832,
      843,  854,  818,  834,  840,  834,  825,  835,  845,  835,

      822,  853,  855,  842,  858,  349,  821,  845,  841,  864,
      854,  287,  823,  859,  831,  819,  824,  832,  843,  818,
      859,  860,  853,  855,  825,  858,  834,  822,  863,  857,
      842,  866,  864,  821,  857,  845,  860,  854,  835,  823,
      865,  282,  831,  824,  863,  832,  867,  866,  859,  853,
      855,  868,  858,  834,  871,  867,  872,  869,  876,  864,
      870,  865,  857,  860,  886,  835,  869,  870,  875,  881,
      882,  863,  868,  871,  866,  872,  876,  875,  879,  888,
      883,  889,  890,  867,  888,  879,  884,  281,  865,  886,
      277,  882,  273,  881,  869,  870, 1033,  891,  890,  868,

      871,  893,  872,  876,  883,  875, 1035,  884,  893,  889,
      891,  265,  888,  879,  895,  892,  886,  892,  882,  900,
      881,  895,  892, 1033, 1059,  890,  900,  894,  894,  894,
      894,  883, 1059, 1035,  884,  894,  889,  262,  891,  896,
      896,  896,  897, 1051,  897,  246,  245,  896,  241,  897,
      898,  898,  898,  898,  901,  901,  901,  901,  898,  902,
     1059,  237,  901,  903,  903,  903,  902,  905,  905,  905,
     1051,  903,  907,  907,  907,  905,  906,  906,  906,  906,
      907,  909,  909,  909,  906,  908,  908,  908,  908,  909,
      910,  911,  910,  908, 1164, 1166,  913,  910,  911,  912,

      912,  912,  912,  913,  914,  914,  914,  912,  915,  233,
      915, 1047,  914,  918,  920,  915,  916,  916,  916,  916,
      918,  920, 1164, 1166,  916,  919,  919,  919,  919,  921,
      921,  921, 1047,  919,  923,  923,  923,  921,  924,  924,
      924,  924,  923,  925,  925,  925,  924,  926,  926,  926,
      926,  925,  927,  927,  927,  926,  928, 1079,  928, 1047,
      927,  931,  936,  928,  930,  930,  930, 1045,  931,  936,
      939,  930,  932,  932,  932,  932,  933,  939,  933, 1079,
      932,  224,  941,  933,  934,  934,  934,  934,  935,  941,
      935, 1045,  934, 1228,  946,  935,  937,  937,  937,  937,

      938,  946,  938,  186,  937,  177, 1079,  938,  940,  940,
      940,  940,  942,  942,  942,  943,  940,  943, 1045,  160,
      942, 1228,  943,  944,  944,  944,  944,  947,  947,  947,
      947,  944,  948,  949,  948,  947,  155,  137, 1232,  948,
      949,  950,  950,  950,  950,  951,  951,  951,  951,  950,
      952,  954,  133,  951,  953,  953,  953,  952,  954,  955,
      955,  955,  953,  957,  957,  957, 1232,  955,  122,  106,
      104,  957,  958,  958,  958,  958,  959,  959,  959,  959,
      958,  960,  960,  960,  959,  961,  961,  961,  961,  960,
      962,  962,  962,  961,  963,  963,  963,  964,  962,  964,

      965,   97,  963,   93,  964,  967,   90,  965,  966,  966,
      966,  966,  967,  968,  968,  968,  966,  969,  969,  969,
      969,  968,  970,  970,  970,  969,  971,  971,  971,  971,
      970,  972,  973,  972,  971,   72, 1178,  975,  972,  973,
      974,  974,  974,  974,  975,  976,  976,  976,  974,  977,
       37,  977, 1053,  976,  980,  982,  977,  978,  978,  978,
      978,  980,  982, 1178,   31,  978,  981,  981,  981,  981,
      983,  983,  983, 1053,  981,  985,  985,  985,  983,  986,
      986,  986,  986,  985,  987,  987,  987,  986,  988,  988,
      988,  988,  987,  989,  989,  989,  988,   30,   29,   28,

     1053,  989,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,   27,   25,
      990,  990,  990,  990,  990,  991,  992,  991,  992,  993,
       23,   19,  991,  992,  995, 1000,  993,  994,  994,  994,
      994,  995, 1000,   18, 1054,  994,  996,  996,  996,  990,
      990,  990,  990,  997,  996,  997,  998,  998,  998,  998,
      997, 1054, 1002,   17,  998, 1001, 1001, 1001, 1001, 1002,
     1003, 1003, 1003, 1001,    6, 1239,  990, 1266, 1003, 1005,
     1005, 1005, 1006, 1006, 1006, 1006,    0, 1005, 1054,    0,
     1006, 1007, 1007, 1007, 1008, 1008, 1008, 1008, 1009, 1007,

     1009, 1010, 1008, 1239, 1266, 1009, 1012,    0, 1010, 1011,
     1011, 1011, 1011, 1012, 1013, 1013, 1013, 1011, 1014,    0,
     1014,    0, 1013, 1017, 1019, 1014, 1015, 1015, 1015, 1015,
     1017, 1019,    0, 1043, 1015, 1018, 1018, 1018, 1018, 1020,
     1020, 1020, 1043, 1018, 1022, 1022, 1022, 1020, 1024, 1024,
     1024, 1024, 1022, 1026,    0, 1026, 1024, 1027,    0, 1027,
     1026, 1028,    0, 1028, 1027, 1029, 1065, 1029, 1028, 1030,
     1043, 1030, 1029, 1031, 1065, 1031, 1030, 1032, 1026, 1032,
     1031, 1036, 1099, 1036, 1032, 1037, 1038, 1037, 1038, 1099,
     1041, 1040, 1041, 1040, 1042, 1027, 1044, 1058, 1031,    0,

     1046, 1044, 1065, 1029, 1030, 1046, 1026, 1042, 1055, 1032,
     1058, 1036, 1037, 1038, 1048, 1041, 1057, 1055, 1056, 1048,
     1060, 1061, 1027, 1066,    0, 1057, 1031, 1060, 1066, 1044,
     1029, 1030, 1040, 1046, 1056, 1042, 1032, 1061, 1058, 1036,
     1037, 1038, 1063, 1041, 1062, 1055, 1068, 1048, 1067, 1064,
     1070, 1073, 1063, 1057, 1069, 1060, 1066, 1062, 1064, 1040,
     1073, 1056, 1069, 1074, 1061, 1075, 1067, 1080, 1077, 1068,
     1076, 1082, 1105, 1078, 1070, 1174, 1076, 1077,    0, 1105,
     1063, 1074, 1078, 1081, 1075, 1062, 1064, 1080, 1073, 1082,
     1069, 1174, 1081, 1067,    0, 1102, 1068, 1102, 1085, 1085,

     1085, 1070, 1102,    0, 1076, 1077, 1085,    0, 1074,    0,
     1078, 1075, 1110,    0, 1080,    0, 1082,    0, 1174, 1110,
     1081, 1083, 1083, 1083, 1083, 1087, 1087, 1087, 1087, 1083,
     1089, 1089, 1089, 1087, 1091, 1091, 1091, 1091, 1089, 1093,
     1093, 1093, 1091, 1095, 1095, 1095, 1095, 1093, 1097, 1097,
     1097, 1095, 1101, 1101, 1101, 1238, 1097,    0,    0,    0,
     1101, 1103, 1103, 1103, 1103, 1106, 1106, 1106, 1106, 1103,
     1107, 1238, 1107, 1106, 1108, 1111, 1108, 1107, 1109,    0,
     1109, 1108, 1111,    0, 1113, 1109, 1113, 1114, 1114, 1114,
     1114, 1113, 1116,    0,    0, 1114,    0,    0, 1238, 1116,

     1117, 1117, 1117, 1117, 1118, 1118, 1118, 1118, 1117, 1120,
     1120, 1120, 1118, 1122, 1122, 1122, 1122, 1120, 1126, 1126,
     1126, 1122, 1124, 1124, 1124, 1124, 1126, 1128, 1128, 1128,
     1124, 1130, 1130, 1130, 1130, 1128, 1132, 1132, 1132, 1130,
     1134, 1134, 1134, 1134, 1132, 1136, 1136, 1136, 1134, 1138,
     1138, 1138, 1138, 1136, 1140, 1140, 1140, 1138, 1142, 1142,
     1142, 1142, 1140, 1144, 1144, 1144, 1142, 1146, 1146, 1146,
     1146, 1144, 1148, 1148, 1148, 1146, 1150, 1150, 1150, 1150,
     1148, 1152, 1152, 1152, 1150, 1154, 1154, 1154, 1154, 1152,
     1156, 1156, 1156, 1154, 1158, 1159, 1158, 1159, 1156,    0,

        0, 1158, 1159, 1160, 1161, 1160, 1161, 1162, 1171, 1162,
     1160, 1161, 1175, 1177, 1162, 1158, 1163, 1165, 1163, 1165,
     1167, 1165, 1167, 1163, 1159, 1169, 1171, 1169, 1170, 1175,
     1170, 1179, 1181,    0,    0, 1165, 1184, 1177, 1180, 1181,
     1179, 1184, 1192, 1158, 1161,    0, 1185, 1167, 1191, 1195,
     1169, 1185, 1159, 1171, 1170, 1186, 1175, 1188, 1180, 1192,
     1186, 1189, 1200, 1350, 1177,    0, 1189, 1181, 1179, 1184,
     1193, 1161, 1191, 1195, 1196, 1167, 1188, 1198, 1169, 1185,
     1199, 1203, 1170, 1200, 1198, 1180, 1192, 1199, 1186, 1204,
     1203, 1350, 1206, 1193, 1189, 1207,    0, 1196, 1204, 1191,

     1195, 1206, 1207, 1188, 1212, 1208, 1208, 1208, 1352, 1217,
     1200, 1212, 1198, 1208,    0, 1199, 1217,    0, 1203,    0,
     1193, 1226,    0, 1226, 1196,    0, 1204,    0, 1226, 1206,
     1210, 1210, 1210, 1214, 1214, 1214, 1352, 1235, 1210,    0,
        0, 1214, 1215, 1215, 1215, 1215, 1223, 1223, 1223, 1223,
     1215, 1225, 1236, 1225, 1223, 1227, 1226, 1227, 1225, 1229,
     1235, 1229, 1227, 1229, 1233, 1234, 1233, 1234, 1240, 1234,
        0, 1243, 1241, 1244, 1234, 1236, 1242, 1229, 1252, 1245,
     1246, 1251, 1248, 1226, 1225, 1253, 1240, 1235, 1241, 1242,
     1233, 1252, 1247, 1227, 1243, 1245, 1244, 1251, 1246, 1247,

     1254, 1271, 1236, 1248, 1259, 1259, 1259, 1255, 1253, 1254,
        0, 1225, 1259, 1240,    0, 1241,    0, 1242, 1233, 1252,
     1227, 1243, 1245, 1244, 1251, 1246, 1255, 1247, 1271,    0,
     1248, 1261, 1261, 1261, 1263, 1253, 1263, 1254, 1264, 1261,
     1264, 1263, 1265, 1275, 1265, 1264, 1268, 1268, 1268, 1265,
     1268, 1278, 1275, 1255, 1270, 1270, 1270, 1272, 1277, 1272,
     1279, 1272, 1281, 1283, 1280,    0, 1272, 1282, 1283, 1292,
     1286, 1289, 1264, 1280, 1270, 1304, 1282, 1287, 1278, 1286,
     1275, 1277, 1288, 1279, 1281, 1290, 1287, 1291, 1302, 1289,
     1293, 1288, 1293, 1292, 1306, 1291, 1283, 1293, 1290, 1264,

     1307, 1280, 1304, 1313, 1282, 1314, 1315, 1286, 1277, 1302,
     1279, 1281, 1313, 1307, 1287, 1316, 1289, 1317, 1318, 1288,
     1292, 1306,    0, 1291, 1314, 1321, 1290, 1295, 1295, 1295,
     1315, 1295, 1297, 1297, 1297, 1321, 1302, 1328, 1316,    0,
     1313, 1307,    0, 1324, 1317, 1318, 1326,    0, 1306, 1327,
     1328, 1314, 1297,    0, 1319, 1319, 1319, 1315, 1319, 1320,
     1320, 1320, 1324, 1321, 1326, 1316, 1336, 1338, 1320, 1335,
     1327, 1331, 1331, 1331, 1335, 1331, 1338, 1339, 1328, 1333,
     1333, 1333, 1340, 1341, 1336, 1342, 1346, 1345, 1333, 1324,
     1347, 1326, 1342,    0, 1346, 1339, 1345, 1327, 1347, 1348,

        0,    0, 1335,    0, 1338,    0,    0,    0, 1348, 1340,
     1341, 1336,    0,    0, 1346,    0,    0,    0, 1347,    0,
     1342, 1346, 1339,    0, 1345, 1347,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1348, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1365, 1365, 1365, 1365, 1365, 1365, 1365,

     1365, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1371, 1371, 1372,    0, 1372, 1372, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379, 1379, 1379,

     1379, 1379, 1379, 1380, 1380, 1380, 1380, 1380, 1380,    0,
     1380, 1381, 1381, 1381, 1381, 1381,    0, 1381, 1381, 1382,
        0, 1382, 1383,    0, 1383, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1403, 1403, 1403,
     1403, 1403, 1403,    0, 1403, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405, 1405, 1405,

     1405, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423,
     1423, 1423, 1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1428, 1428, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431, 1431, 1431,

     1431, 1431, 1431, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1444,

     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456, 1456,

     1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1459,
     1459, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469, 1469, 1469,

     1469, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1477, 1477, 1477,
     1477, 1477, 1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1482, 1482, 1482,

     1482, 1482, 1482, 1482, 1482, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1483, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1491, 1491,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1495, 1495, 1495, 1495, 1495, 1495,

     1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1505, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1508, 1508,

     1508, 1508, 1508, 1508, 1508, 1508, 1509, 1509, 1509, 1509,
     1509, 1509, 1509, 1509, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1520, 1520, 1520, 1520, 1520, 1520,

     1520, 1520, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1525, 1526, 1526, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1530, 1530,
     1530, 1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1531, 1532, 1532, 1532, 1532, 1532, 1532,
     1532, 1532, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,

     1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1535, 1535,
     1535, 1535, 1535, 1535, 1535, 1535, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1542,
     1542, 1542, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1545, 1545,
     1545, 1545, 1545, 1545, 1545, 1545, 1546, 1546, 1546, 1546,

     1546, 1546, 1546, 1546, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1550, 1550,
     1550, 1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1557, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,

     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1564, 1564, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1572, 1572,

     1572, 1572, 1572, 1572, 1572, 1572, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1577, 1577,
     1577,    0, 1577, 1577, 1577, 1577, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584,

     1584, 1584, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1593, 1593, 1594,    0,
     1594, 1594, 1594, 1594, 1594, 1594, 1595,    0, 1595, 1595,
     1595, 1595, 1595, 1595, 1596,    0, 1596, 1596, 1596, 1596,
     1596, 1596, 1597,    0, 1597, 1597, 1597, 1597, 1597, 1597,

     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest, lexer_string, lexer_lr;
std::string     lexer_include;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;

#line 2458 "lexer.cpp"

#line 32 "lexer.l"
  //  following are keywords starting with c
#line 2462 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10
#define state_scanompfixed 11
#define state_scanompfree 12
#define state_incfilename 13
#define state_char 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 34 "lexer.l"


#line 2705 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1358 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6301 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 36 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 39 "lexer.l"
{ D(O("lrplus");O(lrlevel);Y;); 
                   lrlevel++;
		}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "lexer.l"
{ D(O("lrmin");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 57 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); 
                    lexer_lr += yytext;
		} 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 65 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 86 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 94 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		lexer_lr = "";
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 110 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 114 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK

/* to be used in '#include <file>' */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("INCFILENAME");Y;); lexer_string = yytext; 
                             BEGIN state_char; 
			     return INCFILENAME; }
	YY_BREAK


case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 141 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("ENDTEAM");Y);            return ENDTEAM;           }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("INCLUDE");Y;);           return INCLUDE;           }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 94:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 219 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 220 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 221 "lexer.l"
{ D(O("USE");Y);                return USE;               }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 222 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 98:
YY_RULE_SETUP
#line 226 "lexer.l"
{ D(O("SEGMENT");Y;);           return SEGMENT;           }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 227 "lexer.l"
{ D(O("ENDSEGMENT");Y;);        return ENDSEGMENT;        }
	YY_BREAK


case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 231 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 232 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 233 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 234 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 235 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 236 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 237 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 238 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 239 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 240 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 241 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 242 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 243 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 244 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 114:
#line 249 "lexer.l"
case 115:
/* rule 115 can match eol */
#line 250 "lexer.l"
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 250 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 253 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 254 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 119:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 257 "lexer.l"
case 120:
YY_RULE_SETUP
#line 258 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 261 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 262 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 123:
YY_RULE_SETUP
#line 265 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 268 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 271 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 274 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 277 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 282 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 287 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 290 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 293 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 296 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 299 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 302 "lexer.l"
{ D(O("INCLUDE_CPP");Y;);
                                extract_include();
                                return INCLUDE_CPP;
		              }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 306 "lexer.l"
{ D(O("INCLUDE_CPP_STD");Y;);
                                extract_include();
                                return INCLUDE_CPP_STD;
		              }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 312 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 315 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 318 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 321 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 324 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 327 "lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                extract_include();
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 334 "lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                extract_include();
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 343 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 344 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 145:
YY_RULE_SETUP
#line 347 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       lexer_string = pline.get_value(std::string(yytext));
		       D(O("QSTRING");O(lexer_string);Y;);
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 146:
/* rule 146 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 372 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 378 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 385 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    lexer_lr = "";
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 393 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 400 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 402 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 403 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 405 "lexer.l"
ECHO;
	YY_BREAK
#line 3766 "lexer.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(state_identifier):
			case YY_STATE_EOF(state_keyword):
			case YY_STATE_EOF(state_lr):
			case YY_STATE_EOF(state_lrb):
			case YY_STATE_EOF(state_skip):
			case YY_STATE_EOF(state_skipall):
			case YY_STATE_EOF(state_skipnoop):
			case YY_STATE_EOF(state_error):
			case YY_STATE_EOF(state_findformat):
			case YY_STATE_EOF(state_scanfixpre):
			case YY_STATE_EOF(state_scanompfixed):
			case YY_STATE_EOF(state_scanompfree):
			case YY_STATE_EOF(state_incfilename):
			case YY_STATE_EOF(state_char):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1358 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1358 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1357);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 405 "lexer.l"


void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case CHAR:          BEGIN(state_char);         break;
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case INCFILENAME:   BEGIN(state_incfilename);  break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}
std::string lexer_getstring()
{
   D(O("lexer_string");O(lexer_string););
   return lexer_string;
}
std::string lexer_getlr()
{
   D(O("lexer_lr");O(lexer_lr););
   return lexer_lr;
}
std::string lexer_getinclude()
{
   D(O("lexer_getinclude");O(lexer_include););
   return lexer_include;
}

void extract_include()
{
// removes first and last character of rest of input line
// example: 
// #include "file.inc"
// after scanning of '#include ', the string "file.inc",
// without quotes is put in lexer_include

   size_t l = input_string.length()-yyleng-1;
   lexer_include = input_string.substr(yyleng,l);
   if (lexer_include.size() > 1)
   {
      lexer_include.erase(lexer_include.end()-1);
      lexer_include.erase(lexer_include.begin());
   }
   D(O("lexer_include");O(lexer_include););
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


