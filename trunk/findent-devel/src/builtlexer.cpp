#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 116
#define YY_END_OF_BUFFER 117
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1119] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  117,  115,  114,  115,  111,  110,  115,  112,
      113,   16,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,    4,    5,    2,    3,
        8,    9,    6,    7,   15,   14,   10,   12,   11,   13,
        1,  116,  116,  103,  116,  103,  116,  116,  116,  116,
      116,  116,  107,  107,  106,  107,  107,  108,    0,  110,
        0,    0,   16,   17,   16,    0,    0,    0,    0,    0,
        0,    0,    0,   32,    0,    0,    0,    0,   67,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   85,
        0,    0,    0,  103,    0,   91,    0,    0,    0,   91,
        0,    0,    0,  103,    0,    0,    0,    0,    0,    0,
       93,    0,    0,    0,    0,   91,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      109,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       33,    0,    0,    0,    0,    0,   49,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   91,    0,    0,    0,   91,    0,    0,    0,   91,

        0,    0,    0,   91,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,    0,    0,    0,    0,
       95,    0,    0,    0,    0,    0,    0,   93,    0,    0,
        0,   95,    0,    0,    0,   91,    0,    0,    0,    0,
        0,    0,   91,    0,    0,   91,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   24,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   41,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   64,
        0,    0,    0,    0,    0,    0,    0,    0,   78,   79,

        0,    0,    0,    0,   86,   87,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   93,    0,    0,
       97,    0,    0,   91,    0,   91,   91,    0,   91,    0,
        0,   91,   91,   91,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   92,    0,
        0,    0,   92,    0,    0,   98,    0,   93,    0,    0,
       95,    0,   97,   93,    0,   93,  103,    0,   95,    0,
        0,    0,    0,    0,    0,    0,    0,   93,    0,   91,
        0,    0,    0,  101,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   21,    0,    0,   27,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   48,
        0,    0,    0,   53,    0,    0,    0,    0,    0,    0,
        0,   63,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   88,    0,   90,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   93,    0,   91,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   92,    0,   92,   92,    0,   92,    0,   93,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   93,    0,    0,    0,   95,    0,    0,
        0,  100,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   20,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   42,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   65,    0,   68,
        0,    0,    0,   72,    0,    0,    0,    0,    0,    0,

       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   92,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   93,  101,   93,    0,   95,
        0,    0,    0,    0,   93,    0,    0,    0,   95,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   28,   29,    0,    0,    0,

        0,    0,    0,    0,   36,    0,    0,    0,    0,    0,
       50,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       61,    0,    0,   69,    0,   71,    0,    0,    0,    0,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   91,    0,    0,    0,    0,   91,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   97,    0,    0,    0,    0,   93,    0,    0,    0,
        0,    0,    0,  102,    0,    0,    0,    0,    0,   94,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   97,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   97,    0,    0,    0,    0,   93,    0,  100,
        0,   93,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   30,   31,    0,   37,
        0,    0,    0,    0,    0,    0,   45,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   62,   66,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       91,    0,   91,    0,   91,    0,   91,    0,   96,    0,
       93,    0,   96,    0,   93,    0,   93,    0,    0,    0,
       96,    0,    0,   94,    0,   94,    0,    0,   93,    0,
        0,   96,    0,    0,    0,   92,    0,   92,    0,   92,
        0,   96,    0,   93,    0,   92,    0,   91,    0,   91,
        0,   96,    0,   93,    0,   96,    0,   93,    0,   96,
        0,   93,    0,   96,    0,   93,    0,    0,    0,    0,
        0,    0,    0,    0,   19,   22,    0,   25,    0,    0,
        0,    0,    0,   40,   43,    0,    0,    0,   51,    0,
        0,   55,    0,    0,   58,    0,    0,   70,    0,    0,

        0,   76,   80,    0,    0,   83,    0,    0,    0,   93,
        0,   99,    0,   93,    0,    0,   96,    0,   93,    0,
       94,  102,   93,    0,   96,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   57,    0,    0,    0,    0,    0,   81,   82,
       84,    0,   93,    0,   93,    0,    0,    0,    0,    0,
       23,    0,    0,    0,    0,    0,    0,    0,   47,   52,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   26,    0,   34,    0,    0,   44,   46,   54,   56,
       60,    0,    0,    0,    0,  104,  105,    0,   35,   38,

        0,   59,    0,    0,    0,    0,    0,   75,    0,    0,
        0,   39,   73,    0,    0,   74,   18,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,    1,    1,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
       16,    1,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       26,   33,   34,   35,   36,   37,   38,   39,   40,   26,
       41,    1,   42,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   26,   53,   54,   55,   56,
       57,   58,   26,   59,   60,   61,   62,   63,   64,   65,
       66,   26,    1,   67,    1,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    4,    5,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_uint16_t yy_base[1313] =
    {   0,
        0,   67,  134,  201,  266, 2399,   14,   16,   15,   17,
       19,   20,   43,   44,   84,  111, 2398, 2388, 2386,  328,
       29,  151, 2382, 4623, 4623,   24, 4623, 2367, 2364, 4623,
     4623,   37,  203,   34,  361,    6,   77,  204,   71,  142,
      143,  205,   81,  209,  304,  108, 4623, 4623, 4623, 4623,
     4623, 4623, 4623, 4623, 4623, 4623, 4623, 4623, 4623, 4623,
     4623, 4623, 2358, 4623,  110,  157,  420,   95,  162,  177,
      487,  553, 4623,   46, 4623,  224,  225, 4623,   51, 2345,
     2343,    0, 2342,    0,  176,  216,  217,  208,  218,  178,
      181,  267,  255,  326,  331,  348,  257,  219, 2334,  221,

      321,   80,  334,  336,  338,  422,  345,  244,  365, 2327,
      385,  423, 2324, 4623,  185,  159,  103,  399,  251,  180,
      119,  443,  300,  297,  619,  446,  447,  455,  686,  460,
     2317,  470,  473,  501,  509, 2313,  477,  517,  753,  531,
      522,  543,  542,  597,  449,  528,  539,   14,  634,  256,
     4623,  381,  492,  518,  494,  545,  553,  560,  554,  602,
      563,  383,  490,  590,  314,  624,  806,  625,  639,  559,
      627,  642,  629,  651,  644,  690,  634,  692,  649,  660,
      715,  695,  697,  708,  662,  644,  712,  402,  723,  773,
      726, 2308,  777,  728,  780, 2302,  740,  788,  795, 2296,

      355,  462,  797, 2284, 2285,  800,  803,  813,  870,  805,
      885,  937,  804,  830,  840,  476,  827,  893,  854,  901,
     2272,  839,  911, 2260,  769,  853,  915, 4623,  919,  922,
      952, 2263,  890,  960,  927, 2252,  898,  968,  978, 2249,
     2244,  926, 4623,  982,  990, 2230, 1004,  993, 1020, 1019,
     1027, 1028, 1047, 1046, 1054, 1055, 1074,  131,  618,  832,
      796, 1019,  973, 1053,  959, 1020, 1038, 1026, 1061,  693,
      326,  945, 1054, 1066, 1082, 1069, 1078, 1070, 1081,  877,
     1080, 1091, 1117, 1094, 1090, 1114, 1102, 1119, 1105, 2211,
     1126, 1096, 1104, 1141, 1140, 1150, 1131, 1152, 2204, 2195,

     1154, 1162, 1157, 1167, 2187, 1174, 1175, 1192, 1018, 1213,
     1200, 1203, 1216, 1225, 1228, 1236, 1233, 2163,  964, 1244,
     2149, 1241, 1249, 4623, 1252, 2138, 4623, 1260, 2121, 2118,
     1190, 4623, 2083, 4623, 1263, 1264, 1272, 1275, 1283, 1285,
     1293, 1280, 1301, 1310, 1324, 1332, 1377, 1335, 1290, 1344,
     1351, 1359, 1298, 1367, 1336, 1392, 1395, 1356, 2017, 1403,
     1405, 1418, 1948, 1364, 1426, 1940, 1400, 4623, 1430, 1438,
     1932, 1328, 4623, 4623, 1446, 4623, 1929, 1449, 1918, 1408,
     1453, 1461, 1458, 1469, 1472, 1480, 1900, 4623, 1484, 4623,
     1493, 1507, 1508,  729, 1511, 1519, 1522, 1534, 1535, 1542,

     1543, 1550, 1559, 1568, 1571, 1579,  632, 1155, 1265, 1370,
     1218, 1550, 1535, 1511, 1574, 1571, 1303, 1560,  870, 1158,
     1586, 1587, 1464, 1588, 1589, 1351, 1576, 1476, 1599, 1886,
      982, 1600, 1601, 1874, 1594, 1602, 1610, 1504, 1619, 1613,
     1625, 1871, 1615, 1627, 1632, 1633, 1641, 1643, 1647, 1646,
     1655, 1650, 1659, 1662, 1660, 4623, 1663, 1830, 1680, 1558,
     1698, 1683, 1434, 1155, 1702, 1791, 1709, 1790, 1713, 1722,
     1725, 1729, 4623, 1732, 4623, 1734, 1735, 1743, 1746, 1738,
     1254, 1748, 1775, 1754, 1774, 1758, 1761, 1764, 1767, 1770,
     1780, 1783, 1786, 1771, 1796, 1454, 1800, 1751, 1804, 1787,

     1808, 1716, 1811, 1705, 1815, 1695, 1819, 1822, 1826, 1685,
     1829, 4623, 1832, 1634, 4623, 1835, 1573, 1839, 4623, 1841,
     1563, 1845, 1551, 1849, 1852, 1856, 1859, 1864, 1878, 1879,
     1882, 1890, 1887, 1540, 1895, 1897, 1906, 1536, 1526, 1910,
     1913, 1912, 1916, 1924, 1927, 1930, 1935, 1938, 1943, 1946,
     1954, 1957, 1964, 1494, 1670, 1935, 1475, 1955, 1963, 1943,
     1960, 1964, 1927,  894, 1959, 1973, 1963, 1622, 1978, 1981,
     1987, 1971, 1465, 1990, 2003, 1982, 2001, 2004, 2005, 2010,
     2009, 2008, 2022, 2027, 2032, 2031, 2036, 1454, 2035, 1453,
     2038, 2059, 2039, 2062, 2028, 2070, 2048, 2063, 2065, 2071,

     1445, 2099, 2080, 2110, 2107, 2126, 2128, 2136, 2114, 2133,
     2144, 2147, 2155, 2157, 2152, 2165, 2162, 2173, 2175, 2183,
     2170, 2180, 2191, 2194, 2202, 2204, 2212, 2215, 2220, 2219,
     2228, 2231, 2239, 2236, 2243, 2247, 2250, 2258, 2255, 2262,
     2270, 2267, 2278, 2281, 2289, 2292, 4623, 2294, 2297, 2299,
     2307, 2311, 2319, 2328, 2342, 2343, 2316, 2351, 2354, 2363,
     2359, 2371, 2374, 2375, 2383, 4623, 1441, 4623, 2394, 1440,
     2385, 2397, 2405, 2402, 1416, 2413, 2415, 2423, 1419, 2410,
     2426, 2431, 2434, 2439, 2442, 2449, 2450, 1848, 2025, 2166,
     2415, 2426, 2090, 2442, 2449, 1401, 1400, 2378, 2418, 2082,

     2010, 2447, 2434, 2451, 1359, 2453, 2459, 2462, 2251, 2464,
     1343, 2460, 2468, 2486, 2481, 2492, 2487, 2502, 2497, 2500,
     1342, 2511, 2507, 1335, 2515, 1328, 2176, 2490, 2524, 2509,
     1327, 2510, 2521, 2512, 2528, 2547, 2561, 2541, 2572, 2576,
     2585, 2587, 2598, 1303, 2588, 2606, 2595, 2610, 4623, 2614,
     2622, 2626, 2634, 2638, 2641, 2642, 2650, 2653, 2661, 2663,
     2671, 1295, 2658, 2679, 2668, 2683, 4623, 2687, 2695, 2699,
     2707, 2711, 2714, 1915, 2721, 2718, 2729, 2732, 2740, 2743,
     2719, 2751, 2754, 2755, 2763, 2766, 2774, 2776, 2784, 1286,
     2771, 2792, 2795, 2781, 2803, 2811, 2800, 2815, 2818, 2826,

     4623, 2829, 2837, 2845, 2849, 2857, 2861, 2865, 2868, 2834,
     2876, 2873, 2884, 2887, 2895, 2898, 2907, 2921, 2922, 2925,
     2933, 2930, 2942, 2938, 2950, 1274, 2953, 2961, 2958, 2969,
     4623, 2973, 2981, 2985, 2993, 2996, 2997, 3005, 3008, 3016,
     3018, 3026, 1266, 3013, 3034, 3023, 3038, 4623, 3042, 1255,
     3050, 4623, 3053, 3058, 3061, 3066, 3069, 3074, 2425, 2506,
     2568, 3061, 2536, 2633, 2703, 2840, 1220, 1217, 2525, 4623,
     2714, 2540, 3070, 2606, 3071, 2880, 3053, 3065, 3066, 3073,
     2777, 3078, 3086, 3088, 2989, 3092, 2643, 1205, 1146, 3089,
     3099, 3093, 3112, 3101, 3119, 2776, 3116, 3120, 3121, 3156,

     1139, 3143, 4623, 3167, 1121, 3176, 4623, 3179, 1037, 3187,
     4623, 3190, 1034, 3198, 4623, 3135,  981, 3201, 3203, 3211,
      984, 3153, 3219, 3222, 3227, 3230, 3208, 3231,  955, 3238,
     3246,  940, 3235, 3254, 3262,  873, 3266, 4623, 3274,  864,
     3282,  863, 3286, 4623, 3290, 4623, 3298,  855, 3302, 4623,
     3310,  832, 3314, 4623, 3322,  824, 3326, 4623, 3334,  783,
     3338, 4623, 3346,  782, 3350, 4623, 3353, 3358, 3361, 3366,
     3371, 2141, 2583, 3266,  737,  732, 3306,  727, 2998, 3056,
     3358, 3194, 3227,  724,  707, 3265, 3366, 3367,  704, 3357,
     3372,  655, 3183, 3362,  654, 3350, 3378,  647, 3375, 3380,

     3239,  636,  596, 3377, 3381,  593, 3386, 3400, 3428, 4623,
     3438,  591, 3415, 4623, 3441, 3449,  590, 3419,  580,  577,
      568,  533, 4623, 3457,  519, 3460, 3465, 2581, 2597, 3385,
     3420, 3421, 2824, 3441, 3449, 3442, 3457, 3458, 3461, 3465,
     3463, 3468,  501, 3470, 3471, 3469, 3485, 3495,  480,  469,
      468, 3532, 4623, 3535, 4623, 3502, 3511, 3281, 3448, 3507,
      455, 3514, 3501, 3525, 3530, 3527, 3532, 3533,  413,  404,
     3541, 3544, 3548, 3549, 3551, 3552, 3555, 3579,  391,  372,
     3568,  351, 3533,  323, 3556, 3582,  302,  278,  277,  243,
      240, 3583, 3559, 3566, 3558, 4623, 4623, 3591, 4623,  177,

     3593,  157, 3570, 3596, 3595, 3597, 3600,  154, 3617, 3603,
     3620,   96,   84, 3621, 3622,   49,   25, 4623, 3670, 3675,
     3680, 3685, 3690, 3695, 3700, 3705, 3710, 3712, 3716, 3721,
     3726, 3731, 3736, 3741, 3746, 3751, 3756, 3759, 3762, 3766,
     3771, 3776, 3781, 3786, 3791, 3796, 3801, 3806, 3811, 3816,
     3821, 3826, 3831, 3836, 3841, 3846, 3851, 3856, 3861, 3866,
     3871, 3876, 3881, 3886, 3891, 3896, 3901, 3906, 3911, 3916,
     3921, 3926, 3931, 3936, 3941, 3946, 3951, 3956, 3961, 3966,
     3971, 3976, 3981, 3986, 3991, 3996, 4001, 4006, 4011, 4016,
     4021, 4026, 4031, 4036, 4041, 4046, 4051, 4056, 4061, 4066,

     4071, 4076, 4078, 4083, 4088, 4093, 4098, 4103, 4108, 4113,
     4118, 4123, 4128, 4133, 4138, 4143, 4148, 4153, 4158, 4163,
     4168, 4173, 4178, 4183, 4188, 4193, 4198, 4203, 4208, 4213,
     4218, 4223, 4228, 4233, 4238, 4243, 4248, 4253, 4258, 4263,
     4268, 4273, 4278, 4283, 4288, 4293, 4298, 4303, 4308, 4313,
     4318, 4323, 4328, 4333, 4338, 4343, 4348, 4353, 4355, 4360,
     4365, 4370, 4375, 4380, 4385, 4390, 4395, 4400, 4405, 4410,
     4415, 4420, 4425, 4430, 4435, 4440, 4445, 4450, 4455, 4460,
     4465, 4470, 4475, 4480, 4485, 4490, 4495, 4500, 4505, 4510,
     4515, 4517, 4522, 4527, 4532, 4537, 4542, 4547, 4552, 4557,

     4562, 4567, 4572, 4577, 4582, 4587, 4592, 4597, 4602, 4607,
     4612, 4617
    } ;

static yyconst flex_int16_t yy_def[1313] =
    {   0,
     1119, 1119, 1120, 1120,    2,    5, 1121, 1121, 1122, 1122,
     1123, 1123, 1123, 1123, 1123, 1123, 1124, 1124, 1125, 1126,
     1127, 1127, 1118, 1118, 1118, 1118, 1118, 1118, 1128, 1118,
     1118, 1129, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1130, 1118, 1131, 1132, 1133, 1134, 1135, 1136,
     1133, 1135, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1128, 1137, 1138, 1139, 1129, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1130, 1118, 1140, 1141, 1142, 1143, 1132, 1141,
     1144, 1145, 1146, 1141, 1147, 1148, 1149, 1150, 1147, 1148,
     1151, 1152, 1153, 1154, 1154, 1155, 1156, 1154, 1157, 1146,
     1146, 1146, 1146, 1146, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1118, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1158, 1159, 1160, 1141, 1161, 1155,
     1159, 1151, 1162, 1160, 1160, 1155, 1162, 1160, 1144, 1151,

     1163, 1145, 1145, 1155, 1163, 1164, 1165, 1166, 1167, 1168,
     1169, 1167, 1165, 1170, 1168, 1141, 1171, 1172, 1169, 1169,
     1155, 1173, 1169, 1151, 1118, 1170, 1170, 1118, 1170, 1166,
     1166, 1155, 1170, 1166, 1174, 1155, 1175, 1174, 1174, 1155,
     1176, 1175, 1118, 1175, 1174, 1155, 1177, 1178, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1118, 1118, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1118,
     1118, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1179, 1180, 1181,
     1180, 1182, 1181, 1181, 1182, 1181, 1183, 1151, 1176, 1155,
     1155, 1182, 1182, 1118, 1182, 1155, 1118, 1181, 1155, 1163,
     1163, 1118, 1155, 1118, 1184, 1185, 1186, 1185, 1187, 1186,
     1186, 1187, 1186, 1188, 1189, 1190, 1188, 1189, 1191, 1192,
     1190, 1190, 1193, 1190, 1187, 1187, 1187, 1191, 1151, 1194,
     1192, 1192, 1155, 1194, 1192, 1155, 1193, 1118, 1193, 1190,
     1155, 1118, 1118, 1118, 1187, 1118, 1155, 1186, 1155, 1195,
     1196, 1195, 1196, 1196, 1195, 1195, 1176, 1118, 1196, 1118,
     1197, 1198, 1198, 1199, 1200, 1201, 1202, 1202, 1184, 1184,

     1184, 1184, 1184, 1184, 1184, 1184, 1118, 1118, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1118, 1118,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1118, 1203, 1203, 1204, 1205,
     1206, 1205, 1207, 1206, 1206, 1207, 1206, 1207, 1207, 1207,
     1206, 1176, 1118, 1207, 1118, 1208, 1209, 1210, 1209, 1211,
     1210, 1210, 1211, 1210, 1211, 1211, 1211, 1210, 1208, 1212,
     1213, 1208, 1212, 1214, 1215, 1213, 1213, 1216, 1213, 1214,

     1217, 1215, 1215, 1217, 1215, 1216, 1216, 1213, 1211, 1217,
     1217, 1118, 1217, 1155, 1118, 1215, 1155, 1216, 1118, 1218,
     1219, 1218, 1219, 1219, 1218, 1219, 1218, 1220, 1221, 1221,
     1222, 1223, 1222, 1224, 1225, 1223, 1223, 1155, 1225, 1223,
     1226, 1227, 1228, 1229, 1226, 1226, 1208, 1208, 1208, 1208,
     1208, 1208, 1226, 1118, 1118, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1118, 1118, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,

     1203, 1230, 1231, 1232, 1231, 1233, 1232, 1232, 1233, 1233,
     1233, 1232, 1233, 1234, 1235, 1236, 1235, 1237, 1236, 1236,
     1237, 1237, 1237, 1236, 1237, 1238, 1239, 1238, 1240, 1241,
     1242, 1243, 1243, 1244, 1241, 1245, 1242, 1242, 1245, 1244,
     1243, 1245, 1245, 1242, 1244, 1245, 1118, 1246, 1247, 1247,
     1246, 1247, 1246, 1248, 1249, 1249, 1250, 1251, 1250, 1252,
     1251, 1251, 1252, 1252, 1252, 1118, 1253, 1118, 1251, 1253,
     1254, 1255, 1256, 1255, 1257, 1258, 1256, 1256, 1253, 1258,
     1234, 1254, 1234, 1234, 1234, 1234, 1234, 1118, 1118, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1118,

     1118, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1260, 1261, 1262, 1261,
     1263, 1262, 1262, 1253, 1263, 1262, 1263, 1263, 1118, 1263,
     1262, 1263, 1262, 1263, 1234, 1264, 1265, 1264, 1266, 1265,
     1265, 1253, 1266, 1265, 1266, 1266, 1118, 1266, 1265, 1266,
     1265, 1266, 1238, 1267, 1238, 1268, 1269, 1270, 1270, 1271,
     1272, 1273, 1274, 1275, 1276, 1275, 1277, 1276, 1276, 1253,
     1277, 1276, 1278, 1279, 1278, 1278, 1279, 1279, 1277, 1277,

     1118, 1277, 1276, 1278, 1277, 1276, 1279, 1277, 1280, 1281,
     1280, 1281, 1281, 1280, 1281, 1280, 1282, 1283, 1283, 1284,
     1285, 1284, 1286, 1285, 1285, 1253, 1286, 1285, 1286, 1286,
     1118, 1286, 1285, 1286, 1285, 1287, 1288, 1289, 1288, 1290,
     1289, 1289, 1253, 1290, 1289, 1290, 1290, 1118, 1290, 1253,
     1289, 1118, 1291, 1287, 1291, 1291, 1291, 1291, 1118, 1118,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1118, 1118,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293,

     1253, 1294, 1118, 1293, 1253, 1294, 1118, 1295, 1253, 1296,
     1118, 1295, 1253, 1296, 1118, 1297, 1298, 1299, 1300, 1300,
     1253, 1301, 1300, 1302, 1302, 1302, 1303, 1304, 1305, 1306,
     1306, 1253, 1299, 1306, 1307, 1253, 1308, 1118, 1307, 1253,
     1309, 1253, 1310, 1118, 1308, 1118, 1311, 1253, 1312, 1118,
     1285, 1253, 1286, 1118, 1285, 1253, 1286, 1118, 1289, 1253,
     1290, 1118, 1289, 1253, 1290, 1118, 1291, 1287, 1291, 1287,
     1287, 1118, 1118, 1292, 1292, 1292, 1292, 1292, 1292, 1118,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,

     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1299, 1299, 1118,
     1299, 1253, 1301, 1118, 1301, 1300, 1253, 1303, 1305, 1305,
     1305, 1253, 1118, 1306, 1253, 1291, 1291, 1118, 1118, 1292,
     1292, 1292, 1118, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1299, 1118, 1301, 1118, 1291, 1287, 1118, 1118, 1292,
     1292, 1292, 1118, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1287, 1118, 1118,
     1292, 1292, 1118, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1118, 1118, 1292, 1118, 1292,

     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292,    0, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118
    } ;

static yyconst flex_uint16_t yy_nxt[4691] =
    {   0,
       24,   24,   25,   26,   24,   24,   24,   24,   24,   27,
       24,   24,   24,   28,   24,   24,   48,   52,   48,   52,
       82,   56,   56,   49,   50,   49,   50,   78,   57,   57,
       74,   75,   74,   76,   58,   58,   94,   79,  258,   82,
       30,   24,   24,   83,   84,   56,   56,  145,   82,  145,
      146,   82,   57,   57,   78,   53,   54,   53,   54,   59,
       59,   88,   94,   82,   79,  258,   24,   24,   24,   31,
       26,   24,   24,   24,   24,   24,   27,   24,   24,   24,
       28,   24,   24,   59,   59,   82,   56,   88,   60,   60,
       60,   82,   99,   57,   82,   82,   60,  131,   82,  100,

      101,  106,  174,  132,   95,  192,   96,   30,   24,   24,
       82,  193,  116,   56,  117,   60,   60,   60,  118,   99,
       57,  200,   82,   60,   59,  100,  101,  201,  106,  174,
       95,  112,   96,   24,   24,   24,   25,   26,   24,   24,
       24,   24,   24,   27,   24,   24,   24,   28,   24,   24,
       60,   59,   74,   75,   74,   76,   82,   82,  112,  120,
      407,  121,   77,  189,  124,  122,  126,  190,   82,   77,
      133,   82,  102,  103,   30,   24,   24,   60,  135,  136,
      135,  137,   83,   84,  189,  138,  407,  116,  190,  186,
       82,   82,   82,  187,  156,   82,   77,  157,  102,  103,

       24,   24,   24,   31,   26,   24,   24,   24,   24,   24,
       27,   24,   24,   24,   28,   24,   24,   82,   82,   82,
       86,  156,   82,   82,  157,  147,  149,  147,  149,  107,
       82,   82,   82,   82,   97,   82,   87,  104,  154,   98,
      105,   30,   24,   24,  108,  148,  150,   86,  171,  152,
      153,  155,  172,  120,   82,  121,  107,   82,   82,  122,
       97,  181,   87,  104,  154,   98,  105,   24,   25,   82,
      108,   82,  148,  150,  171,  152,  153,  155,  172,  160,
      259,   82,   33,   34,   35,   36,   37,   38,  181,  170,
       39,   82,   82,   40,   41,  158,  159,   42,   43,   44,

       45,  189,  124,   46,  207,  190,  160,  259,  208,   33,
       34,   35,   36,   37,   38,  170,   82,   39,   82,   40,
       41,  158,  159,   42,   43,   44,   45,  109,   82,   46,
       66,   67,   68,   69,  110,   82,   70,   82,  161,   69,
       82,   71,  275,  111,  162,   82,   72,   69,   82,  420,
       82,  165,   82,  175,  109,  173,  331,  332,  331,   82,
      110,  163,   82,  164,  166,   82,  176,  167,  275,  111,
      177,  162,  180,   72,   69,   82,  420,   89,  165,   82,
      175,  173,  168,  169,   90,  182, 1097,  163,   91,  164,
      166,   92,  176,   93,  167,   82,  177,   82,  180,   82,

      195,  196,  195,  197,   89, 1096,  189,  198,  168,  169,
      190,   90,  182,  272,   91,  260,  183,   92,   82,   93,
      123,  123,  124,  125,  126,  123,  123,   82,  128,  123,
      123,  123,  123,  129,  123,  123,   82,   82,  178,  272,
      179,  260,  183,  184,  203,  204,  203,  205,  131,  216,
      145,  217,  145,  146,  214,  218,  220,  221,  220,  222,
      123,  123,  131,  223,  333,  178,  205,  179,  214,   82,
      184,  227,  228,  227,  231,  232,  231,  233,  229,  243,
      189,  234,   82,   82,  190,  244,  123,  123,  123,  124,
      129,  126,  123,  123,   82,  133,  123,  123,  123,  123,

      129,  123,  123,  236,   82,  237,   82,  273,   82,  238,
      239,  136,  239,  237,  264,   82,  261,  238,  245,  246,
      245,  237,  262,  241,  124,  238,  207,  123,  123,  147,
      208,  147,   82,  124,  273,  207,  263,  241,  251,  208,
      147,  264,  147,  261,  124,  124,  207,  207,  262,  148,
      208,  208,  252,  123,  139,  124,  139,  126,  249,   82,
      148,  133,  253,  263,  250,  251,  256,   82,   82,  140,
     1021,  254,  255,   82,   82,  291,  148,  265,  252, 1021,
      141,  270, 1021,  142,  249,  143,  266,  148,  268,  253,
      250,  267,  144,  256,  241,  241,  140,  254,  255,  124,

      271,  207,  291,  265,   82,  208,  141,   82,  270,  142,
       82,  143,  266,  274,  268,  257,   82,  267,  144,  206,
      206,  124,  209,  207,  206,  206,  271,  211,  206,  206,
      206,  206,  212,  206,  206,  149,  269,  149,   82,   82,
      274,   82,  257,   82,  276,  292,  192,  408,   82,  294,
       82,  554,  312,   82,  299,  150,   82,  289,   82,  206,
      206,   82,  269,   82,  116,   82,  309,  290,   82,   82,
      310,  276,  292,  408,   82,  295,  294,  293,  554,  296,
      302,  299,  150,  289,  301,  206,  206,  206,  124,  212,
      207,  206,  206,  290,  208,  206,  206,  206,  206,  212,

      206,  206,  295,  293,   82,  296,   82,  302,  297,   82,
      301,   82,  298,  314,  196,  314,  315,  306,   82,  300,
      316,   82,   82,  419,  305,  318,  206,  206,  192,   82,
      326,  319,  315,  189,  312,  297,  316,  190,   82,  298,
      307,   82,  327,  303,  306,  300,   82,  304,  325,  419,
      305,   82,  206,  206,  247,  124,  247,  207,  206,  206,
      206,  208,  206,  206,  206,  206,  307,  206,  206,  303,
      372,  373,  372,  304,  320,  321,  320,  241,  323,  324,
      323,  314,  196,  314,  315,  325,  241,  241,  316,  328,
      329,  328,  315,  206,  206,  206,  316,  200,  203,  204,

      203,  205,  124,  201,  336,  131,  131,  216,  337,  349,
       82,  339,  339,  350,  341,  232,  341,  342,  410,  206,
       82,  343,  277,  278,  279,  280,  281,  282,  241,  359,
      283,  356,  228,  356,  284,  360,  241,  285,  357,  286,
      287,  368,  216,  288,  349,  410,   82,  369,  350,  277,
      278,  279,  280,  281,  282,  374,  366,  283,  353,  241,
      284,  357,  354,  285,  409,  286,  287,  241,  241,  288,
      335,  335,  124,  344,  336,  335,  335,  241,  346,  335,
      335,  335,  335,  347,  335,  335,  352,  221,  352,  353,
      409,   82,  374,  354,  362,  363,  362,  364,  357,  567,

      243,  365,  352,  221,  352,  353,  384,  430,   82,  354,
      335,  335,  370,  371,  370,  353,  356,  228,  356,  354,
      375,  376,  375,  357,  377,  567,  342,  357,  243,  236,
      343,  381,  697,  430,  384,  382,  335,  335,  335,  124,
      347,  336,  335,  335,  241,  337,  335,  335,  335,  335,
      347,  335,  335,  341,  232,  341,  342, 1021,  697,   82,
      343,  378,  379,  378,  342,  472,  473,  472,  343,  385,
      246,  385,  381,   82,  421,  414,  382,  335,  335,  386,
      136,  386,  381,  389,  390,  389,  382,   82,  241,  225,
      384,  385,  246,  385,  381,  394,   82,  395,  382,  412,

      421,  396,  414,  335,  335,  391,  124,  391,  336,  335,
      335,  335,  337,  335,  335,  335,  335,  578,  335,  335,
      192,  124,  124,  336,  336,  412,  463,  337,  337,  124,
      124,  336,  336,   82,   82,  337,  337,  411,  241,  398,
       82,  241,  417,  578,  335,  335,  335,  397,  124,  124,
      336,  336,   82,  415,  337,  337,  124,  124,  336,  336,
      399,  400,  337,  337,  411,  416,  398,   82,   82,  417,
      335,  401,  413,  397,  402,   82,  124,  403,  336,  415,
       82,  422,  337,   82,   82,  418,  399,  400,  404,  405,
      423,  416,   82,  425,   82,   82,   82,  428,  401,  413,

      402,  406,  424,  403,   82,   82,  426,  422,   82,  431,
       82,  427,  418,  429,  404,  405,   82,  423,   82,   82,
      425,  432,  437,  428,  436,  241,  433,  406,   82,  424,
      444,   82,  426,   82,  438,  431,  445,  427,  434,  429,
       82,  440,  441,  241,  442,   82,  435,  432,  437,  439,
      436,  450,  433,  443,   82,   82,  444,  326,  448,  609,
       82,  438,  445,  446,   82,  434,   82,  440,   82,  441,
      442,   82,  435,  447,  555,  439,   82,  449,  450,  443,
      453,   82,  568,  456,  451,  448,  452,  454,   82,   82,
      446,  331,  332,  331,  116,  458,  460,  455,  457,  447,

      461,  555,  192,  449,  469,  324,  469,  453,  463,  568,
      451,  470,  452,  454,  465,  196,  465,  466,  326,   82,
      466,  467,  458,  455,  467,  457,  465,  196,  465,  466,
      327,   82,   82,  467,   82,  318,  470,  471,  329,  471,
      466,  319,  558,  327,  467,  320,  321,  320,  241,  470,
      469,  324,  469,  474,  475,  474,  377,  470,  621,  241,
      470,  471,  329,  471,  466,  124,  131,  477,  467,  558,
      241,  478,  480,  482,  232,  482,  483,  131,  241,   82,
      484,  556,  374,  480,  486,  228,  486,  377,  487,  483,
      241,  487,  359,  484,  482,  232,  482,  483,  501,  241,

      368,  484,  488,  379,  488,  483,  507,  241,  556,  484,
      476,  476,  124,  489,  477,  476,  476,   82,  491,  476,
      476,  476,  476,  492,  476,  476,  216,  565,  494,  372,
      373,  372,  495,  497,  221,  497,  498,  216,  374,  494,
      499,   82,   82,  495,  487,  503,  363,  503,  504,   82,
      476,  476,  505,  366,  565,  498,   82,   82,  359,  499,
      497,  221,  497,  498,  501,   82,  515,  499,  508,  371,
      508,  498,  513,   82,  574,  499,  476,  476,  476,  124,
      492,  477,  476,  476,   82,  478,  476,  476,  476,  476,
      492,  476,  476,  486,  228,  486,  509,  376,  509,  557,

      487,  574,  368,  487,  511,  512,  511,  514,  507,  504,
      236,  513,  521,  505,   82,   82,  522,  476,  476,  503,
      363,  503,  504,  241,  225,  557,  505,  516,  517,  516,
      504,  518,  519,  518,  505,  611,  324,  611,  507,  508,
      371,  508,  498,  476,  241,  241,  499,  509,  376,  509,
      488,  379,  488,  483,  487,  243,  366,  484,  634,   82,
      243,  524,  525,  246,  525,  521,  524,   82,   82,  522,
      526,  390,  526,  525,  246,  525,  521,  524,   82,   82,
      522,  527,  136,  527,  521,  526,  390,  526,  522,   82,
       82,  571,  524,  476,  528,  124,  528,  477,  476,  476,

      476,  478,  476,  476,  476,  476,  576,  476,  476,  394,
      394,  531,  531,  534,  688,  532,  532,  571,   82,  535,
      537,  538,  537,  539,  542,   82,  543,  540,  668,  561,
      544,  584,  576,  476,  476,  476,  542,  124,  543,  477,
      241,  688,  544,  478,  124,  124,  477,  477,  225,   82,
      478,  478,  124,  243,  477,  560,  561,  584,  478,  476,
      192,  124,  546,  477,   82,  243,  606,  478,  545,  559,
      124,  547,  477,  124,   82,  477,  478,  241,  566,  478,
      548,  124,  560,  477,  550,   82,  549,  478,   82,  546,
       82,  564,  551,  562,  545,  552,  559,  547,  563,  553,

       82,   82,   82,   82,  569,  566,  548,  570,   82,  575,
      573,  550,  549,   82,   82,   82,   82,  572,  564,  551,
      562,  582,  552,  577,   82,  563,  553,   82,  581,   82,
      580,  569,  579,   82,  570,  575,  585,  573,  241,   82,
      583,   82,  588,  572,  586,  587,   82,   82,  582,  701,
      577,  589,  590,  591,  581,   82,  580,   82,  579,  593,
       82,   82,  592,  585,   82,  595,  583,  594,  588,   82,
      586,  596,  587,   82,   82,  701,   82,   82,  589,  590,
      591,  599,  116,  597,  603,  192,  593,  515,  604,  592,
      689,  606,  595,  598,  594,  600,  601,  368,  596,  608,

      196,  608,  609,  608,  196,  608,  609,  515,  599,  597,
      612,  329,  612,  609,  611,  324,  611,  689,  514,  598,
      639,  600,  601,  613,  475,  613,  612,  329,  612,  609,
      472,  473,  472,  613,  475,  613,  124,  131,  615,  623,
      228,  623,  616,  618,  620,  232,  620,  621,  131,  620,
      232,  620,  621,  368,  618,  624,  379,  624,  621,  623,
      228,  623,  625,  376,  625,  624,  379,  624,  621,  124,
      626,  615,  216,  359,  630,  627,  374,  374,  631,  636,
      628,  633,  221,  633,  634,  124,  628,  615,  216,  359,
      630,  616,  327,  327,  631,  636,  628,  638,  363,  638,

      639,  633,  221,  633,  634,  641,  371,  641,  634,  643,
      512,  643,  638,  363,  638,  639,  644,  517,  644,  639,
      645,  519,  645,  641,  371,  641,  634,  625,  376,  625,
      643,  512,  643,  646,  647,  646,  644,  517,  644,  639,
      645,  519,  645,  236,   82,  649,  651,  246,  651,  649,
      652,  390,  652,  651,  246,  651,  649,  652,  390,  652,
      653,  136,  653,  649,  614,  654,  124,  654,  615,  614,
      614,  614,  616,  614,  614,  614,  614,  859,  614,  614,
      394,  394,  657,  657,  534,   82,  658,  658,   82,  534,
      660,  662,  538,  662,  663,  660,  665,  666,  665,  667,

       82,  663,  388,  859,  614,  614,  614,  662,  538,  662,
      663,  669,  670,  669,  663,  542,  189,  672,  675,  189,
      190,  673,  241,  190,  676,  678,  679,  678,  680,  542,
      614,  672,  542,  241,  672,  673,  241,  124,  673,  615,
      124,   82,  615,  616,  241,  124,  616,  615,  124,   82,
      615,  616,  241,  690,  616,  681,  124,   82,  615,  124,
      696,  615,  616,  683,  693,  616,  542,  682,  672,   82,
      684,  691,  673,   82,   82,  687,  685,   82,   82,  692,
      690,  700,  681,  686,  695,   82,  696,   82,  698,  699,
      683,  693,   82,  682,  694,   82,   82,  684,  691,  703,

      709,   82,  687,  685,   82,  706,  692,  705,  700,  686,
      707,  695,  704,  702,  698,   82,  699,   82,   82,   82,
      694,  712,   82,   82,   82,  225,  703,  709,  713,  714,
      870,  706,  711,  708,  705,  710,   82,  707,  704,  702,
      716,   82,   82,  715,  717,   82,   82,  718,  712,   82,
       82,  721,   82,   82,  860,  713,  714,  870,  711,  708,
      719,  710,   82,  730,  720,  723,  726,  716,  722,  715,
      724,  717,  732,   82,  718,  725,   82,   82,  721,   82,
      860,  733,  192,  727,   82,   82,  719,  241,  741,  730,
      720,  723,  726,  728,  722,  729,  724,  734,  731,  732,

      735,  116,  725,  738,   82,  736,  864,  739,  733,  192,
      727,  743,  744,  743,  745,  741,  327,  869,  746,  728,
      334,  729,  750,  734,  731,  241,  735,  748,  749,  748,
      326,  736,  745,  864,  750,  327,  746,  751,  196,  751,
      745,  750,  241,  869,  746,  752,  324,  752,  753,  329,
      753,  745,  750,  241,  131,  746,  754,  475,  754,  124,
      759,  756, 1028,  750,  131,  757,  761,  762,  761,  763,
      759,  225,  374,  764,  766,  767,  766,  377,  768,  763,
       82,  768,  374,  764,  769,  232,  769,  763,  768, 1028,
       82,  764,  770,  228,  770,  771,  379,  771,  763,  768,

      861,   82,  764,  772,  376,  772,  774,  775,  776,   82,
      768,  891,  777,  779,  780,  779,  781,  774,   82,  776,
      764,  359,  216,  782,  784,   82,  861,  787,  785,  789,
      790,  789,  791,  366,  241,  794,  792,  891,  368,  795,
      796,  221,  796,  794,  798,  359,  388,  795,  800,  801,
      800,  787,  514,  241,  791,  802,  241,  515,  792,  803,
      363,  803,  791,  802,  368,   82,  792,  241,  225,  515,
      798,  804,  371,  804,  794,  802,  241,  877,  795,  805,
      512,  805,  806,  517,  806,  791,  802,  334,  241,  792,
      807,  519,  807,  808,  647,  808,  236,  798,  810,  243,

      802,  243,  811,  877,  225,  813,  241,  813,  814,  246,
      814,  810,  815,  390,  815,  811,  225,  241,  534,  813,
      816,  136,  816,  810,  823,  225,  114,  811,  755,  817,
      124,  817,  756,  755,  755,  755,  757,  755,  755,  755,
      755,   82,  755,  755,  394,  394,  820,  820,   82,   84,
      821,  821,  825,  826,  825,  827,  534,   82,   80,  828,
      114,  667,  823,  827,  830,  831,  830,  828,  755,  755,
      755,  832,  833,  538,  833,  827,  668,  668,   82,  828,
       80, 1118,  832,  832,  834,  666,  834,  542,   64,  837,
       62,  832,   82,  838,  755,  835,  670,  835,  827,  675,

       62,   31,  828, 1118,  675,  840,  842,  843,  842,  844,
      840,  867,  852,  845,  847,  848,  847,  850,  849,  844,
     1118,  849, 1118,  845,  851,  679,  851,  844,  124,   82,
      756,  845,   82,  542,  757,  837,  124,  867,  756,  838,
       82,  124,  757,  756,  124,  868,  756,  757,   82,  862,
      757,  124,  124,  756,  756,  853,   82,  757,  757,  972,
      863,   82,  865,   82,  872,   82,  858,   82,  855,  874,
      866,  868,  854,   82,   82,  862,   82,  856,   82,  871,
      876,  853,   82,  873,  857,  972,  863,  879,  878,  865,
      872,  875, 1118,  858,  855,   82,  874,  866,  854, 1118,

       82,   82,  880,  856,   82,  871,   82,  876,  882,  873,
      857,   82,  883,  879,   82,  878,   82,  875,  881,  884,
      885,   82,  892,   82,   82,   82,   82,  886,  880,   82,
      887,  888, 1118,  890,  882,   82,  889,  896,   82,  883,
      973,  894,   82,  192,  881,  884,  895,  885,  892,  741,
       82,  897,  976,  886,   82,  898,  887,  980,  888,  893,
      890,   82,  889,  116,  896,  738,  973,  894,  982,  739,
     1118,  899,  895,  900,  901,  900,  745,  897,  192,  976,
      746,  898,   82,  980,  741,  893,  902,  903,  902,  326,
      327,  745,  974,  750,  982,  746,  750,  327,  899,  743,

      744,  743,  745,  750, 1029, 1058,  746,  904,  905,  904,
      745,  748,  749,  748,  746,  906,  907,  906,  750,  974,
       82, 1059,  750,  751,  196,  751,  745,  752,  324,  752,
      746, 1029, 1058,  984,  750,  753,  329,  753,  745,  754,
      475,  754,  746,  124,  131,  756,  750,   82, 1059,  757,
      759,  908,  909,  908,  763,  131, 1118,   82,  764,  984,
      374,  759,  910,  911,  910,  377,  768,  763,  977,  768,
      374,  764,  761,  762,  761,  763,  768, 1118,  997,  764,
      912,  913,  912,  763,  766,  767,  766,  764,  914,  915,
      914,  768, 1118, 1118,  977,  768,  769,  232,  769,  763,

      770,  228,  770,  764,  997, 1118, 1118,  768,  771,  379,
      771,  763,  772,  376,  772,  764,  774,   82,  776,  768,
      917,  929,  782,  774,  775,  776,  918,  768,   82,  777,
      920,  921,  920,  922,  924,  978,  781,  923, 1118, 1118,
      764,  779,  780,  779,  781,  926,  981,  927,  764, 1118,
     1118,  240,  931,  932,  931,  933,  216,  359,  784,  934,
     1118,  978,  785,  787,  935,  936,  935,  791,  359, 1118,
     1118,  792,  981,  515,  787,  937,  938,  937,  514,  802,
      791, 1118,  802,  368,  792,  789,  790,  789,  791,  798,
       82,   82,  792,  939,  940,  939,  791,  366,  991,  794,

      792, 1118,  368,  795,  941,  942,  941,  794,  798, 1004,
     1118,  795,  796,  221,  796,  794,  943,  944,  943,  795,
      515, 1118, 1118,  798, 1118,  991,  802,  800,  801,  800,
      945,  946,  945, 1118,  802, 1004,  243,  802,  803,  363,
      803,  791,  813, 1118, 1063,  792,  804,  371,  804,  794,
      805,  512,  805,  795,   82, 1118,  979,  802,  806,  517,
      806,  791,  807,  519,  807,  792,  808,  647,  808,  798,
      236, 1063,  810,  802, 1118,  243,  811,  947,  948,  947,
      810,  813, 1118,  979,  811,  949,  950,  949,  814,  246,
      814,  810,  813, 1118,   82,  811,  815,  390,  815,  816,

      136,  816,  810,  813,  986, 1118,  811,  755,  817,  124,
      817,  756,  755,  755,  755,  757,  755,  755,  755,  755,
     1118,  755,  755,  394,  394,  820,  820,  534, 1118,  821,
      821,  986,  534,  823,  951,  952,  951,  827,  823, 1118,
      667,  828,  827,  953,  954,  953,  828,  755,  755,  755,
      832,  825,  826,  825,  827,  668, 1118, 1118,  828, 1118,
      668,  832,  955,  956,  955,  827,  832, 1118, 1118,  828,
      830,  831,  830,  755,  957,  958,  957,  832, 1118, 1118,
     1118,  832,  833,  538,  833,  827,  834,  666,  834,  828,
     1118, 1118, 1118,  832,  835,  670,  835,  827,  542,  675,

      837,  828, 1118,   82,  838,  840,  959,  960,  959,  844,
      675, 1118,   82,  845, 1118,  852,  840,  961,  962,  961,
      850,  849,  844,  995,  849,  852,  845,  842,  843,  842,
      844,  849, 1118, 1032,  845,  963,  964,  963,  844,  847,
      848,  847,  845,  965,  966,  965,  849, 1118, 1118,  995,
      849,  851,  679,  851,  844,  124, 1118,  756,  845, 1032,
      542,  757,  837,  124, 1118,  756,  838,   82,  124,  757,
      756,  124,  987,  756,  757,   82,  124,  757,  756,   82,
       82,  975,  757,  988,   82,   82,  967,   82, 1033,  970,
      983,  985,   82,  989,  968, 1118,  969,  990,  992,  987,

       82,  971,   82,   82,  994,  993,   82,   82,  975,  998,
      988,  996,  967,   82, 1033,   82,  970,  983,  985,  989,
      968, 1002,  969, 1000,  990,  992,   82,  971,  999, 1001,
       82,  994,  993,   82,   82,   82,  998,  917,  996, 1003,
     1006, 1118, 1118,  918,  902,  903,  902, 1005, 1002, 1000,
     1007,  750, 1118, 1118,  999, 1014, 1001,  900,  901,  900,
      745, 1015, 1118, 1118,  746, 1118, 1003, 1006,  904,  905,
      904,  745, 1118, 1005, 1118,  746, 1007,  906,  907,  906,
      908,  909,  908,  763,  750, 1118, 1118,  764,  910,  911,
      910,  912,  913,  912,  763,  768, 1118,   82,  764,  914,

      915,  914, 1009, 1010, 1009, 1012,  768,  922,   82, 1011,
     1019,  923,  920,  921,  920,  922,  387, 1118, 1042,  923,
     1016, 1017, 1016,  922,  926, 1035,  927,  923, 1118,  926,
      240,  927,  926,  929,  927,  240, 1118, 1023,  240,  768,
     1022,   82,  933, 1011, 1042, 1036,  934,  931,  932,  931,
      933, 1035, 1118,   82,  934, 1024, 1025, 1024,  933, 1118,
     1118, 1118,  934,  935,  936,  935,  791,  937,  938,  937,
      792, 1048, 1036, 1118,  802,  939,  940,  939,  791,   82,
       82, 1037,  792,  941,  942,  941,  794,  943,  944,  943,
      795,  945,  946,  945,  798, 1030, 1118, 1048,  802,  947,

      948,  947,  810,  949,  950,  949,  811, 1118, 1037, 1118,
      813,  951,  952,  951,  827,  953,  954,  953,  828, 1079,
       82, 1030,  832,  955,  956,  955,  827,  957,  958,  957,
      828, 1118, 1118, 1031,  832,  959,  960,  959,  844,  961,
      962,  961,  845, 1118, 1118, 1079,  849,  963,  964,  963,
      844,  965,  966,  965,  845,  124, 1118,  756,  849, 1031,
      542,  757,  837,  124,   82,  756,  838, 1118,  542,  757,
      837,   82,   82,  542,  838,  837,   82, 1026, 1034,  838,
       82,   82, 1038, 1039, 1118, 1044,   82, 1040, 1041,   82,
     1043,   82,   82, 1046,   82,   82, 1027, 1049, 1047,   82,

       82, 1050, 1023, 1118, 1026, 1034, 1051, 1118, 1011, 1038,
     1039, 1044, 1045, 1040, 1118, 1041, 1043, 1014, 1118, 1060,
     1046, 1019, 1027, 1015, 1049, 1047, 1118,  387, 1050, 1009,
     1010, 1009, 1118, 1051,   82,   82, 1011, 1118, 1045, 1052,
     1053, 1052, 1054, 1055, 1054, 1060, 1011, 1118, 1062, 1015,
     1016, 1017, 1016,  922, 1061,   82,   82,  923, 1024, 1025,
     1024,  933,  124,   82,  756,  934, 1066,  124,  757,  756,
     1064,   82,   82,  757, 1062,   82, 1065,   82, 1118,   82,
     1061, 1071,   82,   82,   82,   82, 1080, 1118, 1069, 1118,
     1056, 1067, 1068, 1066, 1070, 1074, 1064, 1073, 1057,   82,

     1072, 1118, 1065, 1075,  124, 1076,  756, 1118, 1071,   82,
      757, 1118, 1080,  542, 1069,  837, 1056, 1067, 1068,  838,
     1070,   82, 1074, 1073, 1057, 1077, 1072, 1081,   82, 1075,
     1083, 1078, 1076, 1052, 1053, 1052, 1054, 1055, 1054,   82,
     1011,   82, 1118, 1015,   82, 1118,   82,   82, 1082, 1088,
     1085, 1077, 1087, 1118, 1081,   82, 1083, 1078,   82, 1084,
     1086, 1089,   82,   82, 1090,   82,   82, 1099, 1091,   82,
       82, 1094,   82,   82, 1082, 1093, 1088, 1085, 1092, 1087,
       82,  542,   82,  837,   82, 1084, 1086,  838, 1089, 1103,
     1095, 1090, 1105, 1099, 1100, 1091,   82,   82, 1094, 1108,

     1098, 1104, 1093, 1102, 1092,   82, 1101,   82, 1118,   82,
       82,   82, 1106, 1111,   82, 1103, 1095,   82, 1105, 1110,
     1100, 1118, 1118, 1107, 1118, 1108, 1098, 1104, 1109, 1112,
     1102,   82, 1114, 1101,   82,   82,   82, 1113, 1115, 1106,
     1111, 1116, 1117, 1118, 1118, 1118, 1110, 1118, 1118, 1107,
     1118, 1118, 1118, 1118, 1109, 1112, 1118, 1118, 1114, 1118,
     1118, 1118, 1118, 1118, 1113, 1115, 1118, 1118, 1116, 1117,
       29,   29,   29,   29,   29,   32,   32,   32,   32,   32,
       47,   47,   47,   47,   47,   51,   51,   51,   51,   51,
       55,   55,   55,   55,   55,   61,   61,   61,   61,   61,

       63,   63,   63,   63,   63,   65,   65,   65,   65,   65,
       73,   73,   73,   73,   73,   81,   81,   85, 1118,   85,
       85,  113,  113,  113,  113,  113,  115,  115,  115,  115,
      115,  119,  119,  119,  119,  119,  127,  127,  127,  127,
      127,  130,  130,  130,  130,  130,  123,  123,  123,  123,
      123,  134,  134,  134,  134,  134,  151,  151,  151,  151,
       83, 1118,   83,   84, 1118,   84,  185,  185,  185,  185,
      185,  188,  188,  188,  188,  188,  191,  191,  191,  191,
      191,  194,  194,  194,  194,  194,  199,  199,  199,  199,
      199,  202,  202,  202,  202,  202,  206,  206,  206,  206,

      206,  210,  210,  210,  210,  210,  213,  213,  213,  213,
      213,  215,  215,  215,  215,  215,  219,  219,  219,  219,
      219,  224,  224,  224,  224,  224,  226,  226,  226,  226,
      226,  230,  230,  230,  230,  230,  235,  235,  235,  235,
      235,  240,  240,  240,  240,  240,  242,  242,  242,  242,
      242,  248,  248,  248,  248,  248,  308,  308,  308,  308,
      308,  311,  311,  311,  311,  311,  313,  313,  313,  313,
      313,  317,  317,  317,  317,  317,  322,  322,  322,  322,
      322,  330,  330,  330,  330,  330,  335,  335,  335,  335,
      335,  338,  338,  338,  338,  338,  340,  340,  340,  340,

      340,  345,  345,  345,  345,  345,  348,  348,  348,  348,
      348,  351,  351,  351,  351,  351,  355,  355,  355,  355,
      355,  358,  358,  358,  358,  358,  361,  361,  361,  361,
      361,  367,  367,  367,  367,  367,  380,  380,  380,  380,
      380,  383,  383,  383,  383,  383,  387,  387,  387,  387,
      387,  392,  392,  392,  392,  392,  393,  393,  393,  393,
      393,  459,  459,  459,  459,  459,  462,  462,  462,  462,
      462,  464,  464,  464,  464,  464,  468,  468,  468,  468,
      468,  317,  317,  317,  317,  317,  476,  476,  476,  476,
      476,  479,  479,  479,  479,  479,  481,  481,  481,  481,

      481,  485,  485,  485,  485,  485,  490,  490,  490,  490,
      490,  493,  493,  493,  493,  493,  496,  496,  496,  496,
      496,  500,  500,  500,  500,  500,  502,  502,  502,  502,
      502,  506,  506,  506,  506,  506,  510,  510,  510,  510,
      510,  520,  520,  520,  520,  520,  523,  523,  523,  523,
      523,  529,  529,  529,  529,  529,  530,  530,  530,  530,
      530,  188,  188,  188,  188,  188,  533,  533,  533,  533,
      533,  536,  536,  536,  536,  536,  541,  541,  541,  541,
      541,   81,   81,  602,  602,  602,  602,  602,  605,  605,
      605,  605,  605,  607,  607,  607,  607,  607,  610,  610,

      610,  610,  610,  614,  614,  614,  614,  614,  617,  617,
      617,  617,  617,  619,  619,  619,  619,  619,  622,  622,
      622,  622,  622,  629,  629,  629,  629,  629,  632,  632,
      632,  632,  632,  635,  635,  635,  635,  635,  637,  637,
      637,  637,  637,  640,  640,  640,  640,  640,  642,  642,
      642,  642,  642,  648,  648,  648,  648,  648,  650,  650,
      650,  650,  650,  655,  655,  655,  655,  655,  656,  656,
      656,  656,  656,  659,  659,  659,  659,  659,  661,  661,
      661,  661,  661,  224,  224,  224,  224,  224,  664,  664,
      664,  664,  664,  671,  671,  671,  671,  671,  188,  188,

      188,  188,  188,  674,  674,  674,  674,  674,  677,  677,
      677,  677,  677,  737,  737,  737,  737,  737,  740,  740,
      740,  740,  740,  742,  742,  742,  742,  742,  747,  747,
      747,  747,  747,  755,  755,  755,  755,  755,  758,  758,
      758,  758,  758,  760,  760,  760,  760,  760,  765,  765,
      765,  765,  765,  773,  773,  773,  773,  773,  778,  778,
      778,  778,  778,  783,  783,  783,  783,  783,  786,  786,
      786,  786,  786,  788,  788,  788,  788,  788,  793,  793,
      793,  793,  793,  797,  797,  797,  797,  797,  799,  799,
      799,  799,  799,  809,  809,  809,  809,  809,  812,  812,

      812,  812,  812,  818,  818,  818,  818,  818,  819,  819,
      819,  819,  819,  822,  822,  822,  822,  822,  824,  824,
      824,  824,  824,  829,  829,  829,  829,  829,  240,  240,
      240,  240,  240,  836,  836,  836,  836,  836,  839,  839,
      839,  839,  839,  841,  841,  841,  841,  841,  224,  224,
      224,  224,  224,  846,  846,  846,  846,  846,   81,   81,
      737,  737,  737,  737,  737,  740,  740,  740,  740,  740,
      742,  742,  742,  742,  742,  747,  747,  747,  747,  747,
      758,  758,  758,  758,  758,  760,  760,  760,  760,  760,
      765,  765,  765,  765,  765,  188,  188,  188,  188,  188,

      916,  916,  916,  916,  916,  919,  919,  919,  919,  919,
      778,  778,  778,  778,  778,  925,  925,  925,  925,  925,
      928,  928,  928,  928,  928,  930,  930,  930,  930,  930,
      783,  783,  783,  783,  783,  786,  786,  786,  786,  786,
      788,  788,  788,  788,  788,  799,  799,  799,  799,  799,
      793,  793,  793,  793,  793,  797,  797,  797,  797,  797,
      809,  809,  809,  809,  809,  812,  812,  812,  812,  812,
      818,  818,  818,  818,  818,  819,  819,  819,  819,  819,
      822,  822,  822,  822,  822,  824,  824,  824,  824,  824,
      829,  829,  829,  829,  829,  836,  836,  836,  836,  836,

      839,  839,  839,  839,  839,  841,  841,  841,  841,  841,
      846,  846,  846,  846,  846,  755,  755,  755,  755,  755,
       81,   81,  742,  742,  742,  742,  742,  747,  747,  747,
      747,  747,  760,  760,  760,  760,  760,  765,  765,  765,
      765,  765,  916,  916,  916,  916,  916,  224,  224,  224,
      224,  224, 1008, 1008, 1008, 1008, 1008,  919,  919,  919,
      919,  919, 1013, 1013, 1013, 1013, 1013,  925,  925,  925,
      925,  925, 1018, 1018, 1018, 1018, 1018,  928,  928,  928,
      928,  928, 1020, 1020, 1118, 1020, 1020,  930,  930,  930,
      930,  930,  788,  788,  788,  788,  788,  799,  799,  799,

      799,  799,  793,  793,  793,  793,  793,  797,  797,  797,
      797,  797,  809,  809,  809,  809,  809,  812,  812,  812,
      812,  812,   23, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118
    } ;

static yyconst flex_int16_t yy_chk[4691] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    7,    9,    8,   10,
       36,   11,   12,    7,    7,    8,    8,   26,   11,   12,
       21,   21,   21,   21,   11,   12,   36,   26,  148, 1117,
        1,    1,    1,   32,   32,   13,   14,   74,   34,   74,
       74,   32,   13,   14,   79,    9,    9,   10,   10,   11,
       12,   34,   36, 1116,   79,  148,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   13,   14,   39,   15,   34,   15,   15,
       15,   37,   39,   15,  102,   43,   15,   68, 1113,   39,

       39,   43,  102,   68,   37,  117,   37,    2,    2,    2,
     1112,  117,   65,   16,   65,   16,   16,   16,   65,   39,
       16,  121,   46,   16,   15,   39,   39,  121,   43,  102,
       37,   46,   37,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
       15,   16,   22,   22,   22,   22,   40,   41,   46,   66,
      258,   66,   22,  116,   69,   66,   69,  116, 1108,   22,
       69, 1102,   40,   41,    3,    3,    3,   16,   70,   70,
       70,   70,   85,   85,  120,   70,  258,  115,  120,  115,
       85, 1100,   90,  115,   90,   91,   22,   91,   40,   41,

        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,   33,   38,   42,
       33,   90,   88,   44,   91,   76,   77,   76,   77,   44,
       86,   87,   89,   98,   38,  100,   33,   42,   88,   38,
       42,    4,    4,    4,   44,   76,   77,   33,   98,   86,
       87,   89,  100,  119, 1091,  119,   44, 1090,  108,  119,
       38,  108,   33,   42,   88,   38,   42,    4,    5,   93,
       44,   97,   76,   77,   98,   86,   87,   89,  100,   93,
      150,   92,    5,    5,    5,    5,    5,    5,  108,   97,
        5, 1089, 1088,    5,    5,   92,   92,    5,    5,    5,

        5,  124,  123,    5,  123,  124,   93,  150,  123,    5,
        5,    5,    5,    5,    5,   97, 1087,    5,   45,    5,
        5,   92,   92,    5,    5,    5,    5,   45,  165,    5,
       20,   20,   20,   20,   45,  101,   20, 1084,   94,   20,
       94,   20,  165,   45,   94,   95,   20,   20,  103,  271,
      104,   95,  105,  103,   45,  101,  201,  201,  201,  107,
       45,   94,   96,   94,   95, 1082,  104,   96,  165,   45,
      105,   94,  107,   20,   20,   35,  271,   35,   95,  109,
      103,  101,   96,   96,   35,  109, 1080,   94,   35,   94,
       95,   35,  104,   35,   96,  152,  105,  162,  107,  111,

      118,  118,  118,  118,   35, 1079,  188,  118,   96,   96,
      188,   35,  109,  162,   35,  152,  111,   35, 1070,   35,
       67,   67,   67,   67,   67,   67,   67, 1069,   67,   67,
       67,   67,   67,   67,   67,   67,  106,  112,  106,  162,
      106,  152,  111,  112,  122,  122,  122,  122,  126,  127,
      145,  127,  145,  145,  126,  127,  128,  128,  128,  128,
       67,   67,  130,  128,  202,  106,  202,  106,  130, 1061,
      112,  132,  132,  132,  133,  133,  133,  133,  132,  137,
      216,  133, 1051, 1050,  216,  137,   67,   71,   71,   71,
       71,   71,   71,   71, 1049,   71,   71,   71,   71,   71,

       71,   71,   71,  134,  163,  134,  153,  163,  155,  134,
      135,  135,  135,  135,  155, 1043,  153,  135,  138,  138,
      138,  138,  153, 1025,  141,  138,  141,   71,   71,  146,
      141,  146,  154,  140,  163,  140,  154, 1022,  141,  140,
      147,  155,  147,  153,  143,  142,  143,  142,  153,  146,
      143,  142,  141,   71,   72,   72,   72,   72,  140,  156,
      147,   72,  142,  154,  140,  141,  143,  157,  159,   72,
     1021,  142,  142,  170,  158,  170,  146,  156,  141, 1020,
       72,  161, 1019,   72,  140,   72,  157,  147,  159,  142,
      140,  158,   72,  143, 1017, 1012,   72,  142,  142,  144,

      161,  144,  170,  156,  164,  144,   72, 1006,  161,   72,
     1003,   72,  157,  164,  159,  144,  160,  158,   72,  125,
      125,  125,  125,  125,  125,  125,  161,  125,  125,  125,
      125,  125,  125,  125,  125,  149,  160,  149,  166,  168,
      164,  171,  144,  173,  166,  171,  186,  259,  177,  173,
     1002,  407,  186,  169,  177,  149,  172,  168,  175,  125,
      125,  998,  160,  179,  185,  174,  185,  169,  995,  992,
      185,  166,  171,  259,  180,  174,  173,  172,  407,  175,
      180,  177,  149,  168,  179,  125,  129,  129,  129,  129,
      129,  129,  129,  169,  129,  129,  129,  129,  129,  129,

      129,  129,  174,  172,  176,  175,  178,  180,  176,  182,
      179,  183,  176,  187,  187,  187,  187,  183,  989,  178,
      187,  985,  184,  270,  182,  189,  129,  129,  191,  181,
      194,  189,  194,  394,  191,  176,  194,  394,  984,  176,
      184,  978,  197,  181,  183,  178,  976,  181,  197,  270,
      182,  975,  129,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  184,  139,  139,  181,
      225,  225,  225,  181,  190,  190,  190,  190,  193,  193,
      193,  195,  195,  195,  195,  193,  964,  960,  195,  198,
      198,  198,  198,  139,  139,  139,  198,  199,  203,  203,

      203,  203,  206,  199,  206,  207,  213,  210,  206,  210,
      261,  207,  213,  210,  208,  208,  208,  208,  261,  139,
      167,  208,  167,  167,  167,  167,  167,  167,  956,  217,
      167,  214,  214,  214,  167,  217,  952,  167,  214,  167,
      167,  222,  215,  167,  215,  261,  260,  222,  215,  167,
      167,  167,  167,  167,  167,  226,  219,  167,  219,  948,
      167,  226,  219,  167,  260,  167,  167,  942,  940,  167,
      209,  209,  209,  209,  209,  209,  209,  936,  209,  209,
      209,  209,  209,  209,  209,  209,  211,  211,  211,  211,
      260,  280,  233,  211,  218,  218,  218,  218,  233,  419,

      237,  218,  220,  220,  220,  220,  237,  280,  564,  220,
      209,  209,  223,  223,  223,  223,  227,  227,  227,  223,
      229,  229,  229,  227,  230,  419,  230,  229,  242,  235,
      230,  235,  564,  280,  242,  235,  209,  212,  212,  212,
      212,  212,  212,  212,  932,  212,  212,  212,  212,  212,
      212,  212,  212,  231,  231,  231,  231,  929,  564,  272,
      231,  234,  234,  234,  234,  319,  319,  319,  234,  238,
      238,  238,  238,  265,  272,  265,  238,  212,  212,  239,
      239,  239,  239,  244,  244,  244,  239,  263,  921,  917,
      244,  245,  245,  245,  245,  248,  431,  248,  245,  263,

      272,  248,  265,  212,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  431,  247,  247,
      309,  250,  249,  250,  249,  263,  309,  250,  249,  251,
      252,  251,  252,  262,  266,  251,  252,  262,  913,  250,
      268,  909,  268,  431,  247,  247,  247,  249,  254,  253,
      254,  253,  267,  266,  254,  253,  255,  256,  255,  256,
      251,  252,  255,  256,  262,  267,  250,  264,  273,  268,
      247,  253,  264,  249,  254,  269,  257,  254,  257,  266,
      274,  273,  257,  276,  278,  269,  251,  252,  255,  256,
      274,  267,  277,  276,  281,  279,  275,  278,  253,  264,

      254,  257,  275,  254,  285,  282,  276,  273,  284,  281,
      292,  277,  269,  279,  255,  256,  287,  274,  293,  289,
      276,  282,  285,  278,  284,  905,  282,  257,  286,  275,
      292,  283,  276,  288,  286,  281,  293,  277,  283,  279,
      291,  287,  288,  901,  289,  297,  283,  282,  285,  286,
      284,  297,  282,  291,  295,  294,  292,  464,  295,  464,
      889,  286,  293,  294,  296,  283,  298,  287,  301,  288,
      289,  303,  283,  294,  408,  286,  302,  296,  297,  291,
      302,  304,  420,  306,  298,  295,  301,  303,  306,  307,
      294,  331,  331,  331,  308,  307,  308,  304,  306,  294,

      308,  408,  311,  296,  312,  312,  312,  302,  311,  420,
      298,  312,  301,  303,  310,  310,  310,  310,  313,  888,
      313,  310,  307,  304,  313,  306,  314,  314,  314,  314,
      315,  868,  411,  314,  867,  317,  315,  316,  316,  316,
      316,  317,  411,  322,  316,  320,  320,  320,  320,  322,
      323,  323,  323,  325,  325,  325,  481,  323,  481,  850,
      325,  328,  328,  328,  328,  335,  336,  335,  328,  411,
      843,  335,  336,  337,  337,  337,  337,  338,  826,  409,
      337,  409,  342,  338,  339,  339,  339,  340,  342,  340,
      790,  339,  349,  340,  341,  341,  341,  341,  349,  762,

      353,  341,  343,  343,  343,  343,  353,  744,  409,  343,
      344,  344,  344,  344,  344,  344,  344,  417,  344,  344,
      344,  344,  344,  344,  344,  344,  345,  417,  345,  372,
      372,  372,  345,  346,  346,  346,  346,  348,  355,  348,
      346,  731,  726,  348,  355,  350,  350,  350,  350,  724,
      344,  344,  350,  351,  417,  351,  721,  711,  358,  351,
      352,  352,  352,  352,  358,  426,  364,  352,  354,  354,
      354,  354,  364,  705,  426,  354,  344,  347,  347,  347,
      347,  347,  347,  347,  410,  347,  347,  347,  347,  347,
      347,  347,  347,  356,  356,  356,  357,  357,  357,  410,

      356,  426,  367,  357,  360,  360,  360,  361,  367,  361,
      380,  360,  380,  361,  697,  696,  380,  347,  347,  362,
      362,  362,  362,  679,  675,  410,  362,  365,  365,  365,
      365,  369,  369,  369,  365,  463,  463,  463,  369,  370,
      370,  370,  370,  347,  670,  667,  370,  375,  375,  375,
      378,  378,  378,  378,  375,  381,  496,  378,  496,  601,
      383,  381,  382,  382,  382,  382,  383,  590,  588,  382,
      384,  384,  384,  385,  385,  385,  385,  384,  423,  573,
      385,  386,  386,  386,  386,  389,  389,  389,  386,  557,
      428,  423,  389,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  391,  391,  428,  391,  391,  392,
      393,  392,  393,  395,  554,  392,  393,  423,  438,  395,
      396,  396,  396,  396,  397,  414,  397,  396,  539,  414,
      397,  438,  428,  391,  391,  391,  398,  399,  398,  399,
      538,  554,  398,  399,  400,  401,  400,  401,  534,  413,
      400,  401,  402,  523,  402,  413,  414,  438,  402,  391,
      460,  403,  400,  403,  412,  521,  460,  403,  399,  412,
      404,  401,  404,  405,  418,  405,  404,  517,  418,  405,
      402,  406,  413,  406,  404,  416,  403,  406,  415,  400,
      427,  416,  404,  415,  399,  405,  412,  401,  415,  406,

      421,  422,  424,  425,  421,  418,  402,  422,  435,  427,
      425,  404,  403,  429,  432,  433,  436,  424,  416,  404,
      415,  436,  405,  429,  437,  415,  406,  440,  435,  443,
      433,  421,  432,  439,  422,  427,  439,  425,  514,  441,
      437,  444,  443,  424,  440,  441,  445,  446,  436,  568,
      429,  444,  445,  446,  435,  447,  433,  448,  432,  448,
      450,  449,  447,  439,  452,  450,  437,  449,  443,  451,
      440,  451,  441,  453,  455,  568,  454,  457,  444,  445,
      446,  454,  459,  452,  459,  462,  448,  510,  459,  447,
      555,  462,  450,  453,  449,  455,  457,  506,  451,  461,

      461,  461,  461,  465,  465,  465,  465,  504,  454,  452,
      467,  467,  467,  467,  469,  469,  469,  555,  502,  453,
      502,  455,  457,  470,  470,  470,  471,  471,  471,  471,
      472,  472,  472,  474,  474,  474,  476,  477,  476,  480,
      480,  480,  476,  477,  478,  478,  478,  478,  479,  482,
      482,  482,  482,  498,  479,  484,  484,  484,  484,  486,
      486,  486,  487,  487,  487,  488,  488,  488,  488,  489,
      489,  489,  490,  494,  490,  489,  485,  483,  490,  494,
      489,  491,  491,  491,  491,  492,  492,  492,  493,  500,
      493,  492,  468,  466,  493,  500,  492,  495,  495,  495,

      495,  497,  497,  497,  497,  499,  499,  499,  499,  501,
      501,  501,  503,  503,  503,  503,  505,  505,  505,  505,
      507,  507,  507,  508,  508,  508,  508,  509,  509,  509,
      511,  511,  511,  513,  513,  513,  516,  516,  516,  516,
      518,  518,  518,  520,  458,  520,  522,  522,  522,  522,
      524,  524,  524,  525,  525,  525,  525,  526,  526,  526,
      527,  527,  527,  527,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  688,  528,  528,
      529,  530,  529,  530,  531,  442,  529,  530,  434,  533,
      531,  532,  532,  532,  532,  533,  535,  535,  535,  536,

      430,  536,  387,  688,  528,  528,  528,  537,  537,  537,
      537,  540,  540,  540,  540,  541,  542,  541,  543,  774,
      542,  541,  379,  774,  543,  544,  544,  544,  544,  545,
      528,  545,  546,  377,  546,  545,  371,  547,  546,  547,
      548,  563,  548,  547,  366,  549,  548,  549,  550,  556,
      550,  549,  363,  556,  550,  547,  551,  560,  551,  552,
      563,  552,  551,  549,  560,  552,  553,  548,  553,  558,
      550,  558,  553,  565,  561,  552,  551,  559,  562,  559,
      556,  567,  547,  551,  562,  572,  563,  566,  565,  566,
      549,  560,  569,  548,  561,  570,  576,  550,  558,  570,

      576,  571,  552,  551,  574,  572,  559,  571,  567,  551,
      574,  562,  570,  569,  565,  577,  566,  575,  578,  579,
      561,  579,  582,  581,  580,  359,  570,  576,  580,  581,
      701,  572,  578,  575,  571,  577,  583,  574,  570,  569,
      583,  584,  595,  582,  583,  586,  585,  584,  579,  589,
      587,  586,  591,  593,  689,  580,  581,  701,  578,  575,
      585,  577,  597,  595,  585,  589,  593,  583,  587,  582,
      591,  583,  597,  592,  584,  592,  594,  598,  586,  599,
      689,  598,  603,  594,  596,  600,  585,  333,  603,  595,
      585,  589,  593,  594,  587,  594,  591,  598,  596,  597,

      599,  602,  592,  602,  693,  600,  693,  602,  598,  605,
      594,  604,  604,  604,  604,  605,  609,  700,  604,  594,
      330,  594,  609,  598,  596,  329,  599,  606,  606,  606,
      607,  600,  607,  693,  606,  610,  607,  608,  608,  608,
      608,  610,  326,  700,  608,  611,  611,  611,  612,  612,
      612,  612,  611,  321,  615,  612,  613,  613,  613,  614,
      615,  614,  972,  613,  617,  614,  616,  616,  616,  616,
      617,  318,  621,  616,  618,  618,  618,  619,  621,  619,
      690,  618,  622,  619,  620,  620,  620,  620,  622,  972,
      727,  620,  623,  623,  623,  624,  624,  624,  624,  623,

      690,  305,  624,  625,  625,  625,  626,  626,  626,  300,
      625,  727,  626,  627,  627,  627,  627,  628,  299,  628,
      627,  630,  629,  628,  629,  290,  690,  630,  629,  631,
      631,  631,  631,  632,  246,  632,  631,  727,  634,  632,
      633,  633,  633,  633,  634,  635,  241,  633,  636,  636,
      636,  635,  637,  240,  637,  636,  236,  639,  637,  638,
      638,  638,  638,  639,  640,  709,  638,  232,  224,  642,
      640,  641,  641,  641,  641,  642,  221,  709,  641,  643,
      643,  643,  644,  644,  644,  644,  643,  205,  204,  644,
      645,  645,  645,  646,  646,  646,  648,  645,  648,  649,

      646,  650,  648,  709,  200,  649,  196,  650,  651,  651,
      651,  651,  652,  652,  652,  651,  192,  136,  657,  652,
      653,  653,  653,  653,  657,  131,  113,  653,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  110,  654,  654,  655,  656,  655,  656,   99,   83,
      655,  656,  658,  658,  658,  658,  659,   81,   80,  658,
       63,  661,  659,  661,  660,  660,  660,  661,  654,  654,
      654,  660,  662,  662,  662,  662,  663,  664,   29,  662,
       28,   23,  663,  664,  665,  665,  665,  671,   19,  671,
       18,  665,  698,  671,  654,  669,  669,  669,  669,  672,

       17,    6,  669,    0,  674,  672,  673,  673,  673,  673,
      674,  698,  680,  673,  676,  676,  676,  677,  680,  677,
        0,  676,    0,  677,  678,  678,  678,  678,  681,  691,
      681,  678,  699,  682,  681,  682,  683,  698,  683,  682,
      692,  684,  683,  684,  685,  699,  685,  684,  703,  691,
      685,  686,  687,  686,  687,  681,  694,  686,  687,  859,
      692,  702,  694,  695,  703,  704,  687,  706,  684,  706,
      695,  699,  683,  707,  712,  691,  708,  685,  710,  702,
      708,  681,  713,  704,  686,  859,  692,  712,  710,  694,
      703,  707,    0,  687,  684,  715,  706,  695,  683,    0,

      714,  717,  713,  685,  728,  702,  716,  708,  715,  704,
      686,  719,  716,  712,  720,  710,  718,  707,  714,  717,
      718,  723,  728,  730,  732,  722,  734,  719,  713,  725,
      720,  722,    0,  725,  715,  733,  723,  733,  729,  716,
      860,  730,  735,  738,  714,  717,  732,  718,  728,  738,
      863,  734,  863,  719,  872,  735,  720,  869,  722,  729,
      725,  736,  723,  737,  733,  737,  860,  730,  872,  737,
        0,  736,  732,  739,  739,  739,  739,  734,  740,  863,
      739,  735,  861,  869,  740,  729,  741,  741,  741,  742,
      745,  742,  861,  741,  872,  742,  745,  747,  736,  743,

      743,  743,  743,  747,  973, 1028,  743,  746,  746,  746,
      746,  748,  748,  748,  746,  750,  750,  750,  748,  861,
      874, 1029,  750,  751,  751,  751,  751,  752,  752,  752,
      751,  973, 1028,  874,  752,  753,  753,  753,  753,  754,
      754,  754,  753,  755,  756,  755,  754,  864, 1029,  755,
      756,  757,  757,  757,  757,  758,    0,  887,  757,  874,
      763,  758,  759,  759,  759,  760,  763,  760,  864,  759,
      765,  760,  761,  761,  761,  761,  765,    0,  887,  761,
      764,  764,  764,  764,  766,  766,  766,  764,  768,  768,
      768,  766,    0,    0,  864,  768,  769,  769,  769,  769,

      770,  770,  770,  769,  887,    0,    0,  770,  771,  771,
      771,  771,  772,  772,  772,  771,  773,  865,  773,  772,
      776,  781,  773,  775,  775,  775,  776,  781,  871,  775,
      777,  777,  777,  777,  778,  865,  778,  777,    0,    0,
      778,  779,  779,  779,  779,  780,  871,  780,  779,    0,
        0,  780,  782,  782,  782,  782,  783,  784,  783,  782,
        0,  865,  783,  784,  785,  785,  785,  785,  786,    0,
        0,  785,  871,  791,  786,  787,  787,  787,  788,  791,
      788,    0,  787,  794,  788,  789,  789,  789,  789,  794,
      896,  881,  789,  792,  792,  792,  792,  793,  881,  793,

      792,    0,  797,  793,  795,  795,  795,  795,  797,  896,
        0,  795,  796,  796,  796,  796,  798,  798,  798,  796,
      799,    0,    0,  798,    0,  881,  799,  800,  800,  800,
      802,  802,  802,    0,  800,  896,  810,  802,  803,  803,
      803,  803,  810,    0, 1033,  803,  804,  804,  804,  804,
      805,  805,  805,  804,  866,    0,  866,  805,  806,  806,
      806,  806,  807,  807,  807,  806,  808,  808,  808,  807,
      809, 1033,  809,  808,    0,  812,  809,  811,  811,  811,
      811,  812,    0,  866,  811,  813,  813,  813,  814,  814,
      814,  814,  813,    0,  876,  814,  815,  815,  815,  816,

      816,  816,  816,  815,  876,    0,  816,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
        0,  817,  817,  818,  819,  818,  819,  820,    0,  818,
      819,  876,  822,  820,  821,  821,  821,  821,  822,    0,
      824,  821,  824,  823,  823,  823,  824,  817,  817,  817,
      823,  825,  825,  825,  825,  827,    0,    0,  825,    0,
      829,  827,  828,  828,  828,  828,  829,    0,    0,  828,
      830,  830,  830,  817,  832,  832,  832,  830,    0,    0,
        0,  832,  833,  833,  833,  833,  834,  834,  834,  833,
        0,    0,    0,  834,  835,  835,  835,  835,  836,  837,

      836,  835,    0,  885,  836,  837,  838,  838,  838,  838,
      839,    0,  979,  838,    0,  844,  839,  840,  840,  840,
      841,  844,  841,  885,  840,  846,  841,  842,  842,  842,
      842,  846,    0,  979,  842,  845,  845,  845,  845,  847,
      847,  847,  845,  849,  849,  849,  847,    0,    0,  885,
      849,  851,  851,  851,  851,  853,    0,  853,  851,  979,
      854,  853,  854,  855,    0,  855,  854,  877,  856,  855,
      856,  857,  877,  857,  856,  862,  858,  857,  858,  878,
      879,  862,  858,  878,  873,  875,  853,  880,  980,  857,
      873,  875,  882,  879,  855,    0,  856,  880,  882,  877,

      883,  858,  884,  890,  884,  883,  886,  892,  862,  890,
      878,  886,  853,  891,  980,  894,  857,  873,  875,  879,
      855,  894,  856,  892,  880,  882,  893,  858,  891,  893,
      897,  884,  883,  895,  898,  899,  890,  916,  886,  895,
      898,    0,    0,  916,  902,  902,  902,  897,  894,  892,
      899,  902,    0,    0,  891,  922,  893,  900,  900,  900,
      900,  922,    0,    0,  900,    0,  895,  898,  904,  904,
      904,  904,    0,  897,    0,  904,  899,  906,  906,  906,
      908,  908,  908,  908,  906,    0,    0,  908,  910,  910,
      910,  912,  912,  912,  912,  910,    0,  993,  912,  914,

      914,  914,  918,  918,  918,  919,  914,  919,  982,  918,
      927,  919,  920,  920,  920,  920,  927,    0,  993,  920,
      923,  923,  923,  923,  924,  982,  924,  923,    0,  925,
      924,  925,  926,  928,  926,  925,    0,  933,  926,  928,
      930,  983,  930,  933,  993,  983,  930,  931,  931,  931,
      931,  982,    0, 1001,  931,  934,  934,  934,  934,    0,
        0,    0,  934,  935,  935,  935,  935,  937,  937,  937,
      935, 1001,  983,    0,  937,  939,  939,  939,  939,  986,
      974,  986,  939,  941,  941,  941,  941,  943,  943,  943,
      941,  945,  945,  945,  943,  974,    0, 1001,  945,  947,

      947,  947,  947,  949,  949,  949,  947,    0,  986,    0,
      949,  951,  951,  951,  951,  953,  953,  953,  951, 1058,
      977,  974,  953,  955,  955,  955,  955,  957,  957,  957,
      955,    0,    0,  977,  957,  959,  959,  959,  959,  961,
      961,  961,  959,    0,    0, 1058,  961,  963,  963,  963,
      963,  965,  965,  965,  963,  967,    0,  967,  965,  977,
      968,  967,  968,  969,  996,  969,  968,    0,  970,  969,
      970,  990,  981,  971,  970,  971,  994,  967,  981,  971,
      987,  988,  987,  988,    0,  996,  991,  990,  991,  999,
      994, 1004,  997,  999, 1000, 1005,  969, 1004, 1000, 1030,

     1007, 1005, 1008,    0,  967,  981, 1007,    0, 1008,  987,
      988,  996,  997,  990,    0,  991,  994, 1013,    0, 1030,
      999, 1018,  969, 1013, 1004, 1000,    0, 1018, 1005, 1009,
     1009, 1009,    0, 1007, 1031, 1032, 1009,    0,  997, 1011,
     1011, 1011, 1015, 1015, 1015, 1030, 1011,    0, 1032, 1015,
     1016, 1016, 1016, 1016, 1031, 1034, 1036, 1016, 1024, 1024,
     1024, 1024, 1026, 1035, 1026, 1024, 1036, 1027, 1026, 1027,
     1034, 1037, 1038, 1027, 1032, 1039, 1035, 1041,    0, 1040,
     1031, 1041, 1042, 1046, 1044, 1045, 1059,    0, 1039,    0,
     1026, 1037, 1038, 1036, 1040, 1045, 1034, 1044, 1027, 1047,

     1042,    0, 1035, 1046, 1056, 1047, 1056,    0, 1041, 1048,
     1056,    0, 1059, 1057, 1039, 1057, 1026, 1037, 1038, 1057,
     1040, 1060, 1045, 1044, 1027, 1048, 1042, 1060, 1062, 1046,
     1063, 1056, 1047, 1052, 1052, 1052, 1054, 1054, 1054, 1064,
     1052, 1066,    0, 1054, 1065,    0, 1067, 1068, 1062, 1068,
     1065, 1048, 1067,    0, 1060, 1071, 1063, 1056, 1072, 1064,
     1066, 1071, 1073, 1074, 1072, 1075, 1076, 1083, 1073, 1077,
     1085, 1076, 1095, 1093, 1062, 1075, 1068, 1065, 1074, 1067,
     1094, 1078, 1081, 1078, 1103, 1064, 1066, 1078, 1071, 1093,
     1077, 1072, 1095, 1083, 1085, 1073, 1086, 1092, 1076, 1103,

     1081, 1094, 1075, 1092, 1074, 1098, 1086, 1101,    0, 1105,
     1104, 1106, 1098, 1106, 1107, 1093, 1077, 1110, 1095, 1105,
     1085,    0,    0, 1101,    0, 1103, 1081, 1094, 1104, 1107,
     1092, 1109, 1110, 1086, 1111, 1114, 1115, 1109, 1111, 1098,
     1106, 1114, 1115,    0,    0,    0, 1105,    0,    0, 1101,
        0,    0,    0,    0, 1104, 1107,    0,    0, 1110,    0,
        0,    0,    0,    0, 1109, 1111,    0,    0, 1114, 1115,
     1119, 1119, 1119, 1119, 1119, 1120, 1120, 1120, 1120, 1120,
     1121, 1121, 1121, 1121, 1121, 1122, 1122, 1122, 1122, 1122,
     1123, 1123, 1123, 1123, 1123, 1124, 1124, 1124, 1124, 1124,

     1125, 1125, 1125, 1125, 1125, 1126, 1126, 1126, 1126, 1126,
     1127, 1127, 1127, 1127, 1127, 1128, 1128, 1129,    0, 1129,
     1129, 1130, 1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131,
     1131, 1132, 1132, 1132, 1132, 1132, 1133, 1133, 1133, 1133,
     1133, 1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135, 1135,
     1135, 1136, 1136, 1136, 1136, 1136, 1137, 1137, 1137, 1137,
     1138,    0, 1138, 1139,    0, 1139, 1140, 1140, 1140, 1140,
     1140, 1141, 1141, 1141, 1141, 1141, 1142, 1142, 1142, 1142,
     1142, 1143, 1143, 1143, 1143, 1143, 1144, 1144, 1144, 1144,
     1144, 1145, 1145, 1145, 1145, 1145, 1146, 1146, 1146, 1146,

     1146, 1147, 1147, 1147, 1147, 1147, 1148, 1148, 1148, 1148,
     1148, 1149, 1149, 1149, 1149, 1149, 1150, 1150, 1150, 1150,
     1150, 1151, 1151, 1151, 1151, 1151, 1152, 1152, 1152, 1152,
     1152, 1153, 1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154,
     1154, 1155, 1155, 1155, 1155, 1155, 1156, 1156, 1156, 1156,
     1156, 1157, 1157, 1157, 1157, 1157, 1158, 1158, 1158, 1158,
     1158, 1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160, 1160,
     1160, 1161, 1161, 1161, 1161, 1161, 1162, 1162, 1162, 1162,
     1162, 1163, 1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164,
     1164, 1165, 1165, 1165, 1165, 1165, 1166, 1166, 1166, 1166,

     1166, 1167, 1167, 1167, 1167, 1167, 1168, 1168, 1168, 1168,
     1168, 1169, 1169, 1169, 1169, 1169, 1170, 1170, 1170, 1170,
     1170, 1171, 1171, 1171, 1171, 1171, 1172, 1172, 1172, 1172,
     1172, 1173, 1173, 1173, 1173, 1173, 1174, 1174, 1174, 1174,
     1174, 1175, 1175, 1175, 1175, 1175, 1176, 1176, 1176, 1176,
     1176, 1177, 1177, 1177, 1177, 1177, 1178, 1178, 1178, 1178,
     1178, 1179, 1179, 1179, 1179, 1179, 1180, 1180, 1180, 1180,
     1180, 1181, 1181, 1181, 1181, 1181, 1182, 1182, 1182, 1182,
     1182, 1183, 1183, 1183, 1183, 1183, 1184, 1184, 1184, 1184,
     1184, 1185, 1185, 1185, 1185, 1185, 1186, 1186, 1186, 1186,

     1186, 1187, 1187, 1187, 1187, 1187, 1188, 1188, 1188, 1188,
     1188, 1189, 1189, 1189, 1189, 1189, 1190, 1190, 1190, 1190,
     1190, 1191, 1191, 1191, 1191, 1191, 1192, 1192, 1192, 1192,
     1192, 1193, 1193, 1193, 1193, 1193, 1194, 1194, 1194, 1194,
     1194, 1195, 1195, 1195, 1195, 1195, 1196, 1196, 1196, 1196,
     1196, 1197, 1197, 1197, 1197, 1197, 1198, 1198, 1198, 1198,
     1198, 1199, 1199, 1199, 1199, 1199, 1200, 1200, 1200, 1200,
     1200, 1201, 1201, 1201, 1201, 1201, 1202, 1202, 1202, 1202,
     1202, 1203, 1203, 1204, 1204, 1204, 1204, 1204, 1205, 1205,
     1205, 1205, 1205, 1206, 1206, 1206, 1206, 1206, 1207, 1207,

     1207, 1207, 1207, 1208, 1208, 1208, 1208, 1208, 1209, 1209,
     1209, 1209, 1209, 1210, 1210, 1210, 1210, 1210, 1211, 1211,
     1211, 1211, 1211, 1212, 1212, 1212, 1212, 1212, 1213, 1213,
     1213, 1213, 1213, 1214, 1214, 1214, 1214, 1214, 1215, 1215,
     1215, 1215, 1215, 1216, 1216, 1216, 1216, 1216, 1217, 1217,
     1217, 1217, 1217, 1218, 1218, 1218, 1218, 1218, 1219, 1219,
     1219, 1219, 1219, 1220, 1220, 1220, 1220, 1220, 1221, 1221,
     1221, 1221, 1221, 1222, 1222, 1222, 1222, 1222, 1223, 1223,
     1223, 1223, 1223, 1224, 1224, 1224, 1224, 1224, 1225, 1225,
     1225, 1225, 1225, 1226, 1226, 1226, 1226, 1226, 1227, 1227,

     1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228, 1229, 1229,
     1229, 1229, 1229, 1230, 1230, 1230, 1230, 1230, 1231, 1231,
     1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232, 1233, 1233,
     1233, 1233, 1233, 1234, 1234, 1234, 1234, 1234, 1235, 1235,
     1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236, 1237, 1237,
     1237, 1237, 1237, 1238, 1238, 1238, 1238, 1238, 1239, 1239,
     1239, 1239, 1239, 1240, 1240, 1240, 1240, 1240, 1241, 1241,
     1241, 1241, 1241, 1242, 1242, 1242, 1242, 1242, 1243, 1243,
     1243, 1243, 1243, 1244, 1244, 1244, 1244, 1244, 1245, 1245,
     1245, 1245, 1245, 1246, 1246, 1246, 1246, 1246, 1247, 1247,

     1247, 1247, 1247, 1248, 1248, 1248, 1248, 1248, 1249, 1249,
     1249, 1249, 1249, 1250, 1250, 1250, 1250, 1250, 1251, 1251,
     1251, 1251, 1251, 1252, 1252, 1252, 1252, 1252, 1253, 1253,
     1253, 1253, 1253, 1254, 1254, 1254, 1254, 1254, 1255, 1255,
     1255, 1255, 1255, 1256, 1256, 1256, 1256, 1256, 1257, 1257,
     1257, 1257, 1257, 1258, 1258, 1258, 1258, 1258, 1259, 1259,
     1260, 1260, 1260, 1260, 1260, 1261, 1261, 1261, 1261, 1261,
     1262, 1262, 1262, 1262, 1262, 1263, 1263, 1263, 1263, 1263,
     1264, 1264, 1264, 1264, 1264, 1265, 1265, 1265, 1265, 1265,
     1266, 1266, 1266, 1266, 1266, 1267, 1267, 1267, 1267, 1267,

     1268, 1268, 1268, 1268, 1268, 1269, 1269, 1269, 1269, 1269,
     1270, 1270, 1270, 1270, 1270, 1271, 1271, 1271, 1271, 1271,
     1272, 1272, 1272, 1272, 1272, 1273, 1273, 1273, 1273, 1273,
     1274, 1274, 1274, 1274, 1274, 1275, 1275, 1275, 1275, 1275,
     1276, 1276, 1276, 1276, 1276, 1277, 1277, 1277, 1277, 1277,
     1278, 1278, 1278, 1278, 1278, 1279, 1279, 1279, 1279, 1279,
     1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281, 1281, 1281,
     1282, 1282, 1282, 1282, 1282, 1283, 1283, 1283, 1283, 1283,
     1284, 1284, 1284, 1284, 1284, 1285, 1285, 1285, 1285, 1285,
     1286, 1286, 1286, 1286, 1286, 1287, 1287, 1287, 1287, 1287,

     1288, 1288, 1288, 1288, 1288, 1289, 1289, 1289, 1289, 1289,
     1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291, 1291, 1291,
     1292, 1292, 1293, 1293, 1293, 1293, 1293, 1294, 1294, 1294,
     1294, 1294, 1295, 1295, 1295, 1295, 1295, 1296, 1296, 1296,
     1296, 1296, 1297, 1297, 1297, 1297, 1297, 1298, 1298, 1298,
     1298, 1298, 1299, 1299, 1299, 1299, 1299, 1300, 1300, 1300,
     1300, 1300, 1301, 1301, 1301, 1301, 1301, 1302, 1302, 1302,
     1302, 1302, 1303, 1303, 1303, 1303, 1303, 1304, 1304, 1304,
     1304, 1304, 1305, 1305,    0, 1305, 1305, 1306, 1306, 1306,
     1306, 1306, 1307, 1307, 1307, 1307, 1307, 1308, 1308, 1308,

     1308, 1308, 1309, 1309, 1309, 1309, 1309, 1310, 1310, 1310,
     1310, 1310, 1311, 1311, 1311, 1311, 1311, 1312, 1312, 1312,
     1312, 1312, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
// $Id: lexer.l 287 2018-07-05 08:55:47Z willem_vermin $
#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include "parser.h"
#include "findent.h"
#include "debug.h"
#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
class line_prep pline;




//  following are keywords starting with c
#line 1931 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_findentfix 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 29 "lexer.l"


#line 2165 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1119 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4623 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 34 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 51 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 56 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 74 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 77 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 85 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 100 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 104 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 120 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 125 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 104:
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 222 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 228 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 229 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 108:
YY_RULE_SETUP
#line 232 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.type_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.type_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.type_dot_operator)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 109:
/* rule 109 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 256 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 262 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 268 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 275 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 282 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 284 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 285 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 287 "lexer.l"
ECHO;
	YY_BREAK
#line 2943 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_findentfix):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1119 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1119 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1118);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 287 "lexer.l"



void lexer_set(class line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(std::string s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:  BEGIN(state_identifier);   break;
      case SKIPALL:     BEGIN(state_skipall);      break;
      case SKIP:        BEGIN(state_skip);         break;
      case SKIPNOOP:    BEGIN(state_skipnoop);     break;
      case KEYWORD:     BEGIN(state_keyword);      break;
      case FINDFORMAT:  BEGIN(state_findformat);   break;
      case FINDENTFIX:  BEGIN(state_findentfix);   break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


