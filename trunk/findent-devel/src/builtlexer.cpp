#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1266] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  132,  130,  129,  130,  126,  125,
      130,  127,  128,   16,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,    4,    5,
        2,    3,    8,    9,    6,    7,   15,   14,   10,   12,
       11,   13,    1,  131,  131,  104,  131,  104,  131,  131,
      131,  131,  131,  131,  131,  108,  108,  107,  108,  108,
      122,  122,  121,  122,  122,  111,  122,  122,  123,    0,
      125,    0,    0,   16,   17,   16,    0,    0,    0,    0,

        0,    0,    0,    0,   32,    0,    0,    0,    0,   67,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       85,    0,    0,    0,  104,    0,   92,    0,    0,    0,
       92,    0,    0,    0,  104,    0,    0,    0,    0,    0,
        0,   94,    0,    0,    0,    0,   92,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  111,    0,    0,
        0,    0,    0,  116,  124,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   33,    0,    0,    0,    0,    0,
       49,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,    0,    0,    0,   92,
        0,    0,    0,   92,    0,    0,    0,   92,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
        0,    0,    0,    0,   96,    0,    0,    0,    0,    0,
        0,   94,    0,    0,    0,   96,    0,    0,    0,   92,
        0,    0,    0,    0,    0,    0,   92,    0,    0,   92,
        0,   91,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      112,    0,    0,    0,    0,    0,    0,    0,    0,   24,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   64,    0,    0,    0,    0,
        0,    0,    0,    0,   78,   79,    0,    0,    0,    0,
       86,   87,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   94,    0,    0,   98,    0,    0,   92,
        0,   92,   92,    0,   92,    0,    0,   92,   92,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   93,    0,    0,    0,   93,    0,

        0,   99,    0,   94,    0,    0,   96,    0,   98,   94,
        0,   94,  104,    0,   96,    0,    0,    0,    0,    0,
        0,    0,    0,   94,    0,   92,    0,    0,    0,    0,
       91,    0,    0,    0,   91,    0,    0,    0,    0,    0,
      102,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  117,    0,    0,    0,   21,    0,
        0,   27,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   48,    0,    0,    0,
       53,    0,    0,    0,    0,    0,    0,    0,   63,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   88,    0,   90,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   94,
        0,   92,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   93,    0,
       93,   93,    0,   93,    0,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   91,    0,   91,   91,    0,

       91,    0,    0,    0,    0,    0,    0,   94,    0,    0,
        0,   96,    0,    0,    0,  101,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      115,  114,    0,    0,    0,    0,    0,    0,    0,   20,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   42,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       65,    0,   68,    0,    0,    0,   72,    0,    0,    0,
        0,    0,    0,   89,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   91,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   94,  102,   94,    0,   96,    0,    0,    0,    0,
       94,    0,    0,    0,   96,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  113,    0,    0,  119,
        0,    0,    0,    0,    0,    0,    0,    0,   28,   29,

        0,    0,    0,    0,    0,    0,    0,   36,    0,    0,
        0,    0,    0,   50,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   61,    0,    0,   69,    0,   71,    0,
        0,    0,    0,   77,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   92,    0,    0,    0,
        0,   92,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   98,    0,    0,    0,    0,   94,
        0,    0,    0,    0,    0,    0,  103,    0,    0,    0,
        0,    0,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   93,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   93,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   91,    0,    0,    0,
        0,   91,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   98,    0,    0,    0,
        0,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,    0,    0,    0,    0,   94,    0,
      101,    0,   94,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  118,    0,    0,    0,
        0,    0,    0,   30,   31,    0,   37,    0,    0,    0,

        0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   62,   66,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   92,    0,   92,
        0,   92,    0,   92,    0,   97,    0,   94,    0,   97,
        0,   94,    0,   94,    0,    0,    0,   97,    0,    0,
       95,    0,   95,    0,    0,   94,    0,    0,   97,    0,
        0,    0,   93,    0,   93,    0,   93,    0,   97,    0,
       94,    0,   93,    0,   92,    0,   92,    0,   91,    0,
       91,    0,   91,    0,   91,    0,   97,    0,   94,    0,
       97,    0,   94,    0,   97,    0,   94,    0,   97,    0,

       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  120,    0,   19,   22,    0,   25,    0,    0,    0,
        0,    0,   40,   43,    0,    0,    0,   51,    0,    0,
       55,    0,    0,   58,    0,    0,   70,    0,    0,    0,
       76,   80,    0,    0,   83,    0,    0,    0,   94,    0,
      100,    0,   94,    0,    0,   97,    0,   94,    0,   95,
      103,   94,    0,   97,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   57,    0,    0,    0,    0,    0,   81,
       82,   84,    0,   94,    0,   94,    0,    0,    0,    0,

        0,    0,    0,   23,    0,    0,    0,    0,    0,    0,
        0,   47,   52,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,    0,   34,    0,
        0,   44,   46,   54,   56,   60,    0,    0,    0,    0,
      105,  106,  109,  110,    0,   35,   38,    0,   59,    0,
        0,    0,    0,    0,   75,    0,    0,    0,   39,   73,
        0,    0,   74,   18,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,    1,    1,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
       16,    1,   17,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       27,   34,   35,   36,   37,   38,   39,   40,   41,   27,
       42,    1,   43,    1,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   27,   54,   55,   56,   57,
       58,   59,   27,   60,   61,   62,   63,   64,   65,   66,
       67,   27,    1,   68,    1,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    4,    5,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_uint16_t yy_base[1491] =
    {   0,
        0,   68,  136,  204,  270, 2602,   15,   17,   16,   18,
       20,   21,   44,   45,   86,  113, 2601, 2591, 2590,  333,
       30,  154,   36,  180, 2592, 5216, 5216,   42, 5216, 2568,
     2565, 5216, 5216,   42,  207,   75,  367,   73,  208,  213,
      146,  102,  209,  215,   80,  221,  319,   83, 5216, 5216,
     5216, 5216, 5216, 5216, 5216, 5216, 5216, 5216, 5216, 5216,
     5216, 5216, 5216, 5216, 2561, 5216,   98,  159,  427,   42,
      162,  185,  495,  252,  562, 5216,   62, 5216,  231,  236,
     5216,  120, 5216,  260,  353,  275,  339, 2546, 5216,  159,
     2538, 2529,    0, 2535,    0,  106,  216,  272,  333,  279,

       82,  180,  337,  259,  505,  334,  387,  312,  251, 2526,
      346,  348,  349,  399,  394,  430,  433,  361,  439,  440,
     2507,  444,  445, 2507, 5216,  408,  251,  106,  470,  478,
      293,  190,  511,  479,  369,  629,  394,  514,  524,  697,
      395, 2492,  532,  544,  551,  570, 2480,  412,  579,  552,
      765,  592,  605,  780,  652,  649,  461,  528,  666,   80,
      671,  269,  585,  672,  713,  505,  607,  634, 2460,  571,
      527,  729,  533,  790, 5216,  507,  633,  578,  570,  704,
      726,  634,  722,  778,  766,  730,  705,  703,  636,  708,
      829,  781,  776,  711,  712,  782,  780,  808,  783,  806,

      820,  841,  823,  851,  865,  852,  882,  869,  676,  483,
      744,  452,  536,  903,  596, 2467,  908,  679,  911, 2451,
      741,  930,  751, 2438,  920,  167,  938, 2431, 2404,  884,
      815,  942,  951,  966,  974, 1019,  889,  978,  981,  794,
      927,  993,  996, 1004, 2390,  982, 1035, 2377,  924, 1001,
     1039, 5216, 1043, 1009, 1051, 2370, 1008, 1061, 1064, 2362,
     1048, 1072, 1080, 2334, 2294, 1069, 5216, 1088, 1091, 2279,
     1096,  795, 1077, 1104, 1113, 1128, 1129, 1137, 1136, 1144,
     1157, 1145, 1158, 1167, 1182,  633,  917,  958, 1139,  769,
     5216, 1079, 1186, 1194, 1191, 1184, 1158,  807, 1174, 1192,

      955, 1191, 1201, 1053, 1206, 1111, 1190, 1120, 1202, 1207,
     1212, 1228, 1223, 1221, 1230, 1231, 1238, 1233, 1251, 1240,
     1253, 1263, 1232, 1277, 1247, 2186, 1265, 1268, 1271, 1282,
     1302, 1292, 1288, 1294, 2183, 2175, 1300, 1303, 1304, 1309,
     2162, 1317, 1323, 1343, 1268, 1354, 1352, 1362, 1370, 1378,
     1365, 1386, 1375, 2101, 1100, 1394, 2020, 1383, 1398, 5216,
     1401, 2019, 5216, 1409, 2004, 1977, 1413, 5216, 1922, 5216,
     1416, 1417, 1425, 1428, 1436, 1438, 1446, 1433, 1454, 1463,
     1478, 1486, 1531, 1489, 1443, 1498, 1505, 1513, 1451, 1521,
     1490, 1547, 1550, 1510, 1917, 1558, 1560, 1573, 1919, 1518,

     1581, 1908, 1555, 5216, 1585, 1593, 1899, 1420, 5216, 5216,
     1601, 5216, 1867, 1604, 1849, 1563, 1608, 1616, 1613, 1624,
     1627, 1635, 1785, 5216, 1639, 5216, 1642, 1643, 1651, 1654,
     1770, 1662, 1664, 1672, 1770, 1659, 1680, 1689, 1704, 1705,
      983, 1669, 1713, 1716, 1721, 1731, 1732, 1739, 1740, 1747,
     1756, 1759, 1768, 1385, 1387, 1423, 1459, 1462, 1459, 1507,
     1749, 1589, 1782, 1785, 5216, 1643, 1320, 1768, 1776, 1778,
     1708, 1784, 1792, 1796, 1798, 1592, 1633, 1800, 1801, 1804,
     1672, 1697, 1811, 1813, 1810, 1814, 1752, 1816, 1823, 1824,
     1748, 1828, 1837, 1819, 1831, 1846, 1829, 1851, 1731, 1841,

     1854, 1856, 1860, 1861, 1876, 1880, 1872, 1883, 1882, 1874,
     1891, 1888, 5216, 1884, 1724, 1913, 1905, 1928, 1931, 1577,
      229, 1944, 1724, 1950, 1677, 1954, 1957, 1960, 1964, 5216,
     1967, 5216, 1932, 1935, 1970, 1973, 1975,  308, 1981, 1676,
     1985, 1667, 1989, 1992, 1995, 1998, 2001, 2011, 2014, 2017,
     2002, 2027,  488, 2031, 1632, 2035, 2018, 2039,  601, 2042,
     1631, 2046, 1612, 2050, 2053, 2057, 1598, 2060, 5216, 2063,
     1595, 5216, 2066, 1587, 2070, 5216,  613, 1568, 2073, 1567,
     2077, 2080, 2084, 2087, 2090, 2091, 2099, 2102, 2094, 1609,
     2104, 1554, 2110, 1536, 2114, 5216, 2117, 1524, 5216, 2120,

     1515, 2125, 2140, 2141, 2144, 2152, 2149, 1495, 2157, 1755,
     2160, 1492, 1493, 2168, 2171, 1159, 2172, 2180, 2183, 2186,
     2191, 2194, 2199, 2202, 2207, 2214, 2215, 1689, 1893, 1901,
     5216, 5216, 1958, 2117, 2225, 2228, 2231, 2237, 2222, 1471,
     2133, 2191, 2164, 2211, 2200, 2230, 2228, 2231, 2238, 2224,
     1741, 2239, 2252, 2244, 2242, 1447, 2259, 2255, 2260, 2267,
     2280, 2274, 2281, 2283, 2285, 2294, 2301, 2291, 2305, 2297,
     1446, 2302, 1438, 2309, 2320, 2311, 2329, 2300, 2331, 2327,
     2353, 2318, 2334, 1417, 2369, 2368, 2389, 2373, 2399, 2401,
     2409, 2396, 2413, 2417, 2425, 2429, 2432, 2414, 2440, 2437,

     2448, 2450, 2458, 2445, 2455, 2466, 2469, 2477, 2479, 2487,
     2490, 2495, 2494, 2503, 2506, 2514, 2511, 2518, 2522, 2525,
     2533, 2530, 2537, 2545, 2542, 2553, 2556, 2564, 2567, 5216,
     2569, 2572, 2574, 2582, 2586, 2594, 2597, 2598, 2606, 2609,
     2617, 2619, 2627, 2614, 2624, 2635, 2638, 2646, 5216, 2655,
     2670, 2671, 2642, 2679, 2643, 2683, 2686, 2698, 2687, 2701,
     2709, 5216, 1404, 5216, 2712, 1389, 2717, 2716, 2725, 2728,
     1384, 2736, 2738, 2746, 1380, 2733, 2749, 2754, 2757, 2762,
     2765, 2770, 2773, 2299, 2327, 2328, 5216, 2352, 2781, 2782,
     2785, 2786, 2451, 2517, 2762, 2690, 2777, 2479, 1361, 1354,

     2766, 2410, 2669, 2375, 2779, 2785, 2780, 1338, 2797, 2795,
     2749, 2718, 2805, 1329, 2817, 2789, 2807, 2819, 2822, 2830,
     2832, 2834, 2838, 1325, 2835, 2844, 1324, 2841, 1310, 2839,
     2847, 2845, 2853, 1296, 2848, 2865, 2850, 2870, 2863, 2895,
     2894, 2917, 2902, 2925, 2927, 2935, 1219, 2906, 2943, 2915,
     2947, 5216, 2951, 2959, 2963, 2971, 2975, 2978, 2932, 2986,
     2983, 2994, 2996, 3004, 1214, 2991, 3012, 3001, 3016, 5216,
     3020, 3028, 3032, 3040, 3044, 3047, 1270, 3054, 3051, 3062,
     3065, 3073, 3076, 3052, 3084, 3087, 3088, 3096, 3099, 3107,
     3109, 3117, 1175, 3104, 3125, 3128, 3114, 3136, 3144, 3133,

     3148, 3151, 3159, 5216, 3162, 3170, 3178, 3182, 3190, 3194,
     3198, 3201, 3167, 3209, 3206, 3217, 3220, 3228, 3231, 3236,
     3235, 3244, 3247, 3255, 3257, 3265, 1147, 3252, 3273, 3262,
     3277, 5216, 3281, 3289, 3293, 3301, 3305, 3314, 3329, 3330,
     3333, 3341, 3338, 3350, 3346, 3358, 1139, 3361, 3369, 3366,
     3377, 5216, 3381, 3389, 3393, 3401, 3404, 3405, 3413, 3416,
     3424, 3426, 3434, 1122, 3421, 3442, 3431, 3446, 5216, 3450,
     1107, 3458, 5216, 3461, 3466, 3469, 3474, 3477, 3482, 2833,
     2895, 2897, 2907, 3486, 3250, 3490, 5216, 3152, 3110, 2967,
     3274, 3109, 3450, 1096, 1073, 2968, 5216, 3442, 3257, 3478,

     3469, 3486, 3488, 3494, 3501, 3490, 3502, 3193, 3503, 3508,
     3516, 3396, 3523, 3521, 1064, 1044, 3528, 3518, 3531, 3532,
     3538, 3542, 3539, 3036, 3544, 3550, 3592, 1053, 3600, 5216,
     3608, 1045, 3612, 5216, 3620, 1044, 3624, 5216, 3632, 1022,
     3636, 5216, 3559, 1007, 3640, 3564, 3648,  998, 3567, 3656,
     3577, 3659, 3664, 3576, 3589,  969, 3667, 3675,  954, 3596,
     3683, 3691,  945, 3695, 5216, 3703,  944, 3711,  933, 3715,
     5216, 3719, 5216, 3727,  932, 3731, 5216, 3739,  914, 3743,
     5216, 3751,  913, 3755, 5216, 3763,  897, 3767, 5216, 3775,
      896, 3779, 5216, 3787,  876, 3791, 5216, 3799,  867, 3803,

     5216, 3806, 3811, 3814, 3819, 3822, 2988, 3167, 3278, 3596,
     3652, 5216, 3575,  856,  848, 3696,  843, 3712, 3046, 3633,
     3803, 3806,  810,  728, 3656, 3795, 3815,  727, 3651, 3819,
      720, 3724, 3814,  719, 3820, 3827,  710, 3826, 3828, 3824,
      665,  662, 3688, 3823,  647, 3832, 3846, 3865, 5216, 3876,
      610, 3847, 5216, 3884, 3892,  571, 3862,  559,  537,  521,
      516, 5216, 3900,  471, 3903, 3908, 3594, 3637, 3865, 3866,
     3884, 3885, 3861, 3876, 3892, 3895, 3900, 3912, 3915, 3899,
     3907, 3916, 3918,  456, 3926, 3914, 3922, 3917, 3927,  453,
      441,  431, 3984, 5216, 3987, 5216, 3967, 3970, 3300, 3441,

     3733, 3894, 3977,  403, 3947, 3914, 3965, 3980, 3979, 3982,
     3985,  392,  391, 3990, 3993, 3995, 3991, 3992, 3998, 3996,
     4029,  373,  372,  360,  351, 4001,  306, 3920,  265, 4010,
     4021,  264,  229,  214,  176,  160, 4006, 4005, 4028, 4026,
     5216, 5216, 5216, 5216, 4034, 5216,  117, 4036,   79, 4038,
     4037, 4049, 4055, 4041,   50, 4063, 4051, 4066,   38,   37,
     4065, 4068,   14,    7, 5216, 4117, 4122, 4127, 4132, 4137,
     4142, 4147, 4152, 4157, 4162, 4164, 4168, 4173, 4178, 4183,
     4188, 4193, 4198, 4203, 4208, 4211, 4214, 4218, 4223, 4228,
     4233, 4238, 4243, 4248, 4253, 4258, 4263, 4268, 4273, 4278,

     4283, 4288, 4293, 4298, 4303, 4308, 4313, 4318, 4323, 4328,
     4333, 4338, 4343, 4348, 4353, 4358, 4363, 4368, 4373, 4378,
     4383, 4388, 4393, 4398, 4403, 4408, 4413, 4418, 4423, 4428,
     4430, 4435, 4440, 4445, 4450, 4455, 4460, 4465, 4470, 4475,
     4480, 4485, 4490, 4495, 4500, 4505, 4510, 4515, 4520, 4525,
     4530, 4535, 4540, 4545, 4550, 4555, 4560, 4565, 4570, 4572,
     4577, 4582, 4587, 4592, 4597, 4602, 4607, 4612, 4617, 4622,
     4627, 4632, 4637, 4642, 4647, 4652, 4657, 4662, 4667, 4672,
     4677, 4682, 4687, 4692, 4697, 4702, 4707, 4712, 4717, 4722,
     4724, 4729, 4734, 4739, 4744, 4749, 4754, 4759, 4764, 4769,

     4774, 4779, 4784, 4789, 4794, 4799, 4804, 4809, 4814, 4819,
     4824, 4829, 4834, 4839, 4844, 4849, 4854, 4859, 4864, 4869,
     4874, 4879, 4884, 4889, 4891, 4896, 4901, 4906, 4911, 4916,
     4921, 4926, 4931, 4936, 4941, 4946, 4951, 4956, 4961, 4966,
     4971, 4976, 4981, 4986, 4991, 4996, 5001, 5006, 5011, 5016,
     5021, 5026, 5031, 5036, 5041, 5046, 5051, 5056, 5061, 5066,
     5071, 5076, 5078, 5083, 5088, 5093, 5098, 5103, 5108, 5113,
     5118, 5123, 5128, 5133, 5138, 5143, 5148, 5153, 5158, 5163,
     5168, 5173, 5178, 5183, 5188, 5193, 5198, 5203, 5208, 5210
    } ;

static yyconst flex_int16_t yy_def[1491] =
    {   0,
     1266, 1266, 1267, 1267,    2,    5, 1268, 1268, 1269, 1269,
     1270, 1270, 1270, 1270, 1270, 1270, 1271, 1271, 1272, 1273,
     1274, 1274, 1275, 1275, 1265, 1265, 1265, 1265, 1265, 1265,
     1276, 1265, 1265, 1277, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1278, 1265, 1279, 1280, 1281, 1282,
     1283, 1284, 1281, 1279, 1283, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1276, 1285, 1286, 1287, 1277, 1276, 1276, 1276, 1276,

     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1278, 1265, 1288, 1289, 1290, 1291, 1280,
     1289, 1292, 1293, 1294, 1289, 1295, 1296, 1297, 1298, 1295,
     1296, 1299, 1300, 1301, 1302, 1302, 1303, 1304, 1302, 1305,
     1306, 1294, 1294, 1294, 1294, 1294, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1265, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,

     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1307, 1308,
     1309, 1289, 1310, 1303, 1308, 1299, 1311, 1309, 1309, 1303,
     1311, 1309, 1292, 1299, 1312, 1293, 1293, 1303, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1316, 1314, 1319, 1317, 1289,
     1320, 1321, 1318, 1318, 1303, 1322, 1318, 1299, 1265, 1319,
     1319, 1265, 1319, 1315, 1315, 1303, 1319, 1315, 1323, 1303,
     1324, 1323, 1323, 1303, 1325, 1324, 1265, 1324, 1323, 1303,
     1326, 1289, 1327, 1328, 1329, 1330, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1331, 1331, 1331, 1331, 1331,

     1331, 1331, 1331, 1331, 1331, 1265, 1265, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1332, 1333, 1334, 1333, 1335, 1334, 1334,
     1335, 1334, 1336, 1299, 1325, 1303, 1303, 1335, 1335, 1265,
     1335, 1303, 1265, 1334, 1303, 1312, 1312, 1265, 1303, 1265,
     1337, 1338, 1339, 1338, 1340, 1339, 1339, 1340, 1339, 1341,
     1342, 1343, 1341, 1342, 1344, 1345, 1343, 1343, 1346, 1343,
     1340, 1340, 1340, 1344, 1299, 1347, 1345, 1345, 1303, 1347,

     1345, 1303, 1346, 1265, 1346, 1343, 1303, 1265, 1265, 1265,
     1340, 1265, 1303, 1339, 1303, 1348, 1349, 1348, 1349, 1349,
     1348, 1348, 1325, 1265, 1349, 1265, 1350, 1351, 1352, 1351,
     1299, 1353, 1352, 1352, 1303, 1353, 1352, 1354, 1355, 1355,
     1356, 1357, 1358, 1359, 1359, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1265, 1265, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1265, 1360, 1360, 1361, 1362, 1363, 1362, 1364,
     1363, 1363, 1364, 1363, 1364, 1364, 1364, 1363, 1325, 1265,
     1364, 1265, 1365, 1366, 1367, 1366, 1368, 1367, 1367, 1368,
     1367, 1368, 1368, 1368, 1367, 1365, 1369, 1370, 1365, 1369,
     1371, 1372, 1370, 1370, 1373, 1370, 1371, 1374, 1372, 1372,
     1374, 1372, 1373, 1373, 1370, 1368, 1374, 1374, 1265, 1374,
     1303, 1265, 1372, 1303, 1373, 1265, 1375, 1376, 1375, 1376,
     1376, 1375, 1376, 1375, 1377, 1378, 1379, 1378, 1380, 1379,
     1379, 1380, 1379, 1380, 1380, 1265, 1380, 1303, 1265, 1379,

     1303, 1381, 1382, 1382, 1383, 1384, 1383, 1385, 1386, 1384,
     1384, 1303, 1386, 1384, 1387, 1388, 1389, 1390, 1387, 1387,
     1365, 1365, 1365, 1365, 1365, 1365, 1387, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1265,
     1265, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1392, 1393, 1394, 1393, 1395, 1394,
     1394, 1395, 1395, 1395, 1394, 1395, 1396, 1397, 1398, 1397,

     1399, 1398, 1398, 1399, 1399, 1399, 1398, 1399, 1400, 1401,
     1400, 1402, 1403, 1404, 1405, 1405, 1406, 1403, 1407, 1404,
     1404, 1407, 1406, 1405, 1407, 1407, 1404, 1406, 1407, 1265,
     1408, 1409, 1409, 1408, 1409, 1408, 1410, 1411, 1412, 1411,
     1413, 1412, 1412, 1413, 1413, 1413, 1412, 1413, 1265, 1414,
     1415, 1415, 1416, 1417, 1416, 1418, 1417, 1417, 1418, 1418,
     1418, 1265, 1419, 1265, 1417, 1419, 1420, 1421, 1422, 1421,
     1423, 1424, 1422, 1422, 1419, 1424, 1396, 1420, 1396, 1396,
     1396, 1396, 1396, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,

     1425, 1425, 1265, 1265, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426,
     1427, 1428, 1427, 1429, 1428, 1428, 1419, 1429, 1428, 1429,
     1429, 1265, 1429, 1428, 1429, 1428, 1429, 1396, 1430, 1431,
     1430, 1432, 1431, 1431, 1419, 1432, 1431, 1432, 1432, 1265,
     1432, 1431, 1432, 1431, 1432, 1433, 1434, 1433, 1435, 1436,
     1437, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1442, 1444,
     1443, 1443, 1419, 1444, 1443, 1445, 1446, 1445, 1445, 1446,

     1446, 1444, 1444, 1265, 1444, 1443, 1445, 1444, 1443, 1446,
     1444, 1447, 1448, 1447, 1448, 1448, 1447, 1448, 1447, 1449,
     1450, 1451, 1450, 1452, 1451, 1451, 1419, 1452, 1451, 1452,
     1452, 1265, 1452, 1451, 1452, 1451, 1452, 1453, 1454, 1454,
     1455, 1456, 1455, 1457, 1456, 1456, 1419, 1457, 1456, 1457,
     1457, 1265, 1457, 1456, 1457, 1456, 1458, 1459, 1460, 1459,
     1461, 1460, 1460, 1419, 1461, 1460, 1461, 1461, 1265, 1461,
     1419, 1460, 1265, 1462, 1458, 1462, 1462, 1462, 1462, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1265, 1265, 1463, 1463, 1463,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1464, 1419, 1465, 1265,
     1464, 1419, 1465, 1265, 1466, 1419, 1467, 1265, 1466, 1419,
     1467, 1265, 1468, 1469, 1470, 1471, 1471, 1419, 1472, 1471,
     1473, 1473, 1473, 1474, 1475, 1476, 1477, 1477, 1419, 1470,
     1477, 1478, 1419, 1479, 1265, 1478, 1419, 1480, 1419, 1481,
     1265, 1479, 1265, 1482, 1419, 1483, 1265, 1484, 1419, 1485,
     1265, 1484, 1419, 1485, 1265, 1486, 1419, 1487, 1265, 1486,
     1419, 1487, 1265, 1460, 1419, 1488, 1265, 1460, 1419, 1488,

     1265, 1462, 1489, 1462, 1489, 1489, 1265, 1265, 1265, 1265,
     1265, 1265, 1490, 1490, 1490, 1490, 1490, 1490, 1265, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1470, 1470, 1265, 1470,
     1419, 1472, 1265, 1472, 1471, 1419, 1474, 1476, 1476, 1476,
     1419, 1265, 1477, 1419, 1462, 1462, 1265, 1265, 1265, 1265,
     1490, 1490, 1490, 1265, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1470, 1265, 1472, 1265, 1462, 1489, 1265, 1265,

     1265, 1265, 1490, 1490, 1490, 1265, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1489, 1265, 1265, 1265, 1265, 1490, 1490, 1265, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1265, 1265, 1265, 1265, 1490, 1265, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490,    0, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,

     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,

     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265
    } ;

static yyconst flex_uint16_t yy_nxt[5285] =
    {   0,
       26,   26,   27,   28,   26,   26,   26,   26,   26,   29,
       26,   26,   26,   30,   26,   26,   26,   50,   54,   50,
       54,   93,   58,   58,   51,   52,   51,   52,   93,   59,
       59,   77,   78,   77,   79,   60,   60,   82,   83,   82,
       84,   32,   26,   26,  142,   89,   58,   58,   94,   95,
      143,   93,   93,   59,   59,   90,   93,   55,   56,   55,
       56,   61,   61,  157,   93,  157,  158,   26,   26,   26,
       33,   28,   26,   26,   26,   26,   26,   29,   26,   26,
       26,   30,   26,   26,   26,   61,   61,   93,   58,   93,
       62,   62,   62,   93,   93,   59,   93,   93,   62,  180,

      127,  117,  128,   99,  105,  286,  129,  123,  216,   32,
       26,   26,   94,   95,  217,   58,   93,   62,   62,   62,
       93,  163,   59,  163,  164,   62,  180,   61,  117,   99,
      105,   93,  286,  113,  123,   26,   26,   26,   27,   28,
       26,   26,   26,   26,   26,   29,   26,   26,   26,   30,
       26,   26,   26,   62,   61,   77,   78,   77,   79,  113,
       93,  131,   89,  132,  135,   80,  137,  133,  110,  369,
      144,  229,   90,   80,   93,  111,  112,   32,   26,   26,
       62,   85,   83,   85,   84,   86,  146,  147,  146,  148,
       93,   87,  224,  149,   93,  110,   88,  181,  225,   87,

       80,  111,  112,   26,   26,   26,   33,   28,   26,   26,
       26,   26,   26,   29,   26,   26,   26,   30,   26,   26,
       26,   93,   93,   93,  181,   97,   87,   93,   93,   93,
       93,  362,  159,  692,  159,   93,  106,  161,  107,  161,
      114,   98,  118,   93,  108,   32,   26,   26,  115,  109,
      176,  116,   97,  160,  127,  213,  128,  119,  162,  214,
      129,  165,  106,  165,  107,   93,  114,   98,  150,  118,
      108,   26,   27,   93,  115,  109,  176,  116,   93,   93,
      160,  195,  166,  119,  184,  162,   93,   35,   36,   37,
       38,   39,   40,   93,  287,   41,  170,  213,   42,   43,

      171,  214,   44,   45,   46,   47,  177,  195,   48,  166,
      413,  184,  704,  179,   35,   36,   37,   38,   39,   40,
       93,  287,   41,  170,   42,   43,   93,  171,   44,   45,
       46,   47,  177,   93,   48,   68,   69,   70,   71,  179,
      172,   72,  172,  120,   71,  194,   73,   93,   93,   74,
      121,   93,   75,   71,  167,  189,  167,  164,  168,  122,
       93,  173,   93,   93,  178, 1244,  182,  183,  190,  169,
      120,  194,  198,  213, 1243,   93,  121,  214,  196,   75,
       71,   93,  189,  197,  100,  122, 1242, 1241,  173,  204,
      178,  101,  182,  183,  190,  102,  142,  142,  103,  198,

      104,   93,  238,  238,  196,   93,   93,  191,   93,  197,
      127,  100,  210,   93,  267,  204,  211,   93,  101,  199,
      268,  102,  192,  193,  103,  200,  104,  134,  134,  135,
      136,  137,  134,  134,  191,  139,  134,  134,  134,  134,
      140,  134,  134,  134,   93,   93,  199,   93,  192,  193,
      202,  200,  203,   93,   93,   93,  213,  205,   93,   93,
      214,  206,  157,  201,  157,  158,  208,   93,  134,  134,
       93,  219,  220,  219,  221,  265,  207,  202,  222,  203,
      131,  135,  132,  231,  205,  216,  133,  232,  206,  201,
      402,  348,  717,  208,  134,  134,  134,  135,  140,  137,

      134,  134,  207,  144,  134,  134,  134,  134,  140,  134,
      134,  134,  227,  228,  227,  229,  240,  185,  241,   93,
      265,   93,  242, 1160,  186,  244,  245,  244,  246,  159,
      288,  159,  247,  251,  252,  251,  134,  134,  354, 1160,
      253,  187,  296,  188,  355,  255,  256,  255,  257,  291,
      160,  186,  258,  260,  272,  261,  273,  288,  292,  262,
      274, 1160,  134,  151,  135,  151,  137,  187,  296,  188,
      144,  263,  147,  263,  261,  265,  291,  160,  262,  152,
      269,  270,  269,  261,   93,  292,  163,  262,  163,  164,
      153,  300,   93,  154,  135,  155,  231,  299,  216,  289,

      232,  290,  156,  571,  348,  722,  152,  135,  167,  231,
      167,  164,  168,  232,  265,  260,  153,  732,  300,  154,
      277,  155,  279,  169,  299,  289,  278,  290,  156,  230,
      230,  135,  233,  231,  230,  230,  280,  235,  230,  230,
      230,  230,  236,  230,  230,  230,  277,   93,   93,  279,
       93,  135,  278,  231,  135,  170,  231,  232,  297,  171,
      232,   93,  280,  454,  298,  311,  303,  159,  285,  159,
      230,  230,  161,  165,  161,  165,   93,  284,  127,   93,
      345,  362,  170,  351,  346,  297,  171,  352,  160,  454,
      298,  311,  303,  162,  166,  285,  230,  230,  230,  135,

      236,  231,  230,  230,  284,  232,  230,  230,  230,  230,
      236,  230,  230,  230,  165,  160,  165,   93,   93,   93,
      162,  166,   93,  309,   93,   93,   93,  310,  327,  312,
      172,  328,  172,   93,   93,  166,   93,  301,  230,  230,
       93,   93,   93,  363,   93,  350,  220,  350,  351,  361,
      309,  173,  352,  224,  310,  327,  312,  304,  328,  225,
      302,  308,  166,  301,  230,  230,  275,  135,  275,  231,
      230,  230,  230,  232,  230,  230,  230,  230,  173,  230,
      230,  230,  135,  304,  231,  306,  302,  308,  232,  459,
       93,  293,   93,  293,   93,   93,   93,   93,  213,  213,

      281,  330,  214,  214,  307,  326,  230,  230,  230,  282,
      283,  294,  306,  305,  325,  295,  459,  142,  329,  332,
       93,   93,   93,  375,   93,  333,  468,  281,  330,  334,
      307,  326,  230,  331,   93,  282,  283,   93,  294,  305,
      325,  335,  295,   93,  329,  332,  313,  314,  315,  316,
      317,  318,  333,  468,  319,   93,  334,   93,  320,  337,
      331,  321,   93,  322,  323,   93,   93,  324,  335,  336,
       93,  265,  338,  313,  314,  315,  316,  317,  318,   93,
      265,  319,  341,   93,  320,  337,  135,  321,  372,  322,
      323,  142,  373,  324,  339,  336,   93,  375,  340,  338,

      265,  265,  343,  342,  356,  357,  356,  265,  341,  359,
      360,  359,  350,  220,  350,  351,  361,  265,  265,  352,
      339,  367,  368,  367,  340,  408,  409,  408,  343,  395,
      342,  364,  365,  364,  351,  396,  265,  265,  352,  227,
      228,  227,  229,  377,  256,  377,  378,  455,  265,  265,
      379,  371,  371,  135,  380,  372,  371,  371,  265,  382,
      371,  371,  371,  371,  383,  371,  371,  371,  240,   93,
      385, 1160,  471,  455,  386,  388,  245,  388,  389,  392,
      252,  392,  390,  240,  404,  385,  393,  213,  456,  386,
      405,  214,  371,  371,  398,  399,  398,  400,  402,  471,

      389,  401,  265,  410,  390,  388,  245,  388,  389,  393,
      410,  413,  390,  378,  456,  249,  393,  379,  371,  371,
      371,  135,  383,  372,  371,  371,  265,  373,  371,  371,
      371,  371,  383,  371,  371,  371,  406,  407,  406,  389,
      392,  252,  392,  390,  411,  412,  411,  393,  265,  265,
      267,  393,  377,  256,  377,  378,  420,  265,   93,  379,
      371,  371,  414,  415,  414,  378,  260,   93,  417,  379,
      474,  267,  418,  421,  270,  421,  417,  420,   93,  431,
      418,  422,  147,  422,  417,  432,  371,   93,  418,  425,
      426,  425,  421,  270,  421,  417,  420,  474,  272,  418,

      428,  529,  530,  529,  429,  434,  435,  434,  436,  460,
       93,  265,  437,  371,  438,  135,  438,  372,  371,  371,
      371,  373,  371,  371,  371,  371,  265,  371,  371,  371,
      441,  135,  442,  372,   93,  460,  443,  373,  135,  135,
      372,  372,  476,  265,  373,  373,  135,  135,  372,  372,
      478,  265,  373,  373,  371,  371,  371,  444,  445,  135,
      135,  372,  372,  213,  457,  373,  373,  214,  476,  135,
      446,  372,   93,  458,  449,  373,  478,  450,  447,  265,
      371,  467,  448,  444,  135,  445,  372,  293,   93,  293,
      373,  457,  464,  451,  464,  461,  446,  461,   93,  458,

      449,  469,  452,  450,  447,   93,   93,  294,  467,  448,
      453,  295,  470,  465,  477,   93,   93,  466,  265,  451,
       93,   93,  462,  265,  463,  472,   93,  469,  452,  473,
      479,  475,  480,  481,  294,   93,  453,   93,  295,  470,
      465,  477,   93,  466,   93,   93,   93,   93,  462,  485,
      463,  472,   93,  482,   93,  473,  479,  484,  475,  480,
      481,   93,  487,  486,  489,   93,  483,   93,  488,  490,
      216,  493,  497,  491,  213,  485,  520,   93,  214,   93,
      482,  492,   93,  484,  495,   93,  494,  499,  487,  486,
      489,   93,  483,  500,  488,  490,   93,  493,  497,  496,

      491,  498,   93,  501,  502,  503,   93,  492,   93,  507,
       93,  495,  494,  499,   93,  504,   93,   93,   93,  500,
      506,  505,  510,   93,   93,  496,  513,  508,  498,  501,
      502,   93,  503,  509,   93,  511,  507,   93,   93,   93,
      512,  504,  514,   93,  515,  127,  506,  517,  505,  510,
      640,  518,   93,  508,  216,  522,  220,  522,  523,  509,
      520,  511,  524,  526,  360,  526,  512,  363,   93,  514,
      527,  515,  362,  527,  523,   93,  640,  354,  524,  522,
      220,  522,  523,  355,  265,  363,  524,  528,  365,  528,
      523,  527,  249,  265,  524,  356,  357,  356,  265,  526,

      360,  526,  531,  532,  531,  628,  527,  629,  265,  527,
      528,  365,  528,  523,  367,  368,  367,  524,  135,  142,
      534,  408,  409,  408,  535,  537,  539,  256,  539,  540,
      142,   93,  628,  541,  629,  410,  537,  543,  252,  543,
      413,  544,  540,  630,  544,  395,  541,  539,  256,  539,
      540,  558,   93,  404,  541,  545,  415,  545,  540,  564,
       93,   93,  541,  533,  533,  135,  546,  534,  533,  533,
      630,  548,  533,  533,  533,  533,  549,  533,  533,  533,
      240,  631,  551,  632,  633,   93,  552,  554,  245,  554,
      555,  240,  410,  551,  556,  764,  265,  552,  544,  560,

      399,  560,  561,  249,  533,  533,  562,  402,  631,  555,
      632,  633,  395,  556,  554,  245,  554,  555,  558,  265,
      572,  556,  565,  407,  565,  555,  570,  634,  265,  556,
      533,  533,  533,  135,  549,  534,  533,  533,  599,  535,
      533,  533,  533,  533,  549,  533,  533,  533,  543,  252,
      543,  566,  412,  566,  634,  544,  599,  404,  544,  568,
      569,  568,  571,  564,  561,  260,  570,  578,  562,  267,
      267,  579,  533,  533,  560,  399,  560,  561,  694,  360,
      694,  562,  573,  574,  573,  561,  575,  576,  575,  562,
      635,  265,  635,  564,  565,  407,  565,  555,  533,  265,

      572,  556,  566,  412,  566,  545,  415,  545,  540,  544,
      267,  598,  541,  744,  404,  267,  581,  582,  270,  582,
      578,  581,  650,  636,  579,  583,  426,  583,  582,  270,
      582,  578,  581,  572,  404,  579,  584,  147,  584,  578,
      583,  426,  583,  579,  272,  431,  586,  581,  650,  636,
      587,  589,  591,  435,  591,  592,  431,   93,  651,  593,
      639,  599,  589,  595,  596,  595,  598,  597,  592,  410,
      597,  608,  593,  591,  435,  591,  592,  609,  410,  363,
      593,  600,  601,  600,  592,  651,   93,  639,  593,  533,
      602,  135,  602,  534,  533,  533,  533,  535,  533,  533,

      533,  533,  655,  533,  533,  533,  441,  441,  605,  605,
      784,   93,  606,  606,  611,  612,  611,  613,  616,  656,
      617,  614,   93,  616,  618,  617,  363,  644,  655,  618,
      533,  533,  533,  135,  135,  534,  534,  784,   93,  535,
      535,  135,  135,  534,  534,   93,  656,  535,  535,  135,
      461,  534,  461,  620,  644,  535,  533,  763,  135,  759,
      534,  135,   93,  534,  535,  619,   93,  535,  621,  804,
      135,  622,  534,  624,  265,  623,  535,  462,  249,  463,
      620,  625,   93,  637,  626,  637,  464,  424,  464,  627,
       93,  619,   93,  641,  621,  804,  642,  622,   93,  643,

      624,  623,  638,  462,  645,  463,   93,  465,  625,  646,
       93,  626,   93,  647,   93,   93,  627,  649,   93,  652,
      641,  648,  653,  642,   93,   93,  643,   93,   93,  638,
       93,  645,  654,   93,  465,  657,  646,   93,   93,  660,
      647,  659,   93,   93,  649,   93,  652,  658,  648,  653,
      666,   93,  661,  265,  663,   93,  662,  665,  654,  667,
       93,  669,  657,  664,  668,   93,  660,  659,   93,  671,
       93,  265,  670,  658,   93,   93,  666,  673,  661,  672,
      663,  674,  662,  675,  665,  667,   93,  669,   93,  664,
       93,  668,  678,  676,   93,  671,   93,   93,   93,  670,

      679,  677,   93,  265,  673,   93,  672,  216,  674,  681,
      675,  682,  265,  689,  785,  127,  680,  686,  684,  678,
      676,  687,  786,  265,  683,  249,  265,  679,  677,  691,
      220,  691,  692,  216,  135,  681,  698,  142,  682,  689,
      699,  785,  680,  701,  684,  691,  220,  691,  692,  786,
      683,  695,  365,  695,  692,  694,  360,  694,  696,  532,
      696,  695,  365,  695,  692,  529,  530,  529,  696,  532,
      696,  703,  256,  703,  704,  142,  706,  252,  706,  370,
      787,  701,  703,  256,  703,  704,  707,  415,  707,  704,
      706,  252,  706,  708,  412,  708,  707,  415,  707,  704,

      135,  709,  698,  240,  395,  713,  710,  787,  265,  714,
      719,  711,  716,  245,  716,  717,  135,  711,  698,  240,
      395,  713,  699,  265,  265,  714,  719,  711,  721,  399,
      721,  722,  716,  245,  716,  717,  724,  407,  724,  717,
      726,  569,  726,  721,  399,  721,  722,  727,  574,  727,
      722,  728,  576,  728,  724,  407,  724,  717,  708,  412,
      708,  726,  569,  726,  729,  730,  729,  727,  574,  727,
      722,  728,  576,  728,  734,  270,  734,  732,  735,  426,
      735,  734,  270,  734,  732,  735,  426,  735,  736,  147,
      736,  732,  272,  431,  738,  746,  596,  746,  739,  741,

      743,  435,  743,  744,  431,  743,  435,  743,  744,  249,
      741,  747,  601,  747,  744,  746,  596,  746,  748,  749,
      748,  747,  601,  747,  744,  697,  750,  135,  750,  698,
      697,  697,  697,  699,  697,  697,  697,  697,  788,  697,
      697,  697,  441,  441,  753,  753,  608,   93,  754,  754,
      794,  608,  756,  758,  612,  758,  759,  756,  761,  762,
      761,  758,  612,  758,  759,  788,  697,  697,  697,  765,
      766,  765,  759,  616,  771,  768,   93,  794,   93,  769,
      772,  774,  775,  774,  776,  616,  796,  768,  616,   93,
      768,  769,  697,  135,  769,  698,  135,   93,  698,  699,

       93,  135,  699,  698,  135,   93,  698,  699,  795,  135,
      699,  698,  777,  796,   93,  699,  135,  616,  698,  768,
      779,  798,  699,  769,  778,   93,  635,  780,  635,  789,
      781,  789,  637,  783,  637,  795,   93,  782,  791,  777,
      791,  793,   93,  803,   93,   93,  797,  779,  798,  790,
      778,  638,   93,   93,  780,  802,   93,  781,   93,  636,
      783,  801,  792,  782,  799,  808,   93,  800,  793,   93,
      803,  806,  797,   93,   93,  805,  790,  809,  638,  812,
      810,   93,  802,  265,  807,  636,  811,  801,   93,  792,
      799,  815,  808,  800,   93,   93,  424,   93,  806,   93,

      816,  805,  813,  809,  817,   93,  812,  810,   93,  814,
      807,   93,  811,  819,   93,   93,   93,  820,  815,   93,
      822,  818,  821,   93,  823,   93,  824,  816,  813,  980,
      825,  817,   93,  826,   93,  814,  833,  828,  265,  829,
      819,   93,  827,   93,  820,   93,  822,  818,   93,  821,
      823,  830,  835,  824,  838,  980,  825,  981,  982,  826,
      834,  831,  833,  832,  828,  829,  265,   93,  827,  839,
      216,  127,  836,  841,  265,  216,  844,  842,  830,  835,
      838,  844,  983,  981,  982,  249,  834,  831,  837,  832,
      846,  847,  846,  848,  265,  839,  997,  849,  363,  836,

      851,  852,  851,  362,  853,  848,  370,  853,  983,  849,
      854,  220,  854,  848,  837,  363,  142,  849,  855,  360,
      855,  853,  862,  997,   93,  853,  856,  365,  856,  848,
      857,  532,  857,  849,  135,  265,  859,  853,  995,  142,
      860,  864,  865,  864,  866,  862,  249,  410,  867,  869,
      870,  869,  413,  871,  866,  265,  871,  410,  867,  872,
      256,  872,  866,  871,  995,   93,  867,  873,  252,  873,
      874,  415,  874,  866,  871,  249,  174,  867,  875,  412,
      875,  877,  878,  879,  265,  871,  988,  880,  882,  883,
      882,  884,  877,   93,  879,  867,  395,  240,  885,  887,

      249,  993,  890,  888,  892,  893,  892,  894,  402,  125,
      897,  895,  988,  404,  898,  899,  245,  899,  897,  901,
      395,   93,  898,  903,  904,  903,  890,  571,  993,  894,
      905,   93,  572,  895,  906,  399,  906,  894,  905,  404,
       93,  895,   95,   93,  572,  901,  907,  407,  907,  897,
      905,   91,  989,  898,  908,  569,  908,  909,  574,  909,
      894,  905,  174,  125,  895,  910,  576,  910,  911,  730,
      911,  260,  901,  913,  267,  905,  267,  914,  989,   93,
      916,   91,  916,  917,  270,  917,  913,  918,  426,  918,
      914, 1265,   66,   64,  916,  919,  147,  919,  913,  272,

      431,  921,  914,   64,   33,  922,  924,  926,  927,  926,
      928,  431, 1265, 1265,  929, 1265,  599,  924,  931,  932,
      931,  598,  933,  928, 1265,  933,  599,  929,  934,  435,
      934,  928,  933, 1265, 1265,  929,  935,  596,  935,  936,
      601,  936,  928,  933,  608,  608,  929,  937,  749,  937,
      944,  944, 1265, 1265,  933,  858,  938,  135,  938,  859,
      858,  858,  858,  860,  858,  858,  858,  858, 1265,  858,
      858,  858,  441,  441,  941,  941, 1265, 1265,  942,  942,
      946,  947,  946,  948,  951,  952,  951,  949,  763,  764,
      948,  953, 1265, 1265,  949,  953,  858,  858,  858,  954,

      612,  954,  948,  764,   93,  996,  949,  991, 1265,  953,
      955,  762,  955,  956,  766,  956,  948,  953,  771,  616,
      949,  958,  858, 1265,  961,  959,  963,  964,  963,  965,
      771,  996,   93,  966,  991,  973,  961,  968,  969,  968,
      971,  970,  965, 1265,  970, 1004,  966,  972,  775,  972,
      965,  135, 1265,  859,  966, 1265,  616,  860,  958,  135,
     1265,  859,  959,   93,  135,  860,  859,  135, 1003,  859,
      860, 1004,  135,  860,  859,  135,   93,  859,  860,  974,
       93,  860,  789,  984,  789,  984,  791,  986,  791,  986,
      979,   93,  976,   93,   93, 1003,  975,  990,  992,   93,

      994,  977,  790,   93, 1265,  974,  978,  985,  987,   93,
      792,   93,  998, 1000, 1001, 1265,  999,  979,  976,   93,
     1265,   93,  975,  990, 1007,  992,  994,  977, 1002,  790,
     1005,   93,  978,   93,  985,  987,   93,  792,  998, 1000,
     1008, 1001,  999, 1010,   93, 1006,   93, 1009,   93,   93,
     1007, 1012,   93,   93, 1002,   93, 1015, 1005,   93,   93,
     1017,   93,   93, 1011,   93, 1013, 1008,   93, 1107, 1014,
     1010, 1006, 1265, 1009, 1016, 1018, 1265,   93, 1012,   93,
     1019, 1020, 1023, 1015,   93, 1022, 1021, 1017, 1026, 1011,
     1024, 1013, 1265, 1265, 1107, 1014,  216,  127, 1025,  841,

     1016, 1018,  844,  842,  216, 1265, 1019, 1020,  363, 1023,
      844, 1022, 1021, 1265,  853, 1026, 1024,  363, 1027, 1028,
     1027,  848, 1265,  853, 1025,  849, 1029, 1030, 1029,  362,
     1108,  848, 1109,  853,  142,  849,  846,  847,  846,  848,
      862, 1265, 1110,  849, 1031, 1032, 1031,  848,  851,  852,
      851,  849, 1033, 1034, 1033,  853, 1108, 1265, 1109,  853,
      854,  220,  854,  848,  855,  360,  855,  849, 1110, 1265,
     1265,  853,  856,  365,  856,  848,  857,  532,  857,  849,
      135,   93,  859,  853, 1115,  142,  860, 1035, 1036, 1035,
      866,  862, 1265,  410,  867, 1037, 1038, 1037,  413,  871,

      866, 1119,  871,  410,  867,  864,  865,  864,  866,  871,
     1167, 1115,  867, 1039, 1040, 1039,  866,  869,  870,  869,
      867, 1041, 1042, 1041,  871, 1265, 1265, 1119,  871,  872,
      256,  872,  866,  873,  252,  873,  867, 1167, 1265, 1265,
      871,  874,  415,  874,  866,  875,  412,  875,  867,  877,
       93,  879,  871, 1044, 1056,  885,  877,  878,  879, 1045,
      871, 1265,  880, 1047, 1048, 1047, 1049, 1051, 1144,  884,
     1050, 1265, 1265,  867,  882,  883,  882,  884, 1053, 1174,
     1054,  867, 1265, 1265,  264, 1058, 1059, 1058, 1060,  240,
      395,  887, 1061, 1265, 1144,  888,  890, 1062, 1063, 1062,

      894,  395, 1265, 1265,  895, 1174,  572,  890, 1064, 1065,
     1064,  571,  905,  894, 1265,  905,  404,  895,  892,  893,
      892,  894,  901,   93,   93,  895, 1066, 1067, 1066,  894,
      402, 1114,  897,  895, 1265,  404,  898, 1068, 1069, 1068,
      897,  901, 1117, 1265,  898,  899,  245,  899,  897, 1070,
     1071, 1070,  898,  572, 1265, 1265,  901, 1265, 1114,  905,
      903,  904,  903, 1072, 1073, 1072,   93,  905, 1117,  267,
      905,  906,  399,  906,  894,  916, 1265, 1113,  895,  907,
      407,  907,  897,  908,  569,  908,  898, 1265, 1265, 1168,
      905,  909,  574,  909,  894,  910,  576,  910,  895,  911,

      730,  911,  901,  260, 1113,  913,  905,   93,  267,  914,
     1074, 1075, 1074,  913,  916, 1130, 1168,  914, 1076, 1077,
     1076,  917,  270,  917,  913,  916, 1265, 1265,  914,  918,
      426,  918,  919,  147,  919,  913,  916,  431,  272,  914,
      921, 1265, 1130,  924,  922, 1078, 1079, 1078,  928,  431,
     1265, 1111,  929, 1111,  599,  924, 1080, 1081, 1080,  598,
      933,  928, 1265,  933,  599,  929,  926,  927,  926,  928,
      933,   93, 1112,  929, 1082, 1083, 1082,  928,  931,  932,
      931,  929, 1084, 1085, 1084,  933, 1121, 1265,   93,  933,
      934,  435,  934,  928,  935,  596,  935,  929, 1265, 1112,

     1169,  933,  936,  601,  936,  928,  937,  749,  937,  929,
     1116, 1265, 1121,  933,  858,  938,  135,  938,  859,  858,
      858,  858,  860,  858,  858,  858,  858, 1169,  858,  858,
      858,  441,  441,  941,  941,  608, 1116,  942,  942, 1222,
      608,  944, 1086, 1087, 1086,  948,  944, 1265,  763,  949,
      948, 1088, 1089, 1088,  949,  858,  858,  858,  953,  946,
      947,  946,  948,  764, 1265, 1222,  949, 1265,  764,  953,
     1090, 1091, 1090,  948,  953, 1265, 1265,  949,  951,  952,
      951,  858, 1092, 1093, 1092,  953, 1265, 1265, 1265,  953,
      954,  612,  954,  948,  955,  762,  955,  949, 1265, 1265,

     1265,  953,  956,  766,  956,  948,  616,  771,  958,  949,
       93, 1265,  959,  961, 1094, 1095, 1094,  965,  771, 1265,
     1265,  966, 1265,  973,  961, 1096, 1097, 1096,  971,  970,
      965, 1134,  970,  973,  966,  963,  964,  963,  965,  970,
     1265, 1265,  966, 1098, 1099, 1098,  965,  968,  969,  968,
      966, 1100, 1101, 1100,  970, 1265,   93, 1134,  970,  972,
      775,  972,  965,  135,   93,  859,  966, 1118,  616,  860,
      958,  135, 1265,  859,  959, 1120,  135,  860,  859,  135,
     1223,  859,  860,   93,  135,  860,  859,  984, 1265,  984,
      860,  986,   93,  986, 1118, 1102, 1265, 1123, 1105, 1122,

       93, 1120,   93, 1103,   93, 1104, 1223, 1124,   93, 1265,
     1106,  985,  987, 1125, 1126,   93,   93,   93, 1128, 1265,
     1127, 1102,   93, 1123, 1131, 1105, 1122, 1129, 1132, 1103,
       93, 1104,   93, 1133, 1124,   93, 1106,   93,  985,  987,
     1125, 1126,   93, 1135, 1128,   93,   93, 1127, 1138, 1137,
     1140, 1131,   93,   93, 1129, 1132,   93, 1136,   93, 1141,
     1133, 1044, 1139, 1142,   93, 1145, 1151, 1045, 1049, 1153,
     1135, 1265, 1050, 1143, 1138, 1154, 1137, 1140, 1158, 1053,
     1146, 1054, 1265, 1136,  423,  264, 1141, 1265, 1139,   93,
     1142, 1056, 1145, 1027, 1028, 1027,  848,  871, 1162, 1143,

      849, 1029, 1030, 1029, 1150, 1171, 1146, 1265,  853, 1031,
     1032, 1031,  848, 1033, 1034, 1033,  849, 1265, 1170, 1199,
      853, 1035, 1036, 1035,  866, 1037, 1038, 1037,  867, 1265,
     1265, 1171,  871, 1039, 1040, 1039,  866, 1041, 1042, 1041,
      867, 1148, 1149, 1148,  871, 1170, 1199,   93, 1150, 1047,
     1048, 1047, 1049, 1111, 1175, 1111, 1050, 1155, 1156, 1155,
     1049, 1053, 1200, 1054, 1050,   93, 1053,  264, 1054, 1161,
       93, 1060,  264, 1178, 1112, 1061, 1058, 1059, 1058, 1060,
     1265, 1175, 1181, 1061, 1163, 1164, 1163, 1060, 1265, 1200,
     1265, 1061, 1062, 1063, 1062,  894, 1064, 1065, 1064,  895,

     1178, 1112,   93,  905, 1066, 1067, 1066,  894, 1181, 1190,
       93,  895, 1068, 1069, 1068,  897, 1070, 1071, 1070,  898,
     1072, 1073, 1072,  901, 1172, 1265,   93,  905, 1074, 1075,
     1074,  913, 1076, 1077, 1076,  914, 1190, 1265,   93,  916,
     1078, 1079, 1078,  928, 1080, 1081, 1080,  929, 1173, 1265,
     1172,  933, 1082, 1083, 1082,  928, 1084, 1085, 1084,  929,
     1183, 1265, 1265,  933, 1086, 1087, 1086,  948, 1088, 1089,
     1088,  949, 1224, 1265, 1173,  953, 1090, 1091, 1090,  948,
     1092, 1093, 1092,  949, 1265, 1265, 1183,  953, 1094, 1095,
     1094,  965, 1096, 1097, 1096,  966, 1265, 1265, 1224,  970,

     1098, 1099, 1098,  965, 1100, 1101, 1100,  966,  135,   93,
      859,  970, 1179,  616,  860,  958,  135,   93,  859,  959,
       93,  616,  860,  958,  616, 1177,  958,  959,   93,   93,
      959, 1165, 1180,   93,   93, 1176, 1182,   93,   93, 1179,
       93,   93,   93, 1184, 1191, 1187,   93, 1188, 1162, 1153,
     1166, 1265, 1177, 1192, 1150, 1154, 1185, 1189, 1165, 1180,
     1265, 1176, 1186, 1182, 1158, 1265, 1148, 1149, 1148, 1184,
      423, 1191, 1187, 1150, 1188,   93, 1166, 1193, 1194, 1193,
     1192, 1265, 1185, 1189, 1150, 1195, 1196, 1195, 1186, 1205,
     1201, 1202, 1154, 1155, 1156, 1155, 1049, 1206,   93,   93,

     1050, 1163, 1164, 1163, 1060,  135,   93,  859, 1061,   93,
      135,  860,  859,   93,   93, 1205,  860, 1201, 1202, 1203,
     1204,   93, 1207, 1208, 1206, 1209,   93, 1212,   93,   93,
       93,   93,   93, 1225, 1197, 1214,   93, 1213, 1219, 1217,
       93,   93, 1198, 1265, 1228, 1203, 1204, 1210, 1207, 1208,
     1211, 1215, 1209, 1212, 1216, 1246, 1265, 1218, 1220, 1225,
     1197,   93, 1214, 1213, 1265, 1219, 1217, 1265, 1198,  135,
     1228,  859,  616, 1210,  958,  860, 1211, 1215,  959,   93,
     1216, 1246, 1227, 1218, 1220, 1193, 1194, 1193, 1195, 1196,
     1195,   93, 1150,   93,   93, 1154,   93, 1221, 1226,   93,

     1229, 1230, 1233, 1232,   93,   93,   93,   93, 1227,   93,
       93, 1234,   93, 1231, 1235,   93, 1236, 1238, 1239,   93,
       93, 1237, 1265, 1221,   93, 1226, 1229, 1249, 1230, 1233,
     1232,  616, 1240,  958, 1245,   93, 1250,  959, 1234, 1231,
       93, 1235,   93, 1236, 1238, 1239, 1248, 1237,   93, 1247,
       93,   93,   93, 1265, 1249,   93, 1253, 1265, 1240, 1265,
     1245, 1252, 1250,   93, 1251,   93, 1265, 1254, 1255,   93,
     1256, 1259, 1258, 1248, 1257, 1247, 1265,   93, 1265,   93,
       93, 1261,   93, 1253, 1260, 1262, 1263, 1252, 1265, 1264,
     1251, 1265, 1265, 1254, 1255, 1265, 1256, 1259, 1265, 1258,

     1265, 1257, 1265, 1265, 1265, 1265, 1265, 1261, 1265, 1265,
     1265, 1260, 1262, 1263, 1265, 1265, 1264,   31,   31,   31,
       31,   31,   34,   34,   34,   34,   34,   49,   49,   49,
       49,   49,   53,   53,   53,   53,   53,   57,   57,   57,
       57,   57,   63,   63,   63,   63,   63,   65,   65,   65,
       65,   65,   67,   67,   67,   67,   67,   76,   76,   76,
       76,   76,   81,   81,   81,   81,   81,   92,   92,   96,
     1265,   96,   96,  124,  124,  124,  124,  124,  126,  126,
      126,  126,  126,  130,  130,  130,  130,  130,  138,  138,
      138,  138,  138,  141,  141,  141,  141,  141,  134,  134,

      134,  134,  134,  145,  145,  145,  145,  145,  175,  175,
      175,  175,   94, 1265,   94,   95, 1265,   95,  209,  209,
      209,  209,  209,  212,  212,  212,  212,  212,  215,  215,
      215,  215,  215,  218,  218,  218,  218,  218,  223,  223,
      223,  223,  223,  226,  226,  226,  226,  226,  230,  230,
      230,  230,  230,  234,  234,  234,  234,  234,  237,  237,
      237,  237,  237,  239,  239,  239,  239,  239,  243,  243,
      243,  243,  243,  248,  248,  248,  248,  248,  250,  250,
      250,  250,  250,  254,  254,  254,  254,  254,  259,  259,
      259,  259,  259,  264,  264,  264,  264,  264,  266,  266,

      266,  266,  266,  271,  271,  271,  271,  271,  276,  276,
      276,  276,  276,  344,  344,  344,  344,  344,  347,  347,
      347,  347,  347,  349,  349,  349,  349,  349,  353,  353,
      353,  353,  353,  358,  358,  358,  358,  358,  366,  366,
      366,  366,  366,  371,  371,  371,  371,  371,  374,  374,
      374,  374,  374,  376,  376,  376,  376,  376,  381,  381,
      381,  381,  381,  384,  384,  384,  384,  384,  387,  387,
      387,  387,  387,  391,  391,  391,  391,  391,  394,  394,
      394,  394,  394,  397,  397,  397,  397,  397,  403,  403,
      403,  403,  403,  416,  416,  416,  416,  416,  419,  419,

      419,  419,  419,  423,  423,  423,  423,  423,  427,  427,
      427,  427,  427,  430,  430,  430,  430,  430,  433,  433,
      433,  433,  433,  439,  439,  439,  439,  439,  440,  440,
      440,  440,  440,   92,   92,  516,  516,  516,  516,  516,
      519,  519,  519,  519,  519,  521,  521,  521,  521,  521,
      525,  525,  525,  525,  525,  353,  353,  353,  353,  353,
      533,  533,  533,  533,  533,  536,  536,  536,  536,  536,
      538,  538,  538,  538,  538,  542,  542,  542,  542,  542,
      547,  547,  547,  547,  547,  550,  550,  550,  550,  550,
      553,  553,  553,  553,  553,  557,  557,  557,  557,  557,

      559,  559,  559,  559,  559,  563,  563,  563,  563,  563,
      567,  567,  567,  567,  567,  577,  577,  577,  577,  577,
      580,  580,  580,  580,  580,  585,  585,  585,  585,  585,
      588,  588,  588,  588,  588,  590,  590,  590,  590,  590,
      594,  594,  594,  594,  594,  603,  603,  603,  603,  603,
      604,  604,  604,  604,  604,  212,  212,  212,  212,  212,
      607,  607,  607,  607,  607,  610,  610,  610,  610,  610,
      615,  615,  615,  615,  615,   92,   92,  685,  685,  685,
      685,  685,  688,  688,  688,  688,  688,  690,  690,  690,
      690,  690,  693,  693,  693,  693,  693,  697,  697,  697,

      697,  697,  700,  700,  700,  700,  700,  702,  702,  702,
      702,  702,  705,  705,  705,  705,  705,  712,  712,  712,
      712,  712,  715,  715,  715,  715,  715,  718,  718,  718,
      718,  718,  720,  720,  720,  720,  720,  723,  723,  723,
      723,  723,  725,  725,  725,  725,  725,  731,  731,  731,
      731,  731,  733,  733,  733,  733,  733,  737,  737,  737,
      737,  737,  740,  740,  740,  740,  740,  742,  742,  742,
      742,  742,  745,  745,  745,  745,  745,  751,  751,  751,
      751,  751,  752,  752,  752,  752,  752,  755,  755,  755,
      755,  755,  757,  757,  757,  757,  757,  248,  248,  248,

      248,  248,  760,  760,  760,  760,  760,  767,  767,  767,
      767,  767,  212,  212,  212,  212,  212,  770,  770,  770,
      770,  770,  773,  773,  773,  773,  773,   92,   92,  840,
      840,  840,  840,  840,  843,  843,  843,  843,  843,  845,
      845,  845,  845,  845,  850,  850,  850,  850,  850,  858,
      858,  858,  858,  858,  861,  861,  861,  861,  861,  863,
      863,  863,  863,  863,  868,  868,  868,  868,  868,  876,
      876,  876,  876,  876,  881,  881,  881,  881,  881,  886,
      886,  886,  886,  886,  889,  889,  889,  889,  889,  891,
      891,  891,  891,  891,  896,  896,  896,  896,  896,  900,

      900,  900,  900,  900,  902,  902,  902,  902,  902,  912,
      912,  912,  912,  912,  915,  915,  915,  915,  915,  920,
      920,  920,  920,  920,  923,  923,  923,  923,  923,  925,
      925,  925,  925,  925,  930,  930,  930,  930,  930,  939,
      939,  939,  939,  939,  940,  940,  940,  940,  940,  943,
      943,  943,  943,  943,  945,  945,  945,  945,  945,  950,
      950,  950,  950,  950,  264,  264,  264,  264,  264,  957,
      957,  957,  957,  957,  960,  960,  960,  960,  960,  962,
      962,  962,  962,  962,  248,  248,  248,  248,  248,  967,
      967,  967,  967,  967,   92,   92,  840,  840,  840,  840,

      840,  843,  843,  843,  843,  843,  845,  845,  845,  845,
      845,  850,  850,  850,  850,  850,  861,  861,  861,  861,
      861,  863,  863,  863,  863,  863,  868,  868,  868,  868,
      868,  876,  876,  876,  876,  876,  212,  212,  212,  212,
      212, 1043, 1043, 1043, 1043, 1043, 1046, 1046, 1046, 1046,
     1046,  881,  881,  881,  881,  881, 1052, 1052, 1052, 1052,
     1052, 1055, 1055, 1055, 1055, 1055, 1057, 1057, 1057, 1057,
     1057,  886,  886,  886,  886,  886,  889,  889,  889,  889,
      889,  891,  891,  891,  891,  891,  902,  902,  902,  902,
      902,  896,  896,  896,  896,  896,  900,  900,  900,  900,

      900,  912,  912,  912,  912,  912,  915,  915,  915,  915,
      915,  920,  920,  920,  920,  920,  923,  923,  923,  923,
      923,  925,  925,  925,  925,  925,  930,  930,  930,  930,
      930,  939,  939,  939,  939,  939,  940,  940,  940,  940,
      940,  943,  943,  943,  943,  943,  945,  945,  945,  945,
      945,  950,  950,  950,  950,  950,  957,  957,  957,  957,
      957,  960,  960,  960,  960,  960,  962,  962,  962,  962,
      962,  967,  967,  967,  967,  967,  858,  858,  858,  858,
      858,   92,   92,  845,  845,  845,  845,  845,  850,  850,
      850,  850,  850,  863,  863,  863,  863,  863,  868,  868,

      868,  868,  868, 1043, 1043, 1043, 1043, 1043,  248,  248,
      248,  248,  248, 1147, 1147, 1147, 1147, 1147, 1046, 1046,
     1046, 1046, 1046, 1152, 1152, 1152, 1152, 1152, 1052, 1052,
     1052, 1052, 1052, 1157, 1157, 1157, 1157, 1157, 1055, 1055,
     1055, 1055, 1055, 1159, 1159, 1265, 1159, 1159, 1057, 1057,
     1057, 1057, 1057,  891,  891,  891,  891,  891,  902,  902,
      902,  902,  902,  896,  896,  896,  896,  896,  900,  900,
      900,  900,  900,  912,  912,  912,  912,  912,  915,  915,
      915,  915,  915,  925,  925,  925,  925,  925,  930,  930,
      930,  930,  930,  945,  945,  945,  945,  945,  950,  950,

      950,  950,  950,  967,  967,  967,  967,  967,  957,  957,
      957,  957,  957,   92,   92,   25, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265
    } ;

static yyconst flex_int16_t yy_chk[5285] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    7,    9,    8,
       10, 1264,   11,   12,    7,    7,    8,    8, 1263,   11,
       12,   21,   21,   21,   21,   11,   12,   23,   23,   23,
       23,    1,    1,    1,   70,   28,   13,   14,   34,   34,
       70, 1260, 1259,   13,   14,   28,   34,    9,    9,   10,
       10,   11,   12,   77, 1255,   77,   77,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   13,   14,   38,   15,   36,
       15,   15,   15, 1249,   45,   15,  101,   48,   15,  101,

       67,   45,   67,   36,   38,  160,   67,   48,  128,    2,
        2,    2,   96,   96,  128,   16,   42,   16,   16,   16,
       96,   82,   16,   82,   82,   16,  101,   15,   45,   36,
       38, 1247,  160,   42,   48,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   15,   16,   22,   22,   22,   22,   42,
       41,   68,   90,   68,   71,   22,   71,   68,   41,  226,
       71,  226,   90,   22, 1236,   41,   41,    3,    3,    3,
       16,   24,   24,   24,   24,   24,   72,   72,   72,   72,
     1235,   24,  132,   72,  102,   41,   24,  102,  132,   24,

       22,   41,   41,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,   35,   39,   43,  102,   35,   24,   40, 1234,   44,
       97,  521,   79,  521,   79,   46,   39,   80,   39,   80,
       43,   35,   46, 1233,   40,    4,    4,    4,   44,   40,
       97,   44,   35,   79,   74,  127,   74,   46,   80,  127,
       74,   84,   39,   84,   39,  109,   43,   35,   74,   46,
       40,    4,    5,  104,   44,   40,   97,   44, 1232, 1229,
       79,  109,   84,   46,  104,   80,   98,    5,    5,    5,
        5,    5,    5,  100,  162,    5,   86,  131,    5,    5,

       86,  131,    5,    5,    5,    5,   98,  109,    5,   84,
      538,  104,  538,  100,    5,    5,    5,    5,    5,    5,
     1227,  162,    5,   86,    5,    5,  108,   86,    5,    5,
        5,    5,   98,   47,    5,   20,   20,   20,   20,  100,
       87,   20,   87,   47,   20,  108,   20,   99,  106,   20,
       47,  103,   20,   20,   85,  106,   85,   85,   85,   47,
      111,   87,  112,  113,   99, 1225,  103,  103,  106,   85,
       47,  108,  113,  135, 1224,  118,   47,  135,  111,   20,
       20,   37,  106,  112,   37,   47, 1223, 1222,   87,  118,
       99,   37,  103,  103,  106,   37,  137,  141,   37,  113,

       37,  107,  137,  141,  111, 1213, 1212,  107,  115,  112,
      126,   37,  126,  114,  148,  118,  126, 1204,   37,  114,
      148,   37,  107,  107,   37,  115,   37,   69,   69,   69,
       69,   69,   69,   69,  107,   69,   69,   69,   69,   69,
       69,   69,   69,   69,  116, 1192,  114,  117,  107,  107,
      117,  115,  117,  119,  120, 1191,  212,  119,  122,  123,
      212,  120,  157,  116,  157,  157,  123, 1190,   69,   69,
     1184,  129,  129,  129,  129, 1164,  122,  117,  129,  117,
      130,  134,  130,  134,  119,  210,  130,  134,  120,  116,
      553,  210,  553,  123,   69,   73,   73,   73,   73,   73,

       73,   73,  122,   73,   73,   73,   73,   73,   73,   73,
       73,   73,  133,  133,  133,  133,  138,  105,  138,  105,
     1161,  176,  138, 1160,  105,  139,  139,  139,  139,  158,
      166,  158,  139,  143,  143,  143,   73,   73,  213, 1159,
      143,  105,  176,  105,  213,  144,  144,  144,  144,  171,
      158,  105,  144,  145,  150,  145,  150,  166,  173,  145,
      150, 1158,   73,   75,   75,   75,   75,  105,  176,  105,
       75,  146,  146,  146,  146, 1156,  171,  158,  146,   75,
      149,  149,  149,  149,  179,  173,  163,  149,  163,  163,
       75,  179,  178,   75,  152,   75,  152,  178,  215,  170,

      152,  170,   75,  559,  215,  559,   75,  153,  167,  153,
      167,  167,  167,  153, 1151,  577,   75,  577,  179,   75,
      152,   75,  153,  167,  178,  170,  152,  170,   75,  136,
      136,  136,  136,  136,  136,  136,  153,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  152,  177,  182,  153,
      189,  156,  152,  156,  155,  168,  155,  156,  177,  168,
      155, 1145,  153,  286,  177,  189,  182,  159,  156,  159,
      136,  136,  161,  164,  161,  164, 1142,  155,  209, 1141,
      209,  218,  168,  218,  209,  177,  168,  218,  159,  286,
      177,  189,  182,  161,  164,  156,  136,  140,  140,  140,

      140,  140,  140,  140,  155,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  165,  159,  165,  188,  180,  187,
      161,  164,  190,  187, 1137,  194,  195,  188,  194,  190,
      172,  195,  172, 1134, 1131,  165,  183,  180,  140,  140,
      181, 1128, 1124,  221,  186,  211,  211,  211,  211,  221,
      187,  172,  211,  223,  188,  194,  190,  183,  195,  223,
      181,  186,  165,  180,  140,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  172,  151,
      151,  151,  154,  183,  154,  185,  181,  186,  154,  290,
      193,  174,  184,  174,  197,  192,  196,  199,  240,  272,

      154,  197,  240,  272,  185,  193,  151,  151,  151,  154,
      154,  174,  185,  184,  192,  174,  290,  231,  196,  199,
      200,  298,  198,  231, 1123,  200,  298,  154,  197,  200,
      185,  193,  151,  198,  201,  154,  154,  203,  174,  184,
      192,  201,  174,  191,  196,  199,  191,  191,  191,  191,
      191,  191,  200,  298,  191,  202,  200, 1117,  191,  203,
      198,  191, 1115,  191,  191,  204,  206,  191,  201,  202,
     1114, 1099,  204,  191,  191,  191,  191,  191,  191,  205,
     1095,  191,  206,  208,  191,  203,  230,  191,  230,  191,
      191,  237,  230,  191,  205,  202,  207,  237,  205,  204,

     1091, 1087,  208,  207,  214,  214,  214,  214,  206,  217,
      217,  217,  219,  219,  219,  219,  217, 1083, 1079,  219,
      205,  225,  225,  225,  205,  249,  249,  249,  208,  241,
      207,  222,  222,  222,  222,  241, 1075, 1069,  222,  227,
      227,  227,  227,  232,  232,  232,  232,  287, 1067, 1063,
      232,  233,  233,  233,  233,  233,  233,  233, 1059,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  234,  301,
      234, 1056,  301,  287,  234,  235,  235,  235,  235,  238,
      238,  238,  235,  239,  246,  239,  238,  441,  288,  239,
      246,  441,  233,  233,  242,  242,  242,  242,  243,  301,

      243,  242, 1048,  250,  243,  244,  244,  244,  244,  250,
      257,  254,  244,  254,  288, 1044,  257,  254,  233,  236,
      236,  236,  236,  236,  236,  236, 1040,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  247,  247,  247,  247,
      251,  251,  251,  247,  253,  253,  253,  251, 1036, 1032,
      261,  253,  255,  255,  255,  255,  261, 1028, 1016,  255,
      236,  236,  258,  258,  258,  258,  259,  304,  259,  258,
      304,  266,  259,  262,  262,  262,  262,  266, 1015,  273,
      262,  263,  263,  263,  263,  273,  236,  995,  263,  268,
      268,  268,  269,  269,  269,  269,  268,  304,  271,  269,

      271,  355,  355,  355,  271,  274,  274,  274,  274,  292,
      994,  971,  274,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  964,  275,  275,  275,
      276,  277,  276,  277,  308,  292,  276,  277,  279,  278,
      279,  278,  306,  947,  279,  278,  280,  282,  280,  282,
      308,  927,  280,  282,  275,  275,  275,  277,  278,  281,
      283,  281,  283,  616,  289,  281,  283,  616,  306,  284,
      279,  284,  297,  289,  282,  284,  308,  282,  280,  893,
      275,  297,  281,  277,  285,  278,  285,  293,  299,  293,
      285,  289,  295,  283,  295,  294,  279,  294,  296,  289,

      282,  299,  284,  282,  280,  302,  300,  293,  297,  281,
      285,  293,  300,  295,  307,  303,  309,  296,  865,  283,
      305,  310,  294,  847,  294,  302,  311,  299,  284,  303,
      309,  305,  310,  311,  293,  314,  285,  313,  293,  300,
      295,  307,  312,  296,  315,  316,  323,  318,  294,  314,
      294,  302,  317,  312,  320,  303,  309,  313,  305,  310,
      311,  325,  316,  315,  318,  319,  312,  321,  317,  318,
      345,  320,  323,  319,  877,  314,  345,  322,  877,  327,
      312,  319,  328,  313,  322,  329,  321,  325,  316,  315,
      318,  324,  312,  327,  317,  318,  330,  320,  323,  322,

      319,  324,  333,  328,  329,  330,  332,  319,  334,  333,
      834,  322,  321,  325,  337,  330,  331,  338,  339,  327,
      332,  331,  338,  340,  829,  322,  342,  334,  324,  328,
      329,  342,  330,  337,  467,  339,  333,  343,  827,  824,
      340,  330,  342,  814,  343,  344,  332,  344,  331,  338,
      467,  344,  808,  334,  347,  346,  346,  346,  346,  337,
      347,  339,  346,  348,  348,  348,  340,  351,  800,  342,
      348,  343,  349,  351,  349,  799,  467,  353,  349,  350,
      350,  350,  350,  353,  775,  358,  350,  352,  352,  352,
      352,  358,  771,  766,  352,  356,  356,  356,  356,  359,

      359,  359,  361,  361,  361,  454,  359,  455,  763,  361,
      364,  364,  364,  364,  367,  367,  367,  364,  371,  372,
      371,  408,  408,  408,  371,  372,  373,  373,  373,  373,
      374,  684,  454,  373,  455,  378,  374,  375,  375,  375,
      376,  378,  376,  456,  375,  385,  376,  377,  377,  377,
      377,  385,  673,  389,  377,  379,  379,  379,  379,  389,
      671,  656,  379,  380,  380,  380,  380,  380,  380,  380,
      456,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      381,  457,  381,  458,  459,  640,  381,  382,  382,  382,
      382,  384,  391,  384,  382,  613,  612,  384,  391,  386,

      386,  386,  386,  608,  380,  380,  386,  387,  457,  387,
      458,  459,  394,  387,  388,  388,  388,  388,  394,  601,
      400,  388,  390,  390,  390,  390,  400,  460,  598,  390,
      380,  383,  383,  383,  383,  383,  383,  383,  594,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  392,  392,
      392,  393,  393,  393,  460,  392,  592,  403,  393,  396,
      396,  396,  397,  403,  397,  416,  396,  416,  397,  580,
      578,  416,  383,  383,  398,  398,  398,  398,  520,  520,
      520,  398,  401,  401,  401,  401,  405,  405,  405,  401,
      462,  574,  462,  405,  406,  406,  406,  406,  383,  571,

      567,  406,  411,  411,  411,  414,  414,  414,  414,  411,
      417,  590,  414,  590,  563,  419,  417,  418,  418,  418,
      418,  419,  476,  462,  418,  420,  420,  420,  421,  421,
      421,  421,  420,  561,  555,  421,  422,  422,  422,  422,
      425,  425,  425,  422,  427,  428,  427,  425,  476,  462,
      427,  428,  429,  429,  429,  429,  430,  466,  477,  429,
      466,  436,  430,  432,  432,  432,  433,  436,  433,  542,
      432,  442,  433,  434,  434,  434,  434,  442,  540,  525,
      434,  437,  437,  437,  437,  477,  481,  466,  437,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  481,  438,  438,  438,  439,  440,  439,  440,
      628,  482,  439,  440,  443,  443,  443,  443,  444,  482,
      444,  443,  471,  445,  444,  445,  523,  471,  481,  445,
      438,  438,  438,  446,  447,  446,  447,  628,  515,  446,
      447,  448,  449,  448,  449,  499,  482,  448,  449,  450,
      461,  450,  461,  447,  471,  450,  438,  610,  451,  610,
      451,  452,  491,  452,  451,  446,  487,  452,  448,  651,
      453,  449,  453,  451,  435,  450,  453,  461,  431,  461,
      447,  451,  468,  463,  452,  463,  464,  423,  464,  453,
      469,  446,  470,  468,  448,  651,  469,  449,  472,  470,

      451,  450,  463,  461,  472,  461,  473,  464,  451,  472,
      474,  452,  475,  473,  478,  479,  453,  475,  480,  478,
      468,  474,  479,  469,  485,  483,  470,  484,  486,  463,
      488,  472,  480,  494,  464,  483,  472,  489,  490,  486,
      473,  485,  492,  497,  475,  495,  478,  484,  474,  479,
      494,  493,  488,  415,  490,  500,  489,  493,  480,  495,
      496,  497,  483,  492,  496,  498,  486,  485,  501,  500,
      502,  413,  498,  484,  503,  504,  494,  502,  488,  501,
      490,  503,  489,  504,  493,  495,  507,  497,  510,  492,
      505,  496,  507,  505,  506,  500,  509,  508,  514,  498,

      508,  506,  512,  407,  502,  511,  501,  517,  503,  510,
      504,  511,  402,  517,  629,  516,  509,  516,  514,  507,
      505,  516,  630,  399,  512,  395,  369,  508,  506,  518,
      518,  518,  518,  519,  533,  510,  533,  534,  511,  519,
      533,  629,  509,  534,  514,  522,  522,  522,  522,  630,
      512,  524,  524,  524,  524,  526,  526,  526,  527,  527,
      527,  528,  528,  528,  528,  529,  529,  529,  531,  531,
      531,  535,  535,  535,  535,  536,  537,  537,  537,  366,
      633,  536,  539,  539,  539,  539,  541,  541,  541,  541,
      543,  543,  543,  544,  544,  544,  545,  545,  545,  545,

      546,  546,  546,  547,  551,  547,  546,  633,  365,  547,
      551,  546,  548,  548,  548,  548,  549,  549,  549,  550,
      557,  550,  549,  362,  357,  550,  557,  549,  552,  552,
      552,  552,  554,  554,  554,  554,  556,  556,  556,  556,
      558,  558,  558,  560,  560,  560,  560,  562,  562,  562,
      562,  564,  564,  564,  565,  565,  565,  565,  566,  566,
      566,  568,  568,  568,  570,  570,  570,  573,  573,  573,
      573,  575,  575,  575,  579,  579,  579,  579,  581,  581,
      581,  582,  582,  582,  582,  583,  583,  583,  584,  584,
      584,  584,  585,  586,  585,  589,  589,  589,  585,  586,

      587,  587,  587,  587,  588,  591,  591,  591,  591,  354,
      588,  593,  593,  593,  593,  595,  595,  595,  597,  597,
      597,  600,  600,  600,  600,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  634,  602,
      602,  602,  603,  604,  603,  604,  605,  641,  603,  604,
      641,  607,  605,  606,  606,  606,  606,  607,  609,  609,
      609,  611,  611,  611,  611,  634,  602,  602,  602,  614,
      614,  614,  614,  615,  617,  615,  341,  641,  643,  615,
      617,  618,  618,  618,  618,  619,  643,  619,  620,  336,
      620,  619,  602,  621,  620,  621,  622,  335,  622,  621,

      326,  623,  622,  623,  624,  642,  624,  623,  642,  625,
      624,  625,  621,  643,  645,  625,  626,  627,  626,  627,
      623,  645,  626,  627,  622,  644,  635,  624,  635,  636,
      625,  636,  637,  626,  637,  642,  639,  625,  638,  621,
      638,  639,  647,  650,  646,  648,  644,  623,  645,  636,
      622,  637,  649,  652,  624,  649,  655,  625,  654,  635,
      626,  648,  638,  625,  646,  654,  653,  647,  639,  658,
      650,  653,  644,  657,  659,  652,  636,  655,  637,  659,
      657,  660,  649,  270,  653,  635,  658,  648,  662,  638,
      646,  662,  654,  647,  661,  663,  265,  664,  653,  665,

      663,  652,  660,  655,  664,  668,  659,  657,  666,  661,
      653,  670,  658,  666,  678,  667,  672,  666,  662,  669,
      668,  665,  667,  674,  668,  676,  669,  663,  660,  784,
      670,  664,  682,  672,  675,  661,  678,  675,  264,  676,
      666,  680,  674,  677,  666,  679,  668,  665,  683,  667,
      668,  677,  680,  669,  682,  784,  670,  785,  786,  672,
      679,  677,  678,  677,  675,  676,  260,  681,  674,  683,
      686,  685,  681,  685,  256,  688,  686,  685,  677,  680,
      682,  688,  788,  785,  786,  248,  679,  677,  681,  677,
      687,  687,  687,  687,  245,  683,  804,  687,  692,  681,

      689,  689,  689,  690,  692,  690,  229,  689,  788,  690,
      691,  691,  691,  691,  681,  693,  698,  691,  694,  694,
      694,  693,  698,  804,  802,  694,  695,  695,  695,  695,
      696,  696,  696,  695,  697,  228,  697,  696,  802,  700,
      697,  699,  699,  699,  699,  700,  224,  704,  699,  701,
      701,  701,  702,  704,  702,  220,  701,  705,  702,  703,
      703,  703,  703,  705,  802,  793,  703,  706,  706,  706,
      707,  707,  707,  707,  706,  216,  169,  707,  708,  708,
      708,  709,  709,  709,  147,  708,  793,  709,  710,  710,
      710,  710,  711,  798,  711,  710,  713,  712,  711,  712,

      142,  798,  713,  712,  714,  714,  714,  714,  715,  124,
      715,  714,  793,  717,  715,  716,  716,  716,  716,  717,
      718,  121,  716,  719,  719,  719,  718,  720,  798,  720,
      719,  794,  722,  720,  721,  721,  721,  721,  722,  723,
      110,  721,   94,   92,  725,  723,  724,  724,  724,  724,
      725,   91,  794,  724,  726,  726,  726,  727,  727,  727,
      727,  726,   88,   65,  727,  728,  728,  728,  729,  729,
      729,  731,  728,  731,  732,  729,  733,  731,  794,   31,
      732,   30,  733,  734,  734,  734,  734,  735,  735,  735,
      734,   25,   19,   18,  735,  736,  736,  736,  736,  737,

      738,  737,  736,   17,    6,  737,  738,  739,  739,  739,
      739,  740,    0,    0,  739,    0,  744,  740,  741,  741,
      741,  742,  744,  742,    0,  741,  745,  742,  743,  743,
      743,  743,  745,    0,    0,  743,  746,  746,  746,  747,
      747,  747,  747,  746,  753,  755,  747,  748,  748,  748,
      753,  755,    0,    0,  748,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,    0,  750,
      750,  750,  751,  752,  751,  752,    0,    0,  751,  752,
      754,  754,  754,  754,  756,  756,  756,  754,  757,  759,
      757,  756,    0,    0,  757,  759,  750,  750,  750,  758,

      758,  758,  758,  760,  796,  803,  758,  796,    0,  760,
      761,  761,  761,  765,  765,  765,  765,  761,  768,  767,
      765,  767,  750,    0,  768,  767,  769,  769,  769,  769,
      770,  803,  812,  769,  796,  776,  770,  772,  772,  772,
      773,  776,  773,    0,  772,  812,  773,  774,  774,  774,
      774,  777,    0,  777,  774,    0,  778,  777,  778,  779,
        0,  779,  778,  811,  780,  779,  780,  781,  811,  781,
      780,  812,  782,  781,  782,  783,  795,  783,  782,  777,
      801,  783,  789,  790,  789,  790,  791,  792,  791,  792,
      783,  797,  780,  805,  807,  811,  779,  795,  797,  806,

      801,  781,  789,  816,    0,  777,  782,  790,  792,  810,
      791,  809,  805,  807,  809,    0,  806,  783,  780,  813,
        0,  817,  779,  795,  816,  797,  801,  781,  810,  789,
      813,  815,  782,  818,  790,  792,  819,  791,  805,  807,
      817,  809,  806,  819,  820,  815,  821,  818,  822,  825,
      816,  821,  823,  830,  810,  828,  825,  813,  826,  832,
      828,  831,  835,  820,  837,  822,  817,  833,  980,  823,
      819,  815,    0,  818,  826,  830,    0,  839,  821,  836,
      831,  832,  836,  825,  838,  835,  833,  828,  839,  820,
      837,  822,    0,    0,  980,  823,  841,  840,  838,  840,

      826,  830,  841,  840,  843,    0,  831,  832,  848,  836,
      843,  835,  833,    0,  848,  839,  837,  850,  842,  842,
      842,  842,    0,  850,  838,  842,  844,  844,  844,  845,
      981,  845,  982,  844,  859,  845,  846,  846,  846,  846,
      859,    0,  983,  846,  849,  849,  849,  849,  851,  851,
      851,  849,  853,  853,  853,  851,  981,    0,  982,  853,
      854,  854,  854,  854,  855,  855,  855,  854,  983,    0,
        0,  855,  856,  856,  856,  856,  857,  857,  857,  856,
      858,  990,  858,  857,  990,  861,  858,  860,  860,  860,
      860,  861,    0,  866,  860,  862,  862,  862,  863,  866,

      863,  996,  862,  868,  863,  864,  864,  864,  864,  868,
     1107,  990,  864,  867,  867,  867,  867,  869,  869,  869,
      867,  871,  871,  871,  869,    0,    0,  996,  871,  872,
      872,  872,  872,  873,  873,  873,  872, 1107,    0,    0,
      873,  874,  874,  874,  874,  875,  875,  875,  874,  876,
     1024,  876,  875,  879,  884,  876,  878,  878,  878,  879,
      884,    0,  878,  880,  880,  880,  880,  881, 1024,  881,
      880,    0,    0,  881,  882,  882,  882,  882,  883, 1119,
      883,  882,    0,    0,  883,  885,  885,  885,  885,  886,
      887,  886,  885,    0, 1024,  886,  887,  888,  888,  888,

      888,  889,    0,    0,  888, 1119,  894,  889,  890,  890,
      890,  891,  894,  891,    0,  890,  897,  891,  892,  892,
      892,  892,  897,  992,  989,  892,  895,  895,  895,  895,
      896,  989,  896,  895,    0,  900,  896,  898,  898,  898,
      898,  900,  992,    0,  898,  899,  899,  899,  899,  901,
      901,  901,  899,  902,    0,    0,  901,    0,  989,  902,
      903,  903,  903,  905,  905,  905,  988,  903,  992,  913,
      905,  906,  906,  906,  906,  913,    0,  988,  906,  907,
      907,  907,  907,  908,  908,  908,  907,    0,    0, 1108,
      908,  909,  909,  909,  909,  910,  910,  910,  909,  911,

      911,  911,  910,  912,  988,  912,  911, 1008,  915,  912,
      914,  914,  914,  914,  915, 1008, 1108,  914,  916,  916,
      916,  917,  917,  917,  917,  916,    0,    0,  917,  918,
      918,  918,  919,  919,  919,  919,  918,  921,  920,  919,
      920,    0, 1008,  921,  920,  922,  922,  922,  922,  923,
        0,  985,  922,  985,  928,  923,  924,  924,  924,  925,
      928,  925,    0,  924,  930,  925,  926,  926,  926,  926,
      930,  999,  985,  926,  929,  929,  929,  929,  931,  931,
      931,  929,  933,  933,  933,  931,  999,    0,  991,  933,
      934,  934,  934,  934,  935,  935,  935,  934,    0,  985,

     1109,  935,  936,  936,  936,  936,  937,  937,  937,  936,
      991,    0,  999,  937,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938, 1109,  938,  938,
      938,  939,  940,  939,  940,  941,  991,  939,  940, 1199,
      943,  941,  942,  942,  942,  942,  943,    0,  945,  942,
      945,  944,  944,  944,  945,  938,  938,  938,  944,  946,
      946,  946,  946,  948,    0, 1199,  946,    0,  950,  948,
      949,  949,  949,  949,  950,    0,    0,  949,  951,  951,
      951,  938,  953,  953,  953,  951,    0,    0,    0,  953,
      954,  954,  954,  954,  955,  955,  955,  954,    0,    0,

        0,  955,  956,  956,  956,  956,  957,  958,  957,  956,
     1012,    0,  957,  958,  959,  959,  959,  959,  960,    0,
        0,  959,    0,  965,  960,  961,  961,  961,  962,  965,
      962, 1012,  961,  967,  962,  963,  963,  963,  963,  967,
        0,    0,  963,  966,  966,  966,  966,  968,  968,  968,
      966,  970,  970,  970,  968,    0,  998, 1012,  970,  972,
      972,  972,  972,  974,  993,  974,  972,  993,  975,  974,
      975,  976,    0,  976,  975,  998,  977,  976,  977,  978,
     1200,  978,  977, 1001,  979,  978,  979,  984,    0,  984,
      979,  986, 1000,  986,  993,  974,    0, 1001,  978, 1000,

     1002,  998, 1003,  976, 1006,  977, 1200, 1002, 1004,    0,
      979,  984,  986, 1003, 1004, 1005, 1007, 1009, 1006,    0,
     1005,  974, 1010, 1001, 1009,  978, 1000, 1007, 1010,  976,
     1011,  977, 1018, 1011, 1002, 1014,  979, 1013,  984,  986,
     1003, 1004, 1017, 1013, 1006, 1019, 1020, 1005, 1018, 1017,
     1020, 1009, 1021, 1023, 1007, 1010, 1022, 1014, 1025, 1021,
     1011, 1043, 1019, 1022, 1026, 1025, 1046, 1043, 1046, 1049,
     1013,    0, 1046, 1023, 1018, 1049, 1017, 1020, 1054, 1051,
     1026, 1051,    0, 1014, 1054, 1051, 1021,    0, 1019, 1113,
     1022, 1055, 1025, 1027, 1027, 1027, 1027, 1055, 1060, 1023,

     1027, 1029, 1029, 1029, 1060, 1113, 1026,    0, 1029, 1031,
     1031, 1031, 1031, 1033, 1033, 1033, 1031,    0, 1110, 1167,
     1033, 1035, 1035, 1035, 1035, 1037, 1037, 1037, 1035,    0,
        0, 1113, 1037, 1039, 1039, 1039, 1039, 1041, 1041, 1041,
     1039, 1045, 1045, 1045, 1041, 1110, 1167, 1120, 1045, 1047,
     1047, 1047, 1047, 1111, 1120, 1111, 1047, 1050, 1050, 1050,
     1050, 1052, 1168, 1052, 1050, 1129, 1053, 1052, 1053, 1057,
     1125, 1057, 1053, 1125, 1111, 1057, 1058, 1058, 1058, 1058,
        0, 1120, 1129, 1058, 1061, 1061, 1061, 1061,    0, 1168,
        0, 1061, 1062, 1062, 1062, 1062, 1064, 1064, 1064, 1062,

     1125, 1111, 1143, 1064, 1066, 1066, 1066, 1066, 1129, 1143,
     1116, 1066, 1068, 1068, 1068, 1068, 1070, 1070, 1070, 1068,
     1072, 1072, 1072, 1070, 1116,    0, 1118, 1072, 1074, 1074,
     1074, 1074, 1076, 1076, 1076, 1074, 1143,    0, 1132, 1076,
     1078, 1078, 1078, 1078, 1080, 1080, 1080, 1078, 1118,    0,
     1116, 1080, 1082, 1082, 1082, 1082, 1084, 1084, 1084, 1082,
     1132,    0,    0, 1084, 1086, 1086, 1086, 1086, 1088, 1088,
     1088, 1086, 1201,    0, 1118, 1088, 1090, 1090, 1090, 1090,
     1092, 1092, 1092, 1090,    0,    0, 1132, 1092, 1094, 1094,
     1094, 1094, 1096, 1096, 1096, 1094,    0,    0, 1201, 1096,

     1098, 1098, 1098, 1098, 1100, 1100, 1100, 1098, 1102, 1126,
     1102, 1100, 1126, 1103, 1102, 1103, 1104, 1121, 1104, 1103,
     1122, 1105, 1104, 1105, 1106, 1122, 1106, 1105, 1133, 1127,
     1106, 1102, 1127, 1130, 1135, 1121, 1130, 1144, 1140, 1126,
     1138, 1136, 1139, 1133, 1144, 1138, 1146, 1139, 1147, 1152,
     1104,    0, 1122, 1146, 1147, 1152, 1135, 1140, 1102, 1127,
        0, 1121, 1136, 1130, 1157,    0, 1148, 1148, 1148, 1133,
     1157, 1144, 1138, 1148, 1139, 1173, 1104, 1150, 1150, 1150,
     1146,    0, 1135, 1140, 1150, 1154, 1154, 1154, 1136, 1173,
     1169, 1170, 1154, 1155, 1155, 1155, 1155, 1174, 1171, 1172,

     1155, 1163, 1163, 1163, 1163, 1165, 1175, 1165, 1163, 1176,
     1166, 1165, 1166, 1180, 1177, 1173, 1166, 1169, 1170, 1171,
     1172, 1181, 1175, 1176, 1174, 1177, 1178, 1180, 1186, 1179,
     1182, 1188, 1183, 1202, 1165, 1182, 1187, 1181, 1188, 1186,
     1185, 1189, 1166,    0, 1206, 1171, 1172, 1178, 1175, 1176,
     1179, 1183, 1177, 1180, 1185, 1228,    0, 1187, 1189, 1202,
     1165, 1205, 1182, 1181,    0, 1188, 1186,    0, 1166, 1197,
     1206, 1197, 1198, 1178, 1198, 1197, 1179, 1183, 1198, 1207,
     1185, 1228, 1205, 1187, 1189, 1193, 1193, 1193, 1195, 1195,
     1195, 1203, 1193, 1209, 1208, 1195, 1210, 1197, 1203, 1211,

     1207, 1208, 1211, 1210, 1214, 1217, 1218, 1215, 1205, 1216,
     1220, 1214, 1219, 1209, 1215, 1226, 1216, 1218, 1219, 1238,
     1237, 1217,    0, 1197, 1230, 1203, 1207, 1237, 1208, 1211,
     1210, 1221, 1220, 1221, 1226, 1231, 1238, 1221, 1214, 1209,
     1240, 1215, 1239, 1216, 1218, 1219, 1231, 1217, 1245, 1230,
     1248, 1251, 1250,    0, 1237, 1254, 1245,    0, 1220,    0,
     1226, 1240, 1238, 1252, 1239, 1257,    0, 1248, 1250, 1253,
     1251, 1254, 1253, 1231, 1252, 1230,    0, 1256,    0, 1261,
     1258, 1257, 1262, 1245, 1256, 1258, 1261, 1240,    0, 1262,
     1239,    0,    0, 1248, 1250,    0, 1251, 1254,    0, 1253,

        0, 1252,    0,    0,    0,    0,    0, 1257,    0,    0,
        0, 1256, 1258, 1261,    0,    0, 1262, 1266, 1266, 1266,
     1266, 1266, 1267, 1267, 1267, 1267, 1267, 1268, 1268, 1268,
     1268, 1268, 1269, 1269, 1269, 1269, 1269, 1270, 1270, 1270,
     1270, 1270, 1271, 1271, 1271, 1271, 1271, 1272, 1272, 1272,
     1272, 1272, 1273, 1273, 1273, 1273, 1273, 1274, 1274, 1274,
     1274, 1274, 1275, 1275, 1275, 1275, 1275, 1276, 1276, 1277,
        0, 1277, 1277, 1278, 1278, 1278, 1278, 1278, 1279, 1279,
     1279, 1279, 1279, 1280, 1280, 1280, 1280, 1280, 1281, 1281,
     1281, 1281, 1281, 1282, 1282, 1282, 1282, 1282, 1283, 1283,

     1283, 1283, 1283, 1284, 1284, 1284, 1284, 1284, 1285, 1285,
     1285, 1285, 1286,    0, 1286, 1287,    0, 1287, 1288, 1288,
     1288, 1288, 1288, 1289, 1289, 1289, 1289, 1289, 1290, 1290,
     1290, 1290, 1290, 1291, 1291, 1291, 1291, 1291, 1292, 1292,
     1292, 1292, 1292, 1293, 1293, 1293, 1293, 1293, 1294, 1294,
     1294, 1294, 1294, 1295, 1295, 1295, 1295, 1295, 1296, 1296,
     1296, 1296, 1296, 1297, 1297, 1297, 1297, 1297, 1298, 1298,
     1298, 1298, 1298, 1299, 1299, 1299, 1299, 1299, 1300, 1300,
     1300, 1300, 1300, 1301, 1301, 1301, 1301, 1301, 1302, 1302,
     1302, 1302, 1302, 1303, 1303, 1303, 1303, 1303, 1304, 1304,

     1304, 1304, 1304, 1305, 1305, 1305, 1305, 1305, 1306, 1306,
     1306, 1306, 1306, 1307, 1307, 1307, 1307, 1307, 1308, 1308,
     1308, 1308, 1308, 1309, 1309, 1309, 1309, 1309, 1310, 1310,
     1310, 1310, 1310, 1311, 1311, 1311, 1311, 1311, 1312, 1312,
     1312, 1312, 1312, 1313, 1313, 1313, 1313, 1313, 1314, 1314,
     1314, 1314, 1314, 1315, 1315, 1315, 1315, 1315, 1316, 1316,
     1316, 1316, 1316, 1317, 1317, 1317, 1317, 1317, 1318, 1318,
     1318, 1318, 1318, 1319, 1319, 1319, 1319, 1319, 1320, 1320,
     1320, 1320, 1320, 1321, 1321, 1321, 1321, 1321, 1322, 1322,
     1322, 1322, 1322, 1323, 1323, 1323, 1323, 1323, 1324, 1324,

     1324, 1324, 1324, 1325, 1325, 1325, 1325, 1325, 1326, 1326,
     1326, 1326, 1326, 1327, 1327, 1327, 1327, 1327, 1328, 1328,
     1328, 1328, 1328, 1329, 1329, 1329, 1329, 1329, 1330, 1330,
     1330, 1330, 1330, 1331, 1331, 1332, 1332, 1332, 1332, 1332,
     1333, 1333, 1333, 1333, 1333, 1334, 1334, 1334, 1334, 1334,
     1335, 1335, 1335, 1335, 1335, 1336, 1336, 1336, 1336, 1336,
     1337, 1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338, 1338,
     1339, 1339, 1339, 1339, 1339, 1340, 1340, 1340, 1340, 1340,
     1341, 1341, 1341, 1341, 1341, 1342, 1342, 1342, 1342, 1342,
     1343, 1343, 1343, 1343, 1343, 1344, 1344, 1344, 1344, 1344,

     1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346,
     1347, 1347, 1347, 1347, 1347, 1348, 1348, 1348, 1348, 1348,
     1349, 1349, 1349, 1349, 1349, 1350, 1350, 1350, 1350, 1350,
     1351, 1351, 1351, 1351, 1351, 1352, 1352, 1352, 1352, 1352,
     1353, 1353, 1353, 1353, 1353, 1354, 1354, 1354, 1354, 1354,
     1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356, 1356,
     1357, 1357, 1357, 1357, 1357, 1358, 1358, 1358, 1358, 1358,
     1359, 1359, 1359, 1359, 1359, 1360, 1360, 1361, 1361, 1361,
     1361, 1361, 1362, 1362, 1362, 1362, 1362, 1363, 1363, 1363,
     1363, 1363, 1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365,

     1365, 1365, 1366, 1366, 1366, 1366, 1366, 1367, 1367, 1367,
     1367, 1367, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369,
     1369, 1369, 1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371,
     1371, 1371, 1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373,
     1373, 1373, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375,
     1375, 1375, 1376, 1376, 1376, 1376, 1376, 1377, 1377, 1377,
     1377, 1377, 1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379,
     1379, 1379, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381,
     1381, 1381, 1382, 1382, 1382, 1382, 1382, 1383, 1383, 1383,
     1383, 1383, 1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385,

     1385, 1385, 1386, 1386, 1386, 1386, 1386, 1387, 1387, 1387,
     1387, 1387, 1388, 1388, 1388, 1388, 1388, 1389, 1389, 1389,
     1389, 1389, 1390, 1390, 1390, 1390, 1390, 1391, 1391, 1392,
     1392, 1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393, 1394,
     1394, 1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395, 1396,
     1396, 1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1398,
     1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1400,
     1400, 1400, 1400, 1400, 1401, 1401, 1401, 1401, 1401, 1402,
     1402, 1402, 1402, 1402, 1403, 1403, 1403, 1403, 1403, 1404,
     1404, 1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405, 1406,

     1406, 1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1408,
     1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1410,
     1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411, 1411, 1412,
     1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1414,
     1414, 1414, 1414, 1414, 1415, 1415, 1415, 1415, 1415, 1416,
     1416, 1416, 1416, 1416, 1417, 1417, 1417, 1417, 1417, 1418,
     1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419, 1420,
     1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421, 1422,
     1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423, 1423, 1424,
     1424, 1424, 1424, 1424, 1425, 1425, 1426, 1426, 1426, 1426,

     1426, 1427, 1427, 1427, 1427, 1427, 1428, 1428, 1428, 1428,
     1428, 1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430, 1430,
     1430, 1431, 1431, 1431, 1431, 1431, 1432, 1432, 1432, 1432,
     1432, 1433, 1433, 1433, 1433, 1433, 1434, 1434, 1434, 1434,
     1434, 1435, 1435, 1435, 1435, 1435, 1436, 1436, 1436, 1436,
     1436, 1437, 1437, 1437, 1437, 1437, 1438, 1438, 1438, 1438,
     1438, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440, 1440,
     1440, 1441, 1441, 1441, 1441, 1441, 1442, 1442, 1442, 1442,
     1442, 1443, 1443, 1443, 1443, 1443, 1444, 1444, 1444, 1444,
     1444, 1445, 1445, 1445, 1445, 1445, 1446, 1446, 1446, 1446,

     1446, 1447, 1447, 1447, 1447, 1447, 1448, 1448, 1448, 1448,
     1448, 1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450, 1450,
     1450, 1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452,
     1452, 1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454, 1454,
     1454, 1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456,
     1456, 1457, 1457, 1457, 1457, 1457, 1458, 1458, 1458, 1458,
     1458, 1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460,
     1460, 1461, 1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462,
     1462, 1463, 1463, 1464, 1464, 1464, 1464, 1464, 1465, 1465,
     1465, 1465, 1465, 1466, 1466, 1466, 1466, 1466, 1467, 1467,

     1467, 1467, 1467, 1468, 1468, 1468, 1468, 1468, 1469, 1469,
     1469, 1469, 1469, 1470, 1470, 1470, 1470, 1470, 1471, 1471,
     1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1473, 1473,
     1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474, 1475, 1475,
     1475, 1475, 1475, 1476, 1476,    0, 1476, 1476, 1477, 1477,
     1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478, 1479, 1479,
     1479, 1479, 1479, 1480, 1480, 1480, 1480, 1480, 1481, 1481,
     1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482, 1483, 1483,
     1483, 1483, 1483, 1484, 1484, 1484, 1484, 1484, 1485, 1485,
     1485, 1485, 1485, 1486, 1486, 1486, 1486, 1486, 1487, 1487,

     1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488, 1489, 1489,
     1489, 1489, 1489, 1490, 1490, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
// $Id: lexer.l 290 2018-07-09 09:18:27Z willem_vermin $
#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include "parser.h"
#include "findent.h"
#include "debug.h"
#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
class line_prep pline;




//  following are keywords starting with c
#line 2115 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_findentfix 10
#define state_scanfixpre 11

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 29 "lexer.l"


#line 2350 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1266 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5216 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 34 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 51 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 56 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 74 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 77 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 85 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 100 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 104 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 120 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 125 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 105:
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 223 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 229 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 230 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 109:
YY_RULE_SETUP
#line 234 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 239 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 244 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 247 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 250 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 253 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 256 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 260 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 263 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 266 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 269 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 272 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 276 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 277 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 123:
YY_RULE_SETUP
#line 280 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.type_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.type_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.type_dot_operator)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 124:
/* rule 124 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 304 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 310 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 316 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 323 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 330 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 332 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 333 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 335 "lexer.l"
ECHO;
	YY_BREAK
#line 3235 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_findentfix):
case YY_STATE_EOF(state_scanfixpre):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1266 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1266 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1265);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 335 "lexer.l"



void lexer_set(class line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(std::string s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:  BEGIN(state_identifier);   break;
      case SKIPALL:     BEGIN(state_skipall);      break;
      case SKIP:        BEGIN(state_skip);         break;
      case SKIPNOOP:    BEGIN(state_skipnoop);     break;
      case KEYWORD:     BEGIN(state_keyword);      break;
      case FINDFORMAT:  BEGIN(state_findformat);   break;
      case FINDENTFIX:  BEGIN(state_findentfix);   break;
      case SCANFIXPRE:  BEGIN(state_scanfixpre);   break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


