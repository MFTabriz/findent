#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 140
#define YY_END_OF_BUFFER 141
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1273] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  141,  139,  138,  139,
      135,  134,  139,  136,  137,   16,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
        4,    5,    2,    3,    8,    9,    6,    7,   15,   14,
       10,   12,   11,   13,    1,  140,  140,  104,  140,  104,
      140,  140,  140,  140,  140,  140,  140,  131,  131,  130,
      131,  131,  120,  131,  131,  109,  108,  109,  113,  112,
      113,  113,  132,    0,  134,    0,    0,   16,   17,   16,

        0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
        0,    0,    0,   67,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   85,    0,    0,    0,  104,    0,
       92,    0,    0,    0,   92,    0,    0,    0,  104,    0,
        0,    0,    0,    0,    0,   94,    0,    0,    0,    0,
       92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  120,    0,    0,    0,    0,
        0,  125,  107,    0,    0,    0,  133,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   33,    0,    0,    0,
        0,    0,   49,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   92,    0,    0,
        0,   92,    0,    0,    0,   92,    0,    0,    0,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   93,    0,    0,    0,    0,   96,    0,    0,    0,
        0,    0,    0,   94,    0,    0,    0,   96,    0,    0,
        0,   92,    0,    0,    0,    0,    0,    0,   92,    0,
        0,   92,    0,   91,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      121,    0,    0,    0,    0,  107,  107,    0,  111,  110,

        0,    0,    0,    0,   24,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   41,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       64,    0,    0,    0,    0,    0,    0,    0,    0,   78,
       79,    0,    0,    0,    0,   86,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
        0,   98,    0,    0,   92,    0,   92,   92,    0,   92,
        0,    0,   92,   92,   92,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   93,

        0,    0,    0,   93,    0,    0,   99,    0,   94,    0,
        0,   96,    0,   98,   94,    0,   94,  104,    0,   96,
        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
       92,    0,    0,    0,    0,   91,    0,    0,    0,   91,
        0,    0,    0,    0,    0,  102,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  126,  107,    0,
        0,    0,    0,   21,    0,    0,   27,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   48,    0,    0,    0,   53,    0,    0,    0,    0,

        0,    0,    0,   63,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   88,    0,   90,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   94,    0,   92,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   93,    0,   93,   93,    0,   93,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       91,    0,   91,   91,    0,   91,    0,    0,    0,    0,
        0,    0,   94,    0,    0,    0,   96,    0,    0,    0,
      101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  124,  123,    0,    0,    0,    0,    0,
        0,  105,  105,    0,   20,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   65,    0,   68,    0,    0,
        0,   72,    0,    0,    0,    0,    0,    0,   89,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   93,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   91,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   94,  102,   94,    0,
       96,    0,    0,    0,    0,   94,    0,    0,    0,   96,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  122,
        0,    0,  128,    0,    0,  106,  106,  105,  105,    0,

        0,    0,    0,    0,    0,   28,   29,    0,    0,    0,
        0,    0,    0,    0,   36,    0,    0,    0,    0,    0,
       50,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       61,    0,    0,   69,    0,   71,    0,    0,    0,    0,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   92,    0,    0,    0,    0,   92,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,    0,    0,    0,    0,   94,    0,    0,    0,
        0,    0,    0,  103,    0,    0,    0,    0,    0,   95,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   93,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   91,    0,    0,    0,    0,   91,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,    0,    0,    0,    0,   94,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       98,    0,    0,    0,    0,   94,    0,  101,    0,   94,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  127,    0,    0,    0,    0,    0,    0,   30,   31,

        0,   37,    0,    0,    0,    0,    0,    0,   45,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
       66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   92,    0,   92,    0,   92,    0,   92,    0,
       97,    0,   94,    0,   97,    0,   94,    0,   94,    0,
        0,    0,   97,    0,    0,   95,    0,   95,    0,    0,
       94,    0,    0,   97,    0,    0,    0,   93,    0,   93,
        0,   93,    0,   97,    0,   94,    0,   93,    0,   92,
        0,   92,    0,   91,    0,   91,    0,   91,    0,   91,
        0,   97,    0,   94,    0,   97,    0,   94,    0,   97,

        0,   94,    0,   97,    0,   94,    0,    0,    0,    0,
        0,    0,    0,    0,  129,    0,   19,   22,    0,   25,
        0,    0,    0,    0,    0,   40,   43,    0,    0,    0,
       51,    0,    0,   55,    0,    0,   58,    0,    0,   70,
        0,    0,    0,   76,   80,    0,    0,   83,    0,    0,
        0,   94,    0,  100,    0,   94,    0,    0,   97,    0,
       94,    0,   95,  103,   94,    0,   97,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   57,    0,    0,    0,    0,    0,
       81,   82,   84,    0,   94,    0,   94,    0,    0,    0,

        0,    0,   23,    0,    0,    0,    0,    0,    0,    0,
       47,   52,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   26,    0,   34,    0,    0,   44,   46,
       54,   56,   60,    0,    0,    0,    0,  118,  119,    0,
       35,   38,    0,   59,    0,    0,    0,    0,    0,    0,
        0,   75,    0,    0,    0,    0,    0,   39,   73,    0,
        0,    0,    0,   74,    0,  114,    0,  115,   18,  116,
      117,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,   14,    1,    1,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
       18,    1,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       29,   36,   37,   38,   39,   40,   41,   42,   43,   29,
       44,    1,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   29,   57,   58,   59,   60,
       61,   62,   29,   63,   64,   65,   66,   67,   68,   69,
       70,   29,    1,   71,    1,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    1,    4,    4,    5,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    6,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1
    } ;

static yyconst flex_uint16_t yy_base[1504] =
    {   0,
        0,   71,  142,  213,  282, 3048,   17,   19,   18,   20,
       22,   23,   47,   48,   91,  119, 3037, 3036, 3035,  348,
       32,  162, 3011,   90, 3002,   50, 2997, 5504, 5504,   27,
     5504,   23, 2957, 5504, 5504,   52,  216,   83,  383,  174,
      176,  222,  237,  177,  230,  232,   82,  227,  322,  155,
     5504, 5504, 5504, 5504, 5504, 5504, 5504, 5504, 5504, 5504,
     5504, 5504, 5504, 5504, 5504, 5504, 2970, 5504,  100,  118,
      446,  104,  128,  174,  517,  166,  587, 5504,  106, 5504,
      248,  270,  334,  290, 2953, 5504, 5504, 2941, 5504, 5504,
      134, 2901, 5504,  188,   33, 2889,    0, 2784,    0,  188,

      291,  305,  265,  331,  153,  261,  342,  356,  374,  449,
      355,  344,  349, 2762,  408,  380,  362,  388,  420,  372,
      452,  269,  450,  451, 2752,  463,  459, 2764, 5504,  197,
      236,  237,  424,  427,  258,  239,  491,  479,  307,  657,
      476,  501,  535,  728,  505, 2738,  539,  547,  550,  562,
     2727,  506,  570,  573,  799,  578,  590,  816,  597,  634,
      599,  624,  627,  348,  677,  556, 2697,  586,  452,  683,
      529,  696,  618,  609, 2692,  195, 5504,  648,  661,  671,
      553,  687,  689,  692,  732,  749,  774,  734,  537,  738,
      739,  673,  860,  805,  803,  740,  741,  812,  806,  599,

      820,  810,  809,  821,  830,  839,  870,  833,  848,  854,
      702,  638,  773,  316,  707,  781,  709, 2682,  928,  918,
      936, 2685,  758,  944,  825, 2665,  543,   65,  952, 2650,
     2651,  955,  896,  963,  972,  989,  997, 1043,  911, 1001,
     1004,  376,  933, 1017, 1020, 1028, 2631,  941, 1061, 2625,
      777,  960, 1032, 5504, 1065, 1068, 1076, 2628, 1005, 1088,
     1091, 2620, 1073, 1099, 1107, 2619, 2611, 1096, 5504, 1115,
     1118, 2608, 1123,  507, 1104, 1131, 1140, 1157, 1158, 1166,
     1165, 1173, 1189, 1174, 1188, 1196, 1210,  659,  906,  546,
     5504,  729, 1218, 1219, 1210,  126, 1223, 1023, 5504, 5504,

      979, 1178,  742,  994, 1114,  887, 1191, 1067, 1183, 1226,
     1095,  925, 1147, 1213, 1230, 1232, 1231, 1243, 1234, 1240,
     1247, 1207, 1249, 1268, 1256, 1261, 1274, 1252, 1277, 1288,
     2585, 1258, 1285, 1283, 1294, 1292, 1308, 1310, 1301, 2566,
     2547, 1316, 1319, 1295, 1321, 2525, 1337, 1336, 1340, 1358,
     1368, 1365, 1381, 1386, 1394, 1372, 1402, 1377, 2524,  851,
     1410, 2525, 1391, 1414, 5504, 1417, 2517, 5504, 1425, 2492,
     2493, 1406, 5504, 2481, 5504, 1428, 1429, 1437, 1440, 1448,
     1450, 1458, 1445, 1466, 1475, 1492, 1500, 1546, 1503, 1455,
     1513, 1520, 1528, 1463, 1536, 1504, 1564, 1567, 1525, 2458,

     1575, 1577, 1591, 2425, 1533, 1599, 2413, 1572, 5504, 1603,
     1611, 2410, 1496, 5504, 5504, 1619, 5504, 2409, 1622, 2401,
     1580, 1626, 1634, 1631, 1642, 1645, 1653, 2391, 5504, 1657,
     5504, 1660, 1661, 1669, 1672, 2372, 1680, 1682, 1690, 2350,
     1677, 1698, 1707, 1724, 1725,  589, 1687, 1733, 1736, 1741,
     1752, 1753, 1760, 1761, 1770, 1778, 1771, 1779,  989, 1310,
     1335, 1417, 1460, 1792, 1798, 1789, 1805, 5504, 1420, 1583,
     1723, 1671, 1780, 1787, 1794, 1798, 1816, 1797, 1815, 1807,
     1318, 1468, 1820, 1830, 1755, 1689, 1828, 1650, 1615, 1493,
     1838, 2305, 1408, 1824, 1842, 2253, 1839, 1846, 1834, 1847,

     1844, 1856, 1859, 2215, 1857, 1868, 1862, 1875, 1873, 1883,
     1884, 1889, 1890, 1892, 1896, 1899, 1602, 5504, 1900, 2199,
     1916, 1930, 1939, 1942, 1607,  484, 1944, 2208, 1950, 2196,
     1955, 1963, 1966, 1970, 5504, 1973, 5504, 1975, 1976, 1984,
     1987, 1979,  956, 1989, 2176, 1995, 2164, 1999, 2002, 2005,
     2008, 2011, 2023, 2026, 2029, 2012, 2041,  990, 2045, 2152,
     2049, 2030, 2053, 1569, 2056, 2121, 2060, 2037, 2064, 2067,
     2071, 2034, 2074, 5504, 2077, 2031, 5504, 2080, 2014, 2084,
     5504, 1925, 2015, 2087, 1929, 2091, 2094, 2098, 2101, 2104,
     2105, 2113, 2116, 2108, 1957, 2118, 1920, 2124, 1917, 2128,

     5504, 2131, 1884, 5504, 2134, 1780, 2139, 2156, 2157, 2160,
     2168, 2165, 1759, 2173, 2175, 2185, 1762, 1756, 2189, 2192,
      785, 2193, 2201, 2204, 2209, 2212, 2217, 2220, 2225, 2228,
     2236, 2237, 1708, 5504, 5504, 1910, 2130, 2247, 2255, 2196,
     2261, 2258,  419, 2221, 1731, 2207, 2249, 2250, 2218, 2261,
     2231, 2257, 2259, 2270, 2230, 1759, 2276, 2274, 2277, 2283,
     1730, 2281, 2147, 2303, 2285, 2295, 2311, 2313, 2315, 2299,
     2323, 2317, 2320, 2334, 2326, 1706, 2327, 1681, 2330, 2351,
     2329, 2347, 2353, 2358, 2357, 2374, 2359, 2340, 1680, 2301,
     2305, 2399, 2407, 2418, 2423, 2431, 2420, 2428, 2439, 2442,

     2450, 2452, 2447, 2460, 2457, 2468, 2470, 2478, 2465, 2475,
     2486, 2489, 2497, 2499, 2507, 2510, 2515, 2514, 2523, 2526,
     2534, 2531, 2538, 2542, 2545, 2553, 2550, 2557, 2565, 2562,
     2573, 2576, 2584, 2587, 5504, 2589, 2592, 2594, 2602, 2606,
     2614, 2617, 2618, 2626, 2629, 2637, 2639, 2647, 2634, 2644,
     2655, 2658, 2666, 5504, 2675, 2692, 2693, 2662, 2701, 2663,
     2705, 2708, 2721, 2709, 2724, 2732, 5504, 1671, 5504, 2735,
     1648, 2740, 2739, 2748, 2751, 1633, 2759, 2761, 2769, 1628,
     2756, 2772, 2777, 2780, 2785, 2788, 2795, 2803, 1962, 5504,
     2347, 2805, 2797, 2809, 2559, 5504, 2393, 2503, 5504, 2535,

     2738, 2778, 2767, 2497, 2785, 1613, 1601, 2421, 2698, 2410,
     2621, 2797, 2802, 2803, 1580, 2804, 2811, 2809, 2818, 2813,
     1571, 2825, 2779, 2841, 2833, 2838, 2850, 2851, 2853, 2854,
     1527, 2855, 2859, 1526, 2867, 1518, 2861, 2863, 2864, 2876,
     1509, 2865, 2877, 2868, 2878, 2893, 2893, 2837, 2938, 2913,
     2942, 2915, 2950, 1509, 2920, 2958, 2925, 2962, 5504, 2966,
     2974, 2978, 2986, 2990, 2928, 2947, 2998, 2995, 3006, 3008,
     3016, 1460, 3003, 3024, 3013, 3028, 5504, 3032, 3040, 3044,
     3052, 3056, 3059, 1875, 3066, 3063, 3074, 3077, 3085, 3088,
     3064, 3096, 3099, 3100, 3108, 3111, 3119, 3121, 3129, 1451,

     3116, 3137, 3140, 3126, 3148, 3156, 3145, 3160, 3163, 3171,
     5504, 3174, 3182, 3190, 3194, 3202, 3206, 3210, 3213, 3179,
     3221, 3218, 3229, 3232, 3240, 3243, 3248, 3247, 3256, 3259,
     3267, 3269, 3277, 1439, 3264, 3285, 3274, 3289, 5504, 3293,
     3301, 3305, 3313, 3317, 3326, 3343, 3344, 3347, 3355, 3352,
     3365, 3372, 3380, 1397, 3377, 3389, 3387, 3397, 5504, 3400,
     3408, 3412, 3420, 3423, 3424, 3432, 3435, 3443, 3445, 3453,
     1396, 3440, 3461, 3450, 3465, 5504, 3469, 1387, 3477, 5504,
     3480, 3485, 3488, 3493, 3496, 3501, 2534, 2693, 3505, 3509,
     3510, 5504, 2968, 3491, 3359, 2918, 3154, 3475, 1359, 1327,

     2987, 5504, 3203, 3346, 3504, 3499, 3512, 3099, 3514, 3523,
     3522, 3172, 3521, 3525, 3524, 3502, 3164, 3543, 3246, 1289,
     1279, 3534, 3443, 3538, 3561, 3552, 3564, 3247, 3550, 3566,
     3551, 3593, 1257, 3604, 5504, 3617, 1191, 3621, 5504, 3629,
     1183, 3633, 5504, 3641, 1176, 3645, 5504, 3515, 1164, 3649,
     3584, 3657, 1167, 3600, 3665, 3668, 3673, 3676, 3654, 3677,
     1152, 3684, 3692, 1134, 3681, 3700, 3708, 1133, 3712, 5504,
     3720, 1125, 3728, 1110, 3732, 5504, 3736, 5504, 3744, 1101,
     3748, 5504, 3756, 1090, 3760, 5504, 3768, 1081, 3772, 5504,
     3780, 1078, 3784, 5504, 3792, 1070, 3796, 5504, 3804, 1067,

     3808, 5504, 3816, 1023, 3820, 5504, 3823, 3828, 3831, 3836,
     3839, 2675, 2933, 3848, 5504, 3623,  980,  954, 3583,  934,
     3562, 3288, 3648, 3818, 3821,  909,  901, 3671, 3810, 3829,
      898, 3830, 3837,  886, 3689, 3843,  877, 3839, 3838,  872,
     3844, 3845, 3691,  857,  856, 3848, 3857,  840, 3865, 3689,
     3884, 5504, 3904,  835, 3717, 5504, 3912, 3920,  826, 3860,
      766,  712,  711,  694, 5504, 3928,  689, 3931, 3936, 3285,
     3599, 3873, 3881, 3895, 3844, 3887, 3911, 3926, 3910, 3918,
     3927, 3933, 3938, 3932,  674, 3940, 3934, 3942, 3950, 3944,
      637,  623,  615, 4006, 5504, 4009, 5504, 3994, 3967, 3841,

     3910, 3967,  551, 3979, 3944, 3984, 3999, 3969, 4004, 4009,
      543,  490, 4007, 4008, 4013, 4003, 4017, 4018, 4022, 4037,
      480,  461, 4026,  405, 3949,  320, 4030, 4036,  319,  312,
      307,  294,  270, 4031, 4033, 4035, 4041, 4031, 4033, 4059,
     5504,  260, 4053,  238, 4058, 4054, 4068,  229,  166, 4060,
     4065,  103, 4080, 4069, 4044, 4066, 4093,  102,   44, 4092,
     4078, 4088, 4102,   39, 4082, 5504, 4097, 5504,    7, 5504,
     5504, 5504, 4154, 4160, 4166, 4172, 4178, 4184, 4190, 4196,
     4202, 4208, 4214, 4217, 4221, 4226, 4232, 4238, 4244, 4250,
     4256, 4262, 4268, 4273, 4276, 4280, 4286, 4292, 4298, 4304,

     4310, 4316, 4322, 4328, 4334, 4340, 4346, 4352, 4358, 4364,
     4370, 4376, 4382, 4388, 4394, 4400, 4406, 4412, 4418, 4424,
     4430, 4436, 4442, 4448, 4454, 4460, 4466, 4472, 4478, 4484,
     4490, 4496, 4502, 4508, 4514, 4520, 4526, 4532, 4535, 4540,
     4546, 4552, 4558, 4564, 4570, 4576, 4582, 4588, 4594, 4600,
     4606, 4612, 4618, 4624, 4630, 4636, 4642, 4648, 4654, 4660,
     4666, 4672, 4678, 4684, 4690, 4696, 4702, 4708, 4711, 4716,
     4722, 4728, 4734, 4740, 4746, 4752, 4758, 4764, 4770, 4776,
     4782, 4788, 4794, 4800, 4806, 4812, 4818, 4824, 4830, 4836,
     4842, 4848, 4854, 4860, 4866, 4872, 4878, 4884, 4890, 4896,

     4898, 4903, 4909, 4915, 4921, 4927, 4933, 4939, 4945, 4951,
     4957, 4963, 4969, 4975, 4981, 4987, 4993, 4999, 5005, 5011,
     5017, 5023, 5029, 5035, 5041, 5047, 5053, 5059, 5065, 5071,
     5077, 5083, 5089, 5095, 5101, 5104, 5109, 5115, 5121, 5127,
     5133, 5139, 5145, 5151, 5157, 5163, 5169, 5175, 5181, 5187,
     5193, 5199, 5205, 5211, 5217, 5223, 5229, 5235, 5241, 5247,
     5253, 5259, 5265, 5271, 5277, 5283, 5289, 5295, 5301, 5307,
     5313, 5319, 5325, 5328, 5333, 5339, 5345, 5351, 5357, 5363,
     5369, 5375, 5381, 5387, 5393, 5399, 5405, 5411, 5417, 5423,
     5429, 5435, 5441, 5447, 5453, 5459, 5465, 5471, 5477, 5483,

     5489, 5495, 5498
    } ;

static yyconst flex_int16_t yy_def[1504] =
    {   0,
     1273, 1273, 1274, 1274,    2,    5, 1275, 1275, 1276, 1276,
     1277, 1277, 1277, 1277, 1277, 1277, 1278, 1278, 1279, 1280,
     1281, 1281, 1282, 1282, 1283, 1283, 1272, 1272, 1272, 1272,
     1272, 1272, 1284, 1272, 1272, 1285, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1286, 1272, 1287, 1288,
     1289, 1290, 1291, 1292, 1289, 1287, 1291, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1284, 1293, 1294, 1295, 1285,

     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1286, 1272, 1296,
     1297, 1298, 1299, 1288, 1297, 1300, 1301, 1302, 1297, 1303,
     1304, 1305, 1306, 1303, 1304, 1307, 1308, 1309, 1310, 1310,
     1311, 1312, 1310, 1313, 1314, 1302, 1302, 1302, 1302, 1302,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1272, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1315, 1316, 1317, 1297, 1318, 1311, 1316, 1307, 1319, 1317,
     1317, 1311, 1319, 1317, 1300, 1307, 1320, 1301, 1301, 1311,
     1320, 1321, 1322, 1323, 1324, 1325, 1326, 1324, 1322, 1327,
     1325, 1297, 1328, 1329, 1326, 1326, 1311, 1330, 1326, 1307,
     1272, 1327, 1327, 1272, 1327, 1323, 1323, 1311, 1327, 1323,
     1331, 1311, 1332, 1331, 1331, 1311, 1333, 1332, 1272, 1332,
     1331, 1311, 1334, 1297, 1335, 1336, 1337, 1338, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1272, 1272, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340, 1341,
     1342, 1341, 1343, 1342, 1342, 1343, 1342, 1344, 1307, 1333,
     1311, 1311, 1343, 1343, 1272, 1343, 1311, 1272, 1342, 1311,
     1345, 1345, 1272, 1311, 1272, 1346, 1347, 1348, 1347, 1349,
     1348, 1348, 1349, 1348, 1350, 1351, 1352, 1350, 1351, 1353,
     1354, 1352, 1352, 1355, 1352, 1349, 1349, 1349, 1353, 1307,

     1356, 1354, 1354, 1311, 1356, 1354, 1311, 1355, 1272, 1355,
     1352, 1311, 1272, 1272, 1272, 1349, 1272, 1311, 1348, 1311,
     1357, 1358, 1357, 1358, 1358, 1357, 1357, 1333, 1272, 1358,
     1272, 1359, 1360, 1361, 1360, 1307, 1362, 1361, 1361, 1311,
     1362, 1361, 1363, 1364, 1364, 1365, 1366, 1367, 1368, 1368,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1272, 1272, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1272, 1369, 1369,
     1370, 1371, 1372, 1371, 1373, 1372, 1372, 1373, 1372, 1373,
     1373, 1373, 1372, 1333, 1272, 1373, 1272, 1374, 1375, 1376,
     1375, 1377, 1376, 1376, 1377, 1376, 1377, 1377, 1377, 1376,
     1374, 1378, 1379, 1374, 1378, 1380, 1381, 1379, 1379, 1382,
     1379, 1380, 1383, 1381, 1381, 1383, 1381, 1382, 1382, 1379,
     1377, 1383, 1383, 1272, 1383, 1311, 1272, 1381, 1311, 1382,
     1272, 1384, 1385, 1384, 1385, 1385, 1384, 1385, 1384, 1386,
     1387, 1388, 1387, 1389, 1388, 1388, 1389, 1388, 1389, 1389,

     1272, 1389, 1311, 1272, 1388, 1311, 1390, 1391, 1391, 1392,
     1393, 1392, 1394, 1395, 1393, 1393, 1311, 1395, 1393, 1396,
     1397, 1398, 1399, 1396, 1396, 1374, 1374, 1374, 1374, 1374,
     1374, 1396, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1400, 1272, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1272, 1272, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402,
     1403, 1404, 1403, 1405, 1404, 1404, 1405, 1405, 1405, 1404,

     1405, 1406, 1407, 1408, 1407, 1409, 1408, 1408, 1409, 1409,
     1409, 1408, 1409, 1410, 1411, 1410, 1412, 1413, 1414, 1415,
     1415, 1416, 1413, 1417, 1414, 1414, 1417, 1416, 1415, 1417,
     1417, 1414, 1416, 1417, 1272, 1418, 1419, 1419, 1418, 1419,
     1418, 1420, 1421, 1422, 1421, 1423, 1422, 1422, 1423, 1423,
     1423, 1422, 1423, 1272, 1424, 1425, 1425, 1426, 1427, 1426,
     1428, 1427, 1427, 1428, 1428, 1428, 1272, 1429, 1272, 1427,
     1429, 1430, 1431, 1432, 1431, 1433, 1434, 1432, 1432, 1429,
     1434, 1435, 1430, 1435, 1435, 1435, 1435, 1435, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1436,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1272,
     1272, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1437, 1438, 1439, 1438,
     1440, 1439, 1439, 1429, 1440, 1439, 1440, 1440, 1272, 1440,
     1439, 1440, 1439, 1440, 1435, 1441, 1442, 1441, 1443, 1442,
     1442, 1429, 1443, 1442, 1443, 1443, 1272, 1443, 1442, 1443,
     1442, 1443, 1444, 1445, 1444, 1446, 1447, 1448, 1448, 1449,
     1450, 1451, 1452, 1453, 1454, 1453, 1455, 1454, 1454, 1429,

     1455, 1454, 1456, 1457, 1456, 1456, 1457, 1457, 1455, 1455,
     1272, 1455, 1454, 1456, 1455, 1454, 1457, 1455, 1458, 1459,
     1458, 1459, 1459, 1458, 1459, 1458, 1460, 1461, 1462, 1461,
     1463, 1462, 1462, 1429, 1463, 1462, 1463, 1463, 1272, 1463,
     1462, 1463, 1462, 1463, 1464, 1465, 1465, 1466, 1467, 1466,
     1468, 1467, 1467, 1429, 1468, 1467, 1468, 1468, 1272, 1468,
     1467, 1468, 1467, 1469, 1470, 1471, 1470, 1472, 1471, 1471,
     1429, 1472, 1471, 1472, 1472, 1272, 1472, 1429, 1471, 1272,
     1473, 1469, 1473, 1473, 1473, 1473, 1272, 1272, 1272, 1272,
     1272, 1272, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,

     1272, 1272, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1475, 1429, 1476, 1272, 1475, 1429, 1476, 1272, 1477,
     1429, 1478, 1272, 1477, 1429, 1478, 1272, 1479, 1480, 1481,
     1482, 1482, 1429, 1483, 1482, 1484, 1484, 1484, 1485, 1486,
     1487, 1488, 1488, 1429, 1481, 1488, 1489, 1429, 1490, 1272,
     1489, 1429, 1491, 1429, 1492, 1272, 1490, 1272, 1493, 1429,
     1494, 1272, 1495, 1429, 1496, 1272, 1495, 1429, 1496, 1272,
     1497, 1429, 1498, 1272, 1497, 1429, 1498, 1272, 1499, 1429,

     1500, 1272, 1499, 1429, 1500, 1272, 1501, 1502, 1501, 1502,
     1502, 1272, 1272, 1272, 1272, 1503, 1503, 1503, 1503, 1503,
     1503, 1272, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1481,
     1481, 1272, 1481, 1429, 1483, 1272, 1483, 1482, 1429, 1485,
     1487, 1487, 1487, 1429, 1272, 1488, 1429, 1501, 1501, 1272,
     1272, 1503, 1503, 1503, 1272, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1481, 1272, 1483, 1272, 1501, 1502, 1272,

     1272, 1503, 1503, 1503, 1272, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1502,
     1272, 1272, 1503, 1503, 1272, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1272, 1272, 1503,
     1272, 1503, 1503, 1503, 1503, 1503, 1503, 1272, 1272, 1503,
     1503, 1503, 1503, 1503, 1272, 1272, 1503, 1503, 1503, 1503,
     1272, 1272, 1503, 1503, 1272, 1272, 1272, 1272, 1503, 1272,
     1272,    0, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1272, 1272, 1272
    } ;

static yyconst flex_uint16_t yy_nxt[5576] =
    {   0,
       28,   28,   29,   30,   28,   28,   28,   28,   28,   31,
       28,   28,   28,   28,   32,   32,   28,   28,   28,   52,
       56,   52,   56,   97,   60,   60,   53,   54,   53,   54,
       93,   61,   61,   79,   80,   79,   81,   95,   95,   62,
       62,   94,   94,   34,   28,   28,   28,   95,   95,   60,
       60,   91,   90,   91,   92,   97,   61,   61,   98,   99,
       97,   57,   58,   57,   58,   63,   63,  374,   97,  231,
       28,   28,   28,   35,   30,   28,   28,   28,   28,   28,
       31,   28,   28,   28,   28,   32,   32,   28,   28,   28,
       63,   63,   87,   60,   88,   64,   64,   64,   97,   97,

       61,   88,  131,   64,  132,  121,  146,  161,  133,  161,
      162,   88,  147,  103,   34,   28,   28,   28,   97,   97,
      135,   60,  136,   64,   64,   64,  137,  296,   61,  296,
      139,   64,  141,  121,   63,  174,  148,  174,  175,   88,
      103,   28,   28,   28,   29,   30,   28,   28,   28,   28,
       28,   31,   28,   28,   28,   28,   32,   32,   28,   28,
       28,   64,   63,   82,   80,   82,   81,   83,  131,   97,
      132,   97,  182,   84,  133,  150,  151,  150,  152, 1256,
       85,  127,  153,   84,  154,   34,   28,   28,   28,   64,
       97,   93,   97,   97,   98,   99,  299,  300,  299,  131,

      182,  212,   94,   94,   97,  213,  110,  109,  111,  127,
      117,   84,   28,   28,   28,   35,   30,   28,   28,   28,
       28,   28,   31,   28,   28,   28,   28,   32,   32,   28,
       28,   28,   97,  110,  109,  111,  101,  117,   97,  218,
      215,  226, 1255,   97,  216,  219,   97,  227,   97,  163,
      122,  163,  102,   97,   97,  112,   34,   28,   28,   28,
      113,  114,  215,  118,  101,  123,  216,  119,  115,  116,
      120,  165,  164,  165,  162,  166,   97,   97,  122,  102,
      183,   97,  112,   28,   29,   97,   97,  113,  167,  114,
      118,  170,  123,  170,  119,  115,  116,  120,  180,  206,

      164,   37,   38,   39,   40,   41,   42,   97,  183,   43,
       97,  215,   44,   45,  171,  216,   46,   47,   48,   49,
      215,   97,   50,   97,  216,  180,  206,  178,   97,   37,
       38,   39,   40,   41,   42,   97,   97,   43,   97,   44,
       45,  179,  171,   46,   47,   48,   49,   97,  124,   50,
       70,   71,   72,   73,  178,  125,   74,  168,   97,   73,
       97,  169,   75,   75,  126,   97,   76,  181,  179,   77,
       73,   97,   97,  184,  185,  288,  124,  193,   97,  196,
      215,  197,  125,  186,  216,  168,  187,  200,   97,  169,
       97,  126,  194,  195,  181,  188,   97,   77,   73,   97,

      184,  185,  104,  288,   97,  193,  196,  203,  197,  105,
      201,  186,  189,  106,  190,  200,  107,  199,  108,  194,
      195,   97,  799,  188,   97,  221,  222,  221,  223,  135,
      104,  136,  224,  799,  203,  137,   97,  105,  201,  189,
      106,  190,  198,  107,  199,  108,  138,  138,  139,  140,
      141,  138,  138,  202,  143,  138,  138,  138,  138,  138,
      144,  144,  138,  138,  138,   97,   97,   97,   97,  198,
      207,  204,  191,  205,  208,   97,  291, 1239,  146,   97,
      202,  139,  210,  233,  240,  192,  367,  234,  697,  138,
      138,  138,  229,  230,  229,  231, 1238,  209,  207,  204,

      191,  205,  208,  242,  291,  243,   97,  146,  269,  244,
      210,  215,  192,  240,  270,  216,  138,  138,  138,  139,
      144,  141,  138,  138,  209,  148,  138,  138,  138,  138,
      138,  144,  144,  138,  138,  138,  246,  247,  246,  248,
      253,  254,  253,  249,  372,  373,  372,  255,  257,  258,
      257,  259,  262,   97,  263,  260,  292,  314,  264,   97,
      138,  138,  138,  265,  151,  265,  263,   97,  462,   97,
      264,  271,  272,  271,  263,  274,  305,  275,  264,  168,
      139,  276,  233,  169,  292,  314,  234,  138,  155,  139,
      155,  141,  139,  215,  233,  148,  462,  216,  234,  139,

      161,  233,  161,  162,  305,  234,  156,  168,  279,  281,
      174,  169,  174,  175,  280,   97,  289,  157,  290,  296,
      158,  297,  159,  282,  286,  163,  336,  163,  163,  160,
      163,   97,  298,  298,  156,  279,  139,  281,  233,   97,
      218,  280,  234,  289,  157,  290,  353,  158,  164,  159,
      282,  164,  286,   97,  336,  287,  160,  232,  232,  139,
      235,  233,  232,  232,   97,  237,  232,  232,  232,  232,
      232,  238,  238,  232,  232,  232,  164,   97,  165,  164,
      165,  162,  166,  287,  170,  301,  170,   97,  302,   97,
       97,  459,  304,  267,  303,  167,  317,  293,  267,  293,

      232,  232,  232,   97,  131,   97,  350,  171,   97,  359,
      351,  218,  301, 1163, 1163,  360,  302,  353,  459,  294,
      304,  303,  306,  295,  317,  307,  308,  232,  232,  232,
      139,  238,  233,  232,  232,  171,  234,  232,  232,  232,
      232,  232,  238,  238,  232,  232,  232,  294,   97,  306,
       97,  295,  307,  308,   97,   97,   97,   97,   97,  332,
      368,  463,  333,  473,  315,   97,  366,  313, 1163,  309,
      316,  232,  232,  232,  355,  222,  355,  356,  413,  414,
      413,  357,  361,  362,  361,  267,  310,  332,  463,  215,
      333,  473,  315,  216,  313,  311,  309,  316,  232,  232,

      277,  139,  277,  233,  232,  232,  232,  234,  232,  232,
      232,  232,  232,  310,  312,  232,  232,  232,  139,   97,
      233,   97,   97,  311,  234,   97,   97,  226,   97,  335,
      267,  338,  340,  227,  331,  339,   97,   97,  283,  267,
      330,  312,  232,  232,  232,  232,   97,  284,  285,   97,
      334,  341,  534,  535,  534,   97,   97,  335,  337,  338,
      340,  331,  343,  339,   97,  346,  283,  330,  342,  232,
       97,  347,   97,   97,  284,  285,   97,  334,  341,  318,
      319,  320,  321,  322,  323,  337,   97,  324,   97,  348,
      343,  325,  346,   97,  326,  342,  327,  328,  146,  347,

      329,  344,   97,   97,  380,  345,  476,  318,  319,  320,
      321,  322,  323,  146,   97,  324,  348,   97,  325,  380,
      367,  326,  356,  327,  328,   97,  357,  329,  344,  364,
      365,  364,  345,  460,  476,  400,  366,  355,  222,  355,
      356,  401,  461,  409,  357,  369,  370,  369,  356,  410,
       97,  482,  357,  229,  230,  229,  231,  139,  418,  377,
      709,  460,  415,  378,  382,  258,  382,  383,  398,  461,
       97,  384,  376,  376,  139,  385,  377,  376,  376,  482,
      387,  376,  376,  376,  376,  376,  388,  388,  376,  376,
      376,  242,  407,  390,  722,   97,   97,  391,  393,  247,

      393,  394,  397,  254,  397,  395,  242,  415,  390,  398,
       97,  633,  391,  398,  471,  376,  376,  376,  403,  404,
      403,  405,  407,  474,  394,  406,  470,  267,  395,  393,
      247,  393,  394,  397,  254,  397,  395,  470,  470,  633,
      398,  471,  376,  376,  376,  139,  388,  377,  376,  376,
      474,  378,  376,  376,  376,  376,  376,  388,  388,  376,
      376,  376,  411,  412,  411,  394,  416,  417,  416,  395,
      418,  267,  383,  398,  267,  269,  384,  382,  258,  382,
      383,  425,  267,   97,  384,  267,  376,  376,  376,  419,
      420,  419,  383,  262,  267,  422,  384,  478,  269,  423,

      426,  272,  426,  422,  425,  267,  436,  423,  427,  151,
      427,  422,  437,  376,  267,  423,  430,  431,  430,  426,
      272,  426,  422,  425,  478,  274,  423,  433,  481,  267,
       97,  434,  439,  440,  439,  441,  475,  267,  267,  442,
      376,  443,  139,  443,  377,  376,  376,  376,  378,  376,
      376,  376,  376,  376, 1163,  481,  376,  376,  376,  446,
      139,  447,  377,   97,  475,  448,  378,  139,  139,  377,
      377,  267,  251,  378,  378,  139,  139,  377,  377,  483,
      267,  378,  378,  376,  376,  376,  376,  267,  449,  450,
      139,  139,  377,  377,   97,  267,  378,  378,  139,   97,

      377,  451,  479,  472,  378,  454,  483,   97,  455,  452,
      376,  467,  139,  467,  377,  449,  453,  450,  378,  293,
      464,  293,  464,   97,  296,  456,  469,  477,  451,   97,
      479,  472,  454,  457,  468,  455,  452,  470,  470,  493,
      458,  294,   97,  484,  453,  295,   97,   97,   97,  465,
       97,  466,  456,  480,  477,  486,   97,  485,  487,   97,
      457,  267,  468,   97,  490,   97,  493,  458,   97,  294,
      484,  488,   97,  295,   97,  491,  465,   97,  466,  489,
      492,  480,  494,  486,   97,  485,  487,  495,  505,  498,
       97,  490,  496,   97,  502,   97,  499,  500,  488,   97,

      497,   97,  491,  503,   97,   97,  489,  492,   97,  494,
       97,   97,  501,  510,  495,  505,  498,   97,  507,  508,
      496,  502,  506,  499,   97,  500,   97,  497,  516,  509,
      504,  503,   97,  512,  634,   97,  513,   97,  511,  501,
      515,  510,  131,   97,  522,  507,  518,  508,  523,  506,
      655,  514,   97,   97,  517,  516,  509,  504,  635,  520,
      218,  512,  634,  513,  519,  511,  525,  218,  515,  527,
      222,  527,  528,  525,  368,   97,  529,  655,  514,  359,
      532,  517,  531,  365,  531,  360,  635,  520,  367,  532,
      528,  267,  519,  368,  529,  527,  222,  527,  528,  532,

      267,  267,  529,  533,  370,  533,  528,  372,  373,  372,
      529,  361,  362,  361,  267,  531,  365,  531,  536,  537,
      536,  296,  532,  642,   97,  532,  533,  370,  533,  528,
      139,  146,  539,  529,  643,  643,  540,  542,  544,  258,
      544,  545,  146,  267,  636,  546,  666,  415,  542,  548,
      254,  548,  418,  549,  545,  267,  549,  400,  546,  544,
      258,  544,  545,  563,  267,  409,  546,  550,  420,  550,
      545,  569,  636,  666,  546,  538,  538,  139,  551,  539,
      538,  538,  637,  553,  538,  538,  538,  538,  538,  554,
      554,  538,  538,  538,  242,  656,  556,  413,  414,  413,

      557,  559,  247,  559,  560,  242,  415,  556,  561,   97,
      637,  557,  549,  267,  565,  404,  565,  566,  538,  538,
      538,  567,  407,  656,  560,   97,  664,  400,  561,  559,
      247,  559,  560,  563,   97,  577,  561,  570,  412,  570,
      560,  575,   97,   97,  561,  538,  538,  538,  139,  554,
      539,  538,  538,  664,  540,  538,  538,  538,  538,  538,
      554,  554,  538,  538,  538,  548,  254,  548,  571,  417,
      571,  576,  549,  727,  409,  549,  573,  574,  573,  576,
      569,  566,  262,  575,  583,  567,  643,   97,  584,  538,
      538,  538,  565,  404,  565,  566,   97,  643,  643,  567,

      578,  579,  578,  566,  580,  581,  580,  567,  699,  365,
      699,  569,  570,  412,  570,  560,  538,   97,   97,  561,
      571,  417,  571,  550,  420,  550,  545,  549,  269,   97,
      546,   97,  267,  269,  586,  587,  272,  587,  583,  586,
      688,  251,  584,  588,  431,  588,  587,  272,  587,  583,
      586,  663,  267,  584,  589,  151,  589,  583,  588,  431,
      588,  584,  274,  436,  591,  586,   97,  688,  592,  594,
      596,  440,  596,  597,  436,  267,  662,  598,  663,  604,
      594,  600,  601,  600,  603,  602,  597,   97,  602,  613,
      598,  596,  440,  596,  597,  614,   97,   97,  598,  605,

      606,  605,  597,  645,  662,   97,  598,  538,  607,  139,
      607,  539,  538,  538,  538,  540,  538,  538,  538,  538,
      538,  660,   97,  538,  538,  538,  446,  446,  610,  610,
      645,  789,  611,  611,  616,  617,  616,  618,  621,   97,
      622,  619,  644,  621,  623,  622,   97,   97,  660,  623,
      538,  538,  538,  538,  139,  139,  539,  539,  769,  789,
      540,  540,  139,  139,  539,  539,  267,  251,  540,  540,
      644,   97,  139,  139,  539,  539,  625,  538,  540,  540,
      139,  139,  539,  539,  267,  659,  540,  540,  624,  811,
      640,  626,  640,  464,  627,  464,   97,  629,  631,  638,

      628,  638,  632,   97,  625,  630,  467,  646,  467,  647,
       97,  641,  659,   97,   97,  624,  811,  648,  626,  649,
      652,  627,  465,   97,  466,  629,  631,  628,  654,  468,
      632,   97,   97,  630,  639,  646,   97,  647,  650,  641,
       97,  657,  653,  651,   97,  648,   97,  649,  652,  465,
       97,  466,  661,  658,   97,   97,  654,  468,   97,  667,
       97,  639,   97,   97,  673,  665,  650,  671,  670,  657,
      653,  651,   97,   97,  668,   97,  669,  672,   97,  215,
      661,  658,  675,  216,   97,  678,  667,  676,  267,   97,
      674,   97,  673,  665,  671,  677,  670,  680,  679,   97,

       97,  668,  681,  669,  672,   97,   97,  682,   97,  684,
      675,  683,   97,  678,  676,   97,   97,  674,  131,  604,
      691,  687,  604,  677,  692,  680,  679,  262,  685,  737,
      681,  269,  218,  686,  790,  682,  689,  684,  694,  683,
      696,  222,  696,  697,  218,  696,  222,  696,  697,  687,
      694,  700,  370,  700,  697,  685,  699,  365,  699,  603,
      686,  749,  790,  689,  701,  537,  701,  700,  370,  700,
      697,  534,  535,  534,  701,  537,  701,  139,  146,  703,
      711,  254,  711,  704,  706,  708,  258,  708,  709,  146,
      708,  258,  708,  709,  987,  706,  712,  420,  712,  709,

      711,  254,  711,  713,  417,  713,  712,  420,  712,  709,
      139,  714,  703,  242,  400,  718,  715,  269,  267,  719,
      724,  987,  716,  716,  721,  247,  721,  722,  139,  716,
      703,  242,  400,  718,  704,  267,  577,  719,  724,  409,
      716,  716,  726,  404,  726,  727,  721,  247,  721,  722,
      729,  412,  729,  722,  731,  574,  731,  726,  404,  726,
      727,  732,  579,  732,  727,  733,  581,  733,  729,  412,
      729,  722,  713,  417,  713,  731,  574,  731,  734,  735,
      734,  732,  579,  732,  727,  733,  581,  733,  739,  272,
      739,  737,  740,  431,  740,  739,  272,  739,  737,  740,

      431,  740,  741,  151,  741,  737,  274,  436,  743,  751,
      601,  751,  744,  746,  748,  440,  748,  749,  436,  748,
      440,  748,  749,  577,  746,  752,  606,  752,  749,  751,
      601,  751,  753,  754,  753,  752,  606,  752,  749,  702,
      755,  139,  755,  703,  702,  702,  702,  704,  702,  702,
      702,  702,  702,  791,  409,  702,  702,  702,  446,  446,
      758,  758,  613,   97,  759,  759,  415,  613,  761,  763,
      617,  763,  764,  761,  766,  767,  766,  768,  415,  764,
      818,  791,  702,  702,  702,  702,  763,  617,  763,  764,
      770,  771,  770,  764,  621,  776,  773,  640,  368,  640,

      774,  777,  779,  780,  779,  781,  621,  818,  773,  702,
      368,  621,  774,  773,  139,   97,  703,  774,  641,  139,
      704,  703,  139,   97,  703,  704,  801,  139,  704,  703,
      139,   97,  703,  704,   97,  782,  704,   97,  139,  621,
      703,  773,  800,  784,  704,  774,  641,   97,  638,  783,
      638,  810,  785,  786,  801,  804,  792,  788,  792,  797,
      787,  798,  794,  782,  794,   97,   97,  806,  802,   97,
      800,  784,  799,   97,  803,   97,  783,   97,  793,  810,
      785,  786,  804,  639,  805,  788,   97,  787,  795,  809,
       97,  808,   97,   97,  806,  813,  802,   97,  807,   97,

      815,   97,  803,  131,  817,  848,  793,  218,  814,  849,
      639,   97,  805,  851,  812,   97,  795,  809,  808,   97,
      816,   97,  820,  813,  819,  807,  821,   97,  815,   97,
      822,   97,  817,   97,  823,  814,   97,  825,  824,   97,
      828,  812,   97,   97,  826,   97,   97,  816,  827,  820,
       97,  829,  819,  821,  267,  830,   97,  831,  822,  836,
      833,  832,  823,   97,  825,  834,  824,   97,  828,   97,
      835,  837,  826,   97,   97,   97,  827,  846,  829,  988,
      251,  838,  830,  839,  842,  831,  836,  833,  832,  841,
       97,  840,  834,  429,  296,  843,  296,  845,  835,  837,

      853,  854,  853,  855,  846,  267,  988,  856,  838,  218,
      839,  844,  842,  267,  267,  851,  841,  267,  840,  858,
      859,  858,  368,  843,  845,  367,  860,  855,  860,  267,
      368,  856,  861,  222,  861,  855,  860,   97,  844,  856,
      862,  365,  862,  863,  370,  863,  855,  860, 1001,  146,
      856,  864,  537,  864,  139,  869,  866,  999,  860,  146,
      867,  871,  872,  871,  873,  869,  251,  415,  874,  876,
      877,  876,  418,  878,  873, 1001,  878,  415,  874,  879,
      258,  879,  873,  878,  999,  267,  874,  880,  254,  880,
      881,  420,  881,  873,  878,  375,  267,  874,  882,  417,

      882,  884,  885,  886,  296,  878,  296,  887,  889,  890,
      889,  891,  884,   97,  886,  874,  400,  242,  892,  894,
      997,  267,  897,  895,  899,  900,  899,  901,  407,  267,
      904,  902,  251,  409,  905,  906,  247,  906,  904,  908,
      400,   97,  905,  910,  911,  910,  897,  576,  997,  901,
      912,   97,  577,  902,  913,  404,  913,  901,  912,  409,
      991,  902,  991,   97,  577,  908,  914,  412,  914,  904,
      912, 1112,  993,  905,  915,  574,  915,  916,  579,  916,
      901,  912,   97,  992,  902,  917,  581,  917,  918,  735,
      918,  262,  908,  920,  269,  912,  269,  921, 1112,  993,

      923,   97,  923,  924,  272,  924,  920,  925,  431,  925,
      921,  992,  267,  429,  923,  926,  151,  926,  920,  274,
      436,  928,  921,  267,  267,  929,  931,  933,  934,  933,
      935,  436,  267,  251,  936,  267,  604,  931,  938,  939,
      938,  603,  940,  935, 1002,  940,  604,  936,  941,  440,
      941,  935,  940,  375,  267,  936,  942,  601,  942,  943,
      606,  943,  935,  940,  613,  613,  936,  944,  754,  944,
      951,  951, 1002,  251,  940,  865,  945,  139,  945,  866,
      865,  865,  865,  867,  865,  865,  865,  865,  865,  267,
      251,  865,  865,  865,  446,  446,  948,  948,  176, 1170,

      949,  949,  953,  954,  953,  955,  958,  959,  958,  956,
      768,  769,  955,  960,   97,  172,  956,  960,  865,  865,
      865,  865,  961,  617,  961,  955,  769, 1170, 1000,  956,
     1113,  267,  960,  962,  767,  962,  963,  771,  963,  955,
      960,  776,  621,  956,  965,  865,  251,  968,  966,  970,
      971,  970,  972,  776,   97, 1000,  973, 1113,  980,  968,
      975,  976,  975,  978,  977,  972,  129,  977,   97,  973,
      979,  780,  979,  972,  139,  994,  866,  973,   97,  621,
      867,  965,  139,   97,  866,  966,  996,  139,  867,  866,
      139,   99,  866,  867,   97,   97,  867,  139,  989,  866,

      989,   97,  994,  867,  981,  139,  792,  866,  792,  998,
      794,  867,  794,   97,  996,  995, 1012,  983,   97,   97,
       97,  982,  986, 1006,  990,   97,  984,   97,  793,   97,
     1008,  981, 1003,  985,   97, 1004,  795,  998, 1005,  218,
     1010,   97,  995, 1012,  983,  851, 1007, 1009,  982,   97,
      986, 1006,  990,  984,   97, 1011,  793,   97, 1008, 1003,
      985, 1015, 1004, 1014,  795, 1005,   97,   97, 1010,   97,
       97,   97, 1017, 1007, 1009,   97, 1013,   97, 1020,   97,
       97,   97, 1011,   97,   97, 1016, 1018, 1019, 1022, 1015,
     1014, 1021,   97,   97,   97,  131, 1028,  848, 1024, 1023,

     1017,  849, 1025, 1013, 1027,   97, 1020,  176, 1030,   97,
     1029, 1026, 1016, 1018, 1019,  218, 1022,  367, 1021,  855,
     1031,  851,  368,  856, 1028, 1024, 1023,  368,  860, 1025,
      139, 1027,  866,  860,   97, 1030,  867, 1029, 1026, 1032,
     1033, 1032,  855, 1034, 1035, 1034,  856,  173, 1031,  146,
      860,  853,  854,  853,  855,  869, 1119, 1171,  856, 1036,
     1037, 1036,  855,  858,  859,  858,  856, 1038, 1039, 1038,
      860,  172,  129,   97,  860,  861,  222,  861,  855,  862,
      365,  862,  856, 1119,   97, 1171,  860,  863,  370,  863,
      855,  864,  537,  864,  856, 1116, 1272,  146,  860, 1040,

     1041, 1040,  873,  869,   90,  415,  874, 1042, 1043, 1042,
      418,  878,  873,   87,  878,  415,  874,  871,  872,  871,
      873,  878, 1122, 1116,  874, 1044, 1045, 1044,  873,  876,
      877,  876,  874, 1046, 1047, 1046,  878,   68,   66,   66,
      878,  879,  258,  879,  873,  880,  254,  880,  874, 1122,
       35, 1272,  878,  881,  420,  881,  873,  882,  417,  882,
      874,  884, 1272,  886,  878, 1049, 1061,  892,  884,  885,
      886, 1050,  878, 1272,  887, 1052, 1053, 1052, 1054, 1056,
     1272,  891, 1055, 1272, 1272,  874,  889,  890,  889,  891,
     1058, 1272, 1059,  874, 1272, 1272,  266, 1063, 1064, 1063,

     1065,  242,  400,  894, 1066, 1272, 1272,  895,  897, 1067,
     1068, 1067,  901,  400, 1272,   97,  902, 1272,  577,  897,
     1069, 1070, 1069,  576,  912,  901, 1128,  912,  409,  902,
      899,  900,  899,  901,  908, 1272, 1272,  902, 1071, 1072,
     1071,  901,  407, 1272,  904,  902, 1272,  409,  905, 1073,
     1074, 1073,  904,  908, 1128, 1272,  905,  906,  247,  906,
      904, 1075, 1076, 1075,  905,  577, 1272, 1272,  908, 1272,
       97,  912,  910,  911,  910, 1077, 1078, 1077, 1272,  912,
       97,  269,  912,  913,  404,  913,  901,  923,   97, 1120,
      902,  914,  412,  914,  904,  915,  574,  915,  905, 1132,

     1272, 1137,  912,  916,  579,  916,  901,  917,  581,  917,
      902,  918,  735,  918,  908,  262, 1120,  920,  912,   97,
      269,  921, 1079, 1080, 1079,  920,  923, 1132, 1137,  921,
     1081, 1082, 1081,  924,  272,  924,  920,  923, 1123, 1272,
      921,  925,  431,  925,  926,  151,  926,  920,  923,  436,
      274,  921,  928, 1272, 1272,  931,  929, 1083, 1084, 1083,
      935,  436,   97,   97,  936, 1123,  604,  931, 1085, 1086,
     1085,  603,  940,  935, 1272,  940,  604,  936,  933,  934,
      933,  935,  940, 1146, 1139,  936, 1087, 1088, 1087,  935,
      938,  939,  938,  936, 1089, 1090, 1089,  940, 1272, 1272,

     1272,  940,  941,  440,  941,  935,  942,  601,  942,  936,
     1146, 1139, 1200,  940,  943,  606,  943,  935,  944,  754,
      944,  936, 1272, 1175, 1272,  940,  865,  945,  139,  945,
      866,  865,  865,  865,  867,  865,  865,  865,  865,  865,
     1200, 1272,  865,  865,  865,  446,  446,  948,  948,  613,
     1175,  949,  949, 1272,  613,  951, 1091, 1092, 1091,  955,
      951, 1272,   97,  956, 1272, 1272, 1093, 1094, 1093,  865,
      865,  865,  865,  960,  768,   97,  955, 1124, 1118,  769,
      956,  953,  954,  953,  955,  960, 1272, 1272,  956,  769,
     1095, 1096, 1095,  955, 1272,  960,  865,  956,  958,  959,

      958, 1097, 1098, 1097, 1124,  960, 1118, 1272,  960,  961,
      617,  961,  955,  962,  767,  962,  956, 1272, 1272, 1272,
      960,  963,  771,  963,  955,  621,  776,  965,  956, 1272,
     1272,  966,  968, 1099, 1100, 1099,  972,  776, 1272, 1272,
      973, 1272,  980,  968, 1101, 1102, 1101,  978,  977,  972,
     1272,  977,  980,  973,  970,  971,  970,  972,  977,   97,
     1272,  973, 1103, 1104, 1103,  972,  975,  976,  975,  973,
     1105, 1106, 1105,  977, 1272, 1141, 1272,  977,  979,  780,
      979,  972,  139, 1272,  866,  973, 1272,  621,  867,  965,
      139,   97,  866,  966, 1121,  139,  867,  866,  139, 1272,

      866,  867, 1141,  139,  867,  866,  989,   97,  989,  867,
     1114,  991, 1114,  991, 1117,   97, 1107, 1049,   97, 1110,
       97, 1136, 1121, 1050, 1108, 1272, 1109, 1125,   97, 1126,
       97, 1111,  990, 1115,  992, 1127, 1129,   97,   97,   97,
       97,   97, 1117, 1107, 1130, 1133, 1135, 1110, 1134, 1136,
       97, 1108, 1131, 1109,   97, 1125, 1126, 1140, 1111,   97,
      990, 1115,  992, 1127, 1129, 1138,   97,   97,   97, 1272,
     1272, 1142, 1130, 1133, 1135, 1144, 1134,   97,   97, 1131,
       97, 1143,   97, 1149, 1147, 1140, 1154, 1145, 1054, 1148,
     1272, 1272, 1055, 1138, 1032, 1033, 1032,  855, 1142,   97,

     1174,  856, 1156, 1144, 1272, 1034, 1035, 1034, 1157, 1143,
     1149, 1147,  860, 1173, 1272, 1145, 1272, 1148, 1036, 1037,
     1036,  855, 1038, 1039, 1038,  856, 1201, 1174, 1272,  860,
     1040, 1041, 1040,  873, 1042, 1043, 1042,  874, 1272,   97,
     1173,  878, 1044, 1045, 1044,  873, 1046, 1047, 1046,  874,
     1151, 1152, 1151,  878, 1201, 1172, 1161, 1153, 1052, 1053,
     1052, 1054,  428, 1272,   97, 1055, 1158, 1159, 1158, 1054,
     1058, 1176, 1059, 1055, 1272, 1058,  266, 1059, 1058, 1061,
     1059,  266, 1172, 1165,  266,  878, 1164,   97, 1065, 1153,
     1179, 1165, 1066, 1063, 1064, 1063, 1065, 1153, 1272, 1176,

     1066, 1166, 1167, 1166, 1065,   97, 1272,   97, 1066, 1067,
     1068, 1067,  901, 1069, 1070, 1069,  902, 1272, 1179, 1156,
      912, 1071, 1072, 1071,  901, 1157, 1190, 1184,  902, 1073,
     1074, 1073,  904, 1075, 1076, 1075,  905, 1077, 1078, 1077,
      908, 1272, 1272, 1272,  912, 1079, 1080, 1079,  920, 1081,
     1082, 1081,  921, 1190, 1184, 1272,  923, 1083, 1084, 1083,
      935, 1085, 1086, 1085,  936, 1272, 1272, 1272,  940, 1087,
     1088, 1087,  935, 1089, 1090, 1089,  936, 1272, 1272, 1272,
      940, 1091, 1092, 1091,  955, 1093, 1094, 1093,  956, 1272,
     1272, 1272,  960, 1095, 1096, 1095,  955, 1097, 1098, 1097,

      956, 1272, 1272, 1272,  960, 1099, 1100, 1099,  972, 1101,
     1102, 1101,  973, 1272, 1272, 1272,  977, 1103, 1104, 1103,
      972, 1105, 1106, 1105,  973,  139,   97,  866,  977, 1180,
      621,  867,  965,  139,   97,  866,  966,   97,  621,  867,
      965,  621, 1178,  965,  966,   97,   97,  966, 1181, 1114,
     1168, 1114, 1177,   97,   97,   97, 1183, 1180, 1272,   97,
       97,   97, 1161, 1182,   97, 1188, 1189, 1205,  428, 1169,
     1178, 1191, 1115,   97, 1185, 1187, 1181, 1186, 1168, 1177,
     1192,   97, 1221, 1272, 1183, 1151, 1152, 1151, 1193,   97,
     1182, 1272, 1153, 1188, 1189, 1205, 1169,   97, 1272, 1191,

     1115, 1185, 1187,   97, 1186, 1194, 1195, 1194, 1192, 1221,
     1202,   97, 1153, 1196, 1197, 1196, 1193, 1272, 1203, 1206,
     1157, 1158, 1159, 1158, 1054, 1204,   97,   97, 1055, 1166,
     1167, 1166, 1065,  139,   97,  866, 1066, 1202,  139,  867,
      866, 1207,   97,   97,  867, 1203, 1206, 1209,   97,   97,
       97, 1222, 1204, 1208,   97, 1210,   97, 1211,   97, 1213,
       97, 1216, 1272, 1272, 1198, 1212,   97, 1214, 1207,  621,
     1215,  965, 1199, 1218, 1209,  966, 1225, 1219, 1222, 1217,
     1272, 1208, 1210,   97, 1211,   97, 1241, 1213, 1272, 1216,
     1223, 1198, 1212, 1272, 1214,   97,  139, 1215,  866, 1199,

       97, 1218,  867, 1225, 1219, 1228, 1217, 1194, 1195, 1194,
     1196, 1197, 1196, 1241, 1153,   97, 1224, 1157, 1223,   97,
       97, 1226, 1227,   97,   97,   97, 1220, 1229, 1230,   97,
     1231, 1232, 1228,   97,   97, 1234, 1233, 1272,   97,  621,
     1236,  965,   97, 1224, 1235,  966,   97,   97, 1226,   97,
     1227,   97,   97, 1220, 1244, 1229, 1230,   97, 1231, 1232,
     1237, 1240, 1234, 1243, 1233, 1248, 1245, 1249, 1236,   97,
       97, 1242, 1235, 1246,   97,   97,   97, 1261, 1247, 1257,
     1272,   97, 1244, 1250,   97,   97, 1251, 1237, 1240, 1253,
     1252, 1243, 1248, 1245, 1249, 1254,   97, 1258, 1242, 1262,

     1246, 1260, 1265, 1259, 1261, 1247, 1270, 1257,   97,   97,
     1266, 1250, 1267, 1251, 1263, 1264, 1253, 1252,   97, 1272,
     1268, 1271, 1272, 1254, 1258, 1269, 1262, 1272, 1260, 1272,
     1265, 1259, 1272, 1272, 1270, 1272, 1272, 1266, 1272, 1272,
     1267, 1272, 1263, 1264, 1272, 1272, 1272, 1268, 1272, 1271,
     1272, 1272, 1272, 1269,   33,   33,   33,   33,   33,   33,
       36,   36,   36,   36,   36,   36,   51,   51,   51,   51,
       51,   51,   55,   55,   55,   55,   55,   55,   59,   59,
       59,   59,   59,   59,   65,   65,   65,   65,   65,   65,
       67,   67,   67,   67,   67,   67,   69,   69,   69,   69,

       69,   69,   78,   78,   78,   78,   78,   78,   86,   86,
       86,   86,   86,   86,   89,   89,   89,   89,   89,   89,
       96,   96,  100, 1272,  100,  100,  128,  128,  128,  128,
      128,  128,  130,  130,  130,  130,  130,  130,  134,  134,
      134,  134,  134,  134,  142,  142,  142,  142,  142,  142,
      145,  145,  145,  145,  145,  145,  138,  138,  138,  138,
      138,  138,  149,  149,  149,  149,  149,  149,  177,  177,
      177,  177, 1272,  177,   98, 1272,   98,   99, 1272,   99,
      211,  211,  211,  211,  211,  211,  214,  214,  214,  214,
      214,  214,  217,  217,  217,  217,  217,  217,  220,  220,

      220,  220,  220,  220,  225,  225,  225,  225,  225,  225,
      228,  228,  228,  228,  228,  228,  232,  232,  232,  232,
      232,  232,  236,  236,  236,  236,  236,  236,  239,  239,
      239,  239,  239,  239,  241,  241,  241,  241,  241,  241,
      245,  245,  245,  245,  245,  245,  250,  250,  250,  250,
      250,  250,  252,  252,  252,  252,  252,  252,  256,  256,
      256,  256,  256,  256,  261,  261,  261,  261,  261,  261,
      266,  266,  266,  266,  266,  266,  268,  268,  268,  268,
      268,  268,  273,  273,  273,  273,  273,  273,  278,  278,
      278,  278,  278,  278,  349,  349,  349,  349,  349,  349,

      352,  352,  352,  352,  352,  352,  354,  354,  354,  354,
      354,  354,  358,  358,  358,  358,  358,  358,  363,  363,
      363,  363,  363,  363,  371,  371,  371,  371,  371,  371,
      376,  376,  376,  376,  376,  376,  379,  379,  379,  379,
      379,  379,  381,  381,  381,  381,  381,  381,  386,  386,
      386,  386,  386,  386,  389,  389,  389,  389,  389,  389,
      392,  392,  392,  392,  392,  392,  396,  396,  396,  396,
      396,  396,  399,  399,  399,  399,  399,  399,  402,  402,
      402,  402,  402,  402,  408,  408,  408,  408,  408,  408,
      421,  421,  421,  421,  421,  421,  424,  424,  424,  424,

      424,  424,  428,  428,  428,  428,  428,  428,  432,  432,
      432,  432,  432,  432,  435,  435,  435,  435,  435,  435,
      438,  438,  438,  438,  438,  438,  444,  444,  444,  444,
      444,  444,  445,  445,  445,  445,  445,  445,   96,   96,
      521,  521,  521,  521,  521,  521,  524,  524,  524,  524,
      524,  524,  526,  526,  526,  526,  526,  526,  530,  530,
      530,  530,  530,  530,  358,  358,  358,  358,  358,  358,
      371,  371,  371,  371,  371,  371,  538,  538,  538,  538,
      538,  538,  541,  541,  541,  541,  541,  541,  543,  543,
      543,  543,  543,  543,  547,  547,  547,  547,  547,  547,

      552,  552,  552,  552,  552,  552,  555,  555,  555,  555,
      555,  555,  558,  558,  558,  558,  558,  558,  562,  562,
      562,  562,  562,  562,  564,  564,  564,  564,  564,  564,
      568,  568,  568,  568,  568,  568,  572,  572,  572,  572,
      572,  572,  582,  582,  582,  582,  582,  582,  585,  585,
      585,  585,  585,  585,  590,  590,  590,  590,  590,  590,
      593,  593,  593,  593,  593,  593,  595,  595,  595,  595,
      595,  595,  599,  599,  599,  599,  599,  599,  608,  608,
      608,  608,  608,  608,  609,  609,  609,  609,  609,  609,
      214,  214,  214,  214,  214,  214,  612,  612,  612,  612,

      612,  612,  615,  615,  615,  615,  615,  615,  620,  620,
      620,  620,  620,  620,   96,   96,  690,  690,  690,  690,
      690,  690,  693,  693,  693,  693,  693,  693,  695,  695,
      695,  695,  695,  695,  698,  698,  698,  698,  698,  698,
      702,  702,  702,  702,  702,  702,  705,  705,  705,  705,
      705,  705,  707,  707,  707,  707,  707,  707,  710,  710,
      710,  710,  710,  710,  717,  717,  717,  717,  717,  717,
      720,  720,  720,  720,  720,  720,  723,  723,  723,  723,
      723,  723,  725,  725,  725,  725,  725,  725,  728,  728,
      728,  728,  728,  728,  730,  730,  730,  730,  730,  730,

      736,  736,  736,  736,  736,  736,  738,  738,  738,  738,
      738,  738,  742,  742,  742,  742,  742,  742,  745,  745,
      745,  745,  745,  745,  747,  747,  747,  747,  747,  747,
      750,  750,  750,  750,  750,  750,  756,  756,  756,  756,
      756,  756,  757,  757,  757,  757,  757,  757,  760,  760,
      760,  760,  760,  760,  762,  762,  762,  762,  762,  762,
      250,  250,  250,  250,  250,  250,  765,  765,  765,  765,
      765,  765,  772,  772,  772,  772,  772,  772,  214,  214,
      214,  214,  214,  214,  775,  775,  775,  775,  775,  775,
      778,  778,  778,  778,  778,  778,  796,  796,  796,  796,

      796,   96,   96,  847,  847,  847,  847,  847,  847,  850,
      850,  850,  850,  850,  850,  852,  852,  852,  852,  852,
      852,  857,  857,  857,  857,  857,  857,  865,  865,  865,
      865,  865,  865,  868,  868,  868,  868,  868,  868,  870,
      870,  870,  870,  870,  870,  875,  875,  875,  875,  875,
      875,  883,  883,  883,  883,  883,  883,  888,  888,  888,
      888,  888,  888,  893,  893,  893,  893,  893,  893,  896,
      896,  896,  896,  896,  896,  898,  898,  898,  898,  898,
      898,  903,  903,  903,  903,  903,  903,  907,  907,  907,
      907,  907,  907,  909,  909,  909,  909,  909,  909,  919,

      919,  919,  919,  919,  919,  922,  922,  922,  922,  922,
      922,  927,  927,  927,  927,  927,  927,  930,  930,  930,
      930,  930,  930,  932,  932,  932,  932,  932,  932,  937,
      937,  937,  937,  937,  937,  946,  946,  946,  946,  946,
      946,  947,  947,  947,  947,  947,  947,  950,  950,  950,
      950,  950,  950,  952,  952,  952,  952,  952,  952,  957,
      957,  957,  957,  957,  957,  266,  266,  266,  266,  266,
      266,  964,  964,  964,  964,  964,  964,  967,  967,  967,
      967,  967,  967,  969,  969,  969,  969,  969,  969,  250,
      250,  250,  250,  250,  250,  974,  974,  974,  974,  974,

      974,  865,  865,  865,  865,  865,  865,   96,   96,  847,
      847,  847,  847,  847,  847,  850,  850,  850,  850,  850,
      850,  852,  852,  852,  852,  852,  852,  857,  857,  857,
      857,  857,  857,  868,  868,  868,  868,  868,  868,  870,
      870,  870,  870,  870,  870,  875,  875,  875,  875,  875,
      875,  883,  883,  883,  883,  883,  883,  214,  214,  214,
      214,  214,  214, 1048, 1048, 1048, 1048, 1048, 1048, 1051,
     1051, 1051, 1051, 1051, 1051,  888,  888,  888,  888,  888,
      888, 1057, 1057, 1057, 1057, 1057, 1057, 1060, 1060, 1060,
     1060, 1060, 1060, 1062, 1062, 1062, 1062, 1062, 1062,  893,

      893,  893,  893,  893,  893,  896,  896,  896,  896,  896,
      896,  898,  898,  898,  898,  898,  898,  909,  909,  909,
      909,  909,  909,  903,  903,  903,  903,  903,  903,  907,
      907,  907,  907,  907,  907,  919,  919,  919,  919,  919,
      919,  922,  922,  922,  922,  922,  922,  927,  927,  927,
      927,  927,  927,  930,  930,  930,  930,  930,  930,  932,
      932,  932,  932,  932,  932,  937,  937,  937,  937,  937,
      937,  946,  946,  946,  946,  946,  946,  947,  947,  947,
      947,  947,  947,  950,  950,  950,  950,  950,  950,  952,
      952,  952,  952,  952,  952,  957,  957,  957,  957,  957,

      957,  964,  964,  964,  964,  964,  964,  967,  967,  967,
      967,  967,  967,  969,  969,  969,  969,  969,  969,  974,
      974,  974,  974,  974,  974,  865,  865,  865,  865,  865,
      865,   96,   96,  852,  852,  852,  852,  852,  852,  857,
      857,  857,  857,  857,  857,  870,  870,  870,  870,  870,
      870,  875,  875,  875,  875,  875,  875, 1048, 1048, 1048,
     1048, 1048, 1048,  250,  250,  250,  250,  250,  250, 1150,
     1150, 1150, 1150, 1150, 1150, 1051, 1051, 1051, 1051, 1051,
     1051, 1155, 1155, 1155, 1155, 1155, 1155, 1057, 1057, 1057,
     1057, 1057, 1057, 1160, 1160, 1160, 1160, 1160, 1160, 1060,

     1060, 1060, 1060, 1060, 1060, 1162, 1162, 1272, 1162, 1162,
     1162, 1062, 1062, 1062, 1062, 1062, 1062,  898,  898,  898,
      898,  898,  898,  909,  909,  909,  909,  909,  909,  903,
      903,  903,  903,  903,  903,  907,  907,  907,  907,  907,
      907,  919,  919,  919,  919,  919,  919,  922,  922,  922,
      922,  922,  922,  932,  932,  932,  932,  932,  932,  937,
      937,  937,  937,  937,  937,  952,  952,  952,  952,  952,
      952,  957,  957,  957,  957,  957,  957,  969,  969,  969,
      969,  969,  969,  974,  974,  974,  974,  974,  974,  865,
      865,  865,  865,  865,  865,  964,  964,  964,  964,  964,

      964,   96,   96,   27, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272
    } ;

static yyconst flex_int16_t yy_chk[5576] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    7,
        9,    8,   10, 1269,   11,   12,    7,    7,    8,    8,
       30,   11,   12,   21,   21,   21,   21,   32,   32,   11,
       12,   30,   30,    1,    1,    1,    1,   95,   95,   13,
       14,   26,   26,   26,   26, 1264,   13,   14,   36,   36,
     1259,    9,    9,   10,   10,   11,   12,  228,   36,  228,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       13,   14,   24,   15,   24,   15,   15,   15,   47,   38,

       15,   24,   69,   15,   69,   47,   72,   79,   69,   79,
       79,   24,   72,   38,    2,    2,    2,    2, 1258, 1252,
       70,   16,   70,   16,   16,   16,   70,  296,   16,  296,
       73,   16,   73,   47,   15,   91,   73,   91,   91,   24,
       38,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,   15,   16,   22,   22,   22,   22,   22,   76,  105,
       76,   50,  105,   22,   76,   74,   74,   74,   74, 1249,
       22,   50,   74,   22,   76,    3,    3,    3,    3,   16,
       40,   94,   41,   44,  100,  100,  176,  176,  176,  130,

      105,  130,   94,   94,  100,  130,   41,   40,   41,   50,
       44,   22,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,   37,   41,   40,   41,   37,   44,   42,  132,
      131,  136, 1248,   48,  131,  132,   45,  136,   46,   81,
       48,   81,   37,   43, 1244,   42,    4,    4,    4,    4,
       42,   43,  135,   45,   37,   48,  135,   46,   43,   43,
       46,   82,   81,   82,   82,   82, 1242,  106,   48,   37,
      106,  103,   42,    4,    5,  122, 1233,   42,   82,   43,
       45,   84,   48,   84,   46,   43,   43,   46,  103,  122,

       81,    5,    5,    5,    5,    5,    5,  101,  106,    5,
     1232,  139,    5,    5,   84,  139,    5,    5,    5,    5,
      214,  102,    5, 1231,  214,  103,  122,  101, 1230,    5,
        5,    5,    5,    5,    5, 1229, 1226,    5,   49,    5,
        5,  102,   84,    5,    5,    5,    5,  104,   49,    5,
       20,   20,   20,   20,  101,   49,   20,   83,  107,   20,
      112,   83,   20,   20,   49,  113,   20,  104,  102,   20,
       20,  111,  108,  107,  107,  164,   49,  111,  117,  112,
      242,  113,   49,  108,  242,   83,  109,  117,  120,   83,
      109,   49,  111,  111,  104,  109,  116,   20,   20,   39,

      107,  107,   39,  164,  118,  111,  112,  120,  113,   39,
      118,  108,  109,   39,  109,  117,   39,  116,   39,  111,
      111, 1224,  643,  109,  115,  133,  133,  133,  133,  134,
       39,  134,  133,  643,  120,  134,  119,   39,  118,  109,
       39,  109,  115,   39,  116,   39,   71,   71,   71,   71,
       71,   71,   71,  119,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  110,  123,  124,  121,  115,
      123,  121,  110,  121,  124,  127,  169, 1222,  141,  126,
      119,  138,  127,  138,  141,  110,  526,  138,  526,   71,
       71,   71,  137,  137,  137,  137, 1221,  126,  123,  121,

      110,  121,  124,  142,  169,  142, 1212,  145,  152,  142,
      127,  274,  110,  145,  152,  274,   71,   75,   75,   75,
       75,   75,   75,   75,  126,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,  143,  143,  143,  143,
      147,  147,  147,  143,  227,  227,  227,  147,  148,  148,
      148,  148,  149,  189,  149,  148,  171,  189,  149, 1211,
       75,   75,   75,  150,  150,  150,  150, 1203,  290,  181,
      150,  153,  153,  153,  153,  154,  181,  154,  153,  166,
      156,  154,  156,  166,  171,  189,  156,   75,   77,   77,
       77,   77,  157,  446,  157,   77,  290,  446,  157,  159,

      161,  159,  161,  161,  181,  159,   77,  166,  156,  157,
      174,  166,  174,  174,  156,  200,  168,   77,  168,  173,
       77,  173,   77,  157,  159,  162,  200,  162,  163,   77,
      163, 1193,  173,  173,   77,  156,  160,  157,  160, 1192,
      212,  156,  160,  168,   77,  168,  212,   77,  162,   77,
      157,  163,  159, 1191,  200,  160,   77,  140,  140,  140,
      140,  140,  140,  140,  178,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  162,  179,  165,  163,
      165,  165,  165,  160,  170,  178,  170,  180,  179,  192,
     1185,  288,  180, 1167,  179,  165,  192,  172, 1164,  172,

      140,  140,  140,  182,  211,  183,  211,  170,  184,  215,
      211,  217,  178, 1163, 1162,  215,  179,  217,  288,  172,
      180,  179,  182,  172,  192,  183,  184,  140,  144,  144,
      144,  144,  144,  144,  144,  170,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  172,  185,  182,
      188,  172,  183,  184,  190,  191,  196,  197,  303,  196,
      223,  292,  197,  303,  190,  186,  223,  188, 1161,  185,
      191,  144,  144,  144,  213,  213,  213,  213,  251,  251,
      251,  213,  216,  216,  216,  216,  186,  196,  292,  621,
      197,  303,  190,  621,  188,  187,  185,  191,  144,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  186,  187,  155,  155,  155,  158,  195,
      158,  194,  199,  187,  158,  203,  202,  225,  198,  199,
     1159,  202,  203,  225,  195,  202,  201,  204,  158, 1154,
      194,  187,  155,  155,  155,  155,  205,  158,  158,  208,
      198,  204,  360,  360,  360,  206, 1148,  199,  201,  202,
      203,  195,  206,  202,  209,  208,  158,  194,  205,  155,
      210,  209, 1145, 1144,  158,  158,  193,  198,  204,  193,
      193,  193,  193,  193,  193,  201,  207,  193, 1140,  210,
      206,  193,  208, 1137,  193,  205,  193,  193,  233,  209,

      193,  207, 1134,  306,  233,  207,  306,  193,  193,  193,
      193,  193,  193,  239, 1131,  193,  210, 1127,  193,  239,
      220,  193,  220,  193,  193, 1126,  220,  193,  207,  219,
      219,  219,  207,  289,  306,  243,  219,  221,  221,  221,
      221,  243,  289,  248,  221,  224,  224,  224,  224,  248,
     1120,  312,  224,  229,  229,  229,  229,  232,  543,  232,
      543,  289,  252,  232,  234,  234,  234,  234,  252,  289,
     1118,  234,  235,  235,  235,  235,  235,  235,  235,  312,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  236,  558,  236,  558,  301, 1117,  236,  237,  237,

      237,  237,  240,  240,  240,  237,  241,  259,  241,  240,
      304,  459,  241,  259,  301,  235,  235,  235,  244,  244,
      244,  244,  245,  304,  245,  244,  298, 1104,  245,  246,
      246,  246,  246,  253,  253,  253,  246,  298,  298,  459,
      253,  301,  235,  238,  238,  238,  238,  238,  238,  238,
      304,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  249,  249,  249,  249,  255,  255,  255,  249,
      256, 1100,  256,  255, 1096,  263,  256,  257,  257,  257,
      257,  263, 1092,  308,  257, 1088,  238,  238,  238,  260,
      260,  260,  260,  261, 1084,  261,  260,  308,  268,  261,

      264,  264,  264,  264,  268, 1080,  275,  264,  265,  265,
      265,  265,  275,  238, 1074,  265,  270,  270,  270,  271,
      271,  271,  271,  270,  308,  273,  271,  273,  311, 1072,
      305,  273,  276,  276,  276,  276,  305, 1068, 1064,  276,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277, 1061,  311,  277,  277,  277,  278,
      279,  278,  279,  313,  305,  278,  279,  281,  280,  281,
      280, 1053, 1049,  281,  280,  282,  284,  282,  284,  313,
     1045,  282,  284,  277,  277,  277,  277, 1041,  279,  280,
      285,  283,  285,  283,  302, 1037,  285,  283,  286,  309,

      286,  281,  309,  302,  286,  284,  313,  307,  284,  282,
      277,  295,  287,  295,  287,  279,  283,  280,  287,  293,
      294,  293,  294,  322,  297,  285,  297,  307,  281,  314,
      309,  302,  284,  286,  295,  284,  282,  297,  297,  322,
      287,  293,  310,  314,  283,  293,  315,  317,  316,  294,
      319,  294,  285,  310,  307,  316,  320,  315,  317,  318,
      286, 1033,  295,  321,  319,  323,  322,  287,  328,  293,
      314,  317,  325,  293,  332,  320,  294,  326,  294,  318,
      321,  310,  323,  316,  324,  315,  317,  323,  332,  325,
      327,  319,  324,  329,  328, 1021,  326,  327,  317,  334,

      324,  333,  320,  329,  330, 1020,  318,  321,  336,  323,
      335,  344,  327,  336,  323,  332,  325,  339,  334,  335,
      324,  328,  333,  326,  337,  327,  338,  324,  344,  335,
      330,  329,  342,  338,  460,  343,  339,  345,  337,  327,
      343,  336,  349, 1000,  349,  334,  347,  335,  349,  333,
      481,  342,  348,  347,  345,  344,  335,  330,  461,  348,
      350,  338,  460,  339,  347,  337,  350,  352,  343,  351,
      351,  351,  351,  352,  356,  999,  351,  481,  342,  358,
      356,  345,  353,  353,  353,  358,  461,  348,  354,  353,
      354,  978,  347,  363,  354,  355,  355,  355,  355,  363,

      971,  954,  355,  357,  357,  357,  357,  372,  372,  372,
      357,  361,  361,  361,  361,  364,  364,  364,  366,  366,
      366,  469,  364,  469,  493,  366,  369,  369,  369,  369,
      376,  377,  376,  369,  469,  469,  376,  377,  378,  378,
      378,  378,  379,  934,  462,  378,  493,  383,  379,  380,
      380,  380,  381,  383,  381,  900,  380,  390,  381,  382,
      382,  382,  382,  390,  872,  394,  382,  384,  384,  384,
      384,  394,  462,  493,  384,  385,  385,  385,  385,  385,
      385,  385,  463,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  386,  482,  386,  413,  413,  413,

      386,  387,  387,  387,  387,  389,  396,  389,  387,  490,
      463,  389,  396,  854,  391,  391,  391,  391,  385,  385,
      385,  391,  392,  482,  392,  841,  490,  399,  392,  393,
      393,  393,  393,  399,  836,  405,  393,  395,  395,  395,
      395,  405,  834,  831,  395,  385,  388,  388,  388,  388,
      388,  388,  388,  490,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  397,  397,  397,  398,  398,
      398,  564,  397,  564,  408,  398,  401,  401,  401,  402,
      408,  402,  421,  401,  421,  402,  470,  821,  421,  388,
      388,  388,  403,  403,  403,  403,  815,  470,  470,  403,

      406,  406,  406,  406,  410,  410,  410,  406,  525,  525,
      525,  410,  411,  411,  411,  411,  388,  807,  517,  411,
      416,  416,  416,  419,  419,  419,  419,  416,  422,  806,
      419,  489,  780,  424,  422,  423,  423,  423,  423,  424,
      517,  776,  423,  425,  425,  425,  426,  426,  426,  426,
      425,  489,  771,  426,  427,  427,  427,  427,  430,  430,
      430,  427,  432,  433,  432,  430,  488,  517,  432,  433,
      434,  434,  434,  434,  435,  768,  488,  434,  489,  441,
      435,  437,  437,  437,  438,  441,  438,  472,  437,  447,
      438,  439,  439,  439,  439,  447,  689,  678,  439,  442,

      442,  442,  442,  472,  488,  486,  442,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  486,  676,  443,  443,  443,  444,  445,  444,  445,
      472,  633,  444,  445,  448,  448,  448,  448,  449,  471,
      449,  448,  471,  450,  449,  450,  661,  645,  486,  450,
      443,  443,  443,  443,  451,  452,  451,  452,  618,  633,
      451,  452,  453,  454,  453,  454,  617,  613,  453,  454,
      471,  485,  455,  457,  455,  457,  452,  443,  455,  457,
      456,  458,  456,  458,  606,  485,  456,  458,  451,  656,
      466,  453,  466,  464,  454,  464,  473,  456,  457,  465,

      455,  465,  458,  474,  452,  456,  467,  473,  467,  474,
      475,  466,  485,  478,  476,  451,  656,  475,  453,  476,
      478,  454,  464,  480,  464,  456,  457,  455,  480,  467,
      458,  479,  477,  456,  465,  473,  483,  474,  477,  466,
      494,  483,  479,  477,  487,  475,  484,  476,  478,  464,
      499,  464,  487,  484,  491,  497,  480,  467,  495,  494,
      501,  465,  498,  500,  501,  491,  477,  499,  498,  483,
      479,  477,  502,  505,  495,  503,  497,  500,  507,  884,
      487,  484,  503,  884,  506,  507,  494,  505,  603,  509,
      502,  508,  501,  491,  499,  506,  498,  509,  508,  510,

      511,  495,  510,  497,  500,  512,  513,  511,  514,  513,
      503,  512,  515,  507,  505,  516,  519,  502,  521,  599,
      521,  516,  597,  506,  521,  509,  508,  582,  514,  582,
      510,  585,  522,  515,  636,  511,  519,  513,  522,  512,
      523,  523,  523,  523,  524,  527,  527,  527,  527,  516,
      524,  529,  529,  529,  529,  514,  531,  531,  531,  595,
      515,  595,  636,  519,  532,  532,  532,  533,  533,  533,
      533,  534,  534,  534,  536,  536,  536,  538,  539,  538,
      542,  542,  542,  538,  539,  540,  540,  540,  540,  541,
      544,  544,  544,  544,  789,  541,  546,  546,  546,  546,

      548,  548,  548,  549,  549,  549,  550,  550,  550,  550,
      551,  551,  551,  552,  556,  552,  551,  583,  579,  552,
      556,  789,  551,  551,  553,  553,  553,  553,  554,  554,
      554,  555,  562,  555,  554,  576,  572,  555,  562,  568,
      554,  554,  557,  557,  557,  557,  559,  559,  559,  559,
      561,  561,  561,  561,  563,  563,  563,  565,  565,  565,
      565,  567,  567,  567,  567,  569,  569,  569,  570,  570,
      570,  570,  571,  571,  571,  573,  573,  573,  575,  575,
      575,  578,  578,  578,  578,  580,  580,  580,  584,  584,
      584,  584,  586,  586,  586,  587,  587,  587,  587,  588,

      588,  588,  589,  589,  589,  589,  590,  591,  590,  594,
      594,  594,  590,  591,  592,  592,  592,  592,  593,  596,
      596,  596,  596,  566,  593,  598,  598,  598,  598,  600,
      600,  600,  602,  602,  602,  605,  605,  605,  605,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  637,  560,  607,  607,  607,  608,  609,
      608,  609,  610,  663,  608,  609,  547,  612,  610,  611,
      611,  611,  611,  612,  614,  614,  614,  615,  545,  615,
      663,  637,  607,  607,  607,  607,  616,  616,  616,  616,
      619,  619,  619,  619,  620,  622,  620,  640,  530,  640,

      620,  622,  623,  623,  623,  623,  624,  663,  624,  607,
      528,  625,  624,  625,  626,  520,  626,  625,  640,  627,
      626,  627,  628,  646,  628,  627,  646,  629,  628,  629,
      630,  504,  630,  629,  649,  626,  630,  644,  631,  632,
      631,  632,  644,  628,  631,  632,  640,  651,  638,  627,
      638,  655,  629,  630,  646,  649,  639,  631,  639,  642,
      630,  642,  641,  626,  641,  647,  648,  651,  647,  496,
      644,  628,  642,  652,  648,  653,  627,  650,  639,  655,
      629,  630,  649,  638,  650,  631,  654,  630,  641,  654,
      658,  653,  657,  659,  651,  658,  647,  662,  652,  660,

      659,  665,  648,  690,  662,  690,  639,  691,  658,  690,
      638,  666,  650,  691,  657,  670,  641,  654,  653,  664,
      660,  492,  665,  658,  664,  652,  666,  667,  659,  668,
      667,  669,  662,  672,  668,  658,  673,  670,  669,  671,
      672,  657,  675,  677,  671,  681,  679,  660,  671,  665,
      674,  673,  664,  666,  440,  673,  688,  674,  667,  681,
      677,  675,  668,  682,  670,  679,  669,  680,  672,  683,
      680,  682,  671,  685,  684,  687,  671,  688,  673,  791,
      436,  682,  673,  682,  685,  674,  681,  677,  675,  684,
      686,  683,  679,  428,  797,  686,  797,  687,  680,  682,

      692,  692,  692,  692,  688,  420,  791,  692,  682,  693,
      682,  686,  685,  418,  412,  693,  684,  407,  683,  694,
      694,  694,  697,  686,  687,  695,  694,  695,  697,  404,
      698,  695,  696,  696,  696,  696,  698,  808,  686,  696,
      699,  699,  699,  700,  700,  700,  700,  699,  810,  703,
      700,  701,  701,  701,  702,  703,  702,  808,  701,  705,
      702,  704,  704,  704,  704,  705,  400,  709,  704,  706,
      706,  706,  707,  709,  707,  810,  706,  710,  707,  708,
      708,  708,  708,  710,  808,  374,  708,  711,  711,  711,
      712,  712,  712,  712,  711,  371,  370,  712,  713,  713,

      713,  714,  714,  714,  798,  713,  798,  714,  715,  715,
      715,  715,  716,  804,  716,  715,  718,  717,  716,  717,
      804,  367,  718,  717,  719,  719,  719,  719,  720,  362,
      720,  719,  359,  722,  720,  721,  721,  721,  721,  722,
      723,  346,  721,  724,  724,  724,  723,  725,  804,  725,
      724,  800,  727,  725,  726,  726,  726,  726,  727,  728,
      795,  726,  795,  341,  730,  728,  729,  729,  729,  729,
      730,  987,  800,  729,  731,  731,  731,  732,  732,  732,
      732,  731,  340,  795,  732,  733,  733,  733,  734,  734,
      734,  736,  733,  736,  737,  734,  738,  736,  987,  800,

      737,  331,  738,  739,  739,  739,  739,  740,  740,  740,
      739,  795,  272,  267,  740,  741,  741,  741,  741,  742,
      743,  742,  741,  266,  262,  742,  743,  744,  744,  744,
      744,  745,  258,  250,  744,  247,  749,  745,  746,  746,
      746,  747,  749,  747,  811,  746,  750,  747,  748,  748,
      748,  748,  750,  231,  230,  748,  751,  751,  751,  752,
      752,  752,  752,  751,  758,  760,  752,  753,  753,  753,
      758,  760,  811,  226,  753,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  222,
      218,  755,  755,  755,  756,  757,  756,  757,  175, 1112,

      756,  757,  759,  759,  759,  759,  761,  761,  761,  759,
      762,  764,  762,  761,  809,  167,  762,  764,  755,  755,
      755,  755,  763,  763,  763,  763,  765, 1112,  809,  763,
      988,  151,  765,  766,  766,  766,  770,  770,  770,  770,
      766,  773,  772,  770,  772,  755,  146,  773,  772,  774,
      774,  774,  774,  775,  801,  809,  774,  988,  781,  775,
      777,  777,  777,  778,  781,  778,  128,  777,  125,  778,
      779,  779,  779,  779,  782,  801,  782,  779,  114,  783,
      782,  783,  784,  803,  784,  783,  803,  785,  784,  785,
      786,   98,  786,  785,  802,  823,  786,  787,  793,  787,

      793,  805,  801,  787,  782,  788,  792,  788,  792,  805,
      794,  788,  794,  812,  803,  802,  823,  785,  813,  814,
      816,  784,  788,  816,  793,  818,  786,  817,  792,  820,
      818,  782,  812,  787,  819,  813,  794,  805,  814,  848,
      820,  822,  802,  823,  785,  848,  817,  819,  784,  825,
      788,  816,  793,  786,  826,  822,  792,  824,  818,  812,
      787,  826,  813,  825,  794,  814,  827,  828,  820,  829,
      830,  832,  828,  817,  819,  833,  824,  837,  832,  838,
      839,  842,  822,  835,  844,  827,  829,  830,  835,  826,
      825,  833,  840,  843,  845,  847,  843,  847,  838,  837,

      828,  847,  839,  824,  842,   96,  832,   92,  845,  846,
      844,  840,  827,  829,  830,  850,  835,  852,  833,  852,
      846,  850,  855,  852,  843,  838,  837,  857,  855,  839,
      865,  842,  865,  857,  996,  845,  865,  844,  840,  849,
      849,  849,  849,  851,  851,  851,  849,   88,  846,  866,
      851,  853,  853,  853,  853,  866,  996, 1113,  853,  856,
      856,  856,  856,  858,  858,  858,  856,  860,  860,  860,
      858,   85,   67,   33,  860,  861,  861,  861,  861,  862,
      862,  862,  861,  996,  993, 1113,  862,  863,  863,  863,
      863,  864,  864,  864,  863,  993,   27,  868,  864,  867,

      867,  867,  867,  868,   25,  873,  867,  869,  869,  869,
      870,  873,  870,   23,  869,  875,  870,  871,  871,  871,
      871,  875, 1001,  993,  871,  874,  874,  874,  874,  876,
      876,  876,  874,  878,  878,  878,  876,   19,   18,   17,
      878,  879,  879,  879,  879,  880,  880,  880,  879, 1001,
        6,    0,  880,  881,  881,  881,  881,  882,  882,  882,
      881,  883,    0,  883,  882,  886,  891,  883,  885,  885,
      885,  886,  891,    0,  885,  887,  887,  887,  887,  888,
        0,  888,  887,    0,    0,  888,  889,  889,  889,  889,
      890,    0,  890,  889,    0,    0,  890,  892,  892,  892,

      892,  893,  894,  893,  892,    0,    0,  893,  894,  895,
      895,  895,  895,  896,    0, 1008,  895,    0,  901,  896,
      897,  897,  897,  898,  901,  898, 1008,  897,  904,  898,
      899,  899,  899,  899,  904,    0,    0,  899,  902,  902,
      902,  902,  903,    0,  903,  902,    0,  907,  903,  905,
      905,  905,  905,  907, 1008,    0,  905,  906,  906,  906,
      906,  908,  908,  908,  906,  909,    0,    0,  908,    0,
      997,  909,  910,  910,  910,  912,  912,  912,    0,  910,
     1017,  920,  912,  913,  913,  913,  913,  920, 1012,  997,
      913,  914,  914,  914,  914,  915,  915,  915,  914, 1012,

        0, 1017,  915,  916,  916,  916,  916,  917,  917,  917,
      916,  918,  918,  918,  917,  919,  997,  919,  918, 1003,
      922,  919,  921,  921,  921,  921,  922, 1012, 1017,  921,
      923,  923,  923,  924,  924,  924,  924,  923, 1003,    0,
      924,  925,  925,  925,  926,  926,  926,  926,  925,  928,
      927,  926,  927,    0,    0,  928,  927,  929,  929,  929,
      929,  930, 1019, 1028,  929, 1003,  935,  930,  931,  931,
      931,  932,  935,  932,    0,  931,  937,  932,  933,  933,
      933,  933,  937, 1028, 1019,  933,  936,  936,  936,  936,
      938,  938,  938,  936,  940,  940,  940,  938,    0,    0,

        0,  940,  941,  941,  941,  941,  942,  942,  942,  941,
     1028, 1019, 1170,  942,  943,  943,  943,  943,  944,  944,
      944,  943,    0, 1122,    0,  944,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
     1170,    0,  945,  945,  945,  946,  947,  946,  947,  948,
     1122,  946,  947,    0,  950,  948,  949,  949,  949,  949,
      950,    0, 1004,  949,    0,    0,  951,  951,  951,  945,
      945,  945,  945,  951,  952,  995,  952, 1004,  995,  955,
      952,  953,  953,  953,  953,  955,    0,    0,  953,  957,
      956,  956,  956,  956,    0,  957,  945,  956,  958,  958,

      958,  960,  960,  960, 1004,  958,  995,    0,  960,  961,
      961,  961,  961,  962,  962,  962,  961,    0,    0,    0,
      962,  963,  963,  963,  963,  964,  965,  964,  963,    0,
        0,  964,  965,  966,  966,  966,  966,  967,    0,    0,
      966,    0,  972,  967,  968,  968,  968,  969,  972,  969,
        0,  968,  974,  969,  970,  970,  970,  970,  974, 1023,
        0,  970,  973,  973,  973,  973,  975,  975,  975,  973,
      977,  977,  977,  975,    0, 1023,    0,  977,  979,  979,
      979,  979,  981,    0,  981,  979,    0,  982,  981,  982,
      983,  998,  983,  982,  998,  984,  983,  984,  985,    0,

      985,  984, 1023,  986,  985,  986,  989,  994,  989,  986,
      990,  991,  990,  991,  994, 1006,  981, 1048, 1016,  985,
     1005, 1016,  998, 1048,  983,    0,  984, 1005, 1007, 1006,
     1009,  986,  989,  990,  991, 1007, 1009, 1013, 1011, 1010,
     1015, 1014,  994,  981, 1010, 1013, 1015,  985, 1014, 1016,
     1022,  983, 1011,  984, 1024, 1005, 1006, 1022,  986, 1018,
      989,  990,  991, 1007, 1009, 1018, 1029, 1031, 1026,    0,
        0, 1024, 1010, 1013, 1015, 1026, 1014, 1025, 1121, 1011,
     1027, 1025, 1030, 1031, 1029, 1022, 1051, 1027, 1051, 1030,
        0,    0, 1051, 1018, 1032, 1032, 1032, 1032, 1024, 1119,

     1121, 1032, 1054, 1026,    0, 1034, 1034, 1034, 1054, 1025,
     1031, 1029, 1034, 1119,    0, 1027,    0, 1030, 1036, 1036,
     1036, 1036, 1038, 1038, 1038, 1036, 1171, 1121,    0, 1038,
     1040, 1040, 1040, 1040, 1042, 1042, 1042, 1040,    0, 1116,
     1119, 1042, 1044, 1044, 1044, 1044, 1046, 1046, 1046, 1044,
     1050, 1050, 1050, 1046, 1171, 1116, 1059, 1050, 1052, 1052,
     1052, 1052, 1059,    0, 1123, 1052, 1055, 1055, 1055, 1055,
     1056, 1123, 1056, 1055,    0, 1057, 1056, 1057, 1058, 1060,
     1058, 1057, 1116, 1065, 1058, 1060, 1062, 1128, 1062, 1065,
     1128, 1150, 1062, 1063, 1063, 1063, 1063, 1150,    0, 1123,

     1063, 1066, 1066, 1066, 1066, 1135,    0, 1143, 1066, 1067,
     1067, 1067, 1067, 1069, 1069, 1069, 1067,    0, 1128, 1155,
     1069, 1071, 1071, 1071, 1071, 1155, 1143, 1135, 1071, 1073,
     1073, 1073, 1073, 1075, 1075, 1075, 1073, 1077, 1077, 1077,
     1075,    0,    0,    0, 1077, 1079, 1079, 1079, 1079, 1081,
     1081, 1081, 1079, 1143, 1135,    0, 1081, 1083, 1083, 1083,
     1083, 1085, 1085, 1085, 1083,    0,    0,    0, 1085, 1087,
     1087, 1087, 1087, 1089, 1089, 1089, 1087,    0,    0,    0,
     1089, 1091, 1091, 1091, 1091, 1093, 1093, 1093, 1091,    0,
        0,    0, 1093, 1095, 1095, 1095, 1095, 1097, 1097, 1097,

     1095,    0,    0,    0, 1097, 1099, 1099, 1099, 1099, 1101,
     1101, 1101, 1099,    0,    0,    0, 1101, 1103, 1103, 1103,
     1103, 1105, 1105, 1105, 1103, 1107, 1129, 1107, 1105, 1129,
     1108, 1107, 1108, 1109, 1124, 1109, 1108, 1125, 1110, 1109,
     1110, 1111, 1125, 1111, 1110, 1130, 1132, 1111, 1130, 1114,
     1107, 1114, 1124, 1133, 1139, 1138, 1133, 1129,    0, 1136,
     1141, 1142, 1160, 1132, 1146, 1141, 1142, 1175, 1160, 1109,
     1125, 1146, 1114, 1147, 1136, 1139, 1130, 1138, 1107, 1124,
     1147, 1149, 1200,    0, 1133, 1151, 1151, 1151, 1149, 1172,
     1132,    0, 1151, 1141, 1142, 1175, 1109, 1173,    0, 1146,

     1114, 1136, 1139, 1176, 1138, 1153, 1153, 1153, 1147, 1200,
     1172, 1174, 1153, 1157, 1157, 1157, 1149,    0, 1173, 1176,
     1157, 1158, 1158, 1158, 1158, 1174, 1179, 1177, 1158, 1166,
     1166, 1166, 1166, 1168, 1180, 1168, 1166, 1172, 1169, 1168,
     1169, 1177, 1178, 1181, 1169, 1173, 1176, 1179, 1184, 1182,
     1187, 1201, 1174, 1178, 1183, 1180, 1186, 1181, 1188, 1183,
     1190, 1187,    0,    0, 1168, 1182, 1189, 1184, 1177, 1199,
     1186, 1199, 1169, 1189, 1179, 1199, 1205, 1190, 1201, 1188,
        0, 1178, 1180, 1202, 1181, 1208, 1225, 1183,    0, 1187,
     1202, 1168, 1182,    0, 1184, 1204, 1198, 1186, 1198, 1169,

     1206, 1189, 1198, 1205, 1190, 1208, 1188, 1194, 1194, 1194,
     1196, 1196, 1196, 1225, 1194, 1207, 1204, 1196, 1202, 1216,
     1209, 1206, 1207, 1213, 1214, 1210, 1198, 1209, 1210, 1215,
     1213, 1214, 1208, 1217, 1218, 1216, 1215,    0, 1219, 1220,
     1218, 1220, 1223, 1204, 1217, 1220, 1227, 1234, 1206, 1235,
     1207, 1236, 1228, 1198, 1234, 1209, 1210, 1237, 1213, 1214,
     1219, 1223, 1216, 1228, 1215, 1238, 1235, 1239, 1218, 1243,
     1246, 1227, 1217, 1236, 1245, 1240, 1250, 1255, 1237, 1250,
        0, 1251, 1234, 1240, 1247, 1254, 1243, 1219, 1223, 1246,
     1245, 1228, 1238, 1235, 1239, 1247, 1253, 1251, 1227, 1256,

     1236, 1254, 1261, 1253, 1255, 1237, 1265, 1250, 1260, 1257,
     1261, 1240, 1262, 1243, 1257, 1260, 1246, 1245, 1263,    0,
     1262, 1267,    0, 1247, 1251, 1263, 1256,    0, 1254,    0,
     1261, 1253,    0,    0, 1265,    0,    0, 1261,    0,    0,
     1262,    0, 1257, 1260,    0,    0,    0, 1262,    0, 1267,
        0,    0,    0, 1263, 1273, 1273, 1273, 1273, 1273, 1273,
     1274, 1274, 1274, 1274, 1274, 1274, 1275, 1275, 1275, 1275,
     1275, 1275, 1276, 1276, 1276, 1276, 1276, 1276, 1277, 1277,
     1277, 1277, 1277, 1277, 1278, 1278, 1278, 1278, 1278, 1278,
     1279, 1279, 1279, 1279, 1279, 1279, 1280, 1280, 1280, 1280,

     1280, 1280, 1281, 1281, 1281, 1281, 1281, 1281, 1282, 1282,
     1282, 1282, 1282, 1282, 1283, 1283, 1283, 1283, 1283, 1283,
     1284, 1284, 1285,    0, 1285, 1285, 1286, 1286, 1286, 1286,
     1286, 1286, 1287, 1287, 1287, 1287, 1287, 1287, 1288, 1288,
     1288, 1288, 1288, 1288, 1289, 1289, 1289, 1289, 1289, 1289,
     1290, 1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291, 1291,
     1291, 1291, 1292, 1292, 1292, 1292, 1292, 1292, 1293, 1293,
     1293, 1293,    0, 1293, 1294,    0, 1294, 1295,    0, 1295,
     1296, 1296, 1296, 1296, 1296, 1296, 1297, 1297, 1297, 1297,
     1297, 1297, 1298, 1298, 1298, 1298, 1298, 1298, 1299, 1299,

     1299, 1299, 1299, 1299, 1300, 1300, 1300, 1300, 1300, 1300,
     1301, 1301, 1301, 1301, 1301, 1301, 1302, 1302, 1302, 1302,
     1302, 1302, 1303, 1303, 1303, 1303, 1303, 1303, 1304, 1304,
     1304, 1304, 1304, 1304, 1305, 1305, 1305, 1305, 1305, 1305,
     1306, 1306, 1306, 1306, 1306, 1306, 1307, 1307, 1307, 1307,
     1307, 1307, 1308, 1308, 1308, 1308, 1308, 1308, 1309, 1309,
     1309, 1309, 1309, 1309, 1310, 1310, 1310, 1310, 1310, 1310,
     1311, 1311, 1311, 1311, 1311, 1311, 1312, 1312, 1312, 1312,
     1312, 1312, 1313, 1313, 1313, 1313, 1313, 1313, 1314, 1314,
     1314, 1314, 1314, 1314, 1315, 1315, 1315, 1315, 1315, 1315,

     1316, 1316, 1316, 1316, 1316, 1316, 1317, 1317, 1317, 1317,
     1317, 1317, 1318, 1318, 1318, 1318, 1318, 1318, 1319, 1319,
     1319, 1319, 1319, 1319, 1320, 1320, 1320, 1320, 1320, 1320,
     1321, 1321, 1321, 1321, 1321, 1321, 1322, 1322, 1322, 1322,
     1322, 1322, 1323, 1323, 1323, 1323, 1323, 1323, 1324, 1324,
     1324, 1324, 1324, 1324, 1325, 1325, 1325, 1325, 1325, 1325,
     1326, 1326, 1326, 1326, 1326, 1326, 1327, 1327, 1327, 1327,
     1327, 1327, 1328, 1328, 1328, 1328, 1328, 1328, 1329, 1329,
     1329, 1329, 1329, 1329, 1330, 1330, 1330, 1330, 1330, 1330,
     1331, 1331, 1331, 1331, 1331, 1331, 1332, 1332, 1332, 1332,

     1332, 1332, 1333, 1333, 1333, 1333, 1333, 1333, 1334, 1334,
     1334, 1334, 1334, 1334, 1335, 1335, 1335, 1335, 1335, 1335,
     1336, 1336, 1336, 1336, 1336, 1336, 1337, 1337, 1337, 1337,
     1337, 1337, 1338, 1338, 1338, 1338, 1338, 1338, 1339, 1339,
     1340, 1340, 1340, 1340, 1340, 1340, 1341, 1341, 1341, 1341,
     1341, 1341, 1342, 1342, 1342, 1342, 1342, 1342, 1343, 1343,
     1343, 1343, 1343, 1343, 1344, 1344, 1344, 1344, 1344, 1344,
     1345, 1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346,
     1346, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1348, 1348,
     1348, 1348, 1348, 1348, 1349, 1349, 1349, 1349, 1349, 1349,

     1350, 1350, 1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351,
     1351, 1351, 1352, 1352, 1352, 1352, 1352, 1352, 1353, 1353,
     1353, 1353, 1353, 1353, 1354, 1354, 1354, 1354, 1354, 1354,
     1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356,
     1356, 1356, 1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358,
     1358, 1358, 1358, 1358, 1359, 1359, 1359, 1359, 1359, 1359,
     1360, 1360, 1360, 1360, 1360, 1360, 1361, 1361, 1361, 1361,
     1361, 1361, 1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363,
     1363, 1363, 1363, 1363, 1364, 1364, 1364, 1364, 1364, 1364,
     1365, 1365, 1365, 1365, 1365, 1365, 1366, 1366, 1366, 1366,

     1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367, 1368, 1368,
     1368, 1368, 1368, 1368, 1369, 1369, 1370, 1370, 1370, 1370,
     1370, 1370, 1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372,
     1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373, 1373, 1373,
     1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375, 1375,
     1375, 1375, 1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377,
     1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378, 1378, 1378,
     1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380,
     1380, 1380, 1381, 1381, 1381, 1381, 1381, 1381, 1382, 1382,
     1382, 1382, 1382, 1382, 1383, 1383, 1383, 1383, 1383, 1383,

     1384, 1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385, 1385,
     1385, 1385, 1386, 1386, 1386, 1386, 1386, 1386, 1387, 1387,
     1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388, 1388, 1388,
     1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390, 1390, 1390,
     1390, 1390, 1391, 1391, 1391, 1391, 1391, 1391, 1392, 1392,
     1392, 1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393, 1393,
     1394, 1394, 1394, 1394, 1394, 1394, 1395, 1395, 1395, 1395,
     1395, 1395, 1396, 1396, 1396, 1396, 1396, 1396, 1397, 1397,
     1397, 1397, 1397, 1397, 1398, 1398, 1398, 1398, 1398, 1398,
     1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400, 1400, 1400,

     1400, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402, 1403,
     1403, 1403, 1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404,
     1404, 1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406,
     1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1407, 1408,
     1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409,
     1409, 1410, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411,
     1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412, 1413,
     1413, 1413, 1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414,
     1414, 1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416,
     1416, 1416, 1416, 1417, 1417, 1417, 1417, 1417, 1417, 1418,

     1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419,
     1419, 1420, 1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421,
     1421, 1421, 1421, 1422, 1422, 1422, 1422, 1422, 1422, 1423,
     1423, 1423, 1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424,
     1424, 1425, 1425, 1425, 1425, 1425, 1425, 1426, 1426, 1426,
     1426, 1426, 1426, 1427, 1427, 1427, 1427, 1427, 1427, 1428,
     1428, 1428, 1428, 1428, 1428, 1429, 1429, 1429, 1429, 1429,
     1429, 1430, 1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431,
     1431, 1431, 1431, 1432, 1432, 1432, 1432, 1432, 1432, 1433,
     1433, 1433, 1433, 1433, 1433, 1434, 1434, 1434, 1434, 1434,

     1434, 1435, 1435, 1435, 1435, 1435, 1435, 1436, 1436, 1437,
     1437, 1437, 1437, 1437, 1437, 1438, 1438, 1438, 1438, 1438,
     1438, 1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440,
     1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441, 1441, 1442,
     1442, 1442, 1442, 1442, 1442, 1443, 1443, 1443, 1443, 1443,
     1443, 1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445,
     1445, 1445, 1445, 1446, 1446, 1446, 1446, 1446, 1446, 1447,
     1447, 1447, 1447, 1447, 1447, 1448, 1448, 1448, 1448, 1448,
     1448, 1449, 1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450,
     1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451, 1451, 1452,

     1452, 1452, 1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453,
     1453, 1454, 1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455,
     1455, 1455, 1455, 1456, 1456, 1456, 1456, 1456, 1456, 1457,
     1457, 1457, 1457, 1457, 1457, 1458, 1458, 1458, 1458, 1458,
     1458, 1459, 1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460,
     1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461, 1461, 1462,
     1462, 1462, 1462, 1462, 1462, 1463, 1463, 1463, 1463, 1463,
     1463, 1464, 1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465,
     1465, 1465, 1465, 1466, 1466, 1466, 1466, 1466, 1466, 1467,
     1467, 1467, 1467, 1467, 1467, 1468, 1468, 1468, 1468, 1468,

     1468, 1469, 1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470,
     1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471, 1471, 1472,
     1472, 1472, 1472, 1472, 1472, 1473, 1473, 1473, 1473, 1473,
     1473, 1474, 1474, 1475, 1475, 1475, 1475, 1475, 1475, 1476,
     1476, 1476, 1476, 1476, 1476, 1477, 1477, 1477, 1477, 1477,
     1477, 1478, 1478, 1478, 1478, 1478, 1478, 1479, 1479, 1479,
     1479, 1479, 1479, 1480, 1480, 1480, 1480, 1480, 1480, 1481,
     1481, 1481, 1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482,
     1482, 1483, 1483, 1483, 1483, 1483, 1483, 1484, 1484, 1484,
     1484, 1484, 1484, 1485, 1485, 1485, 1485, 1485, 1485, 1486,

     1486, 1486, 1486, 1486, 1486, 1487, 1487,    0, 1487, 1487,
     1487, 1488, 1488, 1488, 1488, 1488, 1488, 1489, 1489, 1489,
     1489, 1489, 1489, 1490, 1490, 1490, 1490, 1490, 1490, 1491,
     1491, 1491, 1491, 1491, 1491, 1492, 1492, 1492, 1492, 1492,
     1492, 1493, 1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494,
     1494, 1494, 1494, 1495, 1495, 1495, 1495, 1495, 1495, 1496,
     1496, 1496, 1496, 1496, 1496, 1497, 1497, 1497, 1497, 1497,
     1497, 1498, 1498, 1498, 1498, 1498, 1498, 1499, 1499, 1499,
     1499, 1499, 1499, 1500, 1500, 1500, 1500, 1500, 1500, 1501,
     1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502, 1502, 1502,

     1502, 1503, 1503, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;




//  following are keywords starting with c
#line 2189 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10
#define state_scanompfixed 11
#define state_scanompfree 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 31 "lexer.l"


#line 2425 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1273 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5504 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 33 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 52 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 53 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 58 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 79 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 87 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 102 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 103 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 106 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 118 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 122 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 123 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 105:
#line 221 "lexer.l"
case 106:
/* rule 106 can match eol */
#line 222 "lexer.l"
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 222 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 225 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 226 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 110:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 229 "lexer.l"
case 111:
YY_RULE_SETUP
#line 230 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 233 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 234 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 114:
YY_RULE_SETUP
#line 237 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 240 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 243 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 246 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 249 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 254 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 259 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 262 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 265 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 268 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 271 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 275 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 278 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 281 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 284 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 287 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 291 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 292 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 132:
YY_RULE_SETUP
#line 295 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 133:
/* rule 133 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 319 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 325 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 331 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 338 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 345 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 347 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 348 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 350 "lexer.l"
ECHO;
	YY_BREAK
#line 3359 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_scanfixpre):
case YY_STATE_EOF(state_scanompfixed):
case YY_STATE_EOF(state_scanompfree):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1273 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1273 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1272);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 350 "lexer.l"



void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


