#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1283] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  143,  141,  140,  141,
      137,  136,  141,  138,  139,   16,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
        4,    5,    2,    3,    8,    9,    6,    7,   15,   14,
       10,   12,   11,   13,    1,  142,  142,  106,  142,  106,
      142,  142,  142,  142,  142,  142,  142,  133,  133,  132,
      133,  133,  122,  133,  133,  111,  110,  111,  115,  114,
      115,  115,  134,    0,  136,    0,    0,   16,   17,   16,

        0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
        0,    0,    0,   69,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   87,    0,    0,    0,  106,    0,
       94,    0,    0,    0,   94,    0,    0,    0,  106,    0,
        0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  122,    0,    0,    0,    0,
        0,  127,  109,    0,    0,    0,  135,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   34,    0,    0,    0,
        0,    0,   50,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   94,    0,    0,
        0,   94,    0,    0,    0,   94,    0,    0,    0,   94,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   95,    0,    0,    0,    0,   98,    0,    0,    0,
        0,    0,    0,   96,    0,    0,    0,   98,    0,    0,
        0,   94,    0,    0,    0,    0,    0,    0,   94,    0,
        0,   94,    0,   93,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      123,    0,    0,    0,    0,  109,  109,    0,  113,  112,

        0,    0,    0,    0,   24,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   42,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   66,    0,    0,    0,    0,    0,    0,    0,    0,
       80,   81,    0,    0,    0,    0,   88,   89,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   96,
        0,    0,  100,    0,    0,   94,    0,   94,   94,    0,
       94,    0,    0,   94,   94,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       95,    0,    0,    0,   95,    0,    0,  101,    0,   96,
        0,    0,   98,    0,  100,   96,    0,   96,  106,    0,
       98,    0,    0,    0,    0,    0,    0,    0,    0,   96,
        0,   94,    0,    0,    0,    0,   93,    0,    0,    0,
       93,    0,    0,    0,    0,    0,  104,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  128,  109,
        0,    0,    0,    0,   21,    0,    0,    0,   28,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   49,    0,    0,    0,   54,    0,    0,

        0,    0,    0,    0,    0,    0,   65,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       90,    0,   92,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   96,    0,   94,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   95,    0,   95,   95,
        0,   95,    0,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   93,    0,   93,   93,    0,   93,    0,
        0,    0,    0,    0,    0,   96,    0,    0,    0,   98,
        0,    0,    0,  103,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  126,  125,    0,    0,
        0,    0,    0,    0,  107,  107,    0,   20,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   43,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       67,    0,   70,    0,    0,    0,   74,    0,    0,    0,
        0,    0,    0,   91,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   93,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   96,  104,   96,    0,   98,    0,    0,    0,    0,
       96,    0,    0,    0,   98,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  124,    0,    0,  130,    0,    0,

      108,  108,  107,  107,    0,    0,    0,    0,    0,    0,
        0,   29,   30,    0,    0,    0,    0,    0,    0,    0,
       37,    0,    0,    0,    0,    0,   51,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   62,   63,    0,    0,
       71,    0,   73,    0,    0,    0,    0,   79,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       94,    0,    0,    0,    0,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  100,    0,
        0,    0,    0,   96,    0,    0,    0,    0,    0,    0,
      105,    0,    0,    0,    0,    0,   97,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   95,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   95,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       93,    0,    0,    0,    0,   93,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      100,    0,    0,    0,    0,   96,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  100,    0,    0,
        0,    0,   96,    0,  103,    0,   96,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,

        0,    0,    0,    0,    0,    0,   31,   32,    0,   38,
        0,    0,    0,    0,    0,    0,   46,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   64,   68,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       94,    0,   94,    0,   94,    0,   94,    0,   99,    0,
       96,    0,   99,    0,   96,    0,   96,    0,    0,    0,
       99,    0,    0,   97,    0,   97,    0,    0,   96,    0,
        0,   99,    0,    0,    0,   95,    0,   95,    0,   95,
        0,   99,    0,   96,    0,   95,    0,   94,    0,   94,
        0,   93,    0,   93,    0,   93,    0,   93,    0,   99,

        0,   96,    0,   99,    0,   96,    0,   99,    0,   96,
        0,   99,    0,   96,    0,    0,    0,    0,    0,    0,
        0,    0,  131,    0,   19,   22,    0,    0,   25,    0,
        0,    0,    0,    0,   41,   44,    0,    0,    0,   52,
        0,    0,   56,    0,    0,   59,    0,    0,   72,    0,
        0,    0,   78,   82,    0,    0,   85,    0,    0,    0,
       96,    0,  102,    0,   96,    0,    0,   99,    0,   96,
        0,   97,  105,   96,    0,   99,    0,    0,    0,    0,
        0,    0,   27,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   58,    0,    0,    0,    0,    0,

       83,   84,   86,    0,   96,    0,   96,    0,    0,    0,
        0,    0,   23,    0,    0,    0,    0,    0,    0,    0,
       48,   53,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   26,    0,   35,    0,    0,   45,   47,
       55,   57,   61,    0,    0,    0,    0,  120,  121,    0,
       36,   39,    0,   60,    0,    0,    0,    0,    0,    0,
        0,   77,    0,    0,    0,    0,    0,   40,   75,    0,
        0,    0,    0,   76,    0,  116,    0,  117,   18,  118,
      119,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,   14,    1,    1,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
       18,    1,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       29,   36,   37,   38,   39,   40,   41,   42,   43,   29,
       44,    1,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   29,   57,   58,   59,   60,
       61,   62,   29,   63,   64,   65,   66,   67,   68,   69,
       70,   29,    1,   71,    1,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    1,    4,    4,    5,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    6,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1
    } ;

static yyconst flex_uint16_t yy_base[1514] =
    {   0,
        0,   71,  142,  213,  282, 3112,   17,   19,   18,   20,
       22,   23,   47,   48,   91,  119, 3111, 3108, 3101,  348,
       32,  162, 3090,   90, 3079,   50, 3070, 5529, 5529,   27,
     5529,   23, 3052, 5529, 5529,   52,  216,   83,  383,  174,
      176,  222,  237,  177,  230,  232,   82,  227,  322,  155,
     5529, 5529, 5529, 5529, 5529, 5529, 5529, 5529, 5529, 5529,
     5529, 5529, 5529, 5529, 5529, 5529, 3065, 5529,  100,  118,
      446,  104,  128,  174,  517,  166,  587, 5529,  106, 5529,
      248,  270,  334,  290, 3025, 5529, 5529, 3028, 5529, 5529,
      134, 3002, 5529,  188,   33, 2978,    0, 2940,    0,  188,

      291,  305,  265,  331,  153,  261,  342,  356,  374,  449,
      355,  344,  349, 2924,  408,  380,  362,  388,  420,  372,
      452,  269,  450,  451, 2917,  463,  459, 2926, 5529,  197,
      236,  237,  424,  427,  258,  239,  491,  479,  307,  657,
      476,  501,  535,  728,  505, 2809,  539,  547,  550,  562,
     2800,  506,  570,  573,  799,  578,  590,  816,  597,  634,
      599,  624,  627,  348,  677,  556, 2774,  586,  452,  683,
      529,  696,  618,  609, 2751,  195, 5529,  648,  661,  671,
      553,  690,  732,  692,  749,  750,  729,  759,  537,  767,
      739,  673,  860,  806,  809,  738,  740,  812,  807,  599,

      813,  810,  811,  816,  823,  841,  855,  840,  879,  854,
      701,  638,  930,  316,  696,  778,  709, 2745,  852,  756,
      938, 2737,  782,  946,  786, 2716,  543,   65,  902, 2712,
     2713,  918,  917,  954,  963,  980,  988, 1034,  927,  992,
      995,  376,  935, 1008, 1011, 1019, 2695,  943, 1052, 2672,
      712,  951, 1023, 5529, 1056, 1059, 1067, 2666,  996, 1079,
     1082, 2657, 1064, 1090, 1098, 2655, 2656, 1087, 5529, 1106,
     1109, 2646, 1114,  507, 1095, 1122, 1131, 1148, 1149, 1157,
     1156, 1164, 1180, 1165, 1179, 1187, 1201,  659, 1135,  546,
     5529,  869, 1209, 1210, 1201,  126, 1214, 1014, 5529, 5529,

      970, 1169, 1217,  985, 1105, 1221, 1202, 1198, 1058, 1225,
     1223,  927,  737, 1138, 1089, 1229, 1231, 1236, 1232, 1241,
     1246, 1254, 1243, 1261, 1264, 1257, 1269, 1277, 1290, 1281,
     1267, 2633, 1289, 1273, 1276, 1304, 1306, 1314, 1302, 1308,
     2623, 2622, 1317, 1324, 1318, 1331, 2611, 1340, 1338, 1361,
     1360, 1373, 1378, 1382, 1390, 1398, 1380, 1406, 1385, 2600,
     1402, 1414, 2585, 1411, 1419, 5529, 1422, 2551, 5529, 1430,
     2542, 2519, 1434, 5529, 2507, 5529, 1437, 1438, 1446, 1449,
     1457, 1459, 1467, 1454, 1475, 1484, 1501, 1509, 1555, 1512,
     1464, 1522, 1529, 1537, 1472, 1545, 1513, 1573, 1576, 1534,

     2444, 1584, 1586, 1600, 2447, 1542, 1608, 2437, 1581, 5529,
     1612, 1620, 2428, 1441, 5529, 5529, 1628, 5529, 2396, 1631,
     2364, 1589, 1635, 1643, 1640, 1651, 1654, 1662, 2322, 5529,
     1666, 5529, 1669, 1670, 1678, 1681, 2308, 1689, 1691, 1699,
     2240, 1686, 1707, 1716, 1733, 1734,  589, 1696, 1742, 1745,
     1750, 1761, 1762, 1769, 1770, 1779, 1787, 1780, 1788,  815,
      978, 1430, 1464, 1482, 1801, 1807, 1798, 1814, 5529, 1604,
     1635, 1732, 1396, 1789, 1690, 1796, 1802, 1777, 1824, 1805,
     1825, 1816, 1161, 1479, 1829, 1806, 1833, 1698, 1715, 1659,
     1624, 1502, 1845, 2212, 1838, 1846, 1839, 2207, 1848, 1851,

     1853, 1852, 1867, 1872, 1843, 1873, 2195, 1876, 1868, 1891,
     1894, 1878, 1902, 1904, 1889, 1906, 1900, 1910, 1912, 1913,
     5529, 1916, 2175, 1933, 1891, 1955, 1936, 1963,  484, 1966,
     2177, 1979, 2174, 1970, 1974, 1983, 1987, 5529, 1990, 5529,
     1946, 1938, 1993, 1996, 1998,  772, 2004, 2165, 2008, 2134,
     2012, 2015, 2018, 2021, 2024, 2036, 2039, 2042, 2025, 2054,
      981, 2058, 2047, 2062, 2043, 2066, 1346, 2069, 2032, 2073,
     1959, 2077, 2080, 2084, 1958, 2087, 5529, 2090, 1939, 5529,
     2093, 1927, 2097, 5529, 1356, 1895, 2100, 1873, 2104, 2107,
     2111, 2114, 2117, 2118, 2126, 2129, 2121, 1578, 2131, 1821,

     2137, 1792, 2141, 5529, 2144, 1771, 5529, 2147, 1764, 2152,
     2169, 2170, 2173, 2181, 2178, 1748, 2186, 2188, 2198, 1751,
     1703, 2202, 2205, 1772, 2206, 2214, 2217, 2222, 2225, 2230,
     2233, 2238, 2241, 2249, 2250, 1979, 5529, 5529, 1979, 2143,
     2260, 2268, 2209, 2274, 2271,  419, 2234, 1680, 2220, 2262,
     2263, 2231, 2266, 2274, 2244, 2270, 2272, 2286, 2243, 2163,
     2283, 2292, 2294, 2290, 1668, 2312, 2304, 2318, 2306, 2316,
     2330, 2334, 2328, 2320, 2340, 2336, 2341, 2344, 2346, 2355,
     1660, 2362, 1645, 2357, 2365, 2350, 2372, 2366, 2370, 2382,
     2389, 2375, 2378, 1625, 2310, 2412, 2442, 2419, 2446, 2421,

     2454, 2428, 2457, 2465, 2468, 2476, 2478, 2473, 2486, 2483,
     2494, 2496, 2504, 2491, 2501, 2512, 2515, 2523, 2525, 2533,
     2536, 2541, 2540, 2549, 2552, 2560, 2557, 2564, 2568, 2571,
     2579, 2576, 2583, 2591, 2588, 2599, 2602, 2610, 2613, 5529,
     2615, 2618, 2620, 2628, 2632, 2640, 2643, 2644, 2652, 2655,
     2663, 2665, 2673, 2660, 2670, 2681, 2684, 2692, 5529, 2701,
     2718, 2719, 2688, 2727, 2689, 2731, 2734, 2747, 2735, 2750,
     2758, 5529, 1623, 5529, 2761, 1622, 2766, 2765, 2774, 2777,
     1609, 2785, 2787, 2795, 1602, 2782, 2798, 2803, 2806, 2811,
     2814, 2821, 2829, 2402, 5529, 2442, 2831, 2823, 2835, 2585,

     5529, 2339, 2415, 5529, 2561, 2764, 2804, 2793, 2516, 2826,
     2506, 1580, 1579, 2447, 2724, 2509, 2388, 2663, 2811, 2823,
     1536, 2837, 2829, 2839, 2851, 2845, 1535, 2835, 2850, 2859,
     2853, 2873, 2877, 2881, 2865, 2883, 1527, 1506, 2885, 2879,
     1492, 2888, 1491, 2756, 2887, 2889, 2897, 1466, 2890, 2899,
     2903, 2901, 2907, 2940, 2918, 2949, 2933, 2962, 2965, 2973,
     1469, 2953, 2981, 2958, 2985, 5529, 2989, 2997, 3001, 3009,
     3013, 3016, 3017, 3025, 3028, 3036, 3038, 3046, 1460, 3033,
     3054, 3043, 3058, 5529, 3062, 3070, 3074, 3082, 3086, 3089,
     2044, 3096, 3093, 3104, 3107, 3115, 3118, 3094, 3126, 3129,

     3130, 3138, 3141, 3149, 3151, 3159, 1448, 3146, 3167, 3170,
     3156, 3178, 3186, 3175, 3190, 3193, 3201, 5529, 3204, 3212,
     3220, 3224, 3232, 3236, 3240, 3243, 3209, 3251, 3248, 3259,
     3262, 3270, 3273, 3278, 3277, 3286, 3289, 3297, 3299, 3307,
     1425, 3294, 3315, 3304, 3319, 5529, 3323, 3331, 3335, 3343,
     3347, 3356, 3373, 3374, 3377, 3385, 3382, 3395, 3402, 3410,
     1422, 3407, 3419, 3417, 3427, 5529, 3430, 3438, 3442, 3450,
     3453, 3454, 3462, 3465, 3473, 3475, 3483, 1407, 3470, 3491,
     3480, 3495, 5529, 3499, 1393, 3507, 5529, 3510, 3515, 3518,
     3523, 3526, 3531, 2560, 2719, 3535, 3539, 3540, 5529, 2952,

     2955, 3389, 3015, 3497, 3184, 3505, 1380, 1356, 2811, 5529,
     3233, 2964, 3534, 3521, 3542, 3129, 3537, 3550, 3539, 3202,
     3551, 3556, 3552, 3513, 3194, 3554, 3276, 1296, 1285, 3566,
     3375, 3564, 2444, 3578, 3582, 3016, 3579, 3592, 3568, 3608,
     1282, 3617, 5529, 3633, 1275, 3620, 5529, 3643, 1261, 3647,
     5529, 3655, 1251, 3659, 5529, 3624, 1222, 3663, 3666, 3674,
     1182, 3671, 3682, 3685, 3690, 3693, 3694, 3697, 1176, 3702,
     3710, 1159, 3701, 3718, 3726, 1141, 3730, 5529, 3738, 1125,
     3746, 1124, 3750, 5529, 3754, 5529, 3762, 1116, 3766, 5529,
     3774, 1092, 3778, 5529, 3786, 1081, 3790, 5529, 3798, 1072,

     3802, 5529, 3810, 1069, 3814, 5529, 3822, 1061, 3826, 5529,
     3834, 1058, 3838, 5529, 3841, 3846, 3849, 3854, 3857, 2811,
     3318, 3866, 5529, 3622, 1002,  954, 3623, 3816,  945, 3707,
     2961, 3684, 3836, 3839,  936,  928, 3847, 3856, 3857,  920,
     3848, 3863,  898, 3855, 3861,  882, 3862, 3864,  877, 3868,
     3886, 3653,  869,  836, 3720, 3875,  833, 3883, 3903, 3921,
     5529, 3929,  832, 3907, 5529, 3937, 3940,  829, 3944,  775,
      765,  760,  755, 5529, 3952,  706, 3955, 3960, 3325, 3559,
     3933, 3934,  677, 3917, 3693, 3935, 3942, 3949, 3945, 3950,
     3953, 3957, 3959, 3965,  674, 3961, 3974, 3968, 3962, 3970,

      637,  623,  615, 4018, 5529, 4032, 5529, 4020, 4034, 3272,
     3844, 4021,  551, 4009, 3854, 4023, 4025, 3995, 4027, 4035,
      543,  490, 4033, 4039, 4041, 4029, 4043, 4031, 4047, 4063,
      480,  461, 4058,  405, 3942,  320, 4050, 4053,  319,  312,
      307,  294,  270, 4052, 4061, 4067, 4070, 4055, 4061, 4085,
     5529,  260, 4080,  238, 4083, 4084, 4090,  229,  166, 4107,
     4098,  103, 4088, 4109, 4064, 4069, 4112,  102,   44, 4115,
     4103, 4112, 4127,   39, 4123, 5529, 4124, 5529,    7, 5529,
     5529, 5529, 4179, 4185, 4191, 4197, 4203, 4209, 4215, 4221,
     4227, 4233, 4239, 4242, 4246, 4251, 4257, 4263, 4269, 4275,

     4281, 4287, 4293, 4298, 4301, 4305, 4311, 4317, 4323, 4329,
     4335, 4341, 4347, 4353, 4359, 4365, 4371, 4377, 4383, 4389,
     4395, 4401, 4407, 4413, 4419, 4425, 4431, 4437, 4443, 4449,
     4455, 4461, 4467, 4473, 4479, 4485, 4491, 4497, 4503, 4509,
     4515, 4521, 4527, 4533, 4539, 4545, 4551, 4557, 4560, 4565,
     4571, 4577, 4583, 4589, 4595, 4601, 4607, 4613, 4619, 4625,
     4631, 4637, 4643, 4649, 4655, 4661, 4667, 4673, 4679, 4685,
     4691, 4697, 4703, 4709, 4715, 4721, 4727, 4733, 4736, 4741,
     4747, 4753, 4759, 4765, 4771, 4777, 4783, 4789, 4795, 4801,
     4807, 4813, 4819, 4825, 4831, 4837, 4843, 4849, 4855, 4861,

     4867, 4873, 4879, 4885, 4891, 4897, 4903, 4909, 4915, 4921,
     4923, 4928, 4934, 4940, 4946, 4952, 4958, 4964, 4970, 4976,
     4982, 4988, 4994, 5000, 5006, 5012, 5018, 5024, 5030, 5036,
     5042, 5048, 5054, 5060, 5066, 5072, 5078, 5084, 5090, 5096,
     5102, 5108, 5114, 5120, 5126, 5129, 5134, 5140, 5146, 5152,
     5158, 5164, 5170, 5176, 5182, 5188, 5194, 5200, 5206, 5212,
     5218, 5224, 5230, 5236, 5242, 5248, 5254, 5260, 5266, 5272,
     5278, 5284, 5290, 5296, 5302, 5308, 5314, 5320, 5326, 5332,
     5338, 5344, 5350, 5353, 5358, 5364, 5370, 5376, 5382, 5388,
     5394, 5400, 5406, 5412, 5418, 5424, 5430, 5436, 5442, 5448,

     5454, 5460, 5466, 5472, 5478, 5484, 5490, 5496, 5502, 5508,
     5514, 5520, 5523
    } ;

static yyconst flex_int16_t yy_def[1514] =
    {   0,
     1283, 1283, 1284, 1284,    2,    5, 1285, 1285, 1286, 1286,
     1287, 1287, 1287, 1287, 1287, 1287, 1288, 1288, 1289, 1290,
     1291, 1291, 1292, 1292, 1293, 1293, 1282, 1282, 1282, 1282,
     1282, 1282, 1294, 1282, 1282, 1295, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1296, 1282, 1297, 1298,
     1299, 1300, 1301, 1302, 1299, 1297, 1301, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1294, 1303, 1304, 1305, 1295,

     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1296, 1282, 1306,
     1307, 1308, 1309, 1298, 1307, 1310, 1311, 1312, 1307, 1313,
     1314, 1315, 1316, 1313, 1314, 1317, 1318, 1319, 1320, 1320,
     1321, 1322, 1320, 1323, 1324, 1312, 1312, 1312, 1312, 1312,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1282, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,

     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1325, 1326, 1327, 1307, 1328, 1321, 1326, 1317, 1329, 1327,
     1327, 1321, 1329, 1327, 1310, 1317, 1330, 1311, 1311, 1321,
     1330, 1331, 1332, 1333, 1334, 1335, 1336, 1334, 1332, 1337,
     1335, 1307, 1338, 1339, 1336, 1336, 1321, 1340, 1336, 1317,
     1282, 1337, 1337, 1282, 1337, 1333, 1333, 1321, 1337, 1333,
     1341, 1321, 1342, 1341, 1341, 1321, 1343, 1342, 1282, 1342,
     1341, 1321, 1344, 1307, 1345, 1346, 1347, 1348, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,

     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1282, 1282, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350,
     1351, 1352, 1351, 1353, 1352, 1352, 1353, 1352, 1354, 1317,
     1343, 1321, 1321, 1353, 1353, 1282, 1353, 1321, 1282, 1352,
     1321, 1355, 1355, 1282, 1321, 1282, 1356, 1357, 1358, 1357,
     1359, 1358, 1358, 1359, 1358, 1360, 1361, 1362, 1360, 1361,
     1363, 1364, 1362, 1362, 1365, 1362, 1359, 1359, 1359, 1363,

     1317, 1366, 1364, 1364, 1321, 1366, 1364, 1321, 1365, 1282,
     1365, 1362, 1321, 1282, 1282, 1282, 1359, 1282, 1321, 1358,
     1321, 1367, 1368, 1367, 1368, 1368, 1367, 1367, 1343, 1282,
     1368, 1282, 1369, 1370, 1371, 1370, 1317, 1372, 1371, 1371,
     1321, 1372, 1371, 1373, 1374, 1374, 1375, 1376, 1377, 1378,
     1378, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1282, 1282, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,

     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1282, 1379, 1379, 1380, 1381, 1382, 1381, 1383, 1382, 1382,
     1383, 1382, 1383, 1383, 1383, 1382, 1343, 1282, 1383, 1282,
     1384, 1385, 1386, 1385, 1387, 1386, 1386, 1387, 1386, 1387,
     1387, 1387, 1386, 1384, 1388, 1389, 1384, 1388, 1390, 1391,
     1389, 1389, 1392, 1389, 1390, 1393, 1391, 1391, 1393, 1391,
     1392, 1392, 1389, 1387, 1393, 1393, 1282, 1393, 1321, 1282,
     1391, 1321, 1392, 1282, 1394, 1395, 1394, 1395, 1395, 1394,
     1395, 1394, 1396, 1397, 1398, 1397, 1399, 1398, 1398, 1399,

     1398, 1399, 1399, 1282, 1399, 1321, 1282, 1398, 1321, 1400,
     1401, 1401, 1402, 1403, 1402, 1404, 1405, 1403, 1403, 1321,
     1405, 1403, 1406, 1407, 1408, 1409, 1406, 1406, 1384, 1384,
     1384, 1384, 1384, 1384, 1406, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1410, 1282, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1282, 1282,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1412, 1413, 1414, 1413, 1415, 1414,

     1414, 1415, 1415, 1415, 1414, 1415, 1416, 1417, 1418, 1417,
     1419, 1418, 1418, 1419, 1419, 1419, 1418, 1419, 1420, 1421,
     1420, 1422, 1423, 1424, 1425, 1425, 1426, 1423, 1427, 1424,
     1424, 1427, 1426, 1425, 1427, 1427, 1424, 1426, 1427, 1282,
     1428, 1429, 1429, 1428, 1429, 1428, 1430, 1431, 1432, 1431,
     1433, 1432, 1432, 1433, 1433, 1433, 1432, 1433, 1282, 1434,
     1435, 1435, 1436, 1437, 1436, 1438, 1437, 1437, 1438, 1438,
     1438, 1282, 1439, 1282, 1437, 1439, 1440, 1441, 1442, 1441,
     1443, 1444, 1442, 1442, 1439, 1444, 1445, 1440, 1445, 1445,
     1445, 1445, 1445, 1282, 1282, 1282, 1282, 1282, 1282, 1282,

     1282, 1282, 1282, 1282, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1282, 1282, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1447, 1448, 1449, 1448, 1450, 1449, 1449,
     1439, 1450, 1449, 1450, 1450, 1282, 1450, 1449, 1450, 1449,
     1450, 1445, 1451, 1452, 1451, 1453, 1452, 1452, 1439, 1453,
     1452, 1453, 1453, 1282, 1453, 1452, 1453, 1452, 1453, 1454,
     1455, 1454, 1456, 1457, 1458, 1458, 1459, 1460, 1461, 1462,

     1463, 1464, 1463, 1465, 1464, 1464, 1439, 1465, 1464, 1466,
     1467, 1466, 1466, 1467, 1467, 1465, 1465, 1282, 1465, 1464,
     1466, 1465, 1464, 1467, 1465, 1468, 1469, 1468, 1469, 1469,
     1468, 1469, 1468, 1470, 1471, 1472, 1471, 1473, 1472, 1472,
     1439, 1473, 1472, 1473, 1473, 1282, 1473, 1472, 1473, 1472,
     1473, 1474, 1475, 1475, 1476, 1477, 1476, 1478, 1477, 1477,
     1439, 1478, 1477, 1478, 1478, 1282, 1478, 1477, 1478, 1477,
     1479, 1480, 1481, 1480, 1482, 1481, 1481, 1439, 1482, 1481,
     1482, 1482, 1282, 1482, 1439, 1481, 1282, 1483, 1479, 1483,
     1483, 1483, 1483, 1282, 1282, 1282, 1282, 1282, 1282, 1484,

     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1282, 1282,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485,
     1439, 1486, 1282, 1485, 1439, 1486, 1282, 1487, 1439, 1488,
     1282, 1487, 1439, 1488, 1282, 1489, 1490, 1491, 1492, 1492,
     1439, 1493, 1492, 1494, 1494, 1494, 1495, 1496, 1497, 1498,
     1498, 1439, 1491, 1498, 1499, 1439, 1500, 1282, 1499, 1439,
     1501, 1439, 1502, 1282, 1500, 1282, 1503, 1439, 1504, 1282,
     1505, 1439, 1506, 1282, 1505, 1439, 1506, 1282, 1507, 1439,

     1508, 1282, 1507, 1439, 1508, 1282, 1509, 1439, 1510, 1282,
     1509, 1439, 1510, 1282, 1511, 1512, 1511, 1512, 1512, 1282,
     1282, 1282, 1282, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
     1282, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1491, 1491,
     1282, 1491, 1439, 1493, 1282, 1493, 1492, 1439, 1495, 1497,
     1497, 1497, 1439, 1282, 1498, 1439, 1511, 1511, 1282, 1282,
     1513, 1513, 1513, 1513, 1282, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,

     1513, 1513, 1513, 1491, 1282, 1493, 1282, 1511, 1512, 1282,
     1282, 1513, 1513, 1513, 1282, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1512,
     1282, 1282, 1513, 1513, 1282, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1282, 1282, 1513,
     1282, 1513, 1513, 1513, 1513, 1513, 1513, 1282, 1282, 1513,
     1513, 1513, 1513, 1513, 1282, 1282, 1513, 1513, 1513, 1513,
     1282, 1282, 1513, 1513, 1282, 1282, 1282, 1282, 1513, 1282,
     1282,    0, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,

     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,

     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,

     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282
    } ;

static yyconst flex_uint16_t yy_nxt[5601] =
    {   0,
       28,   28,   29,   30,   28,   28,   28,   28,   28,   31,
       28,   28,   28,   28,   32,   32,   28,   28,   28,   52,
       56,   52,   56,   97,   60,   60,   53,   54,   53,   54,
       93,   61,   61,   79,   80,   79,   81,   95,   95,   62,
       62,   94,   94,   34,   28,   28,   28,   95,   95,   60,
       60,   91,   90,   91,   92,   97,   61,   61,   98,   99,
       97,   57,   58,   57,   58,   63,   63,  375,   97,  231,
       28,   28,   28,   35,   30,   28,   28,   28,   28,   28,
       31,   28,   28,   28,   28,   32,   32,   28,   28,   28,
       63,   63,   87,   60,   88,   64,   64,   64,   97,   97,

       61,   88,  131,   64,  132,  121,  146,  161,  133,  161,
      162,   88,  147,  103,   34,   28,   28,   28,   97,   97,
      135,   60,  136,   64,   64,   64,  137,  296,   61,  296,
      139,   64,  141,  121,   63,  174,  148,  174,  175,   88,
      103,   28,   28,   28,   29,   30,   28,   28,   28,   28,
       28,   31,   28,   28,   28,   28,   32,   32,   28,   28,
       28,   64,   63,   82,   80,   82,   81,   83,  131,   97,
      132,   97,  182,   84,  133,  150,  151,  150,  152, 1266,
       85,  127,  153,   84,  154,   34,   28,   28,   28,   64,
       97,   93,   97,   97,   98,   99,  299,  300,  299,  131,

      182,  212,   94,   94,   97,  213,  110,  109,  111,  127,
      117,   84,   28,   28,   28,   35,   30,   28,   28,   28,
       28,   28,   31,   28,   28,   28,   28,   32,   32,   28,
       28,   28,   97,  110,  109,  111,  101,  117,   97,  218,
      215,  226, 1265,   97,  216,  219,   97,  227,   97,  163,
      122,  163,  102,   97,   97,  112,   34,   28,   28,   28,
      113,  114,  215,  118,  101,  123,  216,  119,  115,  116,
      120,  165,  164,  165,  162,  166,   97,   97,  122,  102,
      183,   97,  112,   28,   29,   97,   97,  113,  167,  114,
      118,  170,  123,  170,  119,  115,  116,  120,  180,  206,

      164,   37,   38,   39,   40,   41,   42,   97,  183,   43,
       97,  215,   44,   45,  171,  216,   46,   47,   48,   49,
      215,   97,   50,   97,  216,  180,  206,  178,   97,   37,
       38,   39,   40,   41,   42,   97,   97,   43,   97,   44,
       45,  179,  171,   46,   47,   48,   49,   97,  124,   50,
       70,   71,   72,   73,  178,  125,   74,  168,   97,   73,
       97,  169,   75,   75,  126,   97,   76,  181,  179,   77,
       73,   97,   97,  184,  185,  288,  124,  193,   97,  196,
      215,  197,  125,  186,  216,  168,  187,  200,   97,  169,
       97,  126,  194,  195,  181,  188,   97,   77,   73,   97,

      184,  185,  104,  288,   97,  193,  196,  203,  197,  105,
      201,  186,  189,  106,  190,  200,  107,  199,  108,  194,
      195,   97,  804,  188,   97,  221,  222,  221,  223,  135,
      104,  136,  224,  804,  203,  137,   97,  105,  201,  189,
      106,  190,  198,  107,  199,  108,  138,  138,  139,  140,
      141,  138,  138,  202,  143,  138,  138,  138,  138,  138,
      144,  144,  138,  138,  138,   97,   97,   97,   97,  198,
      207,  204,  191,  205,  208,   97,  291, 1249,  146,   97,
      202,  139,  210,  233,  240,  192,  368,  234,  702,  138,
      138,  138,  229,  230,  229,  231, 1248,  209,  207,  204,

      191,  205,  208,  242,  291,  243,   97,  146,  269,  244,
      210,  215,  192,  240,  270,  216,  138,  138,  138,  139,
      144,  141,  138,  138,  209,  148,  138,  138,  138,  138,
      138,  144,  144,  138,  138,  138,  246,  247,  246,  248,
      253,  254,  253,  249,  373,  374,  373,  255,  257,  258,
      257,  259,  262,   97,  263,  260,  292,  315,  264,   97,
      138,  138,  138,  265,  151,  265,  263,   97,  463,   97,
      264,  271,  272,  271,  263,  274,  305,  275,  264,  168,
      139,  276,  233,  169,  292,  315,  234,  138,  155,  139,
      155,  141,  139,  215,  233,  148,  463,  216,  234,  139,

      161,  233,  161,  162,  305,  234,  156,  168,  279,  281,
      174,  169,  174,  175,  280,   97,  289,  157,  290,  296,
      158,  297,  159,  282,  286,  163,  337,  163,  163,  160,
      163,   97,  298,  298,  156,  279,  139,  281,  233,   97,
      218,  280,  234,  289,  157,  290,  354,  158,  164,  159,
      282,  164,  286,   97,  337,  287,  160,  232,  232,  139,
      235,  233,  232,  232,   97,  237,  232,  232,  232,  232,
      232,  238,  238,  232,  232,  232,  164,   97,  165,  164,
      165,  162,  166,  287,  170,  301,  170,   97,  302,   97,
       97,  460,  304,   97,  303,  167,  318,  293,  360,  293,

      232,  232,  232,  131,  361,  351,   97,  171,   97,  352,
      267,  218,  301,  414,  415,  414,  302,  354,  460,  294,
      304,  303,  306,  295,  318,  307,  309,  232,  232,  232,
      139,  238,  233,  232,  232,  171,  234,  232,  232,  232,
      232,  232,  238,  238,  232,  232,  232,  294,   97,  306,
      312,  295,  307,  309,   97,   97,   97,  333,  368,  267,
      357,  334, 1172,  484,  358,   97,   97, 1172,  308,  313,
      317,  232,  232,  232,  419,   97,  714, 1172,  312,  362,
      363,  362,  267,   97,  369,  333,  310,  311,  226,  334,
      367,  484,  314,  316,  227,  308,  313,  317,  232,  232,

      277,  139,  277,  233,  232,  232,  232,  234,  232,  232,
      232,  232,  232,  310,  311,  232,  232,  232,  139,  314,
      233,  316,   97,   97,  234,   97,   97,   97,   97,   97,
      336,  339,   97,  267,  341,  340,  267,  636,  283,   97,
      332,  331,  232,  232,  232,  232,  342,  284,  285,   97,
      335,  338,   97,  365,  366,  365,   97,   97,  336,  339,
      367,  343,  341,  340,  344,  636,  283,  332,  331,  232,
       97,   97,  347,  342,  284,  285,   97,  335,  338,  319,
      320,  321,  322,  323,  324,   97,  345,  325,  343,  349,
      346,  326,  344,   97,  327,   97,  328,  329,   97,  347,

      330,  464,  348,  229,  230,  229,  231,  319,  320,  321,
      322,  323,  324,  345,   97,  325,  349,  346,  326,  146,
      139,  327,  378,  328,  329,  381,  379,  330,  464,  146,
      348,  356,  222,  356,  357,  381,   97,  401,  358,  356,
      222,  356,  357,  402,   97,  410,  358,  370,  371,  370,
      357,  411,   97,  416,  358,  383,  258,  383,  384,  399,
      483,   97,  385,  377,  377,  139,  386,  378,  377,  377,
       97,  388,  377,  377,  377,  377,  377,  389,  389,  377,
      377,  377,  242,  408,  391,  727,   97,  483,  392,  394,
      247,  394,  395,  398,  254,  398,  396,  242,  416,  391,

      399,   97,  637,  392,  399,  472,  377,  377,  377,  404,
      405,  404,  406,  408,  475,  395,  407,  471,   97,  396,
      394,  247,  394,  395,  398,  254,  398,  396,  471,  471,
      637,  399,  472,  377,  377,  377,  139,  389,  378,  377,
      377,  475,  379,  377,  377,  377,  377,  377,  389,  389,
      377,  377,  377,  412,  413,  412,  395,  417,  418,  417,
      396,  419,  267,  384,  399,  267,  269,  385,  383,  258,
      383,  384,  426,  267,   97,  385,  267,  377,  377,  377,
      420,  421,  420,  384,  262,  267,  423,  385,  480,  269,
      424,  427,  272,  427,  423,  426,  267,  437,  424,  428,

      151,  428,  423,  438,  377,   97,  424,  431,  432,  431,
      427,  272,  427,  423,  426,  480,  274,  424,  434,  486,
      267,   97,  435,  440,  441,  440,  442,  476,  267,  267,
      443,  377,  444,  139,  444,  378,  377,  377,  377,  379,
      377,  377,  377,  377,  377,  267,  486,  377,  377,  377,
      447,  139,  448,  378,   97,  476,  449,  379,  139,  139,
      378,  378,  461,  267,  379,  379,  139,  139,  378,  378,
      485,  462,  379,  379,  377,  377,  377,  377, 1172,  450,
      451,  139,  139,  378,  378,   97,  267,  379,  379,  139,
      461,  378,  452,  659,  473,  379,  455,  485,  462,  456,

      453,  377,  468,  139,  468,  378,  450,  454,  451,  379,
      293,  465,  293,  465,   97,  296,  457,  470,   97,  452,
      659,  478,  473,  455,  458,  469,  456,  453,  471,  471,
      251,  459,  294,   97,  479,  454,  295,   97,  474,   97,
      466,   97,  467,  457,  481,   97,  477,   97,   97,  478,
      482,  458,   97,  469,  488,  267,  487,   97,  459,   97,
      294,  479,   97,  489,  295,  267,  474,  466,  491,  467,
       97,  492,  481,   97,  477,  495,  490,   97,  482,  267,
       97,  493,  488,   97,  487,   97,  267,  494,  498,   97,
      500,  489,   97,   97,  496,  491,  499,   97,  492,  497,

      502,   97,  495,  490,  501,   97,   97,  506,  493,  507,
      509,  510,   97,  504,  494,  503,  498,  500,   97,  508,
       97,  496,   97,  499,   97,  515,  497,  513,  502,  511,
       97,  501,  505,   97,   97,  506,  507,  509,  510,  512,
       97,  504,  503,  516,  514,  518,  508,   97,  579,  521,
      732,  519,  517,  515,   97,  513,   97,  511,  262,  505,
      742,  523,  218,  131,  520,  525,  512,  522,  528,  526,
      516,  514,   97,  518,  530,  222,  530,  531,  519,  517,
      218,  532,  369,  534,  366,  534,  528,  360,  535,  523,
      535,  520,  368,  361,  531,  522,   97,  267,  532,  530,

      222,  530,  531,  537,  538,  537,  532,  536,  371,  536,
      531,  267,   97,  369,  532,  362,  363,  362,  267,  535,
      534,  366,  534,  539,  540,  539,  267,  535,  648,  267,
      535,  536,  371,  536,  531,  373,  374,  373,  532,  139,
      146,  542,  414,  415,  414,  543,  545,  547,  258,  547,
      548,  146,  267,  638,  549,  648,  416,  545,  551,  254,
      551,  419,  552,  548,  267,  552,  401,  549,  547,  258,
      547,  548,  566,  267,  410,  549,  553,  421,  553,  548,
      572,  638,   97,  549,  541,  541,  139,  554,  542,  541,
      541,  639,  556,  541,  541,  541,  541,  541,  557,  557,

      541,  541,  541,  242,  640,  559,  660,   97,   97,  560,
      562,  247,  562,  563,  242,  416,  559,  564,   97,  639,
      560,  552,   97,  568,  405,  568,  569,  541,  541,  541,
      570,  408,  640,  563,  660,  668,  401,  564,  562,  247,
      562,  563,  566,   97,  580,  564,  573,  413,  573,  563,
      578,   97,   97,  564,  541,  541,  541,  139,  557,  542,
      541,  541,  668,  543,  541,  541,  541,  541,  541,  557,
      557,  541,  541,  541,  551,  254,  551,  574,  418,  574,
      606,  552,  754,  410,  552,  576,  577,  576,  579,  572,
      569,  262,  578,  586,  570,   97,   97,  587,  541,  541,

      541,  568,  405,  568,  569,  296,  267,  645,  570,  581,
      582,  581,  569,  583,  584,  583,  570,  251,  646,  646,
      572,  573,  413,  573,  563,  541,  267,  267,  564,  574,
      418,  574,  553,  421,  553,  548,  552,  269,  646,  549,
       97,   97,  269,  589,  590,  272,  590,  586,  589,  646,
      646,  587,  591,  432,  591,  590,  272,  590,  586,  589,
      667,   97,  587,  592,  151,  592,  586,  591,  432,  591,
      587,  274,  437,  594,  589,   97,   97,  595,  597,  599,
      441,  599,  600,  437,   97,  666,  601,  667,  607,  597,
      603,  604,  603,  606,  605,  600,   97,  605,  616,  601,

      599,  441,  599,  600,  617,  774,   97,  601,  608,  609,
      608,  600,  650,  666,   97,  601,  541,  610,  139,  610,
      542,  541,  541,  541,  543,  541,  541,  541,  541,  541,
      664,   97,  541,  541,  541,  447,  447,  613,  613,  665,
      650,  614,  614,  619,  620,  619,  621,  624,   97,  625,
      622,  647,  624,  626,  625,  267,  251,  664,  626,  541,
      541,  541,  541,  139,  139,  542,  542,  665,  267,  543,
      543,  139,  139,  542,  542,  267,  215,  543,  543,  647,
      216,  139,  139,  542,  542,  628,  541,  543,  543,  139,
      139,  542,  542,   97,  607,  543,  543,  627,  653,  643,

      629,  643,  465,  630,  465,   97,  632,  634,  641,  631,
      641,  635,   97,  628,  633,  468,  649,  468,   97,  651,
      644,   97,   97,  607,  627,  652,  653,  629,  656,  662,
      630,  466,   97,  467,  632,  634,  631,  658,  469,  635,
       97,   97,  633,  642,  649,   97,  654,  651,  644,   97,
      661,  655,  657,  652,   97,   97,  656,  662,  466,   97,
      467,   97,   97,  663,   97,  658,  469,   97,   97,   97,
      642,  672,  669,  674,  654,  269,  670,  679,  661,  655,
      657,  671,  676,   97,   97,  673,  675,  677,   97,   97,
      663,  678,   97,  218,   97,  682,  680,  269,  672,  699,

      669,  674,  685,  670,  679,   97,  681,   97,  671,  676,
       97,  688,  673,  675,  683,  677,   97,  684,   97,  678,
       97,  686,   97,  682,  680,  689,   97,  687,   97,   97,
      685,  267,   97,  681,  692,  131,  690,  696,  218,  688,
      146,  697,  683,  267,  699,  684,  711,  691,  139,  686,
      708,  693,  694,  689,  709,  687,  701,  222,  701,  702,
      580,  410,  692,  690,  704,  366,  704,  701,  222,  701,
      702,  704,  366,  704,  691,  706,  540,  706,  693,  694,
      705,  371,  705,  702,  705,  371,  705,  702,  537,  538,
      537,  706,  540,  706,  713,  258,  713,  714,  146,  716,

      254,  716,  794,  795,  711,  713,  258,  713,  714,  717,
      421,  717,  714,  716,  254,  716,  718,  418,  718,  717,
      421,  717,  714,  139,  719,  708,  242,  401,  723,  720,
      794,  795,  724,  729,  580,  721,  721,  726,  247,  726,
      727,  139,  721,  708,  242,  401,  723,  709,  215,  410,
      724,  729,  216,  721,  721,  731,  405,  731,  732,  726,
      247,  726,  727,  734,  413,  734,  727,  736,  577,  736,
      731,  405,  731,  732,  737,  582,  737,  732,  738,  584,
      738,  734,  413,  734,  727,  718,  418,  718,  736,  577,
      736,  739,  740,  739,  737,  582,  737,  732,  738,  584,

      738,  744,  272,  744,  742,  745,  432,  745,  744,  272,
      744,  742,  745,  432,  745,  746,  151,  746,  742,  274,
      437,  748,  756,  604,  756,  749,  751,  753,  441,  753,
      754,  437,  753,  441,  753,  754,  416,  751,  757,  609,
      757,  754,  756,  604,  756,  758,  759,  758,  757,  609,
      757,  754,  707,  760,  139,  760,  708,  707,  707,  707,
      709,  707,  707,  707,  707,  707,  796,  416,  707,  707,
      707,  447,  447,  763,  763,  616,  369,  764,  764,  369,
      616,  766,  768,  620,  768,  769,  766,  771,  772,  771,
      773,   97,  769,  817,  796,  707,  707,  707,  707,  768,

      620,  768,  769,  775,  776,  775,  769,  624,  781,  778,
      643,   97,  643,  779,  782,  784,  785,  784,  786,  624,
      817,  778,  707,   97,  624,  779,  778,  139,   97,  708,
      779,  644,  139,  709,  708,  139,   97,  708,  709,  806,
      139,  709,  708,  139,  267,  708,  709,   97,  787,  709,
       97,  139,  624,  708,  778,  805,  789,  709,  779,  644,
       97,  641,  788,  641,  816,  790,  791,  806,  809,  797,
      793,  797,  802,  792,  803,  799,  787,  799,   97,   97,
      812,  807,   97,  805,  789,  804,   97,  808,   97,  788,
       97,  798,  816,  790,  791,  809,  642,  811,  793,   97,

      792,  800,   97,  810,  814,  815,   97,  812,   97,  807,
       97,  813,  131,  819,  855,  808,  251,  821,  856,  798,
       97,  818,   97,  642,  430,  811,  820,  822,   97,  800,
      810,  814,   97,  815,   97,  823,   97,  824,  813,  825,
      296,  819,  296,  826,   97,  821,   97,  827,  818,  828,
       97,  830,   97,  820,  822,  829,   97,   97,  831,  834,
       97,  832,   97,  823,  824,  833,   97,  825,  267,  838,
      826,   97,  835,   97,  827,  837,  836,  828,   97,  830,
      843,   97,   97,  829,  842,  831,   97,  834,   97,  832,
      839,   97,  841,  833,   97,  840,  844,  838,   97,  835,

      267,  848,  837,  836,  847,   97,  845,  843,  846,  849,
      850, 1010,  842,  852,  218,  853,  296,  839,  296,  841,
      858,  218,  840,  368,  844,  862,  851,  858,  848,  863,
      369,  847,  267,  845,  994,  846,  867,  849,  850, 1010,
      852,  267,  853,  860,  861,  860,  862,  865,  866,  865,
      863,  267,  251,  851,  867,  868,  222,  868,  862,  369,
       97,  994,  863,   97, 1152,  867,  869,  366,  869,  870,
      371,  870,  862,  867,  995,  146,  863,  871,  540,  871,
      139,  876,  873, 1007,  867,  146,  874,  878,  879,  878,
      880,  876, 1152,  416,  881,  883,  884,  883,  419,  885,

      880,  995,  885,  416,  881,  886,  258,  886,  880,  885,
     1007,  267,  881,  887,  254,  887,  888,  421,  888,  880,
      885,  376,   97,  881,  889,  418,  889,  891,  892,  893,
     1006,  885,   97,  894,  896,  897,  896,  898,  891, 1004,
      893,  881,  401,  242,  899,  901,  267, 1009,  904,  902,
      906,  907,  906,  908,  408,  267,  911,  909, 1006,  410,
      912,  913,  247,  913,  911,  915,  401, 1004,  912,  917,
      918,  917,  904,  579, 1009,  908,  919,   97,  580,  909,
      920,  405,  920,  908,  919,  410,  998,  909,  998,  267,
      580,  915,  921,  413,  921,  911,  919, 1120, 1000,  912,

      922,  577,  922,  923,  582,  923,  908,  919,  251,  999,
      909,  924,  584,  924,  925,  740,  925,  262,  915,  927,
      269,  919,  269,  928, 1120, 1000,  930,   97,  930,  931,
      272,  931,  927,  932,  432,  932,  928,  999,   97,   97,
      930,  933,  151,  933,  927,  274,  437,  935,  928,   97,
      267,  936,  938,  940,  941,  940,  942,  437,  430,  267,
      943,  267,  607,  938,  945,  946,  945,  606,  947,  942,
      267,  947,  607,  943,  948,  441,  948,  942,  947,   97,
      251,  943,  949,  604,  949,  950,  609,  950,  942,  947,
      616,  616,  943,  951,  759,  951,  958,  958, 1011,  267,

      947,  872,  952,  139,  952,  873,  872,  872,  872,  874,
      872,  872,  872,  872,  872,  376,  267,  872,  872,  872,
      447,  447,  955,  955,  251, 1011,  956,  956,  960,  961,
      960,  962,  965,  966,  965,  963,  773,  774,  962,  967,
       97,  267,  963,  967,  872,  872,  872,  872,  968,  620,
      968,  962,  774,  251, 1008,  963, 1121,  176,  967,  969,
      772,  969,  970,  776,  970,  962,  967,  781,  624,  963,
      972,  872,   97,  975,  973,  977,  978,  977,  979,  781,
       97, 1008,  980, 1121,  987,  975,  982,  983,  982,  985,
      984,  979,  172,  984, 1031,  980,  986,  785,  986,  979,

      139, 1001,  873,  980,  267,  624,  874,  972,  139,   97,
      873,  973, 1003,  139,  874,  873,  139,  251,  873,  874,
       97, 1031,  874,  139,  996,  873,  996,   97, 1001,  874,
      988,  139,  797,  873,  797, 1179,  799,  874,  799,   97,
     1003, 1002,   97,  990, 1012,   97, 1131,  989,  993, 1005,
      997,   97,  991,   97,  798,   97, 1014,  988, 1013,  992,
     1016,   97,  800, 1179, 1015, 1019,   97,   97, 1002,   97,
      990, 1012, 1018, 1131,  989,   97,  993, 1005,  997,  991,
     1017,   97,  798, 1022, 1014, 1013,  992, 1020, 1016,   97,
      800, 1015, 1019,   97, 1021,   97, 1023,   97, 1026,   97,

     1018,   97, 1025,   97,   97,   97,   97, 1017, 1028, 1030,
     1022, 1029, 1024,   97, 1020,   97, 1027,   97, 1036,   97,
      218, 1021, 1032,   97, 1023, 1026,  858, 1033,  129, 1035,
     1025, 1038, 1034,   97, 1039,  218, 1028, 1030, 1029, 1024,
       97,  858,  131, 1027,  855, 1037, 1036,   99,  856, 1032,
     1040, 1041, 1040,  862, 1033,  369, 1035,  863, 1038, 1034,
      369,  867, 1039, 1042, 1043, 1042,  867,  368,   97,  862,
      867,   97, 1037,  863,  860,  861,  860,  862, 1125, 1124,
       97,  863, 1044, 1045, 1044,  862,  865,  866,  865,  863,
     1046, 1047, 1046,  867,   97, 1133, 1185,  867,  868,  222,

      868,  862,  869,  366,  869,  863, 1125, 1124,  176,  867,
      870,  371,  870,  862,  871,  540,  871,  863,  139,  146,
      873,  867, 1133, 1185,  874,  876, 1048, 1049, 1048,  880,
      146,   97,   97,  881,  173,  416,  876, 1050, 1051, 1050,
      419,  885,  880,  172,  885,  416,  881,  878,  879,  878,
      880,  885, 1155, 1127,  881, 1052, 1053, 1052,  880,  883,
      884,  883,  881, 1054, 1055, 1054,  885,  129,   97, 1282,
      885,  886,  258,  886,  880,  887,  254,  887,  881, 1155,
     1127,   90,  885,  888,  421,  888,  880,  889,  418,  889,
      881,  891,   87,  893,  885, 1057, 1069,  899,  891,  892,

      893, 1058,  885,   68,  894, 1060, 1061, 1060, 1062, 1064,
       66,  898, 1063,   66,   35,  881,  896,  897,  896,  898,
     1066, 1282, 1067,  881, 1282, 1282,  266, 1071, 1072, 1071,
     1073,  242,  401,  901, 1074, 1282, 1282,  902,  904, 1075,
     1076, 1075,  908,  401, 1282,   97,  909, 1282,  580,  904,
     1077, 1078, 1077,  579,  919,  908, 1137,  919,  410,  909,
      906,  907,  906,  908,  915, 1282, 1282,  909, 1079, 1080,
     1079,  908,  408, 1282,  911,  909, 1282,  410,  912, 1081,
     1082, 1081,  911,  915, 1137, 1282,  912,  913,  247,  913,
      911, 1083, 1084, 1083,  912,  580, 1282, 1282,  915, 1282,

       97,  919,  917,  918,  917, 1085, 1086, 1085, 1282,  919,
       97,  269,  919,  920,  405,  920,  908,  930,   97, 1129,
      909,  921,  413,  921,  911,  922,  577,  922,  912, 1141,
     1282, 1146,  919,  923,  582,  923,  908,  924,  584,  924,
      909,  925,  740,  925,  915,  262, 1129,  927,  919,   97,
      269,  928, 1087, 1088, 1087,  927,  930, 1141, 1146,  928,
     1089, 1090, 1089,  931,  272,  931,  927,  930, 1132, 1282,
      928,  932,  432,  932,  933,  151,  933,  927,  930,  437,
      274,  928,  935, 1282, 1282,  938,  936, 1091, 1092, 1091,
      942,  437,   97, 1282,  943, 1132,  607,  938, 1093, 1094,

     1093,  606,  947,  942, 1282,  947,  607,  943,  940,  941,
      940,  942,  947, 1231, 1148,  943, 1095, 1096, 1095,  942,
      945,  946,  945,  943, 1097, 1098, 1097,  947, 1282, 1282,
     1282,  947,  948,  441,  948,  942,  949,  604,  949,  943,
     1231, 1148, 1180,  947,  950,  609,  950,  942,  951,  759,
      951,  943, 1210, 1282, 1282,  947,  872,  952,  139,  952,
      873,  872,  872,  872,  874,  872,  872,  872,  872,  872,
     1180, 1282,  872,  872,  872,  447,  447,  955,  955,  616,
     1210,  956,  956, 1282,  616,  958, 1099, 1100, 1099,  962,
      958,   97, 1282,  963, 1282, 1282, 1101, 1102, 1101,  872,

      872,  872,  872,  967,  773,   97,  962, 1150, 1126,  774,
      963,  960,  961,  960,  962,  967, 1282, 1282,  963,  774,
     1103, 1104, 1103,  962, 1282,  967,  872,  963,  965,  966,
      965, 1105, 1106, 1105, 1150,  967, 1126, 1282,  967,  968,
      620,  968,  962,  969,  772,  969,  963, 1282, 1282, 1282,
      967,  970,  776,  970,  962,  624,  781,  972,  963, 1282,
     1282,  973,  975, 1107, 1108, 1107,  979,  781, 1282, 1282,
      980, 1282,  987,  975, 1109, 1110, 1109,  985,  984,  979,
     1282,  984,  987,  980,  977,  978,  977,  979,  984, 1282,
     1282,  980, 1111, 1112, 1111,  979,  982,  983,  982,  980,

     1113, 1114, 1113,  984, 1282, 1282, 1282,  984,  986,  785,
      986,  979,  139,   97,  873,  980, 1128,  624,  874,  972,
      139,   97,  873,  973, 1130,  139,  874,  873,  139,   97,
      873,  874, 1145,  139,  874,  873,  996,   97,  996,  874,
     1122,  998, 1122,  998, 1128, 1282, 1115, 1282, 1282, 1118,
       97, 1135, 1130,   97, 1116,   97, 1117, 1134,   97, 1138,
     1145, 1119,  997, 1123,  999, 1136,   97,   97,   97, 1140,
       97, 1139,   97, 1115, 1144, 1142, 1147, 1118, 1135, 1143,
       97, 1116,   97, 1117,   97, 1134, 1211, 1138, 1119, 1149,
      997, 1123,  999, 1136,   97,   97, 1140, 1151,   97, 1139,

     1158, 1153, 1144, 1142, 1147, 1154, 1282, 1143,   97, 1040,
     1041, 1040,  862, 1156, 1211, 1157,  863, 1149, 1042, 1043,
     1042, 1046, 1047, 1046, 1151,  867, 1057, 1158,  867, 1153,
     1282, 1282, 1058, 1154, 1044, 1045, 1044,  862,   97,   97,
     1156,  863, 1282, 1157, 1048, 1049, 1048,  880, 1050, 1051,
     1050,  881, 1282, 1182, 1181,  885, 1052, 1053, 1052,  880,
     1054, 1055, 1054,  881, 1160, 1161, 1160,  885, 1163,   97,
     1062, 1162, 1282, 1165, 1063, 1060, 1061, 1060, 1062, 1166,
     1182, 1181, 1063, 1167, 1168, 1167, 1062, 1066, 1200, 1067,
     1063, 1282, 1066,  266, 1067, 1066, 1170, 1067,  266, 1069,

       97,  266,  429, 1174, 1173,  885, 1073, 1186, 1282, 1162,
     1074, 1071, 1072, 1071, 1073, 1200, 1215, 1282, 1074, 1175,
     1176, 1175, 1073,   97, 1282, 1282, 1074, 1075, 1076, 1075,
      908, 1077, 1078, 1077,  909, 1186,   97, 1282,  919, 1079,
     1080, 1079,  908, 1201, 1215, 1184,  909, 1081, 1082, 1081,
      911, 1083, 1084, 1083,  912, 1085, 1086, 1085,  915, 1282,
     1282, 1282,  919, 1087, 1088, 1087,  927, 1089, 1090, 1089,
      928, 1201, 1184, 1282,  930, 1091, 1092, 1091,  942, 1093,
     1094, 1093,  943, 1282, 1282, 1282,  947, 1095, 1096, 1095,
      942, 1097, 1098, 1097,  943, 1282, 1282, 1282,  947, 1099,

     1100, 1099,  962, 1101, 1102, 1101,  963, 1282, 1282, 1282,
      967, 1103, 1104, 1103,  962, 1105, 1106, 1105,  963, 1282,
     1282, 1282,  967, 1107, 1108, 1107,  979, 1109, 1110, 1109,
      980, 1282,   97, 1282,  984, 1111, 1112, 1111,  979, 1113,
     1114, 1113,  980,  139, 1282,  873,  984, 1183,  624,  874,
      972,  139,   97,  873,  973,   97,  624,  874,  972,  624,
     1188,  972,  973,   97,   97,  973, 1189, 1122, 1177, 1122,
     1187,   97,   97,   97, 1183, 1190, 1191,   97,   97,   97,
       97, 1192, 1193, 1282,   97, 1232, 1235, 1178, 1188, 1198,
     1123,   97, 1195, 1194, 1189, 1282, 1177, 1187, 1202,   97,

     1196, 1197,   97, 1190, 1191, 1174, 1203, 1199, 1192, 1165,
     1193, 1162, 1232, 1235, 1178, 1166, 1282, 1198, 1123, 1195,
     1194, 1282, 1160, 1161, 1160, 1282, 1202, 1196, 1197, 1162,
     1204, 1205, 1204,   97, 1203, 1199, 1282, 1162, 1206, 1207,
     1206, 1167, 1168, 1167, 1062, 1166, 1170, 1214, 1063,   97,
       97,   97,  429, 1175, 1176, 1175, 1073,  139,   97,  873,
     1074,   97,  139,  874,  873,   97,   97, 1216,  874,   97,
     1212, 1213, 1217,   97, 1214,   97, 1218,   97,   97, 1251,
     1223,   97, 1219, 1221,   97, 1228,   97, 1220, 1208, 1222,
       97, 1225, 1282, 1282, 1216, 1282, 1209, 1212, 1213, 1217,

     1224, 1226, 1282, 1229, 1218, 1227, 1251, 1282, 1223, 1219,
     1221,   97, 1282, 1228, 1220, 1208, 1222, 1282, 1225, 1204,
     1205, 1204,  139, 1209,  873,   97, 1162, 1224,  874, 1226,
     1229, 1238, 1227, 1206, 1207, 1206,  624,   97,  972,   97,
     1166,   97,  973,   97, 1233,   97, 1234,   97, 1237,   97,
     1239,   97, 1230, 1246, 1240,   97, 1241,   97, 1238,   97,
     1236, 1244, 1242,   97, 1243,  624,   97,  972,   97,   97,
     1245,  973, 1233, 1234,   97, 1254, 1237,   97, 1239, 1230,
     1253, 1246, 1240,   97, 1241, 1247,   97, 1236, 1244, 1258,
     1242, 1252, 1243, 1250, 1255, 1259,   97, 1271, 1245,   97,

       97,   97, 1272, 1254,   97, 1256,   97, 1257, 1253, 1260,
     1282, 1269, 1247, 1261,   97, 1262, 1258, 1264, 1252, 1263,
     1250, 1255, 1259,   97, 1271,   97, 1267, 1275,   97, 1272,
     1268,   97, 1256, 1273, 1257, 1276, 1277, 1260, 1274, 1269,
     1261, 1270, 1262,   97, 1278, 1264, 1263, 1280, 1281, 1282,
     1279, 1282, 1282, 1282, 1267, 1275, 1282, 1268, 1282, 1282,
     1282, 1273, 1276, 1282, 1277, 1282, 1274, 1282, 1270, 1282,
     1282, 1278, 1282, 1282, 1282, 1280, 1281, 1282, 1279,   33,
       33,   33,   33,   33,   33,   36,   36,   36,   36,   36,
       36,   51,   51,   51,   51,   51,   51,   55,   55,   55,

       55,   55,   55,   59,   59,   59,   59,   59,   59,   65,
       65,   65,   65,   65,   65,   67,   67,   67,   67,   67,
       67,   69,   69,   69,   69,   69,   69,   78,   78,   78,
       78,   78,   78,   86,   86,   86,   86,   86,   86,   89,
       89,   89,   89,   89,   89,   96,   96,  100, 1282,  100,
      100,  128,  128,  128,  128,  128,  128,  130,  130,  130,
      130,  130,  130,  134,  134,  134,  134,  134,  134,  142,
      142,  142,  142,  142,  142,  145,  145,  145,  145,  145,
      145,  138,  138,  138,  138,  138,  138,  149,  149,  149,
      149,  149,  149,  177,  177,  177,  177, 1282,  177,   98,

     1282,   98,   99, 1282,   99,  211,  211,  211,  211,  211,
      211,  214,  214,  214,  214,  214,  214,  217,  217,  217,
      217,  217,  217,  220,  220,  220,  220,  220,  220,  225,
      225,  225,  225,  225,  225,  228,  228,  228,  228,  228,
      228,  232,  232,  232,  232,  232,  232,  236,  236,  236,
      236,  236,  236,  239,  239,  239,  239,  239,  239,  241,
      241,  241,  241,  241,  241,  245,  245,  245,  245,  245,
      245,  250,  250,  250,  250,  250,  250,  252,  252,  252,
      252,  252,  252,  256,  256,  256,  256,  256,  256,  261,
      261,  261,  261,  261,  261,  266,  266,  266,  266,  266,

      266,  268,  268,  268,  268,  268,  268,  273,  273,  273,
      273,  273,  273,  278,  278,  278,  278,  278,  278,  350,
      350,  350,  350,  350,  350,  353,  353,  353,  353,  353,
      353,  355,  355,  355,  355,  355,  355,  359,  359,  359,
      359,  359,  359,  364,  364,  364,  364,  364,  364,  372,
      372,  372,  372,  372,  372,  377,  377,  377,  377,  377,
      377,  380,  380,  380,  380,  380,  380,  382,  382,  382,
      382,  382,  382,  387,  387,  387,  387,  387,  387,  390,
      390,  390,  390,  390,  390,  393,  393,  393,  393,  393,
      393,  397,  397,  397,  397,  397,  397,  400,  400,  400,

      400,  400,  400,  403,  403,  403,  403,  403,  403,  409,
      409,  409,  409,  409,  409,  422,  422,  422,  422,  422,
      422,  425,  425,  425,  425,  425,  425,  429,  429,  429,
      429,  429,  429,  433,  433,  433,  433,  433,  433,  436,
      436,  436,  436,  436,  436,  439,  439,  439,  439,  439,
      439,  445,  445,  445,  445,  445,  445,  446,  446,  446,
      446,  446,  446,   96,   96,  524,  524,  524,  524,  524,
      524,  527,  527,  527,  527,  527,  527,  529,  529,  529,
      529,  529,  529,  533,  533,  533,  533,  533,  533,  359,
      359,  359,  359,  359,  359,  372,  372,  372,  372,  372,

      372,  541,  541,  541,  541,  541,  541,  544,  544,  544,
      544,  544,  544,  546,  546,  546,  546,  546,  546,  550,
      550,  550,  550,  550,  550,  555,  555,  555,  555,  555,
      555,  558,  558,  558,  558,  558,  558,  561,  561,  561,
      561,  561,  561,  565,  565,  565,  565,  565,  565,  567,
      567,  567,  567,  567,  567,  571,  571,  571,  571,  571,
      571,  575,  575,  575,  575,  575,  575,  585,  585,  585,
      585,  585,  585,  588,  588,  588,  588,  588,  588,  593,
      593,  593,  593,  593,  593,  596,  596,  596,  596,  596,
      596,  598,  598,  598,  598,  598,  598,  602,  602,  602,

      602,  602,  602,  611,  611,  611,  611,  611,  611,  612,
      612,  612,  612,  612,  612,  214,  214,  214,  214,  214,
      214,  615,  615,  615,  615,  615,  615,  618,  618,  618,
      618,  618,  618,  623,  623,  623,  623,  623,  623,   96,
       96,  695,  695,  695,  695,  695,  695,  698,  698,  698,
      698,  698,  698,  700,  700,  700,  700,  700,  700,  703,
      703,  703,  703,  703,  703,  707,  707,  707,  707,  707,
      707,  710,  710,  710,  710,  710,  710,  712,  712,  712,
      712,  712,  712,  715,  715,  715,  715,  715,  715,  722,
      722,  722,  722,  722,  722,  725,  725,  725,  725,  725,

      725,  728,  728,  728,  728,  728,  728,  730,  730,  730,
      730,  730,  730,  733,  733,  733,  733,  733,  733,  735,
      735,  735,  735,  735,  735,  741,  741,  741,  741,  741,
      741,  743,  743,  743,  743,  743,  743,  747,  747,  747,
      747,  747,  747,  750,  750,  750,  750,  750,  750,  752,
      752,  752,  752,  752,  752,  755,  755,  755,  755,  755,
      755,  761,  761,  761,  761,  761,  761,  762,  762,  762,
      762,  762,  762,  765,  765,  765,  765,  765,  765,  767,
      767,  767,  767,  767,  767,  250,  250,  250,  250,  250,
      250,  770,  770,  770,  770,  770,  770,  777,  777,  777,

      777,  777,  777,  214,  214,  214,  214,  214,  214,  780,
      780,  780,  780,  780,  780,  783,  783,  783,  783,  783,
      783,  801,  801,  801,  801,  801,   96,   96,  854,  854,
      854,  854,  854,  854,  857,  857,  857,  857,  857,  857,
      859,  859,  859,  859,  859,  859,  864,  864,  864,  864,
      864,  864,  872,  872,  872,  872,  872,  872,  875,  875,
      875,  875,  875,  875,  877,  877,  877,  877,  877,  877,
      882,  882,  882,  882,  882,  882,  890,  890,  890,  890,
      890,  890,  895,  895,  895,  895,  895,  895,  900,  900,
      900,  900,  900,  900,  903,  903,  903,  903,  903,  903,

      905,  905,  905,  905,  905,  905,  910,  910,  910,  910,
      910,  910,  914,  914,  914,  914,  914,  914,  916,  916,
      916,  916,  916,  916,  926,  926,  926,  926,  926,  926,
      929,  929,  929,  929,  929,  929,  934,  934,  934,  934,
      934,  934,  937,  937,  937,  937,  937,  937,  939,  939,
      939,  939,  939,  939,  944,  944,  944,  944,  944,  944,
      953,  953,  953,  953,  953,  953,  954,  954,  954,  954,
      954,  954,  957,  957,  957,  957,  957,  957,  959,  959,
      959,  959,  959,  959,  964,  964,  964,  964,  964,  964,
      266,  266,  266,  266,  266,  266,  971,  971,  971,  971,

      971,  971,  974,  974,  974,  974,  974,  974,  976,  976,
      976,  976,  976,  976,  250,  250,  250,  250,  250,  250,
      981,  981,  981,  981,  981,  981,  872,  872,  872,  872,
      872,  872,   96,   96,  854,  854,  854,  854,  854,  854,
      857,  857,  857,  857,  857,  857,  859,  859,  859,  859,
      859,  859,  864,  864,  864,  864,  864,  864,  875,  875,
      875,  875,  875,  875,  877,  877,  877,  877,  877,  877,
      882,  882,  882,  882,  882,  882,  890,  890,  890,  890,
      890,  890,  214,  214,  214,  214,  214,  214, 1056, 1056,
     1056, 1056, 1056, 1056, 1059, 1059, 1059, 1059, 1059, 1059,

      895,  895,  895,  895,  895,  895, 1065, 1065, 1065, 1065,
     1065, 1065, 1068, 1068, 1068, 1068, 1068, 1068, 1070, 1070,
     1070, 1070, 1070, 1070,  900,  900,  900,  900,  900,  900,
      903,  903,  903,  903,  903,  903,  905,  905,  905,  905,
      905,  905,  916,  916,  916,  916,  916,  916,  910,  910,
      910,  910,  910,  910,  914,  914,  914,  914,  914,  914,
      926,  926,  926,  926,  926,  926,  929,  929,  929,  929,
      929,  929,  934,  934,  934,  934,  934,  934,  937,  937,
      937,  937,  937,  937,  939,  939,  939,  939,  939,  939,
      944,  944,  944,  944,  944,  944,  953,  953,  953,  953,

      953,  953,  954,  954,  954,  954,  954,  954,  957,  957,
      957,  957,  957,  957,  959,  959,  959,  959,  959,  959,
      964,  964,  964,  964,  964,  964,  971,  971,  971,  971,
      971,  971,  974,  974,  974,  974,  974,  974,  976,  976,
      976,  976,  976,  976,  981,  981,  981,  981,  981,  981,
      872,  872,  872,  872,  872,  872,   96,   96,  859,  859,
      859,  859,  859,  859,  864,  864,  864,  864,  864,  864,
      877,  877,  877,  877,  877,  877,  882,  882,  882,  882,
      882,  882, 1056, 1056, 1056, 1056, 1056, 1056,  250,  250,
      250,  250,  250,  250, 1159, 1159, 1159, 1159, 1159, 1159,

     1059, 1059, 1059, 1059, 1059, 1059, 1164, 1164, 1164, 1164,
     1164, 1164, 1065, 1065, 1065, 1065, 1065, 1065, 1169, 1169,
     1169, 1169, 1169, 1169, 1068, 1068, 1068, 1068, 1068, 1068,
     1171, 1171, 1282, 1171, 1171, 1171, 1070, 1070, 1070, 1070,
     1070, 1070,  905,  905,  905,  905,  905,  905,  916,  916,
      916,  916,  916,  916,  910,  910,  910,  910,  910,  910,
      914,  914,  914,  914,  914,  914,  926,  926,  926,  926,
      926,  926,  929,  929,  929,  929,  929,  929,  939,  939,
      939,  939,  939,  939,  944,  944,  944,  944,  944,  944,
      959,  959,  959,  959,  959,  959,  964,  964,  964,  964,

      964,  964,  976,  976,  976,  976,  976,  976,  981,  981,
      981,  981,  981,  981,  872,  872,  872,  872,  872,  872,
      971,  971,  971,  971,  971,  971,   96,   96,   27, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282

    } ;

static yyconst flex_int16_t yy_chk[5601] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    7,
        9,    8,   10, 1279,   11,   12,    7,    7,    8,    8,
       30,   11,   12,   21,   21,   21,   21,   32,   32,   11,
       12,   30,   30,    1,    1,    1,    1,   95,   95,   13,
       14,   26,   26,   26,   26, 1274,   13,   14,   36,   36,
     1269,    9,    9,   10,   10,   11,   12,  228,   36,  228,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       13,   14,   24,   15,   24,   15,   15,   15,   47,   38,

       15,   24,   69,   15,   69,   47,   72,   79,   69,   79,
       79,   24,   72,   38,    2,    2,    2,    2, 1268, 1262,
       70,   16,   70,   16,   16,   16,   70,  296,   16,  296,
       73,   16,   73,   47,   15,   91,   73,   91,   91,   24,
       38,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,   15,   16,   22,   22,   22,   22,   22,   76,  105,
       76,   50,  105,   22,   76,   74,   74,   74,   74, 1259,
       22,   50,   74,   22,   76,    3,    3,    3,    3,   16,
       40,   94,   41,   44,  100,  100,  176,  176,  176,  130,

      105,  130,   94,   94,  100,  130,   41,   40,   41,   50,
       44,   22,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,   37,   41,   40,   41,   37,   44,   42,  132,
      131,  136, 1258,   48,  131,  132,   45,  136,   46,   81,
       48,   81,   37,   43, 1254,   42,    4,    4,    4,    4,
       42,   43,  135,   45,   37,   48,  135,   46,   43,   43,
       46,   82,   81,   82,   82,   82, 1252,  106,   48,   37,
      106,  103,   42,    4,    5,  122, 1243,   42,   82,   43,
       45,   84,   48,   84,   46,   43,   43,   46,  103,  122,

       81,    5,    5,    5,    5,    5,    5,  101,  106,    5,
     1242,  139,    5,    5,   84,  139,    5,    5,    5,    5,
      214,  102,    5, 1241,  214,  103,  122,  101, 1240,    5,
        5,    5,    5,    5,    5, 1239, 1236,    5,   49,    5,
        5,  102,   84,    5,    5,    5,    5,  104,   49,    5,
       20,   20,   20,   20,  101,   49,   20,   83,  107,   20,
      112,   83,   20,   20,   49,  113,   20,  104,  102,   20,
       20,  111,  108,  107,  107,  164,   49,  111,  117,  112,
      242,  113,   49,  108,  242,   83,  109,  117,  120,   83,
      109,   49,  111,  111,  104,  109,  116,   20,   20,   39,

      107,  107,   39,  164,  118,  111,  112,  120,  113,   39,
      118,  108,  109,   39,  109,  117,   39,  116,   39,  111,
      111, 1234,  646,  109,  115,  133,  133,  133,  133,  134,
       39,  134,  133,  646,  120,  134,  119,   39,  118,  109,
       39,  109,  115,   39,  116,   39,   71,   71,   71,   71,
       71,   71,   71,  119,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  110,  123,  124,  121,  115,
      123,  121,  110,  121,  124,  127,  169, 1232,  141,  126,
      119,  138,  127,  138,  141,  110,  529,  138,  529,   71,
       71,   71,  137,  137,  137,  137, 1231,  126,  123,  121,

      110,  121,  124,  142,  169,  142, 1222,  145,  152,  142,
      127,  274,  110,  145,  152,  274,   71,   75,   75,   75,
       75,   75,   75,   75,  126,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,  143,  143,  143,  143,
      147,  147,  147,  143,  227,  227,  227,  147,  148,  148,
      148,  148,  149,  189,  149,  148,  171,  189,  149, 1221,
       75,   75,   75,  150,  150,  150,  150, 1213,  290,  181,
      150,  153,  153,  153,  153,  154,  181,  154,  153,  166,
      156,  154,  156,  166,  171,  189,  156,   75,   77,   77,
       77,   77,  157,  447,  157,   77,  290,  447,  157,  159,

      161,  159,  161,  161,  181,  159,   77,  166,  156,  157,
      174,  166,  174,  174,  156,  200,  168,   77,  168,  173,
       77,  173,   77,  157,  159,  162,  200,  162,  163,   77,
      163, 1203,  173,  173,   77,  156,  160,  157,  160, 1202,
      212,  156,  160,  168,   77,  168,  212,   77,  162,   77,
      157,  163,  159, 1201,  200,  160,   77,  140,  140,  140,
      140,  140,  140,  140,  178,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  162,  179,  165,  163,
      165,  165,  165,  160,  170,  178,  170,  180,  179,  192,
     1195,  288,  180, 1183,  179,  165,  192,  172,  215,  172,

      140,  140,  140,  211,  215,  211,  182,  170,  184,  211,
     1176,  217,  178,  251,  251,  251,  179,  217,  288,  172,
      180,  179,  182,  172,  192,  182,  184,  140,  144,  144,
      144,  144,  144,  144,  144,  170,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  172,  183,  182,
      187,  172,  182,  184,  196,  191,  197,  196,  220, 1173,
      220,  197, 1172,  313,  220,  185,  186, 1171,  183,  187,
      191,  144,  144,  144,  546,  188,  546, 1170,  187,  216,
      216,  216,  216,  190,  223,  196,  185,  186,  225,  197,
      223,  313,  188,  190,  225,  183,  187,  191,  144,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  185,  186,  155,  155,  155,  158,  188,
      158,  190,  194,  199,  158,  195,  202,  203,  198,  201,
      199,  202,  204, 1168,  203,  202, 1163,  460,  158,  205,
      195,  194,  155,  155,  155,  155,  204,  158,  158, 1157,
      198,  201, 1154,  219,  219,  219,  208,  206,  199,  202,
      219,  205,  203,  202,  206,  460,  158,  195,  194,  155,
      210,  207,  208,  204,  158,  158,  193,  198,  201,  193,
      193,  193,  193,  193,  193, 1153,  207,  193,  205,  210,
      207,  193,  206, 1149,  193,  209,  193,  193, 1146,  208,

      193,  292,  209,  229,  229,  229,  229,  193,  193,  193,
      193,  193,  193,  207, 1143,  193,  210,  207,  193,  233,
      232,  193,  232,  193,  193,  233,  232,  193,  292,  239,
      209,  213,  213,  213,  213,  239, 1140,  243,  213,  221,
      221,  221,  221,  243, 1136,  248,  221,  224,  224,  224,
      224,  248, 1135,  252,  224,  234,  234,  234,  234,  252,
      312, 1129,  234,  235,  235,  235,  235,  235,  235,  235,
     1126,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  236,  561,  236,  561,  301,  312,  236,  237,
      237,  237,  237,  240,  240,  240,  237,  241,  259,  241,

      240,  304,  461,  241,  259,  301,  235,  235,  235,  244,
      244,  244,  244,  245,  304,  245,  244,  298, 1125,  245,
      246,  246,  246,  246,  253,  253,  253,  246,  298,  298,
      461,  253,  301,  235,  238,  238,  238,  238,  238,  238,
      238,  304,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  249,  249,  249,  249,  255,  255,  255,
      249,  256, 1112,  256,  255, 1108,  263,  256,  257,  257,
      257,  257,  263, 1104,  309,  257, 1100,  238,  238,  238,
      260,  260,  260,  260,  261, 1096,  261,  260,  309,  268,
      261,  264,  264,  264,  264,  268, 1092,  275,  264,  265,

      265,  265,  265,  275,  238,  315,  265,  270,  270,  270,
      271,  271,  271,  271,  270,  309,  273,  271,  273,  315,
     1088,  305,  273,  276,  276,  276,  276,  305, 1082, 1080,
      276,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277, 1076,  315,  277,  277,  277,
      278,  279,  278,  279,  314,  305,  278,  279,  281,  280,
      281,  280,  289, 1072,  281,  280,  282,  284,  282,  284,
      314,  289,  282,  284,  277,  277,  277,  277, 1069,  279,
      280,  285,  283,  285,  283,  302, 1061,  285,  283,  286,
      289,  286,  281,  483,  302,  286,  284,  314,  289,  284,

      282,  277,  295,  287,  295,  287,  279,  283,  280,  287,
      293,  294,  293,  294,  308,  297,  285,  297,  307,  281,
      483,  307,  302,  284,  286,  295,  284,  282,  297,  297,
     1057,  287,  293,  303,  308,  283,  293,  306,  303,  311,
      294,  310,  294,  285,  310,  316,  306,  317,  319,  307,
      311,  286,  318,  295,  317, 1053,  316,  320,  287,  323,
      293,  308,  321,  318,  293, 1049,  303,  294,  319,  294,
      322,  320,  310,  326,  306,  323,  318,  324,  311, 1045,
      325,  321,  317,  331,  316,  327, 1041,  322,  325,  334,
      326,  318,  335,  328,  324,  319,  325,  330,  320,  324,

      328, 1029,  323,  318,  327,  333,  329,  330,  321,  331,
      334,  335, 1028,  329,  322,  328,  325,  326,  339,  333,
      336,  324,  337,  325,  340,  339,  324,  337,  328,  336,
      338,  327,  329,  343,  345,  330,  331,  334,  335,  336,
      344,  329,  328,  340,  338,  344,  333,  346,  567,  348,
      567,  345,  343,  339,  349,  337,  348,  336,  585,  329,
      585,  349,  351,  350,  346,  350,  336,  348,  351,  350,
      340,  338, 1008,  344,  352,  352,  352,  352,  345,  343,
      353,  352,  357,  354,  354,  354,  353,  359,  357,  349,
      354,  346,  355,  359,  355,  348, 1007,  985,  355,  356,

      356,  356,  356,  361,  361,  361,  356,  358,  358,  358,
      358,  978,  473,  364,  358,  362,  362,  362,  362,  364,
      365,  365,  365,  367,  367,  367,  961,  365,  473,  941,
      367,  370,  370,  370,  370,  373,  373,  373,  370,  377,
      378,  377,  414,  414,  414,  377,  378,  379,  379,  379,
      379,  380,  907,  462,  379,  473,  384,  380,  381,  381,
      381,  382,  384,  382,  879,  381,  391,  382,  383,  383,
      383,  383,  391,  861,  395,  383,  385,  385,  385,  385,
      395,  462,  848,  385,  386,  386,  386,  386,  386,  386,
      386,  463,  386,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  386,  387,  464,  387,  484,  843,  841,  387,
      388,  388,  388,  388,  390,  397,  390,  388,  492,  463,
      390,  397,  838,  392,  392,  392,  392,  386,  386,  386,
      392,  393,  464,  393,  484,  492,  400,  393,  394,  394,
      394,  394,  400,  837,  406,  394,  396,  396,  396,  396,
      406,  827,  821,  396,  386,  389,  389,  389,  389,  389,
      389,  389,  492,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  398,  398,  398,  399,  399,  399,
      598,  398,  598,  409,  399,  402,  402,  402,  403,  409,
      403,  422,  402,  422,  403,  813,  812,  422,  389,  389,

      389,  404,  404,  404,  404,  470,  785,  470,  404,  407,
      407,  407,  407,  411,  411,  411,  407,  781,  470,  470,
      411,  412,  412,  412,  412,  389,  776,  773,  412,  417,
      417,  417,  420,  420,  420,  420,  417,  423,  471,  420,
      491,  694,  425,  423,  424,  424,  424,  424,  425,  471,
      471,  424,  426,  426,  426,  427,  427,  427,  427,  426,
      491,  683,  427,  428,  428,  428,  428,  431,  431,  431,
      428,  433,  434,  433,  431,  490,  681,  433,  434,  435,
      435,  435,  435,  436,  665,  490,  435,  491,  442,  436,
      438,  438,  438,  439,  442,  439,  648,  438,  448,  439,

      440,  440,  440,  440,  448,  621,  475,  440,  443,  443,
      443,  443,  475,  490,  488,  443,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      488,  489,  444,  444,  444,  445,  446,  445,  446,  489,
      475,  445,  446,  449,  449,  449,  449,  450,  472,  450,
      449,  472,  451,  450,  451,  620,  616,  488,  451,  444,
      444,  444,  444,  452,  453,  452,  453,  489,  609,  452,
      453,  454,  455,  454,  455,  606,  624,  454,  455,  472,
      624,  456,  458,  456,  458,  453,  444,  456,  458,  457,
      459,  457,  459,  478,  602,  457,  459,  452,  478,  467,

      454,  467,  465,  455,  465,  474,  457,  458,  466,  456,
      466,  459,  476,  453,  457,  468,  474,  468,  477,  476,
      467,  480,  486,  600,  452,  477,  478,  454,  480,  486,
      455,  465,  482,  465,  457,  458,  456,  482,  468,  459,
      479,  481,  457,  466,  474,  485,  479,  476,  467,  487,
      485,  479,  481,  477,  495,  497,  480,  486,  465,  505,
      465,  493,  496,  487,  499,  482,  468,  500,  502,  501,
      466,  497,  493,  500,  479,  588,  495,  505,  485,  479,
      481,  496,  502,  503,  509,  499,  501,  503,  504,  506,
      487,  504,  508,  525,  512,  509,  506,  586,  497,  525,

      493,  500,  512,  495,  505,  515,  508,  510,  496,  502,
      511,  515,  499,  501,  510,  503,  517,  511,  513,  504,
      514,  513,  516,  509,  506,  516,  518,  514,  519,  520,
      512,  582,  522,  508,  519,  524,  517,  524,  527,  515,
      542,  524,  510,  579,  527,  511,  542,  518,  541,  513,
      541,  520,  522,  516,  541,  514,  526,  526,  526,  526,
      575,  571,  519,  517,  528,  528,  528,  530,  530,  530,
      530,  534,  534,  534,  518,  535,  535,  535,  520,  522,
      532,  532,  532,  532,  536,  536,  536,  536,  537,  537,
      537,  539,  539,  539,  543,  543,  543,  543,  544,  545,

      545,  545,  636,  639,  544,  547,  547,  547,  547,  549,
      549,  549,  549,  551,  551,  551,  552,  552,  552,  553,
      553,  553,  553,  554,  554,  554,  555,  559,  555,  554,
      636,  639,  555,  559,  569,  554,  554,  556,  556,  556,
      556,  557,  557,  557,  558,  565,  558,  557,  891,  563,
      558,  565,  891,  557,  557,  560,  560,  560,  560,  562,
      562,  562,  562,  564,  564,  564,  564,  566,  566,  566,
      568,  568,  568,  568,  570,  570,  570,  570,  572,  572,
      572,  573,  573,  573,  573,  574,  574,  574,  576,  576,
      576,  578,  578,  578,  581,  581,  581,  581,  583,  583,

      583,  587,  587,  587,  587,  589,  589,  589,  590,  590,
      590,  590,  591,  591,  591,  592,  592,  592,  592,  593,
      594,  593,  597,  597,  597,  593,  594,  595,  595,  595,
      595,  596,  599,  599,  599,  599,  550,  596,  601,  601,
      601,  601,  603,  603,  603,  605,  605,  605,  608,  608,
      608,  608,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  640,  548,  610,  610,
      610,  611,  612,  611,  612,  613,  533,  611,  612,  531,
      615,  613,  614,  614,  614,  614,  615,  617,  617,  617,
      618,  523,  618,  660,  640,  610,  610,  610,  610,  619,

      619,  619,  619,  622,  622,  622,  622,  623,  625,  623,
      643,  507,  643,  623,  625,  626,  626,  626,  626,  627,
      660,  627,  610,  498,  628,  627,  628,  629,  494,  629,
      628,  643,  630,  629,  630,  631,  649,  631,  630,  649,
      632,  631,  632,  633,  441,  633,  632,  652,  629,  633,
      647,  634,  635,  634,  635,  647,  631,  634,  635,  643,
      655,  641,  630,  641,  659,  632,  633,  649,  652,  642,
      634,  642,  645,  633,  645,  644,  629,  644,  650,  651,
      655,  650,  653,  647,  631,  645,  656,  651,  657,  630,
      654,  642,  659,  632,  633,  652,  641,  654,  634,  661,

      633,  644,  658,  653,  657,  658,  664,  655,  662,  650,
      663,  656,  695,  662,  695,  651,  437,  663,  695,  642,
      667,  661,  669,  641,  429,  654,  662,  664,  666,  644,
      653,  657,  670,  658,  668,  666,  674,  667,  656,  668,
      802,  662,  802,  669,  673,  663,  671,  670,  661,  671,
      672,  673,  676,  662,  664,  672,  675,  677,  674,  676,
      678,  675,  679,  666,  667,  675,  686,  668,  421,  679,
      669,  680,  677,  684,  670,  678,  677,  671,  682,  673,
      686,  685,  688,  672,  685,  674,  689,  676,  687,  675,
      680,  692,  684,  675,  693,  682,  687,  679,  690,  677,

      419,  689,  678,  677,  688,  691,  687,  686,  687,  690,
      691,  817,  685,  692,  696,  693,  803,  680,  803,  684,
      696,  698,  682,  700,  687,  700,  691,  698,  689,  700,
      702,  688,  413,  687,  794,  687,  702,  690,  691,  817,
      692,  408,  693,  697,  697,  697,  697,  699,  699,  699,
      697,  405,  401,  691,  699,  701,  701,  701,  701,  703,
     1033,  794,  701,  814, 1033,  703,  704,  704,  704,  705,
      705,  705,  705,  704,  796,  708,  705,  706,  706,  706,
      707,  708,  707,  814,  706,  710,  707,  709,  709,  709,
      709,  710, 1033,  714,  709,  711,  711,  711,  712,  714,

      712,  796,  711,  715,  712,  713,  713,  713,  713,  715,
      814,  375,  713,  716,  716,  716,  717,  717,  717,  717,
      716,  372,  811,  717,  718,  718,  718,  719,  719,  719,
      811,  718,  809,  719,  720,  720,  720,  720,  721,  809,
      721,  720,  723,  722,  721,  722,  371,  816,  723,  722,
      724,  724,  724,  724,  725,  368,  725,  724,  811,  727,
      725,  726,  726,  726,  726,  727,  728,  809,  726,  729,
      729,  729,  728,  730,  816,  730,  729,  805,  732,  730,
      731,  731,  731,  731,  732,  733,  800,  731,  800,  363,
      735,  733,  734,  734,  734,  734,  735,  994,  805,  734,

      736,  736,  736,  737,  737,  737,  737,  736,  360,  800,
      737,  738,  738,  738,  739,  739,  739,  741,  738,  741,
      742,  739,  743,  741,  994,  805,  742,  347,  743,  744,
      744,  744,  744,  745,  745,  745,  744,  800,  342,  341,
      745,  746,  746,  746,  746,  747,  748,  747,  746,  332,
      272,  747,  748,  749,  749,  749,  749,  750,  267,  266,
      749,  262,  754,  750,  751,  751,  751,  752,  754,  752,
      258,  751,  755,  752,  753,  753,  753,  753,  755,  818,
      250,  753,  756,  756,  756,  757,  757,  757,  757,  756,
      763,  765,  757,  758,  758,  758,  763,  765,  818,  247,

      758,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  231,  230,  760,  760,  760,
      761,  762,  761,  762,  226,  818,  761,  762,  764,  764,
      764,  764,  766,  766,  766,  764,  767,  769,  767,  766,
      815,  222,  767,  769,  760,  760,  760,  760,  768,  768,
      768,  768,  770,  218,  815,  768,  995,  175,  770,  771,
      771,  771,  775,  775,  775,  775,  771,  778,  777,  775,
      777,  760,  844,  778,  777,  779,  779,  779,  779,  780,
      806,  815,  779,  995,  786,  780,  782,  782,  782,  783,
      786,  783,  167,  782,  844,  783,  784,  784,  784,  784,

      787,  806,  787,  784,  151,  788,  787,  788,  789,  808,
      789,  788,  808,  790,  789,  790,  791,  146,  791,  790,
      807,  844,  791,  792,  798,  792,  798,  819,  806,  792,
      787,  793,  797,  793,  797, 1120,  799,  793,  799,  820,
      808,  807,  810,  790,  819,  823, 1009,  789,  793,  810,
      798,  828,  791,  822,  797,  824,  822,  787,  820,  792,
      824,  826,  799, 1120,  823,  828,  829,  825,  807,  831,
      790,  819,  826, 1009,  789,  830,  793,  810,  798,  791,
      825,  835,  797,  831,  822,  820,  792,  829,  824,  832,
      799,  823,  828,  833,  830,  840,  832,  834,  835,  836,

      826,  839,  834,  845,  842,  846,  849,  825,  839,  842,
      831,  840,  833,  847,  829,  850,  836,  852,  850,  851,
      855,  830,  845,  853,  832,  835,  855,  846,  128,  849,
      834,  852,  847,  125,  853,  857,  839,  842,  840,  833,
      114,  857,  854,  836,  854,  851,  850,   98,  854,  845,
      856,  856,  856,  856,  846,  862,  849,  856,  852,  847,
      864,  862,  853,  858,  858,  858,  864,  859, 1000,  859,
      858, 1001,  851,  859,  860,  860,  860,  860, 1001, 1000,
     1012,  860,  863,  863,  863,  863,  865,  865,  865,  863,
      867,  867,  867,  865,   96, 1012, 1131,  867,  868,  868,

      868,  868,  869,  869,  869,  868, 1001, 1000,   92,  869,
      870,  870,  870,  870,  871,  871,  871,  870,  872,  873,
      872,  871, 1012, 1131,  872,  873,  874,  874,  874,  874,
      875, 1003, 1036,  874,   88,  880,  875,  876,  876,  876,
      877,  880,  877,   85,  876,  882,  877,  878,  878,  878,
      878,  882, 1036, 1003,  878,  881,  881,  881,  881,  883,
      883,  883,  881,  885,  885,  885,  883,   67,   33,   27,
      885,  886,  886,  886,  886,  887,  887,  887,  886, 1036,
     1003,   25,  887,  888,  888,  888,  888,  889,  889,  889,
      888,  890,   23,  890,  889,  893,  898,  890,  892,  892,

      892,  893,  898,   19,  892,  894,  894,  894,  894,  895,
       18,  895,  894,   17,    6,  895,  896,  896,  896,  896,
      897,    0,  897,  896,    0,    0,  897,  899,  899,  899,
      899,  900,  901,  900,  899,    0,    0,  900,  901,  902,
      902,  902,  902,  903,    0, 1016,  902,    0,  908,  903,
      904,  904,  904,  905,  908,  905, 1016,  904,  911,  905,
      906,  906,  906,  906,  911,    0,    0,  906,  909,  909,
      909,  909,  910,    0,  910,  909,    0,  914,  910,  912,
      912,  912,  912,  914, 1016,    0,  912,  913,  913,  913,
      913,  915,  915,  915,  913,  916,    0,    0,  915,    0,

     1005,  916,  917,  917,  917,  919,  919,  919,    0,  917,
     1025,  927,  919,  920,  920,  920,  920,  927, 1020, 1005,
      920,  921,  921,  921,  921,  922,  922,  922,  921, 1020,
        0, 1025,  922,  923,  923,  923,  923,  924,  924,  924,
      923,  925,  925,  925,  924,  926, 1005,  926,  925, 1011,
      929,  926,  928,  928,  928,  928,  929, 1020, 1025,  928,
      930,  930,  930,  931,  931,  931,  931,  930, 1011,    0,
      931,  932,  932,  932,  933,  933,  933,  933,  932,  935,
      934,  933,  934,    0,    0,  935,  934,  936,  936,  936,
      936,  937, 1027,    0,  936, 1011,  942,  937,  938,  938,

      938,  939,  942,  939,    0,  938,  944,  939,  940,  940,
      940,  940,  944, 1210, 1027,  940,  943,  943,  943,  943,
      945,  945,  945,  943,  947,  947,  947,  945,    0,    0,
        0,  947,  948,  948,  948,  948,  949,  949,  949,  948,
     1210, 1027, 1121,  949,  950,  950,  950,  950,  951,  951,
      951,  950, 1179,    0,    0,  951,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
     1121,    0,  952,  952,  952,  953,  954,  953,  954,  955,
     1179,  953,  954,    0,  957,  955,  956,  956,  956,  956,
      957, 1031,    0,  956,    0,    0,  958,  958,  958,  952,

      952,  952,  952,  958,  959, 1002,  959, 1031, 1002,  962,
      959,  960,  960,  960,  960,  962,    0,    0,  960,  964,
      963,  963,  963,  963,    0,  964,  952,  963,  965,  965,
      965,  967,  967,  967, 1031,  965, 1002,    0,  967,  968,
      968,  968,  968,  969,  969,  969,  968,    0,    0,    0,
      969,  970,  970,  970,  970,  971,  972,  971,  970,    0,
        0,  971,  972,  973,  973,  973,  973,  974,    0,    0,
      973,    0,  979,  974,  975,  975,  975,  976,  979,  976,
        0,  975,  981,  976,  977,  977,  977,  977,  981,    0,
        0,  977,  980,  980,  980,  980,  982,  982,  982,  980,

      984,  984,  984,  982,    0,    0,    0,  984,  986,  986,
      986,  986,  988, 1004,  988,  986, 1004,  989,  988,  989,
      990, 1006,  990,  989, 1006,  991,  990,  991,  992, 1024,
      992,  991, 1024,  993,  992,  993,  996, 1014,  996,  993,
      997,  998,  997,  998, 1004,    0,  988,    0,    0,  992,
     1013, 1014, 1006, 1017,  990, 1019,  991, 1013, 1015, 1017,
     1024,  993,  996,  997,  998, 1015, 1018, 1021, 1023, 1019,
     1026, 1018, 1022,  988, 1023, 1021, 1026,  992, 1014, 1022,
     1032,  990, 1030,  991, 1039, 1013, 1180, 1017,  993, 1030,
      996,  997,  998, 1015, 1034, 1037, 1019, 1032, 1035, 1018,

     1039, 1034, 1023, 1021, 1026, 1035,    0, 1022, 1038, 1040,
     1040, 1040, 1040, 1037, 1180, 1038, 1040, 1030, 1042, 1042,
     1042, 1046, 1046, 1046, 1032, 1042, 1056, 1039, 1046, 1034,
        0,    0, 1056, 1035, 1044, 1044, 1044, 1044, 1124, 1127,
     1037, 1044,    0, 1038, 1048, 1048, 1048, 1048, 1050, 1050,
     1050, 1048,    0, 1127, 1124, 1050, 1052, 1052, 1052, 1052,
     1054, 1054, 1054, 1052, 1058, 1058, 1058, 1054, 1059, 1152,
     1059, 1058,    0, 1062, 1059, 1060, 1060, 1060, 1060, 1062,
     1127, 1124, 1060, 1063, 1063, 1063, 1063, 1064, 1152, 1064,
     1063,    0, 1065, 1064, 1065, 1066, 1067, 1066, 1065, 1068,

     1132, 1066, 1067, 1073, 1070, 1068, 1070, 1132,    0, 1073,
     1070, 1071, 1071, 1071, 1071, 1152, 1185,    0, 1071, 1074,
     1074, 1074, 1074, 1130,    0,    0, 1074, 1075, 1075, 1075,
     1075, 1077, 1077, 1077, 1075, 1132, 1155,    0, 1077, 1079,
     1079, 1079, 1079, 1155, 1185, 1130, 1079, 1081, 1081, 1081,
     1081, 1083, 1083, 1083, 1081, 1085, 1085, 1085, 1083,    0,
        0,    0, 1085, 1087, 1087, 1087, 1087, 1089, 1089, 1089,
     1087, 1155, 1130,    0, 1089, 1091, 1091, 1091, 1091, 1093,
     1093, 1093, 1091,    0,    0,    0, 1093, 1095, 1095, 1095,
     1095, 1097, 1097, 1097, 1095,    0,    0,    0, 1097, 1099,

     1099, 1099, 1099, 1101, 1101, 1101, 1099,    0,    0,    0,
     1101, 1103, 1103, 1103, 1103, 1105, 1105, 1105, 1103,    0,
        0,    0, 1105, 1107, 1107, 1107, 1107, 1109, 1109, 1109,
     1107,    0, 1128,    0, 1109, 1111, 1111, 1111, 1111, 1113,
     1113, 1113, 1111, 1115,    0, 1115, 1113, 1128, 1116, 1115,
     1116, 1117, 1133, 1117, 1116, 1134, 1118, 1117, 1118, 1119,
     1134, 1119, 1118, 1137, 1141, 1119, 1137, 1122, 1115, 1122,
     1133, 1144, 1138, 1139, 1128, 1138, 1139, 1145, 1147, 1142,
     1148, 1141, 1142,    0, 1150, 1211, 1215, 1117, 1134, 1150,
     1122, 1156, 1145, 1144, 1137,    0, 1115, 1133, 1156, 1158,

     1147, 1148, 1151, 1138, 1139, 1159, 1158, 1151, 1141, 1164,
     1142, 1159, 1211, 1215, 1117, 1164,    0, 1150, 1122, 1145,
     1144,    0, 1160, 1160, 1160,    0, 1156, 1147, 1148, 1160,
     1162, 1162, 1162, 1184, 1158, 1151,    0, 1162, 1166, 1166,
     1166, 1167, 1167, 1167, 1167, 1166, 1169, 1184, 1167, 1181,
     1182, 1186, 1169, 1175, 1175, 1175, 1175, 1177, 1187, 1177,
     1175, 1189, 1178, 1177, 1178, 1188, 1190, 1186, 1178, 1191,
     1181, 1182, 1187, 1192, 1184, 1193, 1188, 1196, 1199, 1235,
     1193, 1194, 1189, 1191, 1198, 1199, 1200, 1190, 1177, 1192,
     1197, 1196,    0,    0, 1186,    0, 1178, 1181, 1182, 1187,

     1194, 1197,    0, 1200, 1188, 1198, 1235,    0, 1193, 1189,
     1191, 1218,    0, 1199, 1190, 1177, 1192,    0, 1196, 1204,
     1204, 1204, 1208, 1178, 1208, 1214, 1204, 1194, 1208, 1197,
     1200, 1218, 1198, 1206, 1206, 1206, 1209, 1212, 1209, 1216,
     1206, 1217, 1209, 1219, 1212, 1226, 1214, 1228, 1217, 1223,
     1219, 1220, 1208, 1228, 1220, 1224, 1223, 1225, 1218, 1227,
     1216, 1226, 1224, 1229, 1225, 1230, 1237, 1230, 1244, 1238,
     1227, 1230, 1212, 1214, 1233, 1244, 1217, 1245, 1219, 1208,
     1238, 1228, 1220, 1246, 1223, 1229, 1247, 1216, 1226, 1248,
     1224, 1237, 1225, 1233, 1245, 1249, 1253, 1265, 1227, 1255,

     1256, 1250, 1266, 1244, 1263, 1246, 1257, 1247, 1238, 1250,
        0, 1263, 1229, 1253, 1261, 1255, 1248, 1257, 1237, 1256,
     1233, 1245, 1249, 1260, 1265, 1264, 1260, 1271, 1267, 1266,
     1261, 1270, 1246, 1267, 1247, 1271, 1272, 1250, 1270, 1263,
     1253, 1264, 1255, 1273, 1272, 1257, 1256, 1275, 1277,    0,
     1273,    0,    0,    0, 1260, 1271,    0, 1261,    0,    0,
        0, 1267, 1271,    0, 1272,    0, 1270,    0, 1264,    0,
        0, 1272,    0,    0,    0, 1275, 1277,    0, 1273, 1283,
     1283, 1283, 1283, 1283, 1283, 1284, 1284, 1284, 1284, 1284,
     1284, 1285, 1285, 1285, 1285, 1285, 1285, 1286, 1286, 1286,

     1286, 1286, 1286, 1287, 1287, 1287, 1287, 1287, 1287, 1288,
     1288, 1288, 1288, 1288, 1288, 1289, 1289, 1289, 1289, 1289,
     1289, 1290, 1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291,
     1291, 1291, 1291, 1292, 1292, 1292, 1292, 1292, 1292, 1293,
     1293, 1293, 1293, 1293, 1293, 1294, 1294, 1295,    0, 1295,
     1295, 1296, 1296, 1296, 1296, 1296, 1296, 1297, 1297, 1297,
     1297, 1297, 1297, 1298, 1298, 1298, 1298, 1298, 1298, 1299,
     1299, 1299, 1299, 1299, 1299, 1300, 1300, 1300, 1300, 1300,
     1300, 1301, 1301, 1301, 1301, 1301, 1301, 1302, 1302, 1302,
     1302, 1302, 1302, 1303, 1303, 1303, 1303,    0, 1303, 1304,

        0, 1304, 1305,    0, 1305, 1306, 1306, 1306, 1306, 1306,
     1306, 1307, 1307, 1307, 1307, 1307, 1307, 1308, 1308, 1308,
     1308, 1308, 1308, 1309, 1309, 1309, 1309, 1309, 1309, 1310,
     1310, 1310, 1310, 1310, 1310, 1311, 1311, 1311, 1311, 1311,
     1311, 1312, 1312, 1312, 1312, 1312, 1312, 1313, 1313, 1313,
     1313, 1313, 1313, 1314, 1314, 1314, 1314, 1314, 1314, 1315,
     1315, 1315, 1315, 1315, 1315, 1316, 1316, 1316, 1316, 1316,
     1316, 1317, 1317, 1317, 1317, 1317, 1317, 1318, 1318, 1318,
     1318, 1318, 1318, 1319, 1319, 1319, 1319, 1319, 1319, 1320,
     1320, 1320, 1320, 1320, 1320, 1321, 1321, 1321, 1321, 1321,

     1321, 1322, 1322, 1322, 1322, 1322, 1322, 1323, 1323, 1323,
     1323, 1323, 1323, 1324, 1324, 1324, 1324, 1324, 1324, 1325,
     1325, 1325, 1325, 1325, 1325, 1326, 1326, 1326, 1326, 1326,
     1326, 1327, 1327, 1327, 1327, 1327, 1327, 1328, 1328, 1328,
     1328, 1328, 1328, 1329, 1329, 1329, 1329, 1329, 1329, 1330,
     1330, 1330, 1330, 1330, 1330, 1331, 1331, 1331, 1331, 1331,
     1331, 1332, 1332, 1332, 1332, 1332, 1332, 1333, 1333, 1333,
     1333, 1333, 1333, 1334, 1334, 1334, 1334, 1334, 1334, 1335,
     1335, 1335, 1335, 1335, 1335, 1336, 1336, 1336, 1336, 1336,
     1336, 1337, 1337, 1337, 1337, 1337, 1337, 1338, 1338, 1338,

     1338, 1338, 1338, 1339, 1339, 1339, 1339, 1339, 1339, 1340,
     1340, 1340, 1340, 1340, 1340, 1341, 1341, 1341, 1341, 1341,
     1341, 1342, 1342, 1342, 1342, 1342, 1342, 1343, 1343, 1343,
     1343, 1343, 1343, 1344, 1344, 1344, 1344, 1344, 1344, 1345,
     1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346,
     1346, 1347, 1347, 1347, 1347, 1347, 1347, 1348, 1348, 1348,
     1348, 1348, 1348, 1349, 1349, 1350, 1350, 1350, 1350, 1350,
     1350, 1351, 1351, 1351, 1351, 1351, 1351, 1352, 1352, 1352,
     1352, 1352, 1352, 1353, 1353, 1353, 1353, 1353, 1353, 1354,
     1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355, 1355,

     1355, 1356, 1356, 1356, 1356, 1356, 1356, 1357, 1357, 1357,
     1357, 1357, 1357, 1358, 1358, 1358, 1358, 1358, 1358, 1359,
     1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360, 1360, 1360,
     1360, 1361, 1361, 1361, 1361, 1361, 1361, 1362, 1362, 1362,
     1362, 1362, 1362, 1363, 1363, 1363, 1363, 1363, 1363, 1364,
     1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365, 1365, 1365,
     1365, 1366, 1366, 1366, 1366, 1366, 1366, 1367, 1367, 1367,
     1367, 1367, 1367, 1368, 1368, 1368, 1368, 1368, 1368, 1369,
     1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370,
     1370, 1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372, 1372,

     1372, 1372, 1372, 1373, 1373, 1373, 1373, 1373, 1373, 1374,
     1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375, 1375, 1375,
     1375, 1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377, 1377,
     1377, 1377, 1377, 1378, 1378, 1378, 1378, 1378, 1378, 1379,
     1379, 1380, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381,
     1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382, 1382, 1383,
     1383, 1383, 1383, 1383, 1383, 1384, 1384, 1384, 1384, 1384,
     1384, 1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386,
     1386, 1386, 1386, 1387, 1387, 1387, 1387, 1387, 1387, 1388,
     1388, 1388, 1388, 1388, 1388, 1389, 1389, 1389, 1389, 1389,

     1389, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391,
     1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1392, 1393,
     1393, 1393, 1393, 1393, 1393, 1394, 1394, 1394, 1394, 1394,
     1394, 1395, 1395, 1395, 1395, 1395, 1395, 1396, 1396, 1396,
     1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1397, 1398,
     1398, 1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399,
     1399, 1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401,
     1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402, 1403,
     1403, 1403, 1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404,
     1404, 1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406,

     1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1407, 1408,
     1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409,
     1409, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1412, 1412,
     1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1413,
     1414, 1414, 1414, 1414, 1414, 1414, 1415, 1415, 1415, 1415,
     1415, 1415, 1416, 1416, 1416, 1416, 1416, 1416, 1417, 1417,
     1417, 1417, 1417, 1417, 1418, 1418, 1418, 1418, 1418, 1418,
     1419, 1419, 1419, 1419, 1419, 1419, 1420, 1420, 1420, 1420,
     1420, 1420, 1421, 1421, 1421, 1421, 1421, 1421, 1422, 1422,
     1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423, 1423, 1423,

     1424, 1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425,
     1425, 1425, 1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427,
     1427, 1427, 1427, 1427, 1428, 1428, 1428, 1428, 1428, 1428,
     1429, 1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430, 1430,
     1430, 1430, 1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432,
     1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433, 1433, 1433,
     1434, 1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435, 1435,
     1435, 1435, 1436, 1436, 1436, 1436, 1436, 1436, 1437, 1437,
     1437, 1437, 1437, 1437, 1438, 1438, 1438, 1438, 1438, 1438,
     1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440, 1440,

     1440, 1440, 1441, 1441, 1441, 1441, 1441, 1441, 1442, 1442,
     1442, 1442, 1442, 1442, 1443, 1443, 1443, 1443, 1443, 1443,
     1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445, 1445,
     1445, 1445, 1446, 1446, 1447, 1447, 1447, 1447, 1447, 1447,
     1448, 1448, 1448, 1448, 1448, 1448, 1449, 1449, 1449, 1449,
     1449, 1449, 1450, 1450, 1450, 1450, 1450, 1450, 1451, 1451,
     1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452,
     1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454, 1454,
     1454, 1454, 1455, 1455, 1455, 1455, 1455, 1455, 1456, 1456,
     1456, 1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457,

     1458, 1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459, 1459,
     1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460, 1461, 1461,
     1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462,
     1463, 1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464,
     1464, 1464, 1465, 1465, 1465, 1465, 1465, 1465, 1466, 1466,
     1466, 1466, 1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467,
     1468, 1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469,
     1469, 1469, 1470, 1470, 1470, 1470, 1470, 1470, 1471, 1471,
     1471, 1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472,
     1473, 1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474,

     1474, 1474, 1475, 1475, 1475, 1475, 1475, 1475, 1476, 1476,
     1476, 1476, 1476, 1476, 1477, 1477, 1477, 1477, 1477, 1477,
     1478, 1478, 1478, 1478, 1478, 1478, 1479, 1479, 1479, 1479,
     1479, 1479, 1480, 1480, 1480, 1480, 1480, 1480, 1481, 1481,
     1481, 1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482, 1482,
     1483, 1483, 1483, 1483, 1483, 1483, 1484, 1484, 1485, 1485,
     1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486, 1486, 1486,
     1487, 1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488,
     1488, 1488, 1489, 1489, 1489, 1489, 1489, 1489, 1490, 1490,
     1490, 1490, 1490, 1490, 1491, 1491, 1491, 1491, 1491, 1491,

     1492, 1492, 1492, 1492, 1492, 1492, 1493, 1493, 1493, 1493,
     1493, 1493, 1494, 1494, 1494, 1494, 1494, 1494, 1495, 1495,
     1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496,
     1497, 1497,    0, 1497, 1497, 1497, 1498, 1498, 1498, 1498,
     1498, 1498, 1499, 1499, 1499, 1499, 1499, 1499, 1500, 1500,
     1500, 1500, 1500, 1500, 1501, 1501, 1501, 1501, 1501, 1501,
     1502, 1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503,
     1503, 1503, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505,
     1505, 1505, 1505, 1505, 1506, 1506, 1506, 1506, 1506, 1506,
     1507, 1507, 1507, 1507, 1507, 1507, 1508, 1508, 1508, 1508,

     1508, 1508, 1509, 1509, 1509, 1509, 1509, 1509, 1510, 1510,
     1510, 1510, 1510, 1510, 1511, 1511, 1511, 1511, 1511, 1511,
     1512, 1512, 1512, 1512, 1512, 1512, 1513, 1513, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;




//  following are keywords starting with c
#line 2198 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10
#define state_scanompfixed 11
#define state_scanompfree 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 31 "lexer.l"


#line 2434 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1283 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5529 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 33 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 52 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 53 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 58 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 79 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 87 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 102 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 103 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 106 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 118 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 122 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 123 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENDTEAM"):Y);            return ENDTEAM;           }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 90:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 107:
#line 223 "lexer.l"
case 108:
/* rule 108 can match eol */
#line 224 "lexer.l"
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 224 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 227 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 228 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 112:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 231 "lexer.l"
case 113:
YY_RULE_SETUP
#line 232 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 235 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 236 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 116:
YY_RULE_SETUP
#line 239 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 242 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 245 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 248 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 251 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 256 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 261 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 264 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 267 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 270 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 273 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 277 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 280 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 283 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 286 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 289 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 293 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 294 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 134:
YY_RULE_SETUP
#line 297 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 321 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 327 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 333 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 340 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 347 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 349 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 350 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 352 "lexer.l"
ECHO;
	YY_BREAK
#line 3378 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_scanfixpre):
case YY_STATE_EOF(state_scanompfixed):
case YY_STATE_EOF(state_scanompfree):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1283 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1283 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1282);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 352 "lexer.l"



void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


