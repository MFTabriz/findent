#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 146
#define YY_END_OF_BUFFER 147
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1316] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   18,   18,  147,  145,
      144,  145,  141,  140,  145,  142,  143,   16,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,    4,    5,    2,    3,    8,    9,    6,
        7,   15,   14,   10,   12,   11,   13,    1,  146,  146,
      109,  146,  109,  146,  146,  146,  146,  146,  146,  146,
      137,  137,  136,  137,  137,  125,  137,  137,  114,  113,
      114,  118,  117,  118,  118,   18,  138,    0,  140,    0,

        0,   16,   17,   16,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   34,    0,    0,    0,    0,   70,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   90,
        0,    0,    0,  109,    0,   97,    0,    0,    0,   97,
        0,    0,    0,  109,    0,    0,    0,    0,    0,    0,
       99,    0,    0,    0,    0,   97,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  125,    0,    0,    0,    0,    0,    0,  131,  112,
        0,    0,    0,   18,  139,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   35,    0,    0,    0,    0,

        0,   51,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   97,    0,    0,
        0,   97,    0,    0,    0,   97,    0,    0,    0,   97,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,    0,    0,    0,    0,  101,    0,    0,    0,
        0,    0,    0,   99,    0,    0,    0,  101,    0,    0,
        0,   97,    0,    0,    0,    0,    0,    0,   97,    0,
        0,   97,    0,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  126,    0,    0,    0,    0,    0,  112,  112,    0,
      116,  115,    0,    0,    0,    0,    0,   25,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       43,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   83,   84,    0,    0,    0,    0,
       91,   92,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   99,    0,    0,  103,    0,    0,   97,
        0,   97,   97,    0,   97,    0,    0,   97,   97,   97,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   98,    0,    0,    0,   98,    0,
        0,  104,    0,   99,    0,    0,  101,    0,  103,   99,
        0,   99,  109,    0,  101,    0,    0,    0,    0,    0,
        0,    0,    0,   99,    0,   97,    0,    0,    0,    0,
       96,    0,    0,    0,   96,    0,    0,    0,    0,    0,
      107,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  132,  112,    0,    0,    0,    0,
        0,   22,    0,    0,    0,   29,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       50,    0,    0,    0,   55,    0,    0,    0,    0,    0,
        0,    0,    0,   66,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   93,    0,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   99,    0,   97,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   98,    0,   98,   98,    0,   98,

        0,   99,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   96,    0,   96,   96,    0,   96,    0,    0,    0,
        0,    0,    0,   99,    0,    0,    0,  101,    0,    0,
        0,  106,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  129,  128,    0,    0,    0,
        0,    0,    0,    0,  110,  110,    0,    0,   21,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   44,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   68,    0,   71,    0,    0,    0,    0,   77,    0,
        0,    0,    0,    0,    0,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   99,  107,   99,    0,  101,    0,    0,

        0,    0,   99,    0,    0,    0,  101,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  127,    0,    0,
        0,  134,    0,    0,  111,  111,  110,  110,    0,    0,
        0,    0,    0,    0,    0,    0,   30,   31,    0,    0,
        0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
        0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   63,   64,    0,    0,   72,   74,    0,   76,    0,
        0,    0,    0,   82,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   97,    0,    0,    0,
        0,   97,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  103,    0,    0,    0,    0,   99,
        0,    0,    0,    0,    0,    0,  108,    0,    0,    0,
        0,    0,  100,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   98,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   96,    0,    0,    0,
        0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  103,    0,    0,    0,
        0,   99,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  103,    0,    0,    0,    0,   99,    0,
      106,    0,   99,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  133,   73,    0,    0,
        0,    0,    0,    0,    0,   32,   33,    0,   39,    0,
        0,    0,    0,    0,    0,   47,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   65,   69,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
        0,   97,    0,   97,    0,   97,    0,  102,    0,   99,
        0,  102,    0,   99,    0,   99,    0,    0,    0,  102,
        0,    0,  100,    0,  100,    0,    0,   99,    0,    0,

      102,    0,    0,    0,   98,    0,   98,    0,   98,    0,
      102,    0,   99,    0,   98,    0,   97,    0,   97,    0,
       96,    0,   96,    0,   96,    0,   96,    0,  102,    0,
       99,    0,  102,    0,   99,    0,  102,    0,   99,    0,
      102,    0,   99,    0,    0,    0,    0,    0,    0,    0,
      130,    0,    0,  135,    0,   20,   23,    0,    0,   26,
        0,    0,    0,    0,    0,   42,   45,    0,    0,    0,
       53,    0,    0,   57,    0,    0,   60,    0,    0,   75,
        0,    0,    0,   81,   85,    0,    0,   88,    0,    0,
        0,   99,    0,  105,    0,   99,    0,    0,  102,    0,

       99,    0,  100,  108,   99,    0,  102,    0,    0,    0,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   59,    0,    0,    0,
        0,    0,   86,   87,   89,    0,   99,    0,   99,    0,
        0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
        0,    0,    0,   49,   54,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   27,    0,   36,    0,
        0,   46,   48,   56,   58,   62,    0,    0,    0,    0,
      123,  124,    0,   37,   40,    0,   61,    0,    0,    0,
        0,    0,    0,    0,   80,    0,    0,    0,    0,    0,

       41,   78,    0,    0,    0,    0,   79,    0,  119,    0,
      120,   19,  121,  122,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,   14,    1,    1,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       30,   37,   38,   39,   40,   41,   42,   43,   44,   30,
       45,    1,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   30,   58,   59,   60,   61,
       62,   63,   30,   64,   65,   66,   67,   68,   69,   70,
       71,   30,    1,   72,    1,   72,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    1,    4,    4,    5,    1,    6,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    7,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1
    } ;

static yyconst flex_uint16_t yy_base[1550] =
    {   0,
        0,   72,  144,  216,  286, 3173,   18,   20,   19,   21,
       23,   24,   48,   49,   50,   93, 3161, 3160, 3159,  353,
       33,  164, 3135,  120, 3114,  105, 3084, 3082, 3088, 5885,
     5885,   28, 5885,   24, 3031, 5885, 5885,   54,   72,  220,
       80,  389,  176,  180,  231,  223,  233,  234,  235,   88,
      280,  336,  157, 5885, 5885, 5885, 5885, 5885, 5885, 5885,
     5885, 5885, 5885, 5885, 5885, 5885, 5885, 5885, 5885, 3034,
     5885,  121,  128,  453,  112,  131,  177,  525,  271,  596,
     5885,  173, 5885,  277,  377,  359,  340, 3012, 5885, 5885,
     3015, 5885, 5885,  194, 2927,    0, 5885,  112,   34, 2915,

        0, 2916,    0,  187,  139,  229,  248,  238,  289,  353,
      369,  386,   85,  410,  376,  457,  284,  226, 2892,  324,
      467,  227,  361,  374,  358,  459,  383,  461,  468, 2884,
      372,  469, 2897, 5885,  198,  197,  244,  510,  425,  200,
      323,  499,  434,  325,  667,  422,  486,  544,  739,  547,
     2884,  555,  558,  570,  578, 2878,  565,  586,  599,  811,
      656,  604,  613,  774,  634,  641,  312,  693,  706,  459,
      696,  835, 2826,  836,  560,  670,  707,  463,  841,  550,
      610, 2835,  574,    0, 5885,  587,  761,  594,  603,  682,
      772,  700,  567,  815,  824,  826,  534,  712,  708,  836,

      746,  882,  838,  854,  752,  751,  833,  850,  750,  753,
      834,  825,  900,  895,  906,  905,  923,  632,  912,  924,
      717,  632,  788,  435,  633,  964,  763, 2804,  882,  954,
      972, 2799,  778,  987,  785, 2794,  968,  205,  995, 2763,
     2744,  975,  869,  999, 1008, 1026, 1034, 1080,  907, 1038,
     1041,  718,  910, 1054, 1057, 1065, 2741,  935, 1099, 2729,
      991,  940, 1069, 5885, 1103, 1106, 1114, 2732,  976, 1126,
     1129, 2722, 1042, 1137, 1145, 2721, 2712, 1111, 5885, 1153,
     1156, 2707, 1161,  771, 1134, 1169, 1178, 1196, 1197, 1205,
     1204, 1213, 1228, 1212, 1231, 1240, 1243, 1252,  338, 1182,

      666, 5885,  982,  669, 1270, 1258, 1149,  503, 1271, 1060,
     5885, 5885,  896, 1015, 1177, 1253, 1105, 1211, 1271, 1264,
      969, 1195, 1279, 1251, 1026, 1021, 1280, 1284, 1293, 1295,
     1304, 1286, 1298, 1288, 1272, 1301, 1314, 1321, 1323, 1319,
     1346, 1343, 1336, 1322, 2679, 1342, 1328, 1352, 1348, 1353,
     1355, 1378, 1380, 1367, 2669, 2648, 1374, 1395, 1385, 1386,
     2638, 1412, 1402, 1421, 1250, 1440, 1268, 1448, 1431, 1456,
     1453, 1468, 1465, 2634, 1165, 1476, 2629, 1473, 1481, 5885,
     1484, 2604, 5885, 1492, 2593, 2586, 1496, 5885, 2573, 5885,
     1499, 1500, 1508, 1511, 1519, 1521, 1529, 1516, 1537, 1546,

     1564, 1572, 1618, 1575, 1526, 1585, 1592, 1600, 1534, 1608,
     1576, 1637, 1640, 1597, 2568, 1648, 1650, 1664, 2549, 1605,
     1672, 2525, 1645, 5885, 1676, 1684, 2524, 1503, 5885, 5885,
     1692, 5885, 2504, 1695, 2495, 1653, 1699, 1707, 1704, 1715,
     1718, 1726, 2480, 5885, 1730, 5885, 1733, 1734, 1742, 1745,
     2467, 1753, 1755, 1763, 2461, 1750, 1771, 1780, 1798, 1799,
     1423, 1760, 1807, 1810, 1815, 1826, 1827, 1834, 1835, 1842,
     1851, 1864, 1861, 1869, 1355, 1399, 1410, 1410, 1270, 1440,
     1880, 1859, 1884, 1853, 5885, 1668, 1129, 1449, 1800, 1510,
     1569, 1753, 1789, 1874, 1879, 1899, 1881, 1805, 1886, 1457,

     1525, 1894, 1908, 1816, 1762, 1724, 1898, 1902, 1903, 1872,
     2411, 1915, 1688, 1914, 2374, 1918, 1925, 1927, 1926, 1930,
     1929, 1936, 1943, 2360, 1942, 1947, 1954, 1946, 1956, 1966,
     1969, 1970, 1976, 1985, 1974, 1949, 1986, 1977, 5885, 1988,
     2314, 2016, 2005, 2027, 2013, 2033,  841, 2038, 2306, 2043,
     2305, 2047, 2052, 2055, 2059, 5885, 2062, 5885, 2064, 2024,
     2072, 2069, 2077,  947, 2080, 2302, 2084, 2291, 2088, 2091,
     2094, 2097, 2100, 2112, 2115, 2118, 2101, 2130,  959, 2134,
     2251, 2138, 2119, 2142, 1239, 2145, 2240, 2149, 2210, 2153,
     2156, 2160, 2126, 2163, 5885, 2166, 2121, 5885, 2169, 2120,

     2173, 5885, 1339, 2108, 2176, 2105, 2180, 2183, 2187, 2190,
     2193, 2194, 2202, 2205, 2197, 1395, 2207, 2104, 2213, 2068,
     2217, 5885, 2220, 2065, 5885, 2223, 2063, 2228, 2246, 2247,
     2250, 2258, 2255, 1896, 2263, 1565, 2266, 1895, 1868, 2275,
     2278, 1841, 2279, 2287, 2290, 2293, 2298, 2301, 2308, 2309,
     2316, 2319, 2324, 2327, 1944, 5885, 5885, 1998, 1505, 2219,
     2333, 2336, 2348, 2337, 2282,  168, 2233, 2332, 1841, 2299,
     2339, 2341, 2340, 2342, 2351, 2327, 2347, 2353, 2361, 2300,
     2352, 2346, 2376, 2380, 2368, 1824, 2384, 2385, 2398, 2379,
     2386, 2405, 2406, 2399, 2408, 2413, 2418, 2425, 2427, 2438,

     2414, 1778, 2415, 1754, 2442, 2424, 2448, 2421, 2456, 2439,
     2453, 2455, 2476, 2464, 2457, 1744, 2498, 2499, 2530, 2502,
     2534, 2511, 2542, 2515, 2519, 2546, 2554, 2558, 2561, 2562,
     2570, 2573, 2581, 2583, 2591, 2578, 2588, 2599, 2602, 2610,
     2612, 2620, 2623, 2628, 2627, 2636, 2639, 2647, 2644, 2651,
     2655, 2658, 2666, 2663, 2670, 2678, 2675, 2686, 2689, 2697,
     2700, 5885, 2702, 2705, 2707, 2715, 2719, 2727, 2730, 2731,
     2739, 2742, 2750, 2752, 2760, 2747, 2757, 2768, 2771, 2779,
     5885, 2788, 2806, 2807, 2775, 2815, 2776, 2819, 2822, 2835,
     2823, 2838, 2846, 5885, 1744, 5885, 2849, 1735, 2854, 2853,

     2862, 2865, 1717, 2873, 2875, 2883, 1710, 2870, 2886, 2893,
     2894, 2901, 2902, 2909, 2910, 2917, 2456, 5885, 2474, 2491,
     2672, 2926, 2927, 2919, 5885, 1643, 2009, 5885, 2515, 2877,
     2920, 2922, 2925, 2593, 2660, 2732, 1697, 1689, 2852, 2603,
     2513, 2516, 2750, 2916, 2844, 1686, 2936, 2923, 2918, 2812,
     2941, 1675, 2813, 2950, 2931, 2947, 2955, 2945, 2973, 2930,
     2958, 1674, 1665, 2974, 2977, 1654, 1644, 2980, 1643, 2983,
     2964, 2985, 2993, 1599, 2988, 2996, 2990, 2987, 2997, 3030,
     3009, 3038, 3012, 3056, 3046, 3064, 1610, 3061, 3072, 3069,
     3080, 5885, 3083, 3091, 3095, 3103, 3107, 3110, 3111, 3119,

     3122, 3130, 3132, 3140, 1602, 3127, 3148, 3137, 3152, 5885,
     3156, 3164, 3168, 3176, 3180, 3183, 1871, 3190, 3187, 3198,
     3201, 3209, 3212, 3188, 3220, 3223, 3224, 3232, 3235, 3243,
     3245, 3253, 1594, 3240, 3261, 3264, 3250, 3272, 3280, 3269,
     3284, 3287, 3295, 5885, 3298, 3306, 3314, 3318, 3326, 3330,
     3334, 3337, 3303, 3345, 3342, 3353, 3356, 3364, 3367, 3372,
     3371, 3380, 3383, 3391, 3393, 3401, 1591, 3388, 3409, 3398,
     3413, 5885, 3417, 3425, 3429, 3437, 3441, 3450, 3468, 3469,
     3472, 3480, 3477, 3490, 3497, 3505, 1578, 3502, 3514, 3512,
     3522, 5885, 3525, 3533, 3537, 3545, 3548, 3549, 3557, 3560,

     3568, 3570, 3578, 1531, 3565, 3586, 3575, 3590, 5885, 3594,
     1510, 3602, 5885, 3605, 3610, 3613, 3618, 3626, 3629, 3634,
     2997, 2574, 3005, 3622, 3638, 3642, 5885, 5885, 3222, 3288,
     3624, 3062, 3632, 3110, 3638, 1458, 1449, 3016, 5885, 3371,
     3470, 3645, 3569, 3646, 3408, 3633, 3655, 3635, 3419, 3214,
     3652, 3667, 3659, 3109, 3673, 3286, 1437, 1406, 3678, 3683,
     3550, 3685, 3684, 3687, 3648, 3327, 3693, 3694, 3718, 1404,
     3730, 5885, 3745, 1372, 3749, 5885, 3757, 1332, 3761, 5885,
     3769, 1327, 3773, 5885, 3721, 1274, 3777, 3733, 3785, 1214,
     3782, 3793, 3796, 3801, 3804, 3805, 3808, 1190, 3813, 3821,

     1172, 3812, 3829, 3837, 1171, 3841, 5885, 3849, 1119, 3857,
     1116, 3861, 5885, 3865, 5885, 3873, 1108, 3877, 5885, 3885,
     1105, 3889, 5885, 3897, 1060, 3901, 5885, 3909, 1043, 3913,
     5885, 3921, 1025, 3925, 5885, 3933, 1011, 3937, 5885, 3945,
     1001, 3949, 5885, 3952, 3957, 3960, 3965, 3972, 3973, 3036,
     5885, 3298, 3905, 5885, 3766,  965,  909, 3657, 3600,  880,
     3752, 3054, 3795, 3820, 3962,  862,  845, 3950, 3963, 3966,
      830, 3585, 3971,  788, 3955, 3724,  787, 3976, 3818,  779,
     3973, 3974, 3972,  778,  720, 3977, 3981,  711, 3986, 3846,
     4024, 5885, 4038,  701, 4001, 5885, 4042, 4050,  700, 4014,

      686,  654,  644,  627, 5885, 4058,  622, 4061, 4066, 4069,
     3475, 3686, 3990, 4018,  589, 3697, 3996, 4031, 4041, 4051,
     4059, 4060, 4064, 4068, 4065, 4066,  576, 4072, 4062, 4070,
     4080, 4076,  569,  568,  538, 4111, 5885, 4137, 5885, 4139,
     4140, 4147, 3566, 4047, 4107,  500, 4118, 4061, 4120, 4130,
     4089, 4136, 4141,  470,  458, 4146, 4147, 4150, 4134, 4148,
     4152, 4153, 4176,  432,  415, 4161,  394, 4141,  379, 4149,
     4165,  350,  312,  287,  273,  261, 4171, 4156, 4170, 4189,
     4166, 4172, 4195, 5885,  242, 4180,  228, 4192, 4194, 4210,
      174,  121, 4196, 4199,   94, 4213, 4217, 4179, 4188, 4223,

       87,   53, 4219, 4222, 4228, 4240,   37, 4217, 5885, 4221,
     5885,    8, 5885, 5885, 5885, 4293, 4300, 4307, 4314, 4321,
     4328, 4335, 4342, 4349, 4356, 4363, 4370, 4374, 4378, 4383,
     4390, 4397, 4404, 4411, 4418, 4425, 4432, 4439, 4445, 4448,
     4452, 4459, 4466, 4473, 4480, 4487, 4494, 4501, 4508, 4515,
     4522, 4529, 4536, 4543, 4550, 4557, 4564, 4571, 4578, 4585,
     4592, 4599, 4606, 4613, 4620, 4627, 4634, 4641, 4648, 4655,
     4662, 4669, 4676, 4683, 4690, 4697, 4704, 4711, 4718, 4725,
     4732, 4739, 4746, 4753, 4757, 4762, 4769, 4776, 4783, 4790,
     4797, 4804, 4811, 4818, 4825, 4832, 4839, 4846, 4853, 4860,

     4867, 4874, 4881, 4888, 4895, 4902, 4909, 4916, 4923, 4930,
     4937, 4944, 4951, 4958, 4962, 4967, 4974, 4981, 4988, 4995,
     5002, 5009, 5016, 5023, 5030, 5037, 5044, 5051, 5058, 5065,
     5072, 5079, 5086, 5093, 5100, 5107, 5114, 5121, 5128, 5135,
     5142, 5149, 5156, 5163, 5170, 5177, 5180, 5185, 5192, 5199,
     5206, 5213, 5220, 5227, 5234, 5241, 5248, 5255, 5262, 5269,
     5276, 5283, 5290, 5297, 5304, 5311, 5318, 5325, 5332, 5339,
     5346, 5353, 5360, 5367, 5374, 5381, 5388, 5395, 5402, 5409,
     5416, 5420, 5425, 5432, 5439, 5446, 5453, 5460, 5467, 5474,
     5481, 5488, 5495, 5502, 5509, 5516, 5523, 5530, 5537, 5544,

     5551, 5558, 5565, 5572, 5579, 5586, 5593, 5600, 5607, 5614,
     5621, 5628, 5635, 5642, 5649, 5656, 5663, 5670, 5677, 5681,
     5686, 5693, 5700, 5707, 5714, 5721, 5728, 5735, 5742, 5749,
     5756, 5763, 5770, 5777, 5784, 5791, 5798, 5805, 5812, 5819,
     5826, 5833, 5840, 5847, 5854, 5861, 5868, 5875, 5879
    } ;

static yyconst flex_int16_t yy_def[1550] =
    {   0,
     1316, 1316, 1317, 1317,    2,    5, 1318, 1318, 1319, 1319,
     1320, 1320, 1320, 1320, 1320, 1320, 1321, 1321, 1322, 1323,
     1324, 1324, 1325, 1325, 1326, 1326, 1327, 1327, 1315, 1315,
     1315, 1315, 1315, 1315, 1328, 1315, 1315, 1329, 1315, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1330,
     1315, 1331, 1332, 1333, 1334, 1335, 1336, 1333, 1331, 1335,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1337, 1315, 1315, 1315, 1328,

     1338, 1339, 1340, 1329, 1315, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1330, 1315, 1341, 1342, 1343, 1344, 1332, 1342,
     1345, 1346, 1347, 1342, 1348, 1349, 1350, 1351, 1348, 1349,
     1352, 1353, 1354, 1355, 1355, 1356, 1357, 1355, 1358, 1359,
     1347, 1347, 1347, 1347, 1347, 1347, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1360, 1315, 1315, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1315, 1328, 1328, 1328, 1328,

     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1361, 1362, 1363, 1342, 1364, 1356, 1362, 1352, 1365, 1363,
     1363, 1356, 1365, 1363, 1345, 1352, 1366, 1346, 1346, 1356,
     1366, 1367, 1368, 1369, 1370, 1371, 1372, 1370, 1368, 1373,
     1371, 1342, 1374, 1375, 1372, 1372, 1356, 1376, 1372, 1352,
     1315, 1373, 1373, 1315, 1373, 1369, 1369, 1356, 1373, 1369,
     1377, 1356, 1378, 1377, 1377, 1356, 1379, 1378, 1315, 1378,
     1377, 1356, 1380, 1342, 1381, 1382, 1383, 1384, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1315, 1315, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1386, 1387, 1388, 1387, 1389, 1388, 1388,
     1389, 1388, 1390, 1352, 1379, 1356, 1356, 1389, 1389, 1315,
     1389, 1356, 1315, 1388, 1356, 1391, 1391, 1315, 1356, 1315,
     1392, 1393, 1394, 1393, 1395, 1394, 1394, 1395, 1394, 1396,

     1397, 1398, 1396, 1397, 1399, 1400, 1398, 1398, 1401, 1398,
     1395, 1395, 1395, 1399, 1352, 1402, 1400, 1400, 1356, 1402,
     1400, 1356, 1401, 1315, 1401, 1398, 1356, 1315, 1315, 1315,
     1395, 1315, 1356, 1394, 1356, 1403, 1404, 1403, 1404, 1404,
     1403, 1403, 1379, 1315, 1404, 1315, 1405, 1406, 1407, 1406,
     1352, 1408, 1407, 1407, 1356, 1408, 1407, 1409, 1410, 1410,
     1411, 1412, 1413, 1414, 1414, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1315,

     1315, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1315, 1415,
     1415, 1416, 1417, 1418, 1417, 1419, 1418, 1418, 1419, 1418,
     1419, 1419, 1419, 1418, 1379, 1315, 1419, 1315, 1420, 1421,
     1422, 1421, 1423, 1422, 1422, 1423, 1422, 1423, 1423, 1423,
     1422, 1420, 1424, 1425, 1420, 1424, 1426, 1427, 1425, 1425,
     1428, 1425, 1426, 1429, 1427, 1427, 1429, 1427, 1428, 1428,
     1425, 1423, 1429, 1429, 1315, 1429, 1356, 1315, 1427, 1356,

     1428, 1315, 1430, 1431, 1430, 1431, 1431, 1430, 1431, 1430,
     1432, 1433, 1434, 1433, 1435, 1434, 1434, 1435, 1434, 1435,
     1435, 1315, 1435, 1356, 1315, 1434, 1356, 1436, 1437, 1437,
     1438, 1439, 1438, 1440, 1441, 1439, 1439, 1356, 1441, 1439,
     1442, 1443, 1444, 1445, 1420, 1442, 1442, 1420, 1420, 1420,
     1420, 1420, 1420, 1442, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1446, 1315, 1315, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1315,
     1315, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,

     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1448, 1449, 1450, 1449,
     1451, 1450, 1450, 1451, 1451, 1451, 1450, 1451, 1452, 1453,
     1454, 1453, 1455, 1454, 1454, 1455, 1455, 1455, 1454, 1455,
     1456, 1457, 1456, 1458, 1459, 1460, 1461, 1461, 1462, 1459,
     1463, 1460, 1460, 1463, 1462, 1461, 1463, 1463, 1460, 1462,
     1463, 1315, 1464, 1465, 1465, 1464, 1465, 1464, 1466, 1467,
     1468, 1467, 1469, 1468, 1468, 1469, 1469, 1469, 1468, 1469,
     1315, 1470, 1471, 1471, 1472, 1473, 1472, 1474, 1473, 1473,
     1474, 1474, 1474, 1315, 1475, 1315, 1473, 1475, 1476, 1477,

     1478, 1477, 1479, 1480, 1478, 1478, 1475, 1480, 1481, 1481,
     1476, 1481, 1481, 1481, 1481, 1481, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1315, 1315, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1483,
     1484, 1485, 1484, 1486, 1485, 1485, 1475, 1486, 1485, 1486,
     1486, 1315, 1486, 1485, 1486, 1485, 1486, 1481, 1487, 1488,

     1487, 1489, 1488, 1488, 1475, 1489, 1488, 1489, 1489, 1315,
     1489, 1488, 1489, 1488, 1489, 1490, 1491, 1490, 1492, 1493,
     1494, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1499, 1501,
     1500, 1500, 1475, 1501, 1500, 1502, 1503, 1502, 1502, 1503,
     1503, 1501, 1501, 1315, 1501, 1500, 1502, 1501, 1500, 1503,
     1501, 1504, 1505, 1504, 1505, 1505, 1504, 1505, 1504, 1506,
     1507, 1508, 1507, 1509, 1508, 1508, 1475, 1509, 1508, 1509,
     1509, 1315, 1509, 1508, 1509, 1508, 1509, 1510, 1511, 1511,
     1512, 1513, 1512, 1514, 1513, 1513, 1475, 1514, 1513, 1514,
     1514, 1315, 1514, 1513, 1514, 1513, 1515, 1516, 1517, 1516,

     1518, 1517, 1517, 1475, 1518, 1517, 1518, 1518, 1315, 1518,
     1475, 1517, 1315, 1519, 1519, 1515, 1519, 1519, 1519, 1519,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1315, 1315, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1521, 1475,
     1522, 1315, 1521, 1475, 1522, 1315, 1523, 1475, 1524, 1315,
     1523, 1475, 1524, 1315, 1525, 1526, 1527, 1528, 1528, 1475,
     1529, 1528, 1530, 1530, 1530, 1531, 1532, 1533, 1534, 1534,

     1475, 1527, 1534, 1535, 1475, 1536, 1315, 1535, 1475, 1537,
     1475, 1538, 1315, 1536, 1315, 1539, 1475, 1540, 1315, 1541,
     1475, 1542, 1315, 1541, 1475, 1542, 1315, 1543, 1475, 1544,
     1315, 1543, 1475, 1544, 1315, 1545, 1475, 1546, 1315, 1545,
     1475, 1546, 1315, 1547, 1547, 1548, 1547, 1548, 1548, 1315,
     1315, 1315, 1315, 1315, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1315, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1527,
     1527, 1315, 1527, 1475, 1529, 1315, 1529, 1528, 1475, 1531,

     1533, 1533, 1533, 1475, 1315, 1534, 1475, 1547, 1547, 1547,
     1315, 1315, 1549, 1549, 1549, 1549, 1315, 1549, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1527, 1315, 1529, 1315, 1548,
     1547, 1548, 1315, 1315, 1549, 1549, 1549, 1315, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1548, 1315, 1315, 1549, 1549, 1315, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1315, 1315, 1549, 1315, 1549, 1549, 1549, 1549, 1549, 1549,
     1315, 1315, 1549, 1549, 1549, 1549, 1549, 1315, 1315, 1549,

     1549, 1549, 1549, 1315, 1315, 1549, 1549, 1315, 1315, 1315,
     1315, 1549, 1315, 1315,    0, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315
    } ;

static yyconst flex_uint16_t yy_nxt[5958] =
    {   0,
       30,   30,   31,   32,   30,   30,   30,   30,   30,   33,
       30,   30,   30,   30,   34,   34,   30,   30,   30,   30,
       55,   59,   55,   59,  101,   63,   63,   56,   57,   56,
       57,   97,   64,   64,   82,   83,   82,   84,   99,   99,
       65,   65,   98,   98,   36,   30,   30,   30,   99,   99,
       63,   63,   63,  101,   67,   67,   67,   64,   64,   64,
      102,  103,   67,   60,   61,   60,   61,   66,   66,  101,
      101,   30,   30,   30,   37,   32,   30,   30,   30,   30,
       30,   33,   30,   30,   30,   30,   34,   34,   30,   30,
       30,   30,   66,   66,   66,   63,  101,   67,   67,   67,

      105,  101,   64,  101,  101,   67,   94,   93,   94,   95,
      101,  108,  126,  195,  151,   97,   36,   30,   30,   30,
      152,   67,   90,  136,   91,  137,   98,   98,  105,  138,
      140,   91,  141,  144, 1299,  146,  142,   66,  108,  153,
      126,  195,   91,   30,   30,   30,   31,   32,   30,   30,
       30,   30,   30,   33,   30,   30,   30,   30,   34,   34,
       30,   30,   30,   30,   67,   85,   83,   85,   84,   86,
       91,  828,  186,  101,  167,   87,  167,  168,  155,  156,
      155,  157,  828,   88,  132,  158,   87, 1298,   36,   30,
       30,   30,  101,  102,  103,  181,  101,  181,  182,  186,

      136,  225,  222,  101,  225,  226,  223,  389,  226,  241,
      114,  115,  132,  116,   87,   30,   30,   30,   37,   32,
       30,   30,   30,   30,   30,   33,   30,   30,   30,   30,
       34,   34,   30,   30,   30,   30,  101,  114,  115,  101,
      116,  106,  101,  101,  101,  101,  228,  101,  119,  101,
      101,  101,  229,  210,  101,  120,  121,  107,  101,  206,
       36,   30,   30,   30,  101,  117,  187,  122,  123,  106,
      118,  124,  189,  136,  125,  137,  119,  101,  169,  138,
      169,  210,  120,  121,  107,  188,  206,   30,   31,  101,
      159,   39,  117,  187,  122,  123,  101,  118,  124,  189,

      101,  125,  170,  101,  127,  101,   40,   41,   42,   43,
       44,   45,  188,  167,   46,  167,  168,   47,   48,  128,
      205,   49,   50,   51,   52,  236,  190,   53,  101,  225,
      170,  237,  127,  226,   40,   41,   42,   43,   44,   45,
      101,  177,   46,  177,   47,   48,  128,  205,   49,   50,
       51,   52,  101,  190,   53,   73,   74,   75,   76,  207,
      174,   77,  174,  129,   76,  178,  101,   78,   78,  101,
      130,  475,   79,  191,  101,   80,   76,  101,  171,  131,
      171,  168,  172,  175,  211,  101,  207,  176,  101,  192,
      101,  129,  101,  178,  213,  101,  173,  130,  475,  101,

      200,  191,  101,   80,   76,  101,  131,  219,  212,  109,
      101,  175,  211,  201,  216,  176,  110,  192,  193,  194,
      111,  213,  196,  112,  151,  113,  101,  140,  200,  141,
      250, 1282,  197,  142,  219,  212,  144,  109,  243,  225,
      201,  216,  244,  226,  110,  193,  194,  111, 1281,  198,
      112,  199,  113,  143,  143,  144,  145,  146,  143,  143,
      197,  148,  143,  143,  143,  143,  143,  149,  149,  143,
      143,  143,  143,  101,  101,  101,  198,  101,  199,  214,
      202,  215,  217,  101,  101,  101,  101,  299,  252,  208,
      253,  304,  218,  220,  254,  203,  204,  143,  143,  143,

      239,  240,  239,  241,  308,  209,  308,  214,  202,  215,
      217,  231,  232,  231,  233,  299,  101,  208,  234,  304,
      218,  220,  203,  204,  143,  143,  143,  144,  149,  146,
      143,  143,  209,  153,  143,  143,  143,  143,  143,  149,
      149,  143,  143,  143,  143,  256,  257,  256,  258,  151,
      101,  308,  259,  309,  101,  250,  263,  264,  263,  267,
      268,  267,  269,  265,  310,  310,  270,  279,  327,  143,
      143,  143,  272,  280,  273,  311,  312,  311,  274,  275,
      156,  275,  273,  101,  101,  101,  274,  281,  282,  281,
      273,  300,  101,  301,  274,  327,  143,  160,  144,  160,

      146,  284,  322,  285,  153,  101,  144,  286,  243,  313,
      101,  181,  244,  181,  182,  144,  161,  243,  300,  101,
      301,  244,  315,  162,  291,  317,  277,  163,  316,  322,
      164,  277,  165,  292,  228,  374,  144,  313,  243,  166,
      368,  375,  244,  144,  161,  243, 1203,  293,  101,  244,
      315,  162,  291,  317,  163,  316, 1203,  164,  144,  165,
      243,  292,  297,  298,  244,  361,  166,  242,  242,  144,
      245,  243,  242,  242,  293,  247,  242,  242,  242,  242,
      242,  248,  248,  242,  242,  242,  242,  289, 1203,  478,
      297,  298,  361,  290,  169,  302,  169,  171,  101,  171,

      168,  172,  480,  303,  277,  277,  318,  169,  177,  169,
      177,  242,  242,  242,  289,  173,  101,  478,  170,  136,
      290,  365,  225,  302,  101,  366,  226,  101,  101,  480,
      303,  170,  178,  328,  318,  329,  101,  321,  242,  242,
      242,  144,  248,  243,  242,  242,  170,  244,  242,  242,
      242,  242,  242,  248,  248,  242,  242,  242,  242,  170,
      178,  328,  101,  329,  321,  228,  101,  101,  101,  101,
      331,  368,  346,  347,  350,  225,  144,  101,  243,  226,
      383,  351,  244,  242,  242,  242,  381,  236,  101,  370,
      232,  370,  371,  237,  101,  101,  372,  294,  331,  314,

      346,  347,  350,  101,  101,  319,  295,  296,  320,  351,
      242,  242,  287,  144,  287,  243,  242,  242,  242,  244,
      242,  242,  242,  242,  242,  294,  314,  242,  242,  242,
      242,  101,  319,  295,  296,  320,  174,  174,  174,  174,
      101,  101,  305,  382,  305,  724,  101,  353,  325,  101,
      101,  354,  101,  323,  101,  242,  242,  242,  242,  175,
      175,  101,  324,  176,  176,  306,  101,  326,  330,  307,
      101,  151,  348,  352,  344,  353,  325,  395,  101,  354,
      323,  349,  242,  379,  380,  379,  345,  175,  175,  324,
      381,  176,  176,  306,  326,  330,  101,  307,  101,  348,

      352,  344,  332,  333,  334,  335,  336,  337,  349,  151,
      338,  101,  415,  345,  339,  395,  101,  340,  416,  341,
      342,  101,  101,  343,  355,  101,  356,  488,  101,  358,
      332,  333,  334,  335,  336,  337,  362,  424,  338,  101,
      101,  339,  430,  425,  340,  357,  341,  342,  413,  433,
      343,  736,  355,  356,  488,  359,  382,  358,  371,  360,
      363,  422,  372,  749,  362,  376,  377,  376,  277,  387,
      388,  387,  357,  370,  232,  370,  371,  144,  430,  392,
      372,  101,  359,  393,  413,  101,  360,  363,  384,  385,
      384,  371,  428,  429,  428,  372,  239,  240,  239,  241,

      397,  268,  397,  398,  479,  277,  496,  399,  391,  391,
      144,  400,  392,  391,  391,  277,  402,  391,  391,  391,
      391,  391,  403,  403,  391,  391,  391,  391,  252,  277,
      405,  101,  479,  496,  406,  408,  257,  408,  409,  412,
      264,  412,  410,  252,  279,  405,  413,  277,  501,  406,
      440,  489,  391,  391,  391,  418,  419,  418,  420,  422,
      500,  409,  421,  487,  277,  410,  408,  257,  408,  409,
      412,  264,  412,  410,  487,  487,  501,  413,  489,  391,
      391,  391,  144,  403,  392,  391,  391,  500,  393,  391,
      391,  391,  391,  391,  403,  403,  391,  391,  391,  391,

      426,  427,  426,  409,  431,  432,  431,  410,  433,  277,
      398,  413,  277,  279,  399,  397,  268,  397,  398,  440,
      277,  101,  399,  277,  391,  391,  391,  434,  435,  434,
      398,  272,  666,  437,  399,  492,  451,  438,  441,  282,
      441,  437,  452,  666,  666,  438,  442,  156,  442,  437,
      484,  391,  484,  438,  445,  446,  445,  441,  282,  441,
      437,  440,  492,  284,  438,  448,  555,  556,  555,  449,
      454,  455,  454,  456,  485,  277,  277,  457,  391,  458,
      144,  458,  392,  391,  391,  391,  393,  391,  391,  391,
      391,  391, 1203,  101,  391,  391,  391,  391,  461,  144,

      462,  392,  485,  490,  463,  393,  144,  144,  392,  392,
      476,  101,  393,  393,  144,  144,  392,  392,  277,  477,
      393,  393,  391,  391,  391,  391,  497,  101,  464,  465,
      144,  490,  392,  144,  493,  392,  393,  466,  476,  393,
      469,  597,  144,  754,  392,  144,  477,  392,  393,  391,
      467,  393,  228,  497,  144,  464,  392,  465,  546,  481,
      393,  481,  493,  470,  466,  468,  471,  101,  469,  101,
      228,  305,  308,  305,  486,  491,  546,  467,  472,  499,
      101,  473,  261,  474,  495,  487,  487,  101,  101,  482,
      470,  483,  468,  471,  306,  101,  101,  494,  307,  498,

      101,  659,  101,  491,  101,  472,  511,  499,  473,  101,
      474,  101,  495,  502,  101,  503,  482,  101,  483,  505,
      101,  504,  306,  508,  510,  494,  307,  498,  659,  509,
      101,  277,  506,  511,  512,  101,  277,  101,  101,  101,
      502,  272,  503,  764,  101,  507,  515,  505,  513,  504,
      508,  510,  101,  514,  516,  518,  509,  517,  101,  101,
      506,  512,  101,  523,  101,  524,  526,  521,  101,  101,
      519,  101,  507,  525,  515,  513,  277,  531,  655,  529,
      514,  516,  518,  101,  517,  520,  522,  528,  527,  530,
      101,  523,  524,  526,  101,  521,  101,  624,  519,  776,

      525,  101,  101,  534,  533,  531,  655,  529,  277,  532,
      535,  101,  520,  522,  528,  527,  530,  536,  101,  537,
      538,  539,  101,  136,  656,  543,  541,  225,  101,  544,
      534,  226,  533,  382,  657,  549,  532,  535,  658,  550,
      540,  548,  232,  548,  549,  536,  537,  538,  550,  552,
      380,  552,  656,  101,  541,  383,  553,  548,  232,  548,
      549,  553,  657,  660,  550,  101,  658,  374,  540,  554,
      385,  554,  549,  375,  101,  383,  550,  376,  377,  376,
      277,  553,  552,  380,  552,  557,  558,  557,  667,  553,
      680,  660,  553,  554,  385,  554,  549,  387,  388,  387,

      550,  144,  151,  560,  428,  429,  428,  561,  563,  565,
      268,  565,  566,  151,  277,  667,  567,  680,  430,  563,
      569,  264,  569,  433,  570,  566,  101,  570,  415,  567,
      565,  268,  565,  566,  584,  277,  424,  567,  571,  435,
      571,  566,  590,  669,  819,  567,  559,  559,  144,  572,
      560,  559,  559,  681,  574,  559,  559,  559,  559,  559,
      575,  575,  559,  559,  559,  559,  252,  795,  577,  791,
      669,  819,  578,  580,  257,  580,  581,  252,  430,  577,
      582,  681,  277,  578,  570,  101,  586,  419,  586,  587,
      559,  559,  559,  588,  422,  277,  581,  670,  277,  415,

      582,  580,  257,  580,  581,  584,  277,  598,  582,  591,
      427,  591,  581,  596,  277,  101,  582,  559,  559,  559,
      144,  575,  560,  559,  559,  670,  561,  559,  559,  559,
      559,  559,  575,  575,  559,  559,  559,  559,  569,  264,
      569,  592,  432,  592,  308,  570,  308,  424,  570,  594,
      595,  594,  597,  590,  587,  272,  596,  604,  588,  101,
      101,  605,  559,  559,  559,  586,  419,  586,  587,  308,
      101,  665,  588,  599,  600,  599,  587,  601,  602,  601,
      588,  101,  666,  666,  590,  591,  427,  591,  581,  559,
      101,  101,  582,  592,  432,  592,  571,  435,  571,  566,

      570,  279,  101,  567,  101,  101,  279,  607,  608,  282,
      608,  604,  607,  101,  277,  605,  609,  446,  609,  608,
      282,  608,  604,  607,  692,  261,  605,  610,  156,  610,
      604,  609,  446,  609,  605,  284,  451,  612,  607,  277,
      101,  613,  615,  617,  455,  617,  618,  451,  277,  686,
      619,  692,  625,  615,  621,  622,  621,  624,  623,  618,
      101,  623,  634,  619,  617,  455,  617,  618,  635,  101,
      101,  619,  626,  627,  626,  618,  671,  686,  101,  619,
      559,  628,  144,  628,  560,  559,  559,  559,  561,  559,
      559,  559,  559,  559,  101,  685,  559,  559,  559,  559,

      461,  461,  631,  631,  671,  101,  632,  632,  637,  638,
      637,  639,  642,  672,  643,  640,  101,  642,  644,  643,
      668,  101,  685,  644,  559,  559,  559,  559,  144,  144,
      560,  560,  101,  678,  561,  561,  144,  144,  560,  560,
      101,  672,  561,  561,  144,  225,  560,  684,  668,  226,
      561,  559,  645,  144,  484,  560,  484,  101,  647,  561,
      661,  678,  661,  144,  646,  560,  144,  648,  560,  561,
      796,  144,  561,  560,  684,  225,  649,  561,  485,  226,
      645,  481,  650,  481,  651,  663,  647,  663,  101,  653,
      101,  646,  652,  654,  648,  101,  662,  101,  673,  277,

      690,  674,  101,  649,  261,  677,  485,  664,  679,  650,
      101,  482,  651,  483,  101,  101,  682,  653,  101,  101,
      652,  654,  675,  662,  101,  687,  673,  676,  690,  674,
      101,  101,  683,  677,  101,  664,  679,  689,  482,  688,
      483,  101,  101,  101,  682,  101,  101,  693,  695,  699,
      675,  698,  101,  687,  691,  676,  694,  697,  101,  101,
      683,  696,  101,  101,  689,  101,  688,  701,  817,  705,
      101,  700,  101,  702,  693,  703,  695,  699,  704,  698,
      706,  691,  101,  694,  697,  101,  101,  713,  696,  708,
      101,  707,  101,  101,  709,  701,  817,  705,  700,  710,

      702,  101,  101,  703,  101,  711,  704,  228,  706,  714,
      308,  712,  308,  721,  713,  228,  715,  708,  136,  707,
      718,  721,  709,  818,  719,  716,  151,  710,  723,  232,
      723,  724,  733,  711,  726,  380,  726,  714,  712,  723,
      232,  723,  724,  715,  727,  385,  727,  724,  726,  380,
      726,  818,  716,  728,  558,  728,  727,  385,  727,  724,
      555,  556,  555,  728,  558,  728,  144,  277,  730,  277,
      625,  151,  731,  735,  268,  735,  736,  733,  738,  264,
      738,  735,  268,  735,  736,  739,  435,  739,  736,  738,
      264,  738,  740,  432,  740,  739,  435,  739,  736,  144,

      741,  730,  252,  415,  745,  742,  625,  279,  746,  751,
      279,  743,  743,  748,  257,  748,  749,  144,  743,  730,
      252,  415,  745,  731,  277,  277,  746,  751,  598,  743,
      743,  753,  419,  753,  754,  748,  257,  748,  749,  756,
      427,  756,  749,  758,  595,  758,  753,  419,  753,  754,
      759,  600,  759,  754,  760,  602,  760,  756,  427,  756,
      749,  740,  432,  740,  758,  595,  758,  761,  762,  761,
      759,  600,  759,  754,  760,  602,  760,  766,  282,  766,
      764,  767,  446,  767,  766,  282,  766,  764,  767,  446,
      767,  768,  156,  768,  764,  284,  451,  770,  778,  622,

      778,  771,  773,  775,  455,  775,  776,  451,  775,  455,
      775,  776,  424,  773,  779,  627,  779,  776,  778,  622,
      778,  780,  781,  780,  779,  627,  779,  776,  729,  782,
      144,  782,  730,  729,  729,  729,  731,  729,  729,  729,
      729,  729,  598,  820,  729,  729,  729,  729,  461,  461,
      785,  785,  634,  424,  786,  786,  829,  634,  788,  790,
      638,  790,  791,  788,  793,  794,  793,  790,  638,  790,
      791,  820,  729,  729,  729,  729,  797,  798,  797,  791,
      642,  803,  800,  826,  829,  827,  801,  804,  806,  807,
      806,  808,  144,  430,  730,  642,  828,  800,  731,  729,

      642,  801,  800,  144,  430,  730,  801,  383,  383,  731,
      144,  144,  730,  730,  809,  101,  731,  731,  144,  831,
      730,  144,  841,  730,  731,  810,  144,  731,  730,  642,
      101,  800,  731,  812,  661,  801,  661,  821,  823,  821,
      823,  811,  809,  101,  813,  814,  816,  831,  101,  663,
      841,  663,  815,  810,  830,  101,  101,  101,  101,  832,
      822,  812,  101,  101,  837,  824,  833,  101,  811,  101,
      662,  664,  813,  814,  816,  836,  101,  101,  834,  815,
      835,  840,  830,  842,  101,  843,  839,  832,  822,  838,
      101,  837,  101,  824,  833,  101,  101,  662,  844,  664,

      101,  101,  101,  836,  846,  834,  847,  835,  848,  840,
      842,  845,  843,  839,  101,  101,  838,  851,  852,  849,
      850,  101,  101,  855,  101,  853,  844,  101,  854,  101,
      101,  101,  846,  847,  101,  857,  848,  101,  845,  858,
      101,  101,  859,  101,  851,  852,  849,  856,  850,  865,
      864,  855,  869,  853,  101,  101,  854,  860,  101,  862,
      867,  861,  863,  857,  101,  277,  866,  858,  868,  101,
      859,  101,  101,  101,  856,  261,  865,  864,  873,  869,
      101,  870,  444,  875,  860,  874,  862,  867,  861, 1021,
      863,  871,  101,  872,  866,  879,  868, 1022,  876,  277,

      136,  228,  881,  878,  228,  873,  882,  884,  277,  870,
      884,  875,  874,  382,  877,  888, 1021,  383,  871,  889,
      872,  383,  879,  893, 1023, 1022,  876,  893,  277,  277,
      878,  886,  887,  886,  888,  891,  892,  891,  889, 1028,
     1039,  877,  893,  894,  232,  894,  888,  895,  380,  895,
      889, 1023, 1038,  277,  893,  896,  385,  896,  888,  897,
      558,  897,  889,  144,  151,  899,  893, 1028, 1039,  900,
      902,  904,  905,  904,  906,  151,  261,  277,  907, 1038,
      430,  902,  909,  910,  909,  433,  911,  906,  390,  911,
      430,  907,  912,  268,  912,  906,  911,  277, 1151,  907,

      913,  264,  913,  914,  435,  914,  906,  911,  277,  101,
      907,  915,  432,  915,  917,  918,  919, 1033,  911,  101,
      920,  922,  923,  922,  924,  917, 1151,  919,  907,  415,
      252,  925,  927,  277, 1037,  930,  928,  932,  933,  932,
      934,  422,  261,  937,  935, 1033,  424,  938,  939,  257,
      939,  937,  941,  415,  101,  938,  943,  944,  943,  930,
      597, 1037,  934,  945,  101,  598,  935,  946,  419,  946,
      934,  945,  424,  821,  935,  821,  101,  598,  941,  947,
      427,  947,  937,  945, 1034,  101,  938,  948,  595,  948,
      949,  600,  949,  934,  945,  101,  822,  935,  950,  602,

      950,  951,  762,  951,  272,  941,  953,  279,  945,  279,
      954,  277, 1034,  956,  444,  956,  957,  282,  957,  953,
      958,  446,  958,  954,  822,  277,  277,  956,  959,  156,
      959,  953,  284,  451,  961,  954,  277,  261,  962,  964,
      966,  967,  966,  968,  451,  277,  390,  969,  101,  625,
      964,  971,  972,  971,  624,  973,  968, 1035,  973,  625,
      969,  974,  455,  974,  968,  973,  101,  277,  969,  975,
      622,  975,  976,  627,  976,  968,  973,  634,  634,  969,
      977,  781,  977,  984,  984, 1035, 1040,  973,  898,  978,
      144,  978,  899,  898,  898,  898,  900,  898,  898,  898,

      898,  898,  261,  277,  898,  898,  898,  898,  461,  461,
      981,  981,  261, 1040,  982,  982,  986,  987,  986,  988,
      991,  992,  991,  989,  795,  796,  988,  993,  101,  101,
      989,  993,  898,  898,  898,  898,  994,  638,  994,  988,
      796,  183, 1046,  989, 1048,  179,  993,  995,  794,  995,
      996,  798,  996,  988,  993,  803,  642,  989,  998,  898,
      101, 1001,  999, 1003, 1004, 1003, 1005,  803,  101, 1046,
     1006, 1048, 1013, 1001, 1008, 1009, 1008, 1011, 1010, 1005,
     1042, 1010,  277, 1006, 1012,  807, 1012, 1005,  144, 1036,
      899, 1006,  261,  101,  900,  144,  642,  899,  998,  134,

      101,  900,  999,  144,  144,  899,  899, 1042,  101,  900,
      900,  144,  144,  899,  899, 1029, 1036,  900,  900,  144,
     1026,  899, 1026,  103, 1014,  900, 1015, 1024,  823, 1024,
      823,  101,  101,  183,  101, 1017,  101, 1020,  101,  101,
     1045,  101, 1029, 1016, 1027, 1032,  101,  101, 1018, 1019,
     1041, 1014,  101, 1015, 1025,  824, 1043,  101, 1030, 1044,
     1031,  101, 1017,  101, 1055, 1020,  101, 1050, 1045, 1047,
     1016,  101, 1027, 1032,  101, 1018, 1019, 1041, 1051, 1052,
      101, 1053, 1025,  824, 1043, 1030, 1044, 1031, 1049,  101,
      101, 1055, 1056,  101, 1050, 1054,  101, 1047, 1057,  101,

     1061,  101, 1059,  101,  101, 1051,  101, 1052, 1053,  101,
     1058,  228,  101,  101,  228, 1049, 1065,  884, 1067, 1056,
      884,  180, 1060, 1054, 1062, 1068, 1057, 1061, 1064, 1063,
     1059,  179,  136, 1066,  881, 1150,  134, 1058,  882, 1069,
     1070, 1069,  888, 1152, 1065, 1067,  889,  101,  382, 1060,
      888, 1062, 1162, 1068,  889, 1064, 1063, 1071, 1072, 1071,
     1066, 1211, 1150,  383,  893,  886,  887,  886,  888,  893,
     1152,  383,  889, 1073, 1074, 1073,  888,  893,  101, 1162,
      889,  891,  892,  891, 1075, 1076, 1075, 1315,  893, 1211,
     1217,  893,  894,  232,  894,  888,  895,  380,  895,  889,

       69, 1158,   69,  893,  896,  385,  896,  888,  897,  558,
      897,  889,  144,  151,  899,  893,   93, 1217,  900,  902,
     1077, 1078, 1077,  906,  151,  101,  101,  907, 1158,  430,
      902, 1079, 1080, 1079,  433,  911,  906,   90,  911,  430,
      907,  904,  905,  904,  906,  911, 1160, 1177,  907, 1081,
     1082, 1081,  906,  909,  910,  909,  907, 1083, 1084, 1083,
      911,   71,   69,   69,  911,  912,  268,  912,  906,  913,
      264,  913,  907, 1160, 1177,   37,  911,  914,  435,  914,
      906,  915,  432,  915,  907,  917, 1315,  919,  911, 1086,
     1098,  925,  917,  918,  919, 1087,  911, 1315,  920, 1089,

     1090, 1089, 1091, 1093, 1315,  924, 1092, 1315, 1315,  907,
      922,  923,  922,  924, 1095, 1315, 1096,  907, 1315, 1315,
      276, 1100, 1101, 1100, 1102,  252,  415,  927, 1103, 1315,
      101,  928,  930, 1104, 1105, 1104,  934,  415,  101, 1173,
      935, 1315,  598,  930, 1106, 1107, 1106,  597,  945,  934,
     1155,  945,  424,  935,  932,  933,  932,  934,  941, 1315,
     1315,  935, 1108, 1109, 1108,  934,  422, 1173,  937,  935,
     1315,  424,  938, 1110, 1111, 1110,  937,  941, 1155, 1315,
      938,  939,  257,  939,  937, 1112, 1113, 1112,  938,  598,
     1315, 1315,  941, 1315, 1315,  945,  943,  944,  943, 1114,

     1115, 1114,  101,  945,  101,  279,  945,  946,  419,  946,
      934,  956, 1156, 1315,  935,  947,  427,  947,  937,  948,
      595,  948,  938, 1212, 1315, 1179,  945,  949,  600,  949,
      934,  950,  602,  950,  935,  951,  762,  951,  941,  272,
     1156,  953,  945,  101,  279,  954, 1116, 1117, 1116,  953,
      956, 1212, 1179,  954, 1118, 1119, 1118,  957,  282,  957,
      953,  956, 1187, 1315,  954,  958,  446,  958,  959,  156,
      959,  953,  956,  451,  284,  954,  961, 1315, 1315,  964,
      962, 1120, 1121, 1120,  968,  451, 1315,  101,  969, 1187,
      625,  964, 1122, 1123, 1122,  624,  973,  968, 1315,  973,

      625,  969,  966,  967,  966,  968,  973, 1163, 1315,  969,
     1124, 1125, 1124,  968,  971,  972,  971,  969, 1126, 1127,
     1126,  973, 1315, 1315,  101,  973,  974,  455,  974,  968,
      975,  622,  975,  969, 1163,  101, 1168,  973,  976,  627,
      976,  968,  977,  781,  977,  969, 1315, 1172, 1315,  973,
      898,  978,  144,  978,  899,  898,  898,  898,  900,  898,
      898,  898,  898,  898, 1168, 1315,  898,  898,  898,  898,
      461,  461,  981,  981,  634, 1172,  982,  982, 1315,  634,
      984, 1128, 1129, 1128,  988,  984,  101, 1315,  989, 1315,
     1315, 1130, 1131, 1130,  898,  898,  898,  898,  993,  795,

     1315,  988, 1164, 1243,  796,  989,  986,  987,  986,  988,
      993, 1315, 1315,  989,  796, 1132, 1133, 1132,  988, 1315,
      993,  898,  989,  991,  992,  991, 1134, 1135, 1134, 1164,
      993, 1243, 1315,  993,  994,  638,  994,  988,  995,  794,
      995,  989, 1315, 1315, 1315,  993,  996,  798,  996,  988,
      642,  803,  998,  989, 1315, 1315,  999, 1001, 1136, 1137,
     1136, 1005,  803, 1315, 1315, 1006,  101, 1013, 1001, 1138,
     1139, 1138, 1011, 1010, 1005, 1315, 1010, 1013, 1006, 1003,
     1004, 1003, 1005, 1010, 1182,  101, 1006, 1140, 1141, 1140,
     1005, 1008, 1009, 1008, 1006, 1142, 1143, 1142, 1010, 1315,

     1166,  101, 1010, 1012,  807, 1012, 1005,  144, 1264,  899,
     1006, 1182,  144,  900,  899,  642,  101,  998,  900, 1224,
      144,  999,  899, 1024, 1315, 1024,  900, 1166,  144, 1144,
      899,  144, 1215,  899,  900, 1264,  144,  900,  899, 1153,
      101, 1153,  900, 1026, 1157, 1026, 1224, 1145,  101,  101,
     1025,  101, 1159, 1148,  101, 1146, 1169, 1144, 1161, 1215,
     1147,  101,  101, 1154,  101, 1149, 1171, 1027,  101, 1165,
     1167,  101, 1157,  101, 1145,  101, 1174, 1170, 1025, 1176,
     1159, 1148, 1146,  101, 1169, 1186, 1161, 1147, 1214,  101,
     1175, 1154, 1149, 1171,  101, 1027, 1178, 1165, 1167,  101,

      101,  101, 1180,  101, 1174, 1170, 1183, 1176, 1184,  101,
      101, 1185, 1186,  101, 1244, 1214, 1181, 1188, 1175, 1069,
     1070, 1069,  888, 1086, 1178, 1315,  889, 1189, 1247, 1087,
     1180, 1071, 1072, 1071, 1183, 1194, 1184, 1091,  893, 1185,
      101, 1092, 1244, 1181, 1315, 1188, 1073, 1074, 1073,  888,
     1075, 1076, 1075,  889, 1189, 1247, 1227,  893, 1077, 1078,
     1077,  906, 1079, 1080, 1079,  907, 1315, 1315,  101,  911,
     1081, 1082, 1081,  906, 1083, 1084, 1083,  907, 1191, 1192,
     1191,  911,  101, 1227, 1196, 1193, 1089, 1090, 1089, 1091,
     1197, 1216, 1315, 1092, 1198, 1199, 1198, 1091, 1095, 1213,

     1096, 1092, 1315, 1095,  276, 1096, 1095, 1201, 1096,  276,
     1098,  101,  276,  443, 1205, 1204,  911, 1102, 1216, 1218,
     1193, 1103, 1100, 1101, 1100, 1102, 1213, 1315, 1315, 1103,
     1206, 1207, 1206, 1102,  101, 1315,  101, 1103, 1104, 1105,
     1104,  934, 1106, 1107, 1106,  935, 1315, 1218, 1205,  945,
     1108, 1109, 1108,  934, 1193, 1219, 1229,  935, 1110, 1111,
     1110,  937, 1112, 1113, 1112,  938, 1114, 1115, 1114,  941,
     1315, 1315, 1315,  945, 1116, 1117, 1116,  953, 1118, 1119,
     1118,  954, 1219, 1229, 1315,  956, 1120, 1121, 1120,  968,
     1122, 1123, 1122,  969, 1315, 1315, 1315,  973, 1124, 1125,

     1124,  968, 1126, 1127, 1126,  969, 1153, 1315, 1153,  973,
     1128, 1129, 1128,  988, 1130, 1131, 1130,  989, 1315, 1315,
     1315,  993, 1132, 1133, 1132,  988, 1134, 1135, 1134,  989,
     1154, 1315, 1315,  993, 1136, 1137, 1136, 1005, 1138, 1139,
     1138, 1006, 1315, 1315, 1315, 1010, 1140, 1141, 1140, 1005,
     1142, 1143, 1142, 1006,  144, 1315,  899, 1010, 1154,  144,
      900,  899,  642, 1315,  998,  900,  101,  144,  999,  899,
     1221,  101, 1208,  900,  642,  642,  998,  998,  101,  101,
      999,  999,  101, 1222, 1220, 1209, 1223,  101,  101,  101,
      101, 1225,  101,  101, 1226, 1230, 1231,  101, 1221, 1315,

     1208, 1233,  101, 1196, 1210, 1234,  101, 1315, 1232, 1197,
     1235, 1222, 1220, 1209, 1223, 1228, 1201, 1315, 1315, 1225,
     1248, 1226,  443, 1230, 1231, 1191, 1192, 1191, 1245, 1233,
     1315, 1210, 1193, 1234,  101, 1232, 1315, 1315, 1235, 1236,
     1237, 1236, 1228, 1238, 1239, 1238, 1193,  101, 1248, 1315,
     1197, 1198, 1199, 1198, 1091, 1245, 1246,  101, 1092, 1206,
     1207, 1206, 1102,  144, 1249,  899, 1103,  101,  144,  900,
      899,  144, 1250,  899,  900,  101,  101,  900,  101, 1251,
      101,  101,  101, 1246,  101, 1315,  101, 1256,  101, 1265,
     1259, 1249,  101, 1240, 1268, 1254,  101, 1252, 1253, 1250,

     1241, 1255, 1257, 1258, 1261,  101, 1242, 1251, 1260, 1315,
     1262, 1315, 1236, 1237, 1236, 1256, 1265, 1315, 1259, 1193,
     1240, 1268, 1254,  101, 1252, 1253, 1271, 1241, 1255, 1257,
     1258, 1266, 1261, 1242,  101, 1260,  101, 1262, 1238, 1239,
     1238,  642,  144,  998,  899, 1197,  101,  999,  900,  642,
      101,  998,  101, 1271, 1270,  999, 1267,  101, 1269, 1266,
     1272, 1273,  101,  101,  101,  101,  101, 1277,  101,  101,
     1274, 1275,  101, 1263, 1276, 1279, 1278,  101,  642, 1284,
      998,  101, 1270, 1267,  999, 1269,  101,  101, 1272, 1273,
     1288, 1285, 1280, 1286, 1277, 1287,  101, 1283, 1274, 1275,

     1263, 1291, 1276, 1279, 1278,  101, 1284, 1292,  101, 1289,
      101,  101,  101, 1304, 1294,  101, 1300, 1288, 1285, 1280,
     1293, 1286, 1305, 1287, 1283, 1295,  101, 1290, 1291,  101,
     1296, 1315, 1301,  101, 1292,  101, 1289, 1302, 1297,  101,
     1304, 1294, 1313, 1307, 1300, 1306, 1314, 1308, 1293, 1305,
     1303, 1315, 1295, 1310, 1290, 1309,  101, 1296, 1315, 1301,
     1315, 1311, 1315, 1315, 1312, 1302, 1297, 1315, 1315, 1315,
     1313, 1307, 1315, 1306, 1314, 1308, 1315, 1303, 1315, 1315,
     1315, 1310, 1309, 1315, 1315, 1315, 1315, 1315, 1311, 1315,
     1315, 1315, 1312,   35,   35,   35,   35,   35,   35,   35,

       38,   38,   38,   38,   38,   38,   38,   54,   54,   54,
       54,   54,   54,   54,   58,   58,   58,   58,   58,   58,
       58,   62,   62,   62,   62,   62,   62,   62,   68,   68,
       68,   68,   68,   68,   68,   70,   70,   70,   70,   70,
       70,   70,   72,   72,   72,   72,   72,   72,   72,   81,
       81,   81,   81,   81,   81,   81,   89,   89,   89,   89,
       89,   89,   89,   92,   92,   92,   92,   92,   92,   92,
       96,   96,   96,   96,   96,   96,   96,  100,  100,  104,
     1315,  104,  104,  133,  133,  133,  133,  133,  133,  133,
      135,  135,  135,  135,  135,  135,  135,  139,  139,  139,

      139,  139,  139,  139,  147,  147,  147,  147,  147,  147,
      147,  150,  150,  150,  150,  150,  150,  150,  143,  143,
      143,  143,  143,  143,  143,  154,  154,  154,  154,  154,
      154,  154,  184,  184,  184,  184,  184, 1315,  184,  185,
      185,  185,  185, 1315,  185,  185,  102, 1315,  102,  103,
     1315,  103,  221,  221,  221,  221,  221,  221,  221,  224,
      224,  224,  224,  224,  224,  224,  227,  227,  227,  227,
      227,  227,  227,  230,  230,  230,  230,  230,  230,  230,
      235,  235,  235,  235,  235,  235,  235,  238,  238,  238,
      238,  238,  238,  238,  242,  242,  242,  242,  242,  242,

      242,  246,  246,  246,  246,  246,  246,  246,  249,  249,
      249,  249,  249,  249,  249,  251,  251,  251,  251,  251,
      251,  251,  255,  255,  255,  255,  255,  255,  255,  260,
      260,  260,  260,  260,  260,  260,  262,  262,  262,  262,
      262,  262,  262,  266,  266,  266,  266,  266,  266,  266,
      271,  271,  271,  271,  271,  271,  271,  276,  276,  276,
      276,  276,  276,  276,  278,  278,  278,  278,  278,  278,
      278,  283,  283,  283,  283,  283,  283,  283,  288,  288,
      288,  288,  288,  288,  288,  184,  184,  184,  184,  184,
     1315,  184,  364,  364,  364,  364,  364,  364,  364,  367,

      367,  367,  367,  367,  367,  367,  369,  369,  369,  369,
      369,  369,  369,  373,  373,  373,  373,  373,  373,  373,
      378,  378,  378,  378,  378,  378,  378,  386,  386,  386,
      386,  386,  386,  386,  391,  391,  391,  391,  391,  391,
      391,  394,  394,  394,  394,  394,  394,  394,  396,  396,
      396,  396,  396,  396,  396,  401,  401,  401,  401,  401,
      401,  401,  404,  404,  404,  404,  404,  404,  404,  407,
      407,  407,  407,  407,  407,  407,  411,  411,  411,  411,
      411,  411,  411,  414,  414,  414,  414,  414,  414,  414,
      417,  417,  417,  417,  417,  417,  417,  423,  423,  423,

      423,  423,  423,  423,  436,  436,  436,  436,  436,  436,
      436,  439,  439,  439,  439,  439,  439,  439,  443,  443,
      443,  443,  443,  443,  443,  447,  447,  447,  447,  447,
      447,  447,  450,  450,  450,  450,  450,  450,  450,  453,
      453,  453,  453,  453,  453,  453,  459,  459,  459,  459,
      459,  459,  459,  460,  460,  460,  460,  460,  460,  460,
      100,  100,  542,  542,  542,  542,  542,  542,  542,  545,
      545,  545,  545,  545,  545,  545,  547,  547,  547,  547,
      547,  547,  547,  551,  551,  551,  551,  551,  551,  551,
      373,  373,  373,  373,  373,  373,  373,  386,  386,  386,

      386,  386,  386,  386,  559,  559,  559,  559,  559,  559,
      559,  562,  562,  562,  562,  562,  562,  562,  564,  564,
      564,  564,  564,  564,  564,  568,  568,  568,  568,  568,
      568,  568,  573,  573,  573,  573,  573,  573,  573,  576,
      576,  576,  576,  576,  576,  576,  579,  579,  579,  579,
      579,  579,  579,  583,  583,  583,  583,  583,  583,  583,
      585,  585,  585,  585,  585,  585,  585,  589,  589,  589,
      589,  589,  589,  589,  593,  593,  593,  593,  593,  593,
      593,  603,  603,  603,  603,  603,  603,  603,  606,  606,
      606,  606,  606,  606,  606,  611,  611,  611,  611,  611,

      611,  611,  614,  614,  614,  614,  614,  614,  614,  616,
      616,  616,  616,  616,  616,  616,  620,  620,  620,  620,
      620,  620,  620,  629,  629,  629,  629,  629,  629,  629,
      630,  630,  630,  630,  630,  630,  630,  224,  224,  224,
      224,  224,  224,  224,  633,  633,  633,  633,  633,  633,
      633,  636,  636,  636,  636,  636,  636,  636,  641,  641,
      641,  641,  641,  641,  641,  100,  100,  717,  717,  717,
      717,  717,  717,  717,  720,  720,  720,  720,  720,  720,
      720,  722,  722,  722,  722,  722,  722,  722,  725,  725,
      725,  725,  725,  725,  725,  729,  729,  729,  729,  729,

      729,  729,  732,  732,  732,  732,  732,  732,  732,  734,
      734,  734,  734,  734,  734,  734,  737,  737,  737,  737,
      737,  737,  737,  744,  744,  744,  744,  744,  744,  744,
      747,  747,  747,  747,  747,  747,  747,  750,  750,  750,
      750,  750,  750,  750,  752,  752,  752,  752,  752,  752,
      752,  755,  755,  755,  755,  755,  755,  755,  757,  757,
      757,  757,  757,  757,  757,  763,  763,  763,  763,  763,
      763,  763,  765,  765,  765,  765,  765,  765,  765,  769,
      769,  769,  769,  769,  769,  769,  772,  772,  772,  772,
      772,  772,  772,  774,  774,  774,  774,  774,  774,  774,

      777,  777,  777,  777,  777,  777,  777,  783,  783,  783,
      783,  783,  783,  783,  784,  784,  784,  784,  784,  784,
      784,  787,  787,  787,  787,  787,  787,  787,  789,  789,
      789,  789,  789,  789,  789,  260,  260,  260,  260,  260,
      260,  260,  792,  792,  792,  792,  792,  792,  792,  799,
      799,  799,  799,  799,  799,  799,  224,  224,  224,  224,
      224,  224,  224,  802,  802,  802,  802,  802,  802,  802,
      805,  805,  805,  805,  805,  805,  805,  825,  825,  825,
      825,  825,  825,  100,  100,  880,  880,  880,  880,  880,
      880,  880,  883,  883,  883,  883,  883,  883,  883,  885,

      885,  885,  885,  885,  885,  885,  890,  890,  890,  890,
      890,  890,  890,  898,  898,  898,  898,  898,  898,  898,
      901,  901,  901,  901,  901,  901,  901,  903,  903,  903,
      903,  903,  903,  903,  908,  908,  908,  908,  908,  908,
      908,  916,  916,  916,  916,  916,  916,  916,  921,  921,
      921,  921,  921,  921,  921,  926,  926,  926,  926,  926,
      926,  926,  929,  929,  929,  929,  929,  929,  929,  931,
      931,  931,  931,  931,  931,  931,  936,  936,  936,  936,
      936,  936,  936,  940,  940,  940,  940,  940,  940,  940,
      942,  942,  942,  942,  942,  942,  942,  952,  952,  952,

      952,  952,  952,  952,  955,  955,  955,  955,  955,  955,
      955,  960,  960,  960,  960,  960,  960,  960,  963,  963,
      963,  963,  963,  963,  963,  965,  965,  965,  965,  965,
      965,  965,  970,  970,  970,  970,  970,  970,  970,  979,
      979,  979,  979,  979,  979,  979,  980,  980,  980,  980,
      980,  980,  980,  983,  983,  983,  983,  983,  983,  983,
      985,  985,  985,  985,  985,  985,  985,  990,  990,  990,
      990,  990,  990,  990,  276,  276,  276,  276,  276,  276,
      276,  997,  997,  997,  997,  997,  997,  997, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1002, 1002, 1002, 1002, 1002,

     1002, 1002,  260,  260,  260,  260,  260,  260,  260, 1007,
     1007, 1007, 1007, 1007, 1007, 1007,  898,  898,  898,  898,
      898,  898,  898,  100,  100,  880,  880,  880,  880,  880,
      880,  880,  883,  883,  883,  883,  883,  883,  883,  885,
      885,  885,  885,  885,  885,  885,  890,  890,  890,  890,
      890,  890,  890,  901,  901,  901,  901,  901,  901,  901,
      903,  903,  903,  903,  903,  903,  903,  908,  908,  908,
      908,  908,  908,  908,  916,  916,  916,  916,  916,  916,
      916,  224,  224,  224,  224,  224,  224,  224, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1088, 1088, 1088, 1088, 1088,

     1088, 1088,  921,  921,  921,  921,  921,  921,  921, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
      926,  926,  926,  926,  926,  926,  926,  929,  929,  929,
      929,  929,  929,  929,  931,  931,  931,  931,  931,  931,
      931,  942,  942,  942,  942,  942,  942,  942,  936,  936,
      936,  936,  936,  936,  936,  940,  940,  940,  940,  940,
      940,  940,  952,  952,  952,  952,  952,  952,  952,  955,
      955,  955,  955,  955,  955,  955,  960,  960,  960,  960,
      960,  960,  960,  963,  963,  963,  963,  963,  963,  963,

      965,  965,  965,  965,  965,  965,  965,  970,  970,  970,
      970,  970,  970,  970,  979,  979,  979,  979,  979,  979,
      979,  980,  980,  980,  980,  980,  980,  980,  983,  983,
      983,  983,  983,  983,  983,  985,  985,  985,  985,  985,
      985,  985,  990,  990,  990,  990,  990,  990,  990,  997,
      997,  997,  997,  997,  997,  997, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1007, 1007, 1007, 1007, 1007, 1007, 1007,  898,  898,  898,
      898,  898,  898,  898,  100,  100,  885,  885,  885,  885,
      885,  885,  885,  890,  890,  890,  890,  890,  890,  890,

      903,  903,  903,  903,  903,  903,  903,  908,  908,  908,
      908,  908,  908,  908, 1085, 1085, 1085, 1085, 1085, 1085,
     1085,  260,  260,  260,  260,  260,  260,  260, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1202, 1202, 1315, 1202, 1202, 1202, 1202, 1099, 1099, 1099,
     1099, 1099, 1099, 1099,  931,  931,  931,  931,  931,  931,
      931,  942,  942,  942,  942,  942,  942,  942,  936,  936,

      936,  936,  936,  936,  936,  940,  940,  940,  940,  940,
      940,  940,  952,  952,  952,  952,  952,  952,  952,  955,
      955,  955,  955,  955,  955,  955,  965,  965,  965,  965,
      965,  965,  965,  970,  970,  970,  970,  970,  970,  970,
      985,  985,  985,  985,  985,  985,  985,  990,  990,  990,
      990,  990,  990,  990, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1007, 1007, 1007, 1007, 1007, 1007, 1007,  898,  898,
      898,  898,  898,  898,  898,  997,  997,  997,  997,  997,
      997,  997,  100,  100,   29, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315
    } ;

static yyconst flex_int16_t yy_chk[5958] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        7,    9,    8,   10, 1312,   11,   12,    7,    7,    8,
        8,   32,   11,   12,   21,   21,   21,   21,   34,   34,
       11,   12,   32,   32,    1,    1,    1,    1,   99,   99,
       13,   14,   15, 1307,   15,   15,   15,   13,   14,   15,
       38,   38,   15,    9,    9,   10,   10,   11,   12, 1302,
       38,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   13,   14,   15,   16,   41,   16,   16,   16,

       39,  113,   16, 1301,   50,   16,   26,   26,   26,   26,
     1295,   41,   50,  113,   75,   98,    2,    2,    2,    2,
       75,   15,   24,   72,   24,   72,   98,   98,   39,   72,
       73,   24,   73,   76, 1292,   76,   73,   16,   41,   76,
       50,  113,   24,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   16,   22,   22,   22,   22,   22,
       24,  666,  105,   53,   82,   22,   82,   82,   77,   77,
       77,   77,  666,   22,   53,   77,   22, 1291,    3,    3,
        3,    3,   43,  104,  104,   94,   44,   94,   94,  105,

      135,  136,  135,  104,  140,  136,  135,  238,  140,  238,
       43,   44,   53,   44,   22,    3,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,   40,   43,   44,   46,
       44,   40,  118,  122, 1287,  106,  137,   45,   46,   47,
       48,   49,  137,  122,  108,   46,   46,   40, 1285,  118,
        4,    4,    4,    4,  107,   45,  106,   47,   48,   40,
       45,   49,  108,   79,   49,   79,   46, 1276,   84,   79,
       84,  122,   46,   46,   40,  107,  118,    4,    5, 1275,
       79,    5,   45,  106,   47,   48,   51,   45,   49,  108,

      117,   49,   84, 1274,   51,  109,    5,    5,    5,    5,
        5,    5,  107,  167,    5,  167,  167,    5,    5,   51,
      117,    5,    5,    5,    5,  141,  109,    5, 1273,  144,
       84,  141,   51,  144,    5,    5,    5,    5,    5,    5,
      120,   87,    5,   87,    5,    5,   51,  117,    5,    5,
        5,    5,   52,  109,    5,   20,   20,   20,   20,  120,
       86,   20,   86,   52,   20,   87, 1272,   20,   20,  110,
       52,  299,   20,  110,  125,   20,   20,  123,   85,   52,
       85,   85,   85,   86,  123,  111,  120,   86,  131,  111,
      124,   52,  115,   87,  125, 1269,   85,   52,  299,  127,

      115,  110,  112,   20,   20,   42,   52,  131,  124,   42,
     1267,   86,  123,  115,  127,   86,   42,  111,  112,  112,
       42,  125,  114,   42,  146,   42,  114,  139,  115,  139,
      146, 1265,  114,  139,  131,  124,  143,   42,  143,  224,
      115,  127,  143,  224,   42,  112,  112,   42, 1264,  114,
       42,  114,   42,   74,   74,   74,   74,   74,   74,   74,
      114,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,  116, 1255,  126,  114,  128,  114,  126,
      116,  126,  128,  121,  129,  132, 1254,  170,  147,  121,
      147,  178,  129,  132,  147,  116,  116,   74,   74,   74,

      142,  142,  142,  142,  308,  121,  308,  126,  116,  126,
      128,  138,  138,  138,  138,  170, 1246,  121,  138,  178,
      129,  132,  116,  116,   74,   78,   78,   78,   78,   78,
       78,   78,  121,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,  148,  148,  148,  148,  150,
      197,  180,  148,  180, 1235,  150,  152,  152,  152,  153,
      153,  153,  153,  152,  180,  180,  153,  157,  197,   78,
       78,   78,  154,  157,  154,  183,  183,  183,  154,  155,
      155,  155,  155,  193, 1234, 1233,  155,  158,  158,  158,
      158,  175, 1227,  175,  158,  197,   78,   80,   80,   80,

       80,  159,  193,  159,   80, 1215,  162,  159,  162,  186,
      188,  181,  162,  181,  181,  163,   80,  163,  175,  189,
      175,  163,  188,   80,  162,  189, 1207,   80,  188,  193,
       80, 1204,   80,  163,  222,  225,  165,  186,  165,   80,
      222,  225,  165,  166,   80,  166, 1203,  163,  218,  166,
      188,   80,  162,  189,   80,  188, 1202,   80,  161,   80,
      161,  163,  165,  166,  161,  218,   80,  145,  145,  145,
      145,  145,  145,  145,  163,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  161, 1201,  301,
      165,  166,  218,  161,  168,  176,  168,  171,  190,  171,

      171,  171,  304,  176, 1199, 1194,  190,  169,  177,  169,
      177,  145,  145,  145,  161,  171,  192,  301,  168,  221,
      161,  221,  252,  176,  199,  221,  252, 1188,  198,  304,
      176,  169,  177,  198,  190,  199, 1185,  192,  145,  149,
      149,  149,  149,  149,  149,  149,  168,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  169,
      177,  198,  201,  199,  192,  227,  209,  206,  205,  210,
      201,  227,  205,  206,  209,  284,  164,  187,  164,  284,
      233,  210,  164,  149,  149,  149,  233,  235,  191,  223,
      223,  223,  223,  235, 1184, 1180,  223,  164,  201,  187,

      205,  206,  209, 1177, 1174,  191,  164,  164,  191,  210,
      149,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  164,  187,  160,  160,  160,
      160,  194,  191,  164,  164,  191,  172,  174,  172,  174,
      195,  212,  179,  547,  179,  547, 1171,  212,  196,  207,
      211,  212,  200,  194,  203,  160,  160,  160,  160,  172,
      174, 1167,  195,  172,  174,  179,  208,  196,  200,  179,
      204,  243,  207,  211,  203,  212,  196,  243, 1166,  212,
      194,  208,  160,  229,  229,  229,  204,  172,  174,  195,
      229,  172,  174,  179,  196,  200, 1160,  179,  202,  207,

      211,  203,  202,  202,  202,  202,  202,  202,  208,  249,
      202,  214,  253,  204,  202,  249,  213,  202,  253,  202,
      202,  216,  215,  202,  213, 1157,  214,  313,  219,  216,
      202,  202,  202,  202,  202,  202,  219,  258,  202,  217,
      220,  202,  262,  258,  202,  215,  202,  202,  262,  564,
      202,  564,  213,  214,  313,  217,  230,  216,  230,  217,
      220,  579,  230,  579,  219,  226,  226,  226,  226,  237,
      237,  237,  215,  231,  231,  231,  231,  242,  269,  242,
      231, 1156,  217,  242,  269,  321,  217,  220,  234,  234,
      234,  234,  261,  261,  261,  234,  239,  239,  239,  239,

      244,  244,  244,  244,  303, 1141,  321,  244,  245,  245,
      245,  245,  245,  245,  245, 1137,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  246, 1133,
      246,  314,  303,  321,  246,  247,  247,  247,  247,  250,
      250,  250,  247,  251,  273,  251,  250, 1129,  326,  251,
      273,  314,  245,  245,  245,  254,  254,  254,  254,  255,
      325,  255,  254,  310, 1125,  255,  256,  256,  256,  256,
      263,  263,  263,  256,  310,  310,  326,  263,  314,  245,
      248,  248,  248,  248,  248,  248,  248,  325,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      259,  259,  259,  259,  265,  265,  265,  259,  266, 1121,
      266,  265, 1117,  278,  266,  267,  267,  267,  267,  278,
     1111,  317,  267, 1109,  248,  248,  248,  270,  270,  270,
      270,  271,  487,  271,  270,  317,  285,  271,  274,  274,
      274,  274,  285,  487,  487,  274,  275,  275,  275,  275,
      307,  248,  307,  275,  280,  280,  280,  281,  281,  281,
      281,  280,  317,  283,  281,  283,  375,  375,  375,  283,
      286,  286,  286,  286,  307, 1105, 1101,  286,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287, 1098,  315,  287,  287,  287,  287,  288,  289,

      288,  289,  307,  315,  288,  289,  291,  290,  291,  290,
      300,  322,  291,  290,  294,  292,  294,  292, 1090,  300,
      294,  292,  287,  287,  287,  287,  322,  318,  289,  290,
      293,  315,  293,  295,  318,  295,  293,  291,  300,  295,
      294,  585,  296,  585,  296,  297,  300,  297,  296,  287,
      292,  297,  365,  322,  298,  289,  298,  290,  365,  306,
      298,  306,  318,  295,  291,  293,  295,  324,  294,  316,
      367,  305,  309,  305,  309,  316,  367,  292,  296,  324,
      320,  297, 1086,  298,  320,  309,  309,  319,  335,  306,
      295,  306,  293,  295,  305,  323,  327,  319,  305,  323,

      328,  479,  332,  316,  334,  296,  335,  324,  297,  329,
      298,  330,  320,  327,  333,  328,  306,  336,  306,  330,
      331,  329,  305,  332,  334,  319,  305,  323,  479,  333,
      337, 1082,  331,  335,  336,  340, 1078,  338,  344,  339,
      327,  603,  328,  603,  347,  331,  338,  330,  337,  329,
      332,  334,  343,  337,  338,  340,  333,  339,  346,  342,
      331,  336,  341,  343,  349,  344,  347,  342,  348,  350,
      341,  351,  331,  346,  338,  337, 1074,  351,  475,  350,
      337,  338,  340,  354,  339,  341,  342,  349,  348,  350,
      357,  343,  344,  347,  352,  342,  353,  616,  341,  616,

      346,  359,  360,  354,  353,  351,  475,  350, 1070,  352,
      357,  358,  341,  342,  349,  348,  350,  358,  363,  359,
      360,  362, 1058,  364,  476,  364,  363,  461,  362,  364,
      354,  461,  353,  369,  477,  369,  352,  357,  478,  369,
      362,  366,  366,  366,  366,  358,  359,  360,  366,  368,
      368,  368,  476, 1057,  363,  371,  368,  370,  370,  370,
      370,  371,  477,  480,  370, 1037,  478,  373,  362,  372,
      372,  372,  372,  373, 1036,  378,  372,  376,  376,  376,
      376,  378,  379,  379,  379,  381,  381,  381,  488,  379,
      500,  480,  381,  384,  384,  384,  384,  387,  387,  387,

      384,  391,  392,  391,  428,  428,  428,  391,  392,  393,
      393,  393,  393,  394, 1011,  488,  393,  500,  398,  394,
      395,  395,  395,  396,  398,  396,  490,  395,  405,  396,
      397,  397,  397,  397,  405, 1004,  409,  397,  399,  399,
      399,  399,  409,  490,  659,  399,  400,  400,  400,  400,
      400,  400,  400,  501,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  401,  636,  401,  636,
      490,  659,  401,  402,  402,  402,  402,  404,  411,  404,
      402,  501,  987,  404,  411,  491,  406,  406,  406,  406,
      400,  400,  400,  406,  407,  967,  407,  491,  933,  414,

      407,  408,  408,  408,  408,  414,  905,  420,  408,  410,
      410,  410,  410,  420,  887,  874,  410,  400,  403,  403,
      403,  403,  403,  403,  403,  491,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  412,  412,
      412,  413,  413,  413,  826,  412,  826,  423,  413,  416,
      416,  416,  417,  423,  417,  436,  416,  436,  417,  869,
      867,  436,  403,  403,  403,  418,  418,  418,  418,  486,
      866,  486,  418,  421,  421,  421,  421,  425,  425,  425,
      421,  863,  486,  486,  425,  426,  426,  426,  426,  403,
      862,  852,  426,  431,  431,  431,  434,  434,  434,  434,

      431,  437,  846,  434,  513,  838,  439,  437,  438,  438,
      438,  438,  439,  837,  807,  438,  440,  440,  440,  441,
      441,  441,  441,  440,  513,  803,  441,  442,  442,  442,
      442,  445,  445,  445,  442,  447,  448,  447,  445,  798,
      506,  447,  448,  449,  449,  449,  449,  450,  795,  506,
      449,  513,  456,  450,  452,  452,  452,  453,  456,  453,
      716,  452,  462,  453,  454,  454,  454,  454,  462,  492,
      704,  454,  457,  457,  457,  457,  492,  506,  505,  457,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  702,  505,  458,  458,  458,  458,

      459,  460,  459,  460,  492,  493,  459,  460,  463,  463,
      463,  463,  464,  493,  464,  463,  489,  465,  464,  465,
      489,  498,  505,  465,  458,  458,  458,  458,  466,  467,
      466,  467,  504,  498,  466,  467,  468,  469,  468,  469,
      686,  493,  468,  469,  470,  642,  470,  504,  489,  642,
      470,  458,  466,  471,  484,  471,  484,  669,  468,  471,
      482,  498,  482,  473,  467,  473,  472,  469,  472,  473,
      639,  474,  472,  474,  504,  917,  470,  474,  484,  917,
      466,  481,  471,  481,  472,  483,  468,  483,  510,  473,
      494,  467,  472,  474,  469,  495,  482,  497,  494,  638,

      510,  495,  499,  470,  634,  497,  484,  483,  499,  471,
      502,  481,  472,  481,  507,  496,  502,  473,  508,  509,
      472,  474,  496,  482,  503,  507,  494,  496,  510,  495,
      514,  512,  503,  497,  516,  483,  499,  509,  481,  508,
      481,  517,  519,  518,  502,  521,  520,  514,  517,  521,
      496,  520,  522,  507,  512,  496,  516,  519,  525,  523,
      503,  518,  528,  526,  509,  536,  508,  523,  655,  528,
      527,  522,  529,  525,  514,  526,  517,  521,  527,  520,
      529,  512,  530,  516,  519,  531,  532,  536,  518,  531,
      535,  530,  533,  538,  532,  523,  655,  528,  522,  533,

      525,  534,  537,  526,  540,  534,  527,  543,  529,  537,
      827,  535,  827,  543,  536,  545,  538,  531,  542,  530,
      542,  545,  532,  658,  542,  540,  560,  533,  544,  544,
      544,  544,  560,  534,  546,  546,  546,  537,  535,  548,
      548,  548,  548,  538,  550,  550,  550,  550,  552,  552,
      552,  658,  540,  553,  553,  553,  554,  554,  554,  554,
      555,  555,  555,  557,  557,  557,  559,  627,  559,  624,
      620,  562,  559,  561,  561,  561,  561,  562,  563,  563,
      563,  565,  565,  565,  565,  567,  567,  567,  567,  569,
      569,  569,  570,  570,  570,  571,  571,  571,  571,  572,

      572,  572,  573,  577,  573,  572,  618,  606,  573,  577,
      604,  572,  572,  574,  574,  574,  574,  575,  575,  575,
      576,  583,  576,  575,  600,  597,  576,  583,  593,  575,
      575,  578,  578,  578,  578,  580,  580,  580,  580,  582,
      582,  582,  582,  584,  584,  584,  586,  586,  586,  586,
      588,  588,  588,  588,  590,  590,  590,  591,  591,  591,
      591,  592,  592,  592,  594,  594,  594,  596,  596,  596,
      599,  599,  599,  599,  601,  601,  601,  605,  605,  605,
      605,  607,  607,  607,  608,  608,  608,  608,  609,  609,
      609,  610,  610,  610,  610,  611,  612,  611,  615,  615,

      615,  611,  612,  613,  613,  613,  613,  614,  617,  617,
      617,  617,  589,  614,  619,  619,  619,  619,  621,  621,
      621,  623,  623,  623,  626,  626,  626,  626,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  587,  660,  628,  628,  628,  628,  629,  630,
      629,  630,  631,  581,  629,  630,  667,  633,  631,  632,
      632,  632,  632,  633,  635,  635,  635,  637,  637,  637,
      637,  660,  628,  628,  628,  628,  640,  640,  640,  640,
      641,  643,  641,  665,  667,  665,  641,  643,  644,  644,
      644,  644,  645,  568,  645,  646,  665,  646,  645,  628,

      647,  646,  647,  648,  566,  648,  647,  551,  549,  648,
      649,  650,  649,  650,  645,  670,  649,  650,  651,  670,
      651,  652,  680,  652,  651,  648,  653,  652,  653,  654,
      541,  654,  653,  650,  661,  654,  661,  662,  664,  662,
      664,  649,  645,  676,  651,  652,  653,  670,  668,  663,
      680,  663,  652,  648,  668,  671,  673,  672,  674,  671,
      662,  650,  682,  677,  676,  664,  672,  675,  649,  678,
      661,  663,  651,  652,  653,  675,  524,  679,  673,  652,
      674,  679,  668,  681,  685,  682,  678,  671,  662,  677,
      515,  676,  683,  664,  672,  690,  684,  661,  683,  663,

      687,  688,  691,  675,  684,  673,  685,  674,  687,  679,
      681,  683,  682,  678,  689,  694,  677,  690,  691,  688,
      689,  692,  693,  694,  695,  692,  683,  511,  693,  696,
      701,  703,  684,  685,  697,  696,  687,  708,  683,  696,
      706,  698,  697,  699,  690,  691,  688,  695,  689,  703,
      701,  694,  708,  692,  700,  710,  693,  698,  705,  699,
      706,  698,  700,  696,  707,  455,  705,  696,  707,  711,
      697,  712,  709,  715,  695,  451,  703,  701,  710,  708,
      714,  709,  443,  712,  698,  711,  699,  706,  698,  817,
      700,  709,  713,  709,  705,  715,  707,  819,  713,  435,

      717,  718,  717,  714,  720,  710,  717,  718,  433,  709,
      720,  712,  711,  722,  713,  722,  817,  724,  709,  722,
      709,  725,  715,  724,  820,  819,  713,  725,  427,  422,
      714,  719,  719,  719,  719,  721,  721,  721,  719,  829,
      842,  713,  721,  723,  723,  723,  723,  726,  726,  726,
      723,  820,  841,  419,  726,  727,  727,  727,  727,  728,
      728,  728,  727,  729,  730,  729,  728,  829,  842,  729,
      730,  731,  731,  731,  731,  732,  415,  389,  731,  841,
      736,  732,  733,  733,  733,  734,  736,  734,  386,  733,
      737,  734,  735,  735,  735,  735,  737,  385, 1022,  735,

      738,  738,  738,  739,  739,  739,  739,  738,  382,  834,
      739,  740,  740,  740,  741,  741,  741,  834,  740,  840,
      741,  742,  742,  742,  742,  743, 1022,  743,  742,  745,
      744,  743,  744,  377,  840,  745,  744,  746,  746,  746,
      746,  747,  374,  747,  746,  834,  749,  747,  748,  748,
      748,  748,  749,  750,  361,  748,  751,  751,  751,  750,
      752,  840,  752,  751,  356,  754,  752,  753,  753,  753,
      753,  754,  755,  821,  753,  821,  835,  757,  755,  756,
      756,  756,  756,  757,  835,  355,  756,  758,  758,  758,
      759,  759,  759,  759,  758,  345,  821,  759,  760,  760,

      760,  761,  761,  761,  763,  760,  763,  764,  761,  765,
      763,  282,  835,  764,  277,  765,  766,  766,  766,  766,
      767,  767,  767,  766,  821,  276,  272,  767,  768,  768,
      768,  768,  769,  770,  769,  768,  268,  260,  769,  770,
      771,  771,  771,  771,  772,  257,  241,  771,  836,  776,
      772,  773,  773,  773,  774,  776,  774,  836,  773,  777,
      774,  775,  775,  775,  775,  777,  843,  240,  775,  778,
      778,  778,  779,  779,  779,  779,  778,  785,  787,  779,
      780,  780,  780,  785,  787,  836,  843,  780,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  236,  232,  782,  782,  782,  782,  783,  784,
      783,  784,  228,  843,  783,  784,  786,  786,  786,  786,
      788,  788,  788,  786,  789,  791,  789,  788,  850,  853,
      789,  791,  782,  782,  782,  782,  790,  790,  790,  790,
      792,  182,  850,  790,  853,  173,  792,  793,  793,  793,
      797,  797,  797,  797,  793,  800,  799,  797,  799,  782,
      845,  800,  799,  801,  801,  801,  801,  802,  839,  850,
      801,  853,  808,  802,  804,  804,  804,  805,  808,  805,
      845,  804,  156,  805,  806,  806,  806,  806,  809,  839,
      809,  806,  151,  830,  809,  810,  811,  810,  811,  133,

      130,  810,  811,  812,  813,  812,  813,  845,  119,  812,
      813,  814,  815,  814,  815,  830,  839,  814,  815,  816,
      824,  816,  824,  102,  809,  816,  810,  822,  823,  822,
      823,  100,  844,   95,  849,  813,  831,  816,  832,  848,
      849,  833,  830,  812,  824,  833,  860,  855,  814,  815,
      844,  809,  847,  810,  822,  823,  847,  851,  831,  848,
      832,  858,  813,  856,  860,  816,  854,  855,  849,  851,
      812,  857,  824,  833,  861,  814,  815,  844,  856,  857,
      871,  858,  822,  823,  847,  831,  848,  832,  854,  859,
      864,  860,  861,  865,  855,  859,  868,  851,  864,  870,

      871,  872,  868,  878,  875,  856,  877,  857,  858,  873,
      865,  881,  876,  879,  883,  854,  876,  881,  878,  861,
      883,   91,  870,  859,  872,  879,  864,  871,  875,  873,
      868,   88,  880,  877,  880, 1021,   70,  865,  880,  882,
      882,  882,  882, 1023,  876,  878,  882,   35,  885,  870,
      885,  872, 1038,  879,  885,  875,  873,  884,  884,  884,
      877, 1150, 1021,  888,  884,  886,  886,  886,  886,  888,
     1023,  890,  886,  889,  889,  889,  889,  890, 1032, 1038,
      889,  891,  891,  891,  893,  893,  893,   29,  891, 1150,
     1162,  893,  894,  894,  894,  894,  895,  895,  895,  894,

       28, 1032,   27,  895,  896,  896,  896,  896,  897,  897,
      897,  896,  898,  899,  898,  897,   25, 1162,  898,  899,
      900,  900,  900,  900,  901, 1054, 1034,  900, 1032,  906,
      901,  902,  902,  902,  903,  906,  903,   23,  902,  908,
      903,  904,  904,  904,  904,  908, 1034, 1054,  904,  907,
      907,  907,  907,  909,  909,  909,  907,  911,  911,  911,
      909,   19,   18,   17,  911,  912,  912,  912,  912,  913,
      913,  913,  912, 1034, 1054,    6,  913,  914,  914,  914,
      914,  915,  915,  915,  914,  916,    0,  916,  915,  919,
      924,  916,  918,  918,  918,  919,  924,    0,  918,  920,

      920,  920,  920,  921,    0,  921,  920,    0,    0,  921,
      922,  922,  922,  922,  923,    0,  923,  922,    0,    0,
      923,  925,  925,  925,  925,  926,  927,  926,  925,    0,
     1050,  926,  927,  928,  928,  928,  928,  929, 1029, 1050,
      928,    0,  934,  929,  930,  930,  930,  931,  934,  931,
     1029,  930,  937,  931,  932,  932,  932,  932,  937,    0,
        0,  932,  935,  935,  935,  935,  936, 1050,  936,  935,
        0,  940,  936,  938,  938,  938,  938,  940, 1029,    0,
      938,  939,  939,  939,  939,  941,  941,  941,  939,  942,
        0,    0,  941,    0,    0,  942,  943,  943,  943,  945,

      945,  945, 1056,  943, 1030,  953,  945,  946,  946,  946,
      946,  953, 1030,    0,  946,  947,  947,  947,  947,  948,
      948,  948,  947, 1152,    0, 1056,  948,  949,  949,  949,
      949,  950,  950,  950,  949,  951,  951,  951,  950,  952,
     1030,  952,  951, 1066,  955,  952,  954,  954,  954,  954,
      955, 1152, 1056,  954,  956,  956,  956,  957,  957,  957,
      957,  956, 1066,    0,  957,  958,  958,  958,  959,  959,
      959,  959,  958,  961,  960,  959,  960,    0,    0,  961,
      960,  962,  962,  962,  962,  963,    0, 1040,  962, 1066,
      968,  963,  964,  964,  964,  965,  968,  965,    0,  964,

      970,  965,  966,  966,  966,  966,  970, 1040,    0,  966,
      969,  969,  969,  969,  971,  971,  971,  969,  973,  973,
      973,  971,    0,    0, 1045,  973,  974,  974,  974,  974,
      975,  975,  975,  974, 1040, 1049, 1045,  975,  976,  976,
      976,  976,  977,  977,  977,  976,    0, 1049,    0,  977,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978, 1045,    0,  978,  978,  978,  978,
      979,  980,  979,  980,  981, 1049,  979,  980,    0,  983,
      981,  982,  982,  982,  982,  983, 1041,    0,  982,    0,
        0,  984,  984,  984,  978,  978,  978,  978,  984,  985,

        0,  985, 1041, 1211,  988,  985,  986,  986,  986,  986,
      988,    0,    0,  986,  990,  989,  989,  989,  989,    0,
      990,  978,  989,  991,  991,  991,  993,  993,  993, 1041,
      991, 1211,    0,  993,  994,  994,  994,  994,  995,  995,
      995,  994,    0,    0,    0,  995,  996,  996,  996,  996,
      997,  998,  997,  996,    0,    0,  997,  998,  999,  999,
      999,  999, 1000,    0,    0,  999, 1061, 1005, 1000, 1001,
     1001, 1001, 1002, 1005, 1002,    0, 1001, 1007, 1002, 1003,
     1003, 1003, 1003, 1007, 1061, 1043, 1003, 1006, 1006, 1006,
     1006, 1008, 1008, 1008, 1006, 1010, 1010, 1010, 1008,    0,

     1043, 1172, 1010, 1012, 1012, 1012, 1012, 1014, 1243, 1014,
     1012, 1061, 1015, 1014, 1015, 1016, 1159, 1016, 1015, 1172,
     1017, 1016, 1017, 1024,    0, 1024, 1017, 1043, 1018, 1014,
     1018, 1019, 1159, 1019, 1018, 1243, 1020, 1019, 1020, 1025,
     1031, 1025, 1020, 1026, 1031, 1026, 1172, 1015, 1033, 1046,
     1024, 1048, 1033, 1019, 1035, 1017, 1046, 1014, 1035, 1159,
     1018, 1042, 1044, 1025, 1065, 1020, 1048, 1026, 1051, 1042,
     1044, 1047, 1031, 1158, 1015, 1053, 1051, 1047, 1024, 1053,
     1033, 1019, 1017, 1052, 1046, 1065, 1035, 1018, 1158, 1055,
     1052, 1025, 1020, 1048, 1059, 1026, 1055, 1042, 1044, 1060,

     1063, 1062, 1059, 1064, 1051, 1047, 1062, 1053, 1063, 1067,
     1068, 1064, 1065, 1216, 1212, 1158, 1060, 1067, 1052, 1069,
     1069, 1069, 1069, 1085, 1055,    0, 1069, 1068, 1216, 1085,
     1059, 1071, 1071, 1071, 1062, 1088, 1063, 1088, 1071, 1064,
     1176, 1088, 1212, 1060,    0, 1067, 1073, 1073, 1073, 1073,
     1075, 1075, 1075, 1073, 1068, 1216, 1176, 1075, 1077, 1077,
     1077, 1077, 1079, 1079, 1079, 1077,    0,    0, 1161, 1079,
     1081, 1081, 1081, 1081, 1083, 1083, 1083, 1081, 1087, 1087,
     1087, 1083, 1155, 1176, 1091, 1087, 1089, 1089, 1089, 1089,
     1091, 1161,    0, 1089, 1092, 1092, 1092, 1092, 1093, 1155,

     1093, 1092,    0, 1094, 1093, 1094, 1095, 1096, 1095, 1094,
     1097, 1163, 1095, 1096, 1102, 1099, 1097, 1099, 1161, 1163,
     1102, 1099, 1100, 1100, 1100, 1100, 1155,    0,    0, 1100,
     1103, 1103, 1103, 1103, 1179,    0, 1164, 1103, 1104, 1104,
     1104, 1104, 1106, 1106, 1106, 1104,    0, 1163, 1190, 1106,
     1108, 1108, 1108, 1108, 1190, 1164, 1179, 1108, 1110, 1110,
     1110, 1110, 1112, 1112, 1112, 1110, 1114, 1114, 1114, 1112,
        0,    0,    0, 1114, 1116, 1116, 1116, 1116, 1118, 1118,
     1118, 1116, 1164, 1179,    0, 1118, 1120, 1120, 1120, 1120,
     1122, 1122, 1122, 1120,    0,    0,    0, 1122, 1124, 1124,

     1124, 1124, 1126, 1126, 1126, 1124, 1153,    0, 1153, 1126,
     1128, 1128, 1128, 1128, 1130, 1130, 1130, 1128,    0,    0,
        0, 1130, 1132, 1132, 1132, 1132, 1134, 1134, 1134, 1132,
     1153,    0,    0, 1134, 1136, 1136, 1136, 1136, 1138, 1138,
     1138, 1136,    0,    0,    0, 1138, 1140, 1140, 1140, 1140,
     1142, 1142, 1142, 1140, 1144,    0, 1144, 1142, 1153, 1145,
     1144, 1145, 1146,    0, 1146, 1145, 1168, 1147, 1146, 1147,
     1168, 1175, 1144, 1147, 1148, 1149, 1148, 1149, 1165, 1169,
     1148, 1149, 1170, 1169, 1165, 1145, 1170, 1173, 1183, 1181,
     1182, 1173, 1178, 1186, 1175, 1181, 1182, 1187, 1168,    0,

     1144, 1186, 1189, 1195, 1147, 1187, 1213,    0, 1183, 1195,
     1189, 1169, 1165, 1145, 1170, 1178, 1200,    0,    0, 1173,
     1217, 1175, 1200, 1181, 1182, 1191, 1191, 1191, 1213, 1186,
        0, 1147, 1191, 1187, 1214, 1183,    0,    0, 1189, 1193,
     1193, 1193, 1178, 1197, 1197, 1197, 1193, 1218, 1217,    0,
     1197, 1198, 1198, 1198, 1198, 1213, 1214, 1219, 1198, 1206,
     1206, 1206, 1206, 1208, 1218, 1208, 1206, 1220, 1209, 1208,
     1209, 1210, 1219, 1210, 1209, 1221, 1222, 1210, 1229, 1220,
     1223, 1225, 1226, 1214, 1224,    0, 1230, 1225, 1228, 1244,
     1229, 1218, 1232, 1208, 1248, 1223, 1231, 1221, 1222, 1219,

     1209, 1224, 1226, 1228, 1231, 1251, 1210, 1220, 1230,    0,
     1232,    0, 1236, 1236, 1236, 1225, 1244,    0, 1229, 1236,
     1208, 1248, 1223, 1245, 1221, 1222, 1251, 1209, 1224, 1226,
     1228, 1245, 1231, 1210, 1247, 1230, 1249, 1232, 1238, 1238,
     1238, 1240, 1241, 1240, 1241, 1238, 1250, 1240, 1241, 1242,
     1259, 1242, 1252, 1251, 1250, 1242, 1247, 1253, 1249, 1245,
     1252, 1253, 1256, 1257, 1260, 1270, 1258, 1259, 1261, 1262,
     1256, 1257, 1278, 1241, 1258, 1261, 1260, 1266, 1263, 1268,
     1263, 1271, 1250, 1247, 1263, 1249, 1279, 1277, 1252, 1253,
     1278, 1270, 1262, 1271, 1259, 1277, 1286, 1266, 1256, 1257,

     1241, 1281, 1258, 1261, 1260, 1280, 1268, 1282, 1288, 1279,
     1289, 1283, 1293, 1298, 1286, 1294, 1293, 1278, 1270, 1262,
     1283, 1271, 1299, 1277, 1266, 1288, 1290, 1280, 1281, 1296,
     1289,    0, 1294, 1297, 1282, 1303, 1279, 1296, 1290, 1300,
     1298, 1286, 1308, 1303, 1293, 1300, 1310, 1304, 1283, 1299,
     1297,    0, 1288, 1305, 1280, 1304, 1306, 1289,    0, 1294,
        0, 1305,    0,    0, 1306, 1296, 1290,    0,    0,    0,
     1308, 1303,    0, 1300, 1310, 1304,    0, 1297,    0,    0,
        0, 1305, 1304,    0,    0,    0,    0,    0, 1305,    0,
        0,    0, 1306, 1316, 1316, 1316, 1316, 1316, 1316, 1316,

     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1328, 1328, 1329,
        0, 1329, 1329, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1337, 1337, 1337, 1337, 1337,    0, 1337, 1338,
     1338, 1338, 1338,    0, 1338, 1338, 1339,    0, 1339, 1340,
        0, 1340, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1347, 1347, 1347, 1347, 1347, 1347,

     1347, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360, 1360, 1360,
        0, 1360, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1376, 1376, 1376,

     1376, 1376, 1376, 1376, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1385, 1385, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391,

     1391, 1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405,

     1405, 1405, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1415, 1415, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1420, 1420, 1420, 1420, 1420,

     1420, 1420, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1434, 1434, 1434, 1434, 1434, 1434, 1434,

     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1446, 1446, 1446,
     1446, 1446, 1446, 1447, 1447, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1450,

     1450, 1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464,

     1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1477, 1477,
     1477, 1477, 1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478,

     1478, 1478, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1482, 1482, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1493, 1493, 1493, 1493, 1493,

     1493, 1493, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505,
     1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506, 1506,
     1506, 1506, 1506, 1507, 1507, 1507, 1507, 1507, 1507, 1507,

     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1509, 1509, 1509,
     1509, 1509, 1509, 1509, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1515,
     1515, 1515, 1515, 1515, 1515, 1515, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1520, 1520, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1522, 1522, 1522, 1522, 1522, 1522, 1522,

     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1530,
     1530, 1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1532, 1532, 1532, 1532, 1532, 1532, 1532,
     1533, 1533,    0, 1533, 1533, 1533, 1533, 1534, 1534, 1534,
     1534, 1534, 1534, 1534, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1549, 1549, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest, lexer_string;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;





//  following are keywords starting with c
#line 2287 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10
#define state_scanompfixed 11
#define state_scanompfree 12
#define state_incfilename 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 32 "lexer.l"


#line 2524 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1316 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5885 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 34 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 37 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 39 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 53 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 54 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 59 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 63 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 80 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 88 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 103 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 107 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 119 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 123 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 124 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK

/* to be used in '#include <file>' */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("INCFILENAME");Y;); lexer_string = yytext; return INCFILENAME; }
	YY_BREAK


case 19:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("ENDTEAM");Y);            return ENDTEAM;           }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("INCLUDE");Y;);           return INCLUDE;           }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("INCLUDE_CPP");Y;);       return INCLUDE_CPP;       }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 93:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 219 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 220 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 221 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 222 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 223 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 224 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 225 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 110:
#line 230 "lexer.l"
case 111:
/* rule 111 can match eol */
#line 231 "lexer.l"
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 231 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 234 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 235 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 115:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 238 "lexer.l"
case 116:
YY_RULE_SETUP
#line 239 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 242 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 243 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 119:
YY_RULE_SETUP
#line 246 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 249 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 252 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 255 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 258 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 263 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 268 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 271 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 274 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 277 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 280 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 283 "lexer.l"
{ D(O("INCLUDE_CPP");Y;);
                                return INCLUDE_CPP;
		              }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 287 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 290 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 293 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 296 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 299 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 303 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 304 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 138:
YY_RULE_SETUP
#line 307 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       lexer_string = pline.get_value(std::string(yytext));
		       D(O("QSTRING");O(lexer_string);Y;);
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 332 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 338 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 345 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 352 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 359 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 361 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 362 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 364 "lexer.l"
ECHO;
	YY_BREAK
#line 3494 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_scanfixpre):
case YY_STATE_EOF(state_scanompfixed):
case YY_STATE_EOF(state_scanompfree):
case YY_STATE_EOF(state_incfilename):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1316 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1316 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1315);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 364 "lexer.l"



void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case INCFILENAME:   BEGIN(state_incfilename);  break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}
std::string lexer_getstring()
{
   D(O("lexer_string");O(lexer_string););
   return lexer_string;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


