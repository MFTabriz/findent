#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 127
#define YY_END_OF_BUFFER 128
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1233] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  128,  126,  125,  126,  122,  121,  126,  123,
      124,   16,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,    4,    5,    2,    3,
        8,    9,    6,    7,   15,   14,   10,   12,   11,   13,
        1,  127,  127,  104,  127,  104,  127,  127,  127,  127,
      127,  127,  127,  118,  118,  117,  118,  118,  107,  118,
      118,  119,    0,  121,    0,    0,   16,   17,   16,    0,
        0,    0,    0,    0,    0,    0,    0,   32,    0,    0,

        0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   85,    0,    0,    0,  104,    0,   92,
        0,    0,    0,   92,    0,    0,    0,  104,    0,    0,
        0,    0,    0,    0,   94,    0,    0,    0,    0,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  107,    0,    0,    0,    0,    0,
      112,  120,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   33,    0,    0,    0,    0,    0,   49,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   92,    0,    0,    0,   92,    0,    0,    0,
       92,    0,    0,    0,   92,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,   96,    0,    0,    0,    0,    0,    0,   94,    0,
        0,    0,   96,    0,    0,    0,   92,    0,    0,    0,
        0,    0,    0,   92,    0,    0,   92,    0,   91,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  108,    0,    0,    0,    0,
        0,    0,    0,    0,   24,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   41,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       64,    0,    0,    0,    0,    0,    0,    0,    0,   78,
       79,    0,    0,    0,    0,   86,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
        0,   98,    0,    0,   92,    0,   92,   92,    0,   92,
        0,    0,   92,   92,   92,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
        0,    0,    0,   93,    0,    0,   99,    0,   94,    0,
        0,   96,    0,   98,   94,    0,   94,  104,    0,   96,

        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
       92,    0,    0,    0,    0,   91,    0,    0,    0,   91,
        0,    0,    0,    0,    0,  102,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  113,    0,    0,
        0,   21,    0,    0,   27,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   48,
        0,    0,    0,   53,    0,    0,    0,    0,    0,    0,
        0,   63,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   88,    0,   90,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   94,    0,   92,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   93,    0,   93,   93,    0,   93,    0,   94,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   91,    0,
       91,   91,    0,   91,    0,    0,    0,    0,    0,    0,
       94,    0,    0,    0,   96,    0,    0,    0,  101,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  111,  110,    0,    0,    0,    0,    0,    0,    0,
       20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   65,    0,   68,    0,    0,    0,   72,    0,    0,
        0,    0,    0,    0,   89,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   91,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   94,  102,   94,    0,   96,    0,    0,    0,
        0,   94,    0,    0,    0,   96,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  109,    0,    0,  115,    0,
        0,    0,    0,    0,    0,    0,    0,   28,   29,    0,
        0,    0,    0,    0,    0,    0,   36,    0,    0,    0,
        0,    0,   50,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   61,    0,    0,   69,    0,   71,    0,    0,
        0,    0,   77,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,    0,    0,    0,    0,
       92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,    0,    0,    0,    0,   94,    0,
        0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
        0,   95,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   93,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   93,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   91,    0,    0,    0,    0,
       91,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   98,    0,    0,    0,    0,   94,    0,  101,
        0,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  114,    0,    0,    0,    0,    0,    0,
       30,   31,    0,   37,    0,    0,    0,    0,    0,    0,
       45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   62,   66,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   92,    0,   92,    0,   92,    0,
       92,    0,   97,    0,   94,    0,   97,    0,   94,    0,
       94,    0,    0,    0,   97,    0,    0,   95,    0,   95,
        0,    0,   94,    0,    0,   97,    0,    0,    0,   93,
        0,   93,    0,   93,    0,   97,    0,   94,    0,   93,
        0,   92,    0,   92,    0,   91,    0,   91,    0,   91,
        0,   91,    0,   97,    0,   94,    0,   97,    0,   94,
        0,   97,    0,   94,    0,   97,    0,   94,    0,    0,
        0,    0,    0,    0,    0,    0,  116,    0,   19,   22,
        0,   25,    0,    0,    0,    0,    0,   40,   43,    0,

        0,    0,   51,    0,    0,   55,    0,    0,   58,    0,
        0,   70,    0,    0,    0,   76,   80,    0,    0,   83,
        0,    0,    0,   94,    0,  100,    0,   94,    0,    0,
       97,    0,   94,    0,   95,  103,   94,    0,   97,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   57,    0,    0,    0,
        0,    0,   81,   82,   84,    0,   94,    0,   94,    0,
        0,    0,    0,    0,   23,    0,    0,    0,    0,    0,
        0,    0,   47,   52,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   26,    0,   34,    0,    0,

       44,   46,   54,   56,   60,    0,    0,    0,    0,  105,
      106,    0,   35,   38,    0,   59,    0,    0,    0,    0,
        0,   75,    0,    0,    0,   39,   73,    0,    0,   74,
       18,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,    1,    1,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
       16,    1,   17,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       27,   34,   35,   36,   37,   38,   39,   40,   41,   27,
       42,    1,   43,    1,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   27,   54,   55,   56,   57,
       58,   59,   27,   60,   61,   62,   63,   64,   65,   66,
       67,   27,    1,   68,    1,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    4,    5,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_uint16_t yy_base[1457] =
    {   0,
        0,   68,  136,  204,  270, 2672,   15,   17,   16,   18,
       20,   21,   44,   45,   86,  113, 2652, 2637, 2622,  333,
       30,  154, 2624, 5143, 5143,   25, 5143, 2595, 2593, 5143,
     5143,   38,  207,   35,  367,   73,  168,  212,  146,  209,
      213,  217,   80,  215,  319,   42, 5143, 5143, 5143, 5143,
     5143, 5143, 5143, 5143, 5143, 5143, 5143, 5143, 5143, 5143,
     5143, 5143, 2597, 5143,   95,   98,  427,  105,  112,  182,
      495,  226,  562, 5143,   36, 5143,  232,  257,  141,  320,
     2568, 5143,   52, 2570, 2551,    0, 2557,    0,  117,  223,
      225,  218,  250,  147,  155,  318,  268,  505,  341,  325,

      344,  326, 2541,  254,  266,   82,  343,  337,  350,  400,
      394,  149,  357, 2532,  393,  399, 2542, 5143,  292,  104,
      179,  451,  305,  125,  391,  459,  402,  184,  629,  394,
      462,  470,  697,  448, 2535,  474,  482,  485,  512, 2531,
      510,  524,  527,  765,  540,  579,  780,  551,  552,   47,
      577,  624,  213,  581,  509, 2518,  493,  343,  646,  363,
      666, 5143,  587,  663,  526,  444,  559,  590,  646,  658,
      702,  698,  721,  532,  638,  637,  642,  823,  726,  728,
      640,  639,  776,  707,  708,  777,  773,  710,  561,  784,
      713,  801,  772,  783,  791,  603,  531,  678,  408,  550,

      744,  606, 2516,  748,  657,  887, 2519,  721,  895,  724,
     2514,  478,  672,  861, 2508, 2492,  791,  809,  903,  912,
      814,  928,  980,  845,  932,  872,  441,  871,  940,  943,
      954, 2489,  884,  962, 2457,  899,  944,  966, 5143,  970,
      995, 1003, 2441, 1000, 1011, 1016, 2433, 1008, 1024, 1032,
     2432, 2405, 1015, 5143, 1036, 1047, 2402, 1050,  605, 1051,
     1059, 1068, 1083, 1084, 1092, 1091, 1099, 1112, 1100, 1113,
     1122, 1137,  141,  769,  846, 5143,  367, 1141, 1149, 1146,
      800, 1104,  863,  923, 1114, 1129, 1122,  947, 1146,  935,
      560, 1005, 1067, 1153, 1161, 1164, 1162, 1158, 1156, 1031,

     1166, 1075, 1180, 1187, 1184, 1188, 1208, 1185, 1182, 1194,
     2376, 1210, 1205, 1206, 1234, 1213, 1217, 1214, 1216, 2373,
     2362, 1236, 1239, 1232, 1241, 2351, 1265, 1240, 1274, 1275,
     1298, 1278, 1302, 1305, 1317, 1279, 1325, 1289, 2347, 1040,
     1333, 2350, 1306, 1337, 5143, 1340, 2341, 5143, 1348, 2330,
     2315, 1321, 5143, 2309, 5143, 1351, 1352, 1360, 1363, 1371,
     1373, 1381, 1368, 1389, 1398, 1413, 1421, 1466, 1424, 1378,
     1433, 1440, 1448, 1386, 1456, 1425, 1482, 1485, 1445, 2302,
     1493, 1495, 1508, 2244, 1453, 1516, 2219, 1490, 5143, 1520,
     1528, 2195, 1329, 5143, 5143, 1536, 5143, 2150, 1539, 2122,

     1498, 1543, 1551, 1548, 1559, 1562, 1570, 2116, 5143, 1574,
     5143, 1577, 1578, 1586, 1589, 2097, 1597, 1599, 1607, 2072,
     1594, 1615, 1624, 1639, 1640, 1288, 1604, 1648, 1651, 1656,
     1666, 1667, 1674, 1675, 1682, 1691, 1694, 1703, 1010, 1347,
     1357, 1391, 1398, 1684, 1524, 1717, 1720, 5143, 1578, 1238,
     1703, 1711, 1713, 1643, 1719, 1727, 1731, 1733,  795, 1394,
     1735, 1736, 1739, 1459, 1623, 1569, 1746, 1745, 1748, 2024,
     1749, 1754, 1756, 1939, 1760, 1758, 1751, 1763, 1774, 1775,
     1776, 1938, 1782, 1789, 1780, 1795, 1632, 1801, 1806, 1784,
     1808, 1812, 1809, 1815, 1820, 5143, 1816, 1923, 1845, 1830,

     1856, 1840, 1862,  739, 1865, 1934, 1876, 1898, 1872, 1882,
     1885, 1889, 5143, 1892, 5143, 1894, 1853, 1902, 1899, 1907,
      906, 1910, 1897, 1914, 1879, 1918, 1921, 1924, 1927, 1930,
     1940, 1943, 1946, 1931, 1956,  996, 1960, 1838, 1964, 1947,
     1968, 1167, 1971, 1837, 1975, 1835, 1979, 1982, 1986, 1797,
     1989, 5143, 1992, 1718, 5143, 1995, 1709, 1999, 5143, 1342,
     1707, 2002, 1699, 2006, 2009, 2013, 2016, 2019, 2020, 2028,
     2031, 2023, 1544, 2033, 1695, 2039, 1692, 2043, 5143, 2046,
     1688, 5143, 2049, 1676, 2054, 2069, 2070, 2073, 2081, 2078,
     1665, 2086, 1659, 2089, 1617, 1612, 2097, 2100, 1307, 2101,

     2109, 2112, 2115, 2120, 2123, 2128, 2131, 2136, 2143, 2144,
     2046, 5143, 5143, 2057, 2086, 2154, 2157, 2160, 2166, 2151,
     1599, 2157, 2158, 2115, 2159, 2129, 1837, 2167, 2168, 2173,
     2096, 1676, 2179, 2181, 2182, 2190, 1590, 2195, 2197, 2207,
     2194, 2205, 2219, 2221, 2217, 2208, 2223, 2231, 2233, 2235,
     2243, 1555, 2244, 1554, 2245, 2247, 2254, 2263, 2236, 2260,
     2280, 2292, 2257, 2272, 1543, 2312, 2279, 2327, 2282, 2338,
     2340, 2348, 2301, 2316, 2356, 2359, 2367, 2369, 2335, 2377,
     2364, 2381, 2384, 2392, 2389, 2396, 2400, 2408, 2412, 2415,
     2423, 2426, 2431, 2397, 2439, 2442, 2450, 2430, 2447, 2458,

     2460, 2468, 2455, 2465, 2476, 2473, 2484, 2487, 2495, 2498,
     5143, 2500, 2503, 2505, 2513, 2517, 2525, 2528, 2529, 2537,
     2540, 2548, 2550, 2558, 2545, 2555, 2566, 2569, 2577, 5143,
     2586, 2601, 2602, 2573, 2610, 2574, 2614, 2617, 2629, 2618,
     2632, 2640, 5143, 1545, 5143, 2643, 1531, 2648, 2647, 2656,
     2659, 1526, 2667, 2669, 2677, 1522, 2664, 2680, 2685, 2688,
     2693, 2696, 2701, 2704, 2154, 5143, 2266, 2712, 2713, 2716,
     2717, 2693, 2708, 2710, 2621, 2408, 2460, 1500, 1499, 2266,
     2648, 2263, 2164, 2697, 2715, 2711, 1491, 2717, 2726, 2680,
     2728, 2322, 1490, 2736, 2738, 2743, 2760, 2761, 2753, 2764,

     2748, 2763, 1477, 2770, 2766, 1449, 2773, 1448, 2775, 2783,
     2779, 2784, 1440, 2786, 2787, 2781, 2799, 2810, 2824, 2828,
     2853, 2831, 2843, 2856, 2864, 1434, 2832, 2872, 2861, 2876,
     5143, 2880, 2888, 2892, 2900, 2904, 2907, 2908, 2916, 2919,
     2927, 2929, 2937, 1427, 2924, 2945, 2934, 2949, 5143, 2953,
     2961, 2965, 2973, 2977, 2980, 1308, 2987, 2984, 2995, 2998,
     3006, 3009, 2985, 3017, 3020, 3021, 3029, 3032, 3040, 3042,
     3050, 1426, 3037, 3058, 3061, 3047, 3069, 3077, 3066, 3081,
     3084, 3092, 5143, 3095, 3103, 3111, 3115, 3123, 3127, 3131,
     3134, 3100, 3142, 3139, 3150, 3153, 3161, 3164, 3169, 3168,

     3177, 3180, 3188, 3190, 3198, 1416, 3185, 3206, 3195, 3210,
     5143, 3214, 3222, 3226, 3234, 3238, 3247, 3262, 3263, 3266,
     3274, 3271, 3283, 3279, 3291, 1391, 3294, 3302, 3299, 3310,
     5143, 3314, 3322, 3326, 3334, 3337, 3338, 3346, 3349, 3357,
     3359, 3367, 1383, 3354, 3375, 3364, 3379, 5143, 3383, 1363,
     3391, 5143, 3394, 3399, 3402, 3407, 3410, 3415, 2768, 2824,
     3419, 2849, 2922, 5143, 3085, 3043, 3383, 3169, 3042, 3391,
     1352, 1344, 2854, 5143, 3407, 3190, 3411, 3402, 3412, 3134,
     3425, 3415, 3423, 3427, 3433, 3428, 3443, 3436, 3160, 3453,
     3432, 1343, 1333, 3460, 3456, 3434, 3469, 3471, 3474, 2900,

     2969, 3475, 3479, 3502, 1269, 3523, 5143, 3526, 1200, 3535,
     5143, 3538, 1184, 3546, 5143, 3549, 1149, 3557, 5143, 3476,
     1114, 3560, 3509, 3568, 1115, 3499, 3576, 3579, 3584, 3587,
     3513, 3565, 1104, 3592, 3600, 1094, 3591, 3608, 3616, 1062,
     3620, 5143, 3628, 1061, 3636, 1042, 3640, 5143, 3644, 5143,
     3652, 1027, 3656, 5143, 3664, 1005, 3668, 5143, 3676,  973,
     3680, 5143, 3688,  955, 3692, 5143, 3700,  935, 3704, 5143,
     3712,  934, 3716, 5143, 3724,  915, 3728, 5143, 3731, 3736,
     3739, 3744, 3747, 2399, 2461, 3496, 5143, 3619,  880,  871,
     3683,  840, 3599, 2979, 3736, 3593, 3739,  835,  812, 3728,

     3745, 3746,  787, 3740, 3747,  775, 3751, 3752,  740, 3756,
     3329,  739, 3754, 3760, 3753,  716,  711, 3755, 3774,  669,
     3784, 3791, 3807, 5143, 3818,  671, 3794, 5143, 3822, 3832,
      660, 3809,  653,  618,  610,  584, 5143, 3840,  534, 3843,
     3848, 2611, 2845, 3802, 3814, 3825, 2922, 3824, 3832, 3530,
     3841, 3843, 3844, 3847, 3845, 3848,  508, 3855, 3859, 3852,
     3871, 3857,  488,  477,  474, 3893, 5143, 3914, 5143, 3916,
     3919, 3110, 3204, 3885,  453, 3875, 3242, 3891, 3911, 3914,
     3916, 3853,  443,  420, 3917, 3920, 3921, 3915, 3925, 3929,
     3926, 3949,  353,  352, 3930,  340, 3529,  312, 3940, 3933,

      297,  292,  283,  264,  242, 3946, 3942, 3947, 3952, 5143,
     5143, 3968, 5143,  241, 3961,  160, 3956, 3964, 3970, 3984,
     3977,  120, 3979, 3989, 3992,  112,  107, 3994, 4000,   50,
        7, 5143, 4049, 4054, 4059, 4064, 4069, 4074, 4079, 4084,
     4089, 4091, 4095, 4100, 4105, 4110, 4115, 4120, 4125, 4130,
     4135, 4138, 4141, 4145, 4150, 4155, 4160, 4165, 4170, 4175,
     4180, 4185, 4190, 4195, 4200, 4205, 4210, 4215, 4220, 4225,
     4230, 4235, 4240, 4245, 4250, 4255, 4260, 4265, 4270, 4275,
     4280, 4285, 4290, 4295, 4300, 4305, 4310, 4315, 4320, 4325,
     4330, 4335, 4340, 4345, 4350, 4355, 4357, 4362, 4367, 4372,

     4377, 4382, 4387, 4392, 4397, 4402, 4407, 4412, 4417, 4422,
     4427, 4432, 4437, 4442, 4447, 4452, 4457, 4462, 4467, 4472,
     4477, 4482, 4487, 4492, 4497, 4499, 4504, 4509, 4514, 4519,
     4524, 4529, 4534, 4539, 4544, 4549, 4554, 4559, 4564, 4569,
     4574, 4579, 4584, 4589, 4594, 4599, 4604, 4609, 4614, 4619,
     4624, 4629, 4634, 4639, 4644, 4649, 4651, 4656, 4661, 4666,
     4671, 4676, 4681, 4686, 4691, 4696, 4701, 4706, 4711, 4716,
     4721, 4726, 4731, 4736, 4741, 4746, 4751, 4756, 4761, 4766,
     4771, 4776, 4781, 4786, 4791, 4796, 4801, 4806, 4811, 4816,
     4818, 4823, 4828, 4833, 4838, 4843, 4848, 4853, 4858, 4863,

     4868, 4873, 4878, 4883, 4888, 4893, 4898, 4903, 4908, 4913,
     4918, 4923, 4928, 4933, 4938, 4943, 4948, 4953, 4958, 4963,
     4968, 4973, 4978, 4983, 4988, 4993, 4998, 5003, 5005, 5010,
     5015, 5020, 5025, 5030, 5035, 5040, 5045, 5050, 5055, 5060,
     5065, 5070, 5075, 5080, 5085, 5090, 5095, 5100, 5105, 5110,
     5115, 5120, 5125, 5130, 5135, 5137
    } ;

static yyconst flex_int16_t yy_def[1457] =
    {   0,
     1233, 1233, 1234, 1234,    2,    5, 1235, 1235, 1236, 1236,
     1237, 1237, 1237, 1237, 1237, 1237, 1238, 1238, 1239, 1240,
     1241, 1241, 1232, 1232, 1232, 1232, 1232, 1232, 1242, 1232,
     1232, 1243, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1244, 1232, 1245, 1246, 1247, 1248, 1249, 1250,
     1247, 1245, 1249, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1242, 1251, 1252, 1253, 1243, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,

     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1244, 1232, 1254, 1255,
     1256, 1257, 1246, 1255, 1258, 1259, 1260, 1255, 1261, 1262,
     1263, 1264, 1261, 1262, 1265, 1266, 1267, 1268, 1268, 1269,
     1270, 1268, 1271, 1272, 1260, 1260, 1260, 1260, 1260, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1232, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1273, 1274, 1275, 1255, 1276,

     1269, 1274, 1265, 1277, 1275, 1275, 1269, 1277, 1275, 1258,
     1265, 1278, 1259, 1259, 1269, 1278, 1279, 1280, 1281, 1282,
     1283, 1284, 1282, 1280, 1285, 1283, 1255, 1286, 1287, 1284,
     1284, 1269, 1288, 1284, 1265, 1232, 1285, 1285, 1232, 1285,
     1281, 1281, 1269, 1285, 1281, 1289, 1269, 1290, 1289, 1289,
     1269, 1291, 1290, 1232, 1290, 1289, 1269, 1292, 1255, 1293,
     1294, 1295, 1296, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1232, 1232, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,

     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1298, 1299,
     1300, 1299, 1301, 1300, 1300, 1301, 1300, 1302, 1265, 1291,
     1269, 1269, 1301, 1301, 1232, 1301, 1269, 1232, 1300, 1269,
     1278, 1278, 1232, 1269, 1232, 1303, 1304, 1305, 1304, 1306,
     1305, 1305, 1306, 1305, 1307, 1308, 1309, 1307, 1308, 1310,
     1311, 1309, 1309, 1312, 1309, 1306, 1306, 1306, 1310, 1265,
     1313, 1311, 1311, 1269, 1313, 1311, 1269, 1312, 1232, 1312,
     1309, 1269, 1232, 1232, 1232, 1306, 1232, 1269, 1305, 1269,

     1314, 1315, 1314, 1315, 1315, 1314, 1314, 1291, 1232, 1315,
     1232, 1316, 1317, 1318, 1317, 1265, 1319, 1318, 1318, 1269,
     1319, 1318, 1320, 1321, 1321, 1322, 1323, 1324, 1325, 1325,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1232, 1232,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1232, 1326, 1326, 1327, 1328,

     1329, 1328, 1330, 1329, 1329, 1330, 1329, 1330, 1330, 1330,
     1329, 1291, 1232, 1330, 1232, 1331, 1332, 1333, 1332, 1334,
     1333, 1333, 1334, 1333, 1334, 1334, 1334, 1333, 1331, 1335,
     1336, 1331, 1335, 1337, 1338, 1336, 1336, 1339, 1336, 1337,
     1340, 1338, 1338, 1340, 1338, 1339, 1339, 1336, 1334, 1340,
     1340, 1232, 1340, 1269, 1232, 1338, 1269, 1339, 1232, 1341,
     1342, 1341, 1342, 1342, 1341, 1342, 1341, 1343, 1344, 1345,
     1344, 1346, 1345, 1345, 1346, 1345, 1346, 1346, 1232, 1346,
     1269, 1232, 1345, 1269, 1347, 1348, 1348, 1349, 1350, 1349,
     1351, 1352, 1350, 1350, 1269, 1352, 1350, 1353, 1354, 1355,

     1356, 1353, 1353, 1331, 1331, 1331, 1331, 1331, 1331, 1353,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1232, 1232, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1358, 1359, 1360, 1359, 1361,
     1360, 1360, 1361, 1361, 1361, 1360, 1361, 1362, 1363, 1364,
     1363, 1365, 1364, 1364, 1365, 1365, 1365, 1364, 1365, 1366,
     1367, 1366, 1368, 1369, 1370, 1371, 1371, 1372, 1369, 1373,

     1370, 1370, 1373, 1372, 1371, 1373, 1373, 1370, 1372, 1373,
     1232, 1374, 1375, 1375, 1374, 1375, 1374, 1376, 1377, 1378,
     1377, 1379, 1378, 1378, 1379, 1379, 1379, 1378, 1379, 1232,
     1380, 1381, 1381, 1382, 1383, 1382, 1384, 1383, 1383, 1384,
     1384, 1384, 1232, 1385, 1232, 1383, 1385, 1386, 1387, 1388,
     1387, 1389, 1390, 1388, 1388, 1385, 1390, 1362, 1386, 1362,
     1362, 1362, 1362, 1362, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1232, 1232, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,

     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1392, 1393,
     1394, 1393, 1395, 1394, 1394, 1385, 1395, 1394, 1395, 1395,
     1232, 1395, 1394, 1395, 1394, 1395, 1362, 1396, 1397, 1396,
     1398, 1397, 1397, 1385, 1398, 1397, 1398, 1398, 1232, 1398,
     1397, 1398, 1397, 1398, 1399, 1400, 1399, 1401, 1402, 1403,
     1403, 1404, 1405, 1406, 1407, 1408, 1409, 1408, 1410, 1409,
     1409, 1385, 1410, 1409, 1411, 1412, 1411, 1411, 1412, 1412,
     1410, 1410, 1232, 1410, 1409, 1411, 1410, 1409, 1412, 1410,
     1413, 1414, 1413, 1414, 1414, 1413, 1414, 1413, 1415, 1416,

     1417, 1416, 1418, 1417, 1417, 1385, 1418, 1417, 1418, 1418,
     1232, 1418, 1417, 1418, 1417, 1418, 1419, 1420, 1420, 1421,
     1422, 1421, 1423, 1422, 1422, 1385, 1423, 1422, 1423, 1423,
     1232, 1423, 1422, 1423, 1422, 1424, 1425, 1426, 1425, 1427,
     1426, 1426, 1385, 1427, 1426, 1427, 1427, 1232, 1427, 1385,
     1426, 1232, 1428, 1424, 1428, 1428, 1428, 1428, 1232, 1232,
     1232, 1232, 1232, 1232, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1232, 1232, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,

     1429, 1429, 1429, 1430, 1385, 1431, 1232, 1430, 1385, 1431,
     1232, 1432, 1385, 1433, 1232, 1432, 1385, 1433, 1232, 1434,
     1435, 1436, 1437, 1437, 1385, 1438, 1437, 1439, 1439, 1439,
     1440, 1441, 1442, 1443, 1443, 1385, 1436, 1443, 1444, 1385,
     1445, 1232, 1444, 1385, 1446, 1385, 1447, 1232, 1445, 1232,
     1448, 1385, 1449, 1232, 1450, 1385, 1451, 1232, 1450, 1385,
     1451, 1232, 1452, 1385, 1453, 1232, 1452, 1385, 1453, 1232,
     1426, 1385, 1454, 1232, 1426, 1385, 1454, 1232, 1428, 1455,
     1428, 1455, 1455, 1232, 1232, 1232, 1232, 1456, 1456, 1456,
     1456, 1456, 1456, 1232, 1456, 1456, 1456, 1456, 1456, 1456,

     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1436, 1436, 1232, 1436, 1385, 1438, 1232, 1438, 1437,
     1385, 1440, 1442, 1442, 1442, 1385, 1232, 1443, 1385, 1428,
     1428, 1232, 1232, 1456, 1456, 1456, 1232, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1436, 1232, 1438, 1232, 1428,
     1455, 1232, 1232, 1456, 1456, 1456, 1232, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1455, 1232, 1232, 1456, 1456, 1232, 1456, 1456, 1456,

     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1232,
     1232, 1456, 1232, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456,    0, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232
    } ;

static yyconst flex_uint16_t yy_nxt[5212] =
    {   0,
       24,   24,   25,   26,   24,   24,   24,   24,   24,   27,
       24,   24,   24,   28,   24,   24,   24,   48,   52,   48,
       52,   86,   56,   56,   49,   50,   49,   50,   82,   57,
       57,   75,   76,   75,   77,   58,   58,  150,   83,  150,
      151,   30,   24,   24,   87,   88,   56,   56,  150,   86,
      150,  151,   86,   57,   57,   82,   86,   53,   54,   53,
       54,   59,   59,   92,   86,   83,  116,   24,   24,   24,
       31,   26,   24,   24,   24,   24,   24,   27,   24,   24,
       24,   28,   24,   24,   24,   59,   59,   86,   56,   92,
       60,   60,   60,  116,   86,   57,   86,  120,   60,  121,

      124,  110,  125,  122,   98,  185,  126,  135,  200,   30,
       24,   24,  201,  136,  128,   56,  130,   60,   60,   60,
      137,   86,   57,   87,   88,   60,   86,   59,  110,  200,
       98,   86,  185,  201,   86,   24,   24,   24,   25,   26,
       24,   24,   24,   24,   24,   27,   24,   24,   24,   28,
       24,   24,   24,   60,   59,   78,   76,   78,   77,   79,
       86,   86,  157,   86,  167,   80,  158,  192,  103,   86,
       81,  439,  168,   80,   86,  104,  105,   30,   24,   24,
       60,  203,   86,  139,  140,  139,  141,  204,  200,  157,
      142,  167,  201,  158,  192,  103,   99,  439,  100,  168,

       80,  104,  105,   24,   24,   24,   31,   26,   24,   24,
       24,   24,   24,   27,   24,   24,   24,   28,   24,   24,
       24,   86,   99,   86,  100,   90,   86,   86,  120,   86,
      121,   86,   86,  152,  122,  152,  111,   86,  273,   86,
      106,   91,  143,  101,  107,   30,   24,   24,  102,  165,
      108,  112,   90,  109,  153,   86,   86,  163,  154,  164,
      154,  151,  155,  111,   86,  273,  106,   91,   86,  101,
      107,   24,   25,  156,  102,  165,  108,  112,   86,  109,
       86,  153,   86,  163,  166,  164,  183,   33,   34,   35,
       36,   37,   38,  171,  120,   39,  197,   86,   40,   41,

      198,  184,   42,   43,   44,   45,   86,  124,   46,  125,
      166,   86,  183,  126,   33,   34,   35,   36,   37,   38,
      171,  159,   39,  159,   40,   41,   86,  184,   42,   43,
       44,   45,   86,   86,   46,   66,   67,   68,   69,   86,
       86,   70,  160,  113,   69,  178,   71,  169,  170,   72,
      114,   86,   73,   69,   86,   86,  182,   86,   86,  115,
      179,  180,  176,  186,   86,  276, 1211, 1210,  187,  160,
      113,   86,  178,  169,  170,  177,  114,  181,  193,   73,
       69,   86,  182,  188,   93,  115,  179,  180,  277,  176,
      186,   94,  276,  211,  187,   95,  135,  443,   96,  212,

       97,  177,  225,  181,  128,  193,  218,   86,   86,  188,
      219,   93,  200,   86,   86,  277,  201,  189,   94,  190,
      195,   95,  191,  443,   96,  194,   97,  127,  127,  128,
      129,  130,  127,  127,   86,  132,  127,  127,  127,  127,
      133,  127,  127,  127,  189,  200,  190,  195,  191,  201,
      135,  194,  206,  207,  206,  208,  225,   86,   86,  209,
      214,  215,  214,  216,  227,  285,  228,   86,  127,  127,
      229,  231,  232,  231,  233,  238,  239,  238,  234,  352,
      353,  352,  240,  242,  243,  242,  244,  247,   86,  248,
      245,   86,  285,  249,  127,  127,  127,  128,  133,  130,

      127,  127,   86,  137,  127,  127,  127,  127,  133,  127,
      127,  127,  254,  250,  140,  250,  248,  172,  255,   86,
      249,  274,   86,  275,  173,  256,  257,  256,  248,  259,
      157,  260,  249,  203,  158,  261,  127,  127,  252,  333,
       86,  174,  128,  175,  218,  284,   86,  274,  219,  275,
      294,  173,  339,  128,  128,  218,  218,  157,  340,  219,
      219,  158,  127,  144,  128,  144,  130,  174,  264,  175,
      137,  272,  284,   86,  265,   86,  271,  294,  152,  145,
      152,  128,  154,  218,  154,  151,  155,  219,  252,  321,
      146,  459,  286,  147,  264,  148,  266,  156,  272,  153,

      265,   86,  149,  271,   86,  120,  145,  330,  203,  200,
      267,  331, 1135,  201,  333,  321,  146,  459,  286,  147,
     1135,  148,  281,  266,  287,  152,  153,  152,  149,  217,
      217,  128,  220,  218,  217,  217,  267,  222,  217,  217,
      217,  217,  223,  217,  217,  217,  153,  159,  281,  159,
      287,   86,   86,   86,   86, 1135,   86,  312,  313,  347,
       86,  336,  295,  297,  252,  337,  296,  278,  160,  278,
      217,  217,   86,  153,  354,  252,  216,   86,  288,  335,
      207,  335,  336,   86,  312,  313,  337,  279,  282,  295,
      297,  280,  296,  289,  283,  160,  217,  217,  217,  128,

      223,  218,  217,  217,  288,  219,  217,  217,  217,  217,
      223,  217,  217,  217,  279,  282,   86,  291,  280,  289,
      283,   86,   86,  348,   86,   86,  211,   86,  315,  346,
       86,  320,  212,  316,  323,   86,  292,  290,  217,  217,
       86,  347,   86,  673,  291,  341,  342,  341,  252,  344,
      345,  344,  293,   86,   86,  315,  346,  311,  320,  310,
      316,  323,  292,  290,  217,  217,  262,  128,  262,  218,
      217,  217,  217,  219,  217,  217,  217,  217,  293,  217,
      217,  217,  128,  311,  218,  310,   86,   86,  219,   86,
       86,   86,  318,  128,  440,  357,  319,   86,   86,  358,

      268,   86,  326,  441,  327,   86,  217,  217,  217,  269,
      270,  135,  314,  317,   86,   86,  227,  360,  370,  318,
      322,  440,  371,  319,  328,  631,   86,  268,  326,  441,
      324,  327,  217,  449,  325,  269,  270,   86,  314,  317,
      298,  299,  300,  301,  302,  303,  322,  135,  304,   86,
      328,  631,  305,  360,   86,  306,  324,  307,  308,  449,
      325,  309,  214,  215,  214,  216,  442,  298,  299,  300,
      301,  302,  303,  380,  227,  304,  370,   86,  305,  381,
      371,  306,  451,  307,  308,   86,  389,  309,  335,  207,
      335,  336,  390,  442,   86,  337,  349,  350,  349,  336,

      393,  394,  393,  337,  362,  243,  362,  363,  398,  451,
      685,  364,  356,  356,  128,  365,  357,  356,  356,  252,
      367,  356,  356,  356,  356,  368,  356,  356,  356,  373,
      232,  373,  374,  377,  239,  377,  375,   86,  252,  252,
      378,  383,  384,  383,  385,  387,  395,  374,  386,   86,
      452,  375,  378,  356,  356,  373,  232,  373,  374,  252,
      458,   86,  375,  391,  392,  391,  374,  377,  239,  377,
      375,  396,  397,  396,  378,  456,  452,  252,  378,  356,
      356,  356,  128,  368,  357,  356,  356,  458,  358,  356,
      356,  356,  356,  368,  356,  356,  356,  398,  387,  363,

      698,  456,  395,  364,  362,  243,  362,  363,  378,  252,
      254,  364,  399,  400,  399,  363,  405,  254,  247,  364,
      402,  356,  356,  405,  403,  406,  257,  406,  402,  460,
      611,  252,  403,  407,  140,  407,  402,  410,  411,  410,
      403,  512,  513,  512,  405,   86,  252,  356,  406,  257,
      406,  402,  259,  416,  413,  403,  460,  611,  414,  417,
      419,  420,  419,  421,  469,  252,  252,  422,  356,  423,
      128,  423,  357,  356,  356,  356,  358,  356,  356,  356,
      356,   86,  356,  356,  356,  426,  128,  427,  357,   86,
      469,  428,  358,  128,  128,  357,  357,  461,  252,  358,

      358,  128,  128,  357,  357,  471, 1135,  358,  358,  356,
      356,  356,  429,  430,  128,  128,  357,  357,   86,  252,
      358,  358,  236,  461,  128,  431,  357,  450,   86,  434,
      358,  471,  435,  432,  453,  356,   86,  433,  429,  128,
      430,  357,  278,   86,  278,  358,  454,  447,  436,  447,
      444,  431,  444,  252,  450,  434,  455,  437,  435,  432,
       86,  453,  279,  457,  433,  438,  280,   86,  448,  554,
       86,  703,   86,  454,  436,   86,   86,  445,   86,  446,
       86,  462,  455,  437,  468,  464,  463,  465,  252,  279,
      457,  438,  467,  280,   86,  448,   86,  470,   86,   86,

      466,   86,   86,  445,  252,  446,  481,  462,   86,  474,
      468,  472,  464,  463,  465,  476,  473,  475,  467,   86,
       86,  477,   86,  470,   86,  480,  466,   86,   86,  478,
       86,   86,  488,  481,  482,  490,  474,  472,  483,  485,
      484,  476,  473,  475,  479,  489,   86,  477,   86,  491,
       86,  480,   86,   86,   86,   86,  478,  486,  493,  488,
      482,  498,  490,  494,  483,  485,  484,  487,  621,  492,
      479,  489,  495,  252,  496,  491,  120,  203,  500,   86,
      203,  348,  501,  503,  486,  493,  503,  510,  498,  494,
      497,  339,  200,  487,  621,  492,  201,  340,  495,  505,

      207,  505,  506,  509,  345,  509,  507,  347,  348,  506,
      510,  200,  200,  507,  510,  201,  201,  497,  505,  207,
      505,  506,  352,  353,  352,  507,  511,  350,  511,  506,
      393,  394,  393,  507,  341,  342,  341,  252,  509,  345,
      509,  514,  515,  514,  247,  510,  713,   86,  510,  511,
      350,  511,  506,  128,  135,  517,  507,   86,   86,  518,
      520,  522,  243,  522,  523,  135,   86,  252,  524,  612,
      395,  520,  526,  239,  526,  398,  527,  523,  613,  527,
      380,  524,  522,  243,  522,  523,  541,  252,  389,  524,
      528,  400,  528,  523,  547,  252,  612,  524,  516,  516,

      128,  529,  517,  516,  516,  613,  531,  516,  516,  516,
      516,  532,  516,  516,  516,  227,  614,  534,  615,  632,
      252,  535,  537,  232,  537,  538,  227,  395,  534,  539,
      252,  252,  535,  527,  543,  384,  543,  544,  252,  516,
      516,  545,  387,  614,  538,  615,  632,  380,  539,  537,
      232,  537,  538,  541,   86,  555,  539,  548,  392,  548,
      538,  553,   86,   86,  539,  516,  516,  516,  128,  532,
      517,  516,  516,   86,  518,  516,  516,  516,  516,  532,
      516,  516,  516,  526,  239,  526,  549,  397,  549,  636,
      527,   86,  389,  527,  551,  552,  551,  554,  547,  544,

      247,  553,  561,  545,   86,   86,  562,  516,  516,  543,
      384,  543,  544,   86,   86,  636,  545,  556,  557,  556,
      544,  558,  559,  558,  545,  616,  252,  616,  547,  548,
      392,  548,  538,  516,  236,  252,  539,  549,  397,  549,
      528,  400,  528,  523,  527,  254,  581,  524,  725,  252,
      254,  564,  565,  257,  565,  561,  564,   86,  617,  562,
      566,  411,  566,  565,  257,  565,  561,  564,   86,   86,
      562,  567,  140,  567,  561,  566,  411,  566,  562,  259,
      416,  569,  564,   86,  617,  570,  572,  574,  420,  574,
      575,  416,   86,  638,  576,  620,  582,  572,  578,  579,

      578,  581,  580,  575,   86,  580,  591,  576,  574,  420,
      574,  575,  592,   86,  745,  576,  583,  584,  583,  575,
      638,  252,  620,  576,  516,  585,  128,  585,  517,  516,
      516,  516,  518,  516,  516,  516,  516,   86,  516,  516,
      516,  426,  426,  588,  588,  637,   86,  589,  589,  594,
      595,  594,  596,  599,  656,  600,  597,   86,  599,  601,
      600,  744,  625,  740,  601,  516,  516,  516,  128,  128,
      517,  517,  637,  236,  518,  518,  128,  128,  517,  517,
      252,  656,  518,  518,  128,  444,  517,  444,  603,  625,
      518,  516,  252,  128,  582,  517,  128,  582,  517,  518,

      602,  254,  518,  604,  783,  128,  605,  517,  607,  254,
      606,  518,  445,  252,  446,  603,  608,   86,  618,  609,
      618,  447,  252,  447,  610,   86,  602,   86,  622,  604,
      783,  623,  605,   86,  624,  607,  606,  619,  445,  626,
      446,   86,  448,  608,  627,   86,  609,   86,  628,   86,
       86,  610,  630,   86,  633,  622,  629,  634,  623,   86,
       86,  624,   86,   86,  619,   86,  626,  635,   86,  448,
       86,  627,   86,  641,   86,  628,  640,   86,  646,  630,
      639,  633,  647,  629,  634,  642,  644,  643,   86,   86,
       86,  648,  649,  635,   86,  645,   86,  651,   86,  555,

      641,  654,  640,   86,  659,  646,  639,  650,  647,   86,
      652,  642,  644,  643,  653,   86,  655,  648,  657,  649,
       86,  645,   86,   86,  651,  660,   86,  658,  654,   86,
       86,  659,  203,  650,   86,  663,  652,  389,  670,  555,
      389,  653,  203,  655,  662,  657,  661,  120,  670,  667,
      665,   86,  660,  668,  658,  135,  664,  672,  207,  672,
      673,  682,  663,  675,  345,  675,  672,  207,  672,  673,
      662,  778,  661,  675,  345,  675,  665,  676,  350,  676,
      673,  395,  664,  677,  515,  677,  676,  350,  676,  673,
      512,  513,  512,  677,  515,  677,  128,  778,  679,  395,

      348,  135,  680,  684,  243,  684,  685,  682,  687,  239,
      687,  684,  243,  684,  685,  688,  400,  688,  685,  687,
      239,  687,  689,  397,  689,  688,  400,  688,  685,  128,
      690,  679,  227,  380,  694,  691,  348,   86,  695,  700,
      692,  697,  232,  697,  698,  128,  692,  679,  227,  380,
      694,  680,   86,   86,  695,  700,  692,  702,  384,  702,
      703,  697,  232,  697,  698,  705,  392,  705,  698,  707,
      552,  707,  702,  384,  702,  703,  708,  557,  708,  703,
      709,  559,  709,  705,  392,  705,  698,  689,  397,  689,
      707,  552,  707,  710,  711,  710,  708,  557,  708,  703,

      709,  559,  709,  715,  257,  715,  713,  716,  411,  716,
      715,  257,  715,  713,  716,  411,  716,  717,  140,  717,
      713,  259,  416,  719,  727,  579,  727,  720,  722,  724,
      420,  724,  725,  416,  724,  420,  724,  725,   86,  722,
      728,  584,  728,  725,  727,  579,  727,  729,  730,  729,
      728,  584,  728,  725,  678,  731,  128,  731,  679,  678,
      678,  678,  680,  678,  678,  678,  678,  765,  678,  678,
      678,  426,  426,  734,  734,  591,  252,  735,  735,  766,
      591,  737,  739,  595,  739,  740,  737,  742,  743,  742,
      739,  595,  739,  740,  765,  678,  678,  678,  746,  747,

      746,  740,  599,  752,  749,  236,  766,  767,  750,  753,
      755,  756,  755,  757,  599,  782,  749,  599,  409,  749,
      750,  678,  128,  750,  679,  128,  252,  679,  680,   86,
      128,  680,  679,  128,  767,  679,  680,  775,  128,  680,
      679,  758,  782,   86,  680,  128,  599,  679,  749,  760,
      777,  680,  750,  759,  252,  616,  761,  616,  768,  762,
      768,  618,  764,  618,  775,   86,  763,  770,  758,  770,
      772,   86,   86,   86,  773,  774,  760,  777,  769,  759,
      619,   86,   86,  761,  959,  974,  762,   86,  617,  764,
      781,  771,  763,   86,  776,   86,   86,  772,  780,  252,

      785,  773,  774,  787,   86,  769,  779,  619,   86,   86,
      959,   86,  974,  786,  617,  784,  789,  781,  771,   86,
      776,   86,   86,  252,  780,  788,  791,  785,  790,  792,
      787,   86,  779,   86,  793,   86,  794,   86,  796,  786,
      795,  784,  798,  789,  797,   86,  799,   86,  252,   86,
       86,  788,  800,  791,  790,  792,  803,   86,   86,   86,
      793,   86,  801,  794,  807,  796,  802,  795,   86,  798,
      797,   86,  812,  799,   86,  805,  804,   86,  806,  800,
       86,  203,  808,  803,  203,  809,   86,  823,  801,  813,
      823,  807,  802,  817,   86,  810,  960,  811,  812,  973,

      971,  805,  804,  348,  806,  814,   86,  818,  808,  832,
      236,  815,  809,  252,  120,  813,  820,  355,  348,  817,
      821,  810,  960,  811,  832,  973,  971,  816,  825,  826,
      825,  827,  814,  818,  252,  828,   86,  135,  815,  830,
      831,  830,  347,  841,  827,  252,  832,  982,  828,  833,
      207,  833,  827,  816,  252,  236,  828,  834,  345,  834,
      835,  350,  835,  827,  832,   86,  135,  828,  836,  515,
      836,  128,  841,  838,  982,  832,   86,  839,  843,  844,
      843,  845,  848,  849,  848,  846,  398,   86,  845,  850,
       86,  395,  846,  851,  243,  851,  845,  850,  395,  380,

      846,  852,  239,  852,  850,  869,  252,  409,  850,  853,
      400,  853,  845,  854,  397,  854,  846,  856,  857,  858,
      850, 1142,   86,  859,  861,  862,  861,  863,  856,  969,
      858,  846,  389,  227,  864,  866,  252,  252,  880,  867,
      871,  872,  871,  873,  387,  252,  876,  874, 1142,  380,
      877,  878,  232,  878,  876,  869,  969,  555,  877,  882,
      883,  882,  554,  884,  873,  236,  884,  389,  874,  885,
      384,  885,  873,  880,   86,  555,  874,  886,  392,  886,
      876,  884,  970, 1143,  877,  887,  552,  887,  888,  557,
      888,  873,  884,  252,  355,  874,  889,  559,  889,  890,

      711,  890,  247,  880,  892,  254,  884,  254,  893,  970,
     1143,  895,  252,  895,  896,  257,  896,  892,  897,  411,
      897,  893,  236,  252,  236,  895,  898,  140,  898,  892,
      259,  416,  900,  893,  161,  252,  901,  903,  905,  906,
      905,  907,  416,  236,  118,  908,   86,  582,  903,  910,
      911,  910,  581,  912,  907,   86,  912,  582,  908,  913,
      420,  913,  907,  912,   88,   86,  908,  914,  579,  914,
      915,  584,  915,  907,  912,  591,  591,  908,  916,  730,
      916,  923,  923,   84,  161,  912,  837,  917,  128,  917,
      838,  837,  837,  837,  839,  837,  837,  837,  837,  118,

      837,  837,  837,  426,  426,  920,  920,   86,   84,  921,
      921,  925,  926,  925,  927,  930,  931,  930,  928,  744,
      745,  927,  932, 1232,   64,  928,  932,  837,  837,  837,
      933,  595,  933,  927,  745,   86, 1172,  928,  968,   62,
      932,  934,  743,  934,  935,  747,  935,  927,  932,  752,
      599,  928,  937,  837,   62,  940,  938,  942,  943,  942,
      944,  752,   86, 1172,  945,  968,  952,  940,  947,  948,
      947,  950,  949,  944,   31,  949,  972,  945,  951,  756,
      951,  944,  128, 1232,  838,  945, 1232,  599,  839,  937,
      128, 1232,  838,  938,   86,  128,  839,  838,  128,  980,

      838,  839,  972,  128,  839,  838,  128,   86,  838,  839,
      953,   86,  839,  768,  961,  768,  961,  770,  963,  770,
      963,  958,   86,  955,   86,   86,  980,  954,  965,   86,
      975,   86,  956,  769,  978, 1232,  953,  957,  962,  964,
       86,  771,   86,  966,  977,  967,  976, 1232,  958,  955,
       86, 1232,   86,  954,  965,  981,  975,   86,  956,  979,
      769,  978,   86,  957,  983,  962,  964,   86,  771,  966,
      977,  967,  976,  984,   86,   86,  985,   86,   86,  990,
       86,  981,  987,  989,   86,  979,  988,   86,  986,   86,
      983,  992,  994,   86,  991,   86,  993,   86,   86,  984,

       86,   86,  985, 1084, 1000,  990, 1232, 1232, 1232,  987,
      989,  995,  988,   86,  986,  997,  996,  998,  992,  994,
      991, 1001,  993,  999,   86, 1232,  120, 1002,  820, 1084,
      203, 1000,  821,  203,  348, 1003,  823,  995, 1232,  823,
      832,  997,  996,  998, 1006, 1007, 1006, 1001, 1232,  999,
     1086,  832, 1086, 1002, 1004, 1005, 1004,  827,  347, 1085,
      827,  828, 1003,  348,  828,  825,  826,  825,  827,  832,
     1173, 1087,  828, 1008, 1009, 1008,  827,  830,  831,  830,
      828, 1010, 1011, 1010,  832, 1085, 1232, 1094,  832,  833,
      207,  833,  827,  834,  345,  834,  828, 1173, 1087, 1232,

      832,  835,  350,  835,  827,  836,  515,  836,  828,  128,
      135,  838,  832, 1094,   86,  839,  841, 1012, 1013, 1012,
      845,  135, 1232,  963,  846,  963,  395,  841, 1014, 1015,
     1014,  398,  850,  845, 1118,  850,  395,  846,  843,  844,
      843,  845,  850, 1177,  964,  846, 1016, 1017, 1016,  845,
      848,  849,  848,  846, 1018, 1019, 1018,  850, 1232, 1232,
     1118,  850,  851,  243,  851,  845,  852,  239,  852,  846,
     1177,  964, 1232,  850,  853,  400,  853,  845,  854,  397,
      854,  846,  856,   86,  858,  850, 1021, 1033,  864,  856,
      857,  858, 1022,  850, 1232,  859, 1024, 1025, 1024, 1026,

     1028, 1119,  863, 1027, 1232, 1232,  846,  861,  862,  861,
      863, 1030, 1147, 1031,  846, 1232, 1232,  251, 1035, 1036,
     1035, 1037,  227,  380,  866, 1038, 1232, 1119,  867,  869,
     1039, 1040, 1039,  873,  380, 1232, 1232,  874, 1147,  555,
      869, 1041, 1042, 1041,  554,  884,  873, 1232,  884,  389,
      874,  871,  872,  871,  873,  880,   86,   86,  874, 1043,
     1044, 1043,  873,  387, 1089,  876,  874, 1232,  389,  877,
     1045, 1046, 1045,  876,  880, 1092, 1232,  877,  878,  232,
      878,  876, 1047, 1048, 1047,  877,  555, 1232, 1232,  880,
     1232, 1089,  884,  882,  883,  882, 1049, 1050, 1049,   86,

      884, 1092,  254,  884,  885,  384,  885,  873,  895, 1232,
     1088,  874,  886,  392,  886,  876,  887,  552,  887,  877,
     1232, 1232, 1232,  884,  888,  557,  888,  873,  889,  559,
      889,  874,  890,  711,  890,  880,  247, 1088,  892,  884,
     1232,  254,  893, 1051, 1052, 1051,  892,  895,   86, 1193,
      893, 1053, 1054, 1053,  896,  257,  896,  892,  895, 1100,
     1232,  893,  897,  411,  897,  898,  140,  898,  892,  895,
      416,  259,  893,  900,   86, 1193,  903,  901, 1055, 1056,
     1055,  907,  416,   86, 1232,  908, 1100,  582,  903, 1057,
     1058, 1057,  581,  912,  907, 1109,  912,  582,  908,  905,

      906,  905,  907,  912,   86, 1091,  908, 1059, 1060, 1059,
      907,  910,  911,  910,  908, 1061, 1062, 1061,  912, 1096,
     1232, 1109,  912,  913,  420,  913,  907,  914,  579,  914,
      908, 1091, 1232, 1232,  912,  915,  584,  915,  907,  916,
      730,  916,  908, 1194, 1232, 1096,  912,  837,  917,  128,
      917,  838,  837,  837,  837,  839,  837,  837,  837,  837,
     1232,  837,  837,  837,  426,  426,  920,  920,  591, 1194,
      921,  921, 1197,  591,  923, 1063, 1064, 1063,  927,  923,
     1232,  744,  928,  927, 1065, 1066, 1065,  928,  837,  837,
      837,  932,  925,  926,  925,  927,  745, 1232, 1197,  928,

     1232,  745,  932, 1067, 1068, 1067,  927,  932, 1232, 1232,
      928,  930,  931,  930,  837, 1069, 1070, 1069,  932, 1232,
     1232, 1232,  932,  933,  595,  933,  927,  934,  743,  934,
      928, 1232, 1232, 1232,  932,  935,  747,  935,  927,  599,
      752,  937,  928,   86, 1232,  938,  940, 1071, 1072, 1071,
      944,  752, 1232, 1232,  945, 1232,  952,  940, 1073, 1074,
     1073,  950,  949,  944, 1159,  949,  952,  945,  942,  943,
      942,  944,  949, 1232, 1232,  945, 1075, 1076, 1075,  944,
      947,  948,  947,  945, 1077, 1078, 1077,  949, 1232, 1232,
     1159,  949,  951,  756,  951,  944,  128,   86,  838,  945,

     1090,  599,  839,  937,  128,   86,  838,  938, 1093,  128,
      839,  838,  128, 1232,  838,  839,   86,  128,  839,  838,
      961,   86,  961,  839, 1232,   86,   86, 1090, 1079,   86,
     1098, 1082, 1097, 1099, 1102, 1093, 1080,   86, 1081,   86,
     1095,   86,   86, 1083,  962, 1101,   86,   86,   86, 1106,
       86, 1103, 1104, 1108, 1079, 1105, 1098,   86, 1082, 1097,
     1099, 1102, 1080, 1107, 1081, 1114, 1095,   86, 1111, 1083,
       86,  962, 1101, 1110,   86, 1232, 1106, 1103, 1021, 1104,
     1108, 1112, 1105,   86, 1022,   86, 1113, 1115,   86,   86,
     1107, 1114, 1116,   86, 1111, 1117, 1120, 1086, 1232, 1086,

     1110, 1128, 1232, 1004, 1005, 1004,  827, 1129, 1112, 1121,
      828, 1126, 1113, 1026, 1115, 1133, 1232, 1027, 1087, 1116,
     1232,  408, 1117, 1120, 1006, 1007, 1006, 1008, 1009, 1008,
      827,  832, 1232, 1232,  828, 1121, 1010, 1011, 1010, 1012,
     1013, 1012,  845,  832,   86, 1087,  846, 1014, 1015, 1014,
     1016, 1017, 1016,  845,  850, 1180, 1232,  846, 1018, 1019,
     1018, 1123, 1124, 1123, 1213,  850, 1232, 1033, 1125, 1024,
     1025, 1024, 1026,  850, 1232, 1232, 1027, 1130, 1131, 1130,
     1026, 1030, 1180, 1031, 1027, 1232, 1030,  251, 1031, 1030,
     1213, 1031,  251, 1137, 1136,  251, 1037, 1232, 1232, 1125,

     1038, 1035, 1036, 1035, 1037, 1232, 1232,   86, 1038, 1138,
     1139, 1138, 1037,   86, 1232, 1232, 1038, 1039, 1040, 1039,
      873, 1041, 1042, 1041,  874, 1149, 1232, 1232,  884, 1043,
     1044, 1043,  873,   86, 1232, 1146,  874, 1045, 1046, 1045,
      876, 1047, 1048, 1047,  877, 1049, 1050, 1049,  880, 1144,
     1232, 1149,  884, 1051, 1052, 1051,  892, 1053, 1054, 1053,
      893, 1146, 1232, 1232,  895, 1055, 1056, 1055,  907, 1057,
     1058, 1057,  908, 1232, 1232, 1144,  912, 1059, 1060, 1059,
      907, 1061, 1062, 1061,  908, 1232, 1232, 1232,  912, 1063,
     1064, 1063,  927, 1065, 1066, 1065,  928,   86, 1232, 1232,

      932, 1067, 1068, 1067,  927, 1069, 1070, 1069,  928, 1232,
     1232, 1145,  932, 1071, 1072, 1071,  944, 1073, 1074, 1073,
      945, 1232, 1232, 1232,  949, 1075, 1076, 1075,  944, 1077,
     1078, 1077,  945,  128, 1232,  838,  949, 1145,  599,  839,
      937,  128,   86,  838,  938, 1151,  599,  839,  937,  599,
       86,  937,  938,   86,   86,  938, 1140, 1148, 1150,   86,
       86,   86, 1152, 1153, 1155,   86,   86,   86,   86,   86,
       86, 1154, 1151, 1160,   86, 1141, 1163, 1232, 1232, 1161,
     1232, 1157, 1232, 1140, 1148, 1150, 1162, 1156,   86, 1152,
     1153, 1155, 1158, 1137, 1232, 1164, 1128, 1154,   86, 1125,

     1160, 1141, 1129, 1163, 1232, 1165, 1161, 1157, 1123, 1124,
     1123, 1133, 1162, 1156, 1232, 1125,   86,  408, 1158, 1166,
     1167, 1166, 1164, 1168, 1169, 1168, 1125, 1232,   86, 1232,
     1129, 1232, 1165, 1130, 1131, 1130, 1026, 1174,   86,   86,
     1027, 1138, 1139, 1138, 1037,  128,   86,  838, 1038, 1175,
      128,  839,  838, 1176, 1178,   86,  839,   86,   86,   86,
     1179,   86,   86, 1174, 1185, 1232,   86,   86, 1232,   86,
     1202,   86, 1183,   86, 1170, 1175, 1181, 1184, 1182, 1176,
     1178, 1186, 1171, 1187, 1188,   86, 1179, 1189, 1191,   86,
     1232, 1185, 1190, 1232, 1166, 1167, 1166, 1202, 1183,   86,

     1170, 1125, 1181, 1184, 1182,   86, 1195, 1186, 1171, 1187,
     1196, 1188, 1232, 1189, 1191, 1168, 1169, 1168,  128, 1190,
      838,  599, 1129,  937,  839,   86, 1198,  938,   86,   86,
       86,   86, 1199, 1195,   86,   86, 1196, 1201, 1203,   86,
       86, 1204, 1205,   86,   86, 1206, 1192,   86, 1200, 1208,
     1207,  599, 1198,  937,   86, 1232,   86,  938, 1215, 1199,
       86,   86, 1209, 1212, 1201, 1203,   86, 1216, 1204, 1205,
       86, 1206, 1192, 1217, 1200,   86, 1208, 1207,   86, 1214,
     1232, 1232,   86, 1218,   86, 1215, 1222, 1219, 1209, 1212,
     1220,   86, 1221,   86, 1216, 1224, 1232, 1223,   86, 1217,

     1227, 1225, 1232,   86, 1232, 1214,   86, 1226,   86, 1218,
     1232, 1229, 1222, 1219,   86, 1230, 1232, 1220, 1221, 1228,
     1232, 1231, 1224, 1223, 1232, 1232, 1232, 1227, 1225, 1232,
     1232, 1232, 1232, 1226, 1232, 1232, 1232, 1232, 1229, 1232,
     1232, 1232, 1230, 1232, 1232, 1228, 1232, 1232, 1231,   29,
       29,   29,   29,   29,   32,   32,   32,   32,   32,   47,
       47,   47,   47,   47,   51,   51,   51,   51,   51,   55,
       55,   55,   55,   55,   61,   61,   61,   61,   61,   63,
       63,   63,   63,   63,   65,   65,   65,   65,   65,   74,
       74,   74,   74,   74,   85,   85,   89, 1232,   89,   89,

      117,  117,  117,  117,  117,  119,  119,  119,  119,  119,
      123,  123,  123,  123,  123,  131,  131,  131,  131,  131,
      134,  134,  134,  134,  134,  127,  127,  127,  127,  127,
      138,  138,  138,  138,  138,  162,  162,  162,  162,   87,
     1232,   87,   88, 1232,   88,  196,  196,  196,  196,  196,
      199,  199,  199,  199,  199,  202,  202,  202,  202,  202,
      205,  205,  205,  205,  205,  210,  210,  210,  210,  210,
      213,  213,  213,  213,  213,  217,  217,  217,  217,  217,
      221,  221,  221,  221,  221,  224,  224,  224,  224,  224,
      226,  226,  226,  226,  226,  230,  230,  230,  230,  230,

      235,  235,  235,  235,  235,  237,  237,  237,  237,  237,
      241,  241,  241,  241,  241,  246,  246,  246,  246,  246,
      251,  251,  251,  251,  251,  253,  253,  253,  253,  253,
      258,  258,  258,  258,  258,  263,  263,  263,  263,  263,
      329,  329,  329,  329,  329,  332,  332,  332,  332,  332,
      334,  334,  334,  334,  334,  338,  338,  338,  338,  338,
      343,  343,  343,  343,  343,  351,  351,  351,  351,  351,
      356,  356,  356,  356,  356,  359,  359,  359,  359,  359,
      361,  361,  361,  361,  361,  366,  366,  366,  366,  366,
      369,  369,  369,  369,  369,  372,  372,  372,  372,  372,

      376,  376,  376,  376,  376,  379,  379,  379,  379,  379,
      382,  382,  382,  382,  382,  388,  388,  388,  388,  388,
      401,  401,  401,  401,  401,  404,  404,  404,  404,  404,
      408,  408,  408,  408,  408,  412,  412,  412,  412,  412,
      415,  415,  415,  415,  415,  418,  418,  418,  418,  418,
      424,  424,  424,  424,  424,  425,  425,  425,  425,  425,
       85,   85,  499,  499,  499,  499,  499,  502,  502,  502,
      502,  502,  504,  504,  504,  504,  504,  508,  508,  508,
      508,  508,  338,  338,  338,  338,  338,  516,  516,  516,
      516,  516,  519,  519,  519,  519,  519,  521,  521,  521,

      521,  521,  525,  525,  525,  525,  525,  530,  530,  530,
      530,  530,  533,  533,  533,  533,  533,  536,  536,  536,
      536,  536,  540,  540,  540,  540,  540,  542,  542,  542,
      542,  542,  546,  546,  546,  546,  546,  550,  550,  550,
      550,  550,  560,  560,  560,  560,  560,  563,  563,  563,
      563,  563,  568,  568,  568,  568,  568,  571,  571,  571,
      571,  571,  573,  573,  573,  573,  573,  577,  577,  577,
      577,  577,  586,  586,  586,  586,  586,  587,  587,  587,
      587,  587,  199,  199,  199,  199,  199,  590,  590,  590,
      590,  590,  593,  593,  593,  593,  593,  598,  598,  598,

      598,  598,   85,   85,  666,  666,  666,  666,  666,  669,
      669,  669,  669,  669,  671,  671,  671,  671,  671,  674,
      674,  674,  674,  674,  678,  678,  678,  678,  678,  681,
      681,  681,  681,  681,  683,  683,  683,  683,  683,  686,
      686,  686,  686,  686,  693,  693,  693,  693,  693,  696,
      696,  696,  696,  696,  699,  699,  699,  699,  699,  701,
      701,  701,  701,  701,  704,  704,  704,  704,  704,  706,
      706,  706,  706,  706,  712,  712,  712,  712,  712,  714,
      714,  714,  714,  714,  718,  718,  718,  718,  718,  721,
      721,  721,  721,  721,  723,  723,  723,  723,  723,  726,

      726,  726,  726,  726,  732,  732,  732,  732,  732,  733,
      733,  733,  733,  733,  736,  736,  736,  736,  736,  738,
      738,  738,  738,  738,  235,  235,  235,  235,  235,  741,
      741,  741,  741,  741,  748,  748,  748,  748,  748,  199,
      199,  199,  199,  199,  751,  751,  751,  751,  751,  754,
      754,  754,  754,  754,   85,   85,  819,  819,  819,  819,
      819,  822,  822,  822,  822,  822,  824,  824,  824,  824,
      824,  829,  829,  829,  829,  829,  837,  837,  837,  837,
      837,  840,  840,  840,  840,  840,  842,  842,  842,  842,
      842,  847,  847,  847,  847,  847,  855,  855,  855,  855,

      855,  860,  860,  860,  860,  860,  865,  865,  865,  865,
      865,  868,  868,  868,  868,  868,  870,  870,  870,  870,
      870,  875,  875,  875,  875,  875,  879,  879,  879,  879,
      879,  881,  881,  881,  881,  881,  891,  891,  891,  891,
      891,  894,  894,  894,  894,  894,  899,  899,  899,  899,
      899,  902,  902,  902,  902,  902,  904,  904,  904,  904,
      904,  909,  909,  909,  909,  909,  918,  918,  918,  918,
      918,  919,  919,  919,  919,  919,  922,  922,  922,  922,
      922,  924,  924,  924,  924,  924,  929,  929,  929,  929,
      929,  251,  251,  251,  251,  251,  936,  936,  936,  936,

      936,  939,  939,  939,  939,  939,  941,  941,  941,  941,
      941,  235,  235,  235,  235,  235,  946,  946,  946,  946,
      946,   85,   85,  819,  819,  819,  819,  819,  822,  822,
      822,  822,  822,  824,  824,  824,  824,  824,  829,  829,
      829,  829,  829,  840,  840,  840,  840,  840,  842,  842,
      842,  842,  842,  847,  847,  847,  847,  847,  855,  855,
      855,  855,  855,  199,  199,  199,  199,  199, 1020, 1020,
     1020, 1020, 1020, 1023, 1023, 1023, 1023, 1023,  860,  860,
      860,  860,  860, 1029, 1029, 1029, 1029, 1029, 1032, 1032,
     1032, 1032, 1032, 1034, 1034, 1034, 1034, 1034,  865,  865,

      865,  865,  865,  868,  868,  868,  868,  868,  870,  870,
      870,  870,  870,  881,  881,  881,  881,  881,  875,  875,
      875,  875,  875,  879,  879,  879,  879,  879,  891,  891,
      891,  891,  891,  894,  894,  894,  894,  894,  899,  899,
      899,  899,  899,  902,  902,  902,  902,  902,  904,  904,
      904,  904,  904,  909,  909,  909,  909,  909,  918,  918,
      918,  918,  918,  919,  919,  919,  919,  919,  922,  922,
      922,  922,  922,  924,  924,  924,  924,  924,  929,  929,
      929,  929,  929,  936,  936,  936,  936,  936,  939,  939,
      939,  939,  939,  941,  941,  941,  941,  941,  946,  946,

      946,  946,  946,  837,  837,  837,  837,  837,   85,   85,
      824,  824,  824,  824,  824,  829,  829,  829,  829,  829,
      842,  842,  842,  842,  842,  847,  847,  847,  847,  847,
     1020, 1020, 1020, 1020, 1020,  235,  235,  235,  235,  235,
     1122, 1122, 1122, 1122, 1122, 1023, 1023, 1023, 1023, 1023,
     1127, 1127, 1127, 1127, 1127, 1029, 1029, 1029, 1029, 1029,
     1132, 1132, 1132, 1132, 1132, 1032, 1032, 1032, 1032, 1032,
     1134, 1134, 1232, 1134, 1134, 1034, 1034, 1034, 1034, 1034,
      870,  870,  870,  870,  870,  881,  881,  881,  881,  881,
      875,  875,  875,  875,  875,  879,  879,  879,  879,  879,

      891,  891,  891,  891,  891,  894,  894,  894,  894,  894,
      904,  904,  904,  904,  904,  909,  909,  909,  909,  909,
      924,  924,  924,  924,  924,  929,  929,  929,  929,  929,
      946,  946,  946,  946,  946,  936,  936,  936,  936,  936,
       85,   85,   23, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232
    } ;

static yyconst flex_int16_t yy_chk[5212] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    7,    9,    8,
       10, 1231,   11,   12,    7,    7,    8,    8,   26,   11,
       12,   21,   21,   21,   21,   11,   12,   75,   26,   75,
       75,    1,    1,    1,   32,   32,   13,   14,  150,   34,
      150,  150,   32,   13,   14,   83,   46,    9,    9,   10,
       10,   11,   12,   34, 1230,   83,   46,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   13,   14,   36,   15,   34,
       15,   15,   15,   46,   43,   15,  106,   65,   15,   65,

       66,   43,   66,   65,   36,  106,   66,   68,  120,    2,
        2,    2,  120,   68,   69,   16,   69,   16,   16,   16,
       69, 1227,   16,   89,   89,   16, 1226,   15,   43,  124,
       36,   89,  106,  124, 1222,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   15,   16,   22,   22,   22,   22,   22,
       39,   94,   79,  112,   94,   22,   79,  112,   39,   95,
       22,  273,   95,   22, 1216,   39,   39,    3,    3,    3,
       16,  121,   37,   70,   70,   70,   70,  121,  128,   79,
       70,   94,  128,   79,  112,   39,   37,  273,   37,   95,

       22,   39,   39,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,   33,   37,   40,   37,   33,   38,   41,   72,   44,
       72,   42,   92,   77,   72,   77,   44,   90,  153,   91,
       40,   33,   72,   38,   41,    4,    4,    4,   38,   92,
       42,   44,   33,   42,   77, 1214, 1205,   90,   78,   91,
       78,   78,   78,   44,   93,  153,   40,   33,  104,   38,
       41,    4,    5,   78,   38,   92,   42,   44, 1204,   42,
      105,   77,   97,   90,   93,   91,  104,    5,    5,    5,
        5,    5,    5,   97,  119,    5,  119, 1203,    5,    5,

      119,  105,    5,    5,    5,    5, 1202,  123,    5,  123,
       93, 1201,  104,  123,    5,    5,    5,    5,    5,    5,
       97,   80,    5,   80,    5,    5, 1198,  105,    5,    5,
        5,    5,   96,   45,    5,   20,   20,   20,   20,  100,
      102,   20,   80,   45,   20,  100,   20,   96,   96,   20,
       45,  108,   20,   20, 1196,   99,  102,  107,  101,   45,
      100,  100,   99,  107,  109,  158, 1194, 1193,  108,   80,
       45,  113,  100,   96,   96,   99,   45,  101,  113,   20,
       20,   35,  102,  109,   35,   45,  100,  100,  160,   99,
      107,   35,  158,  125,  108,   35,  130,  277,   35,  125,

       35,   99,  130,  101,  127,  113,  127,  115,  111,  109,
      127,   35,  199,  116,  110,  160,  199,  110,   35,  110,
      116,   35,  111,  277,   35,  115,   35,   67,   67,   67,
       67,   67,   67,   67, 1184,   67,   67,   67,   67,   67,
       67,   67,   67,   67,  110,  227,  110,  116,  111,  227,
      134,  115,  122,  122,  122,  122,  134, 1183,  166,  122,
      126,  126,  126,  126,  131,  166,  131, 1175,   67,   67,
      131,  132,  132,  132,  132,  136,  136,  136,  132,  212,
      212,  212,  136,  137,  137,  137,  137,  138, 1165,  138,
      137, 1164,  166,  138,   67,   71,   71,   71,   71,   71,

       71,   71, 1163,   71,   71,   71,   71,   71,   71,   71,
       71,   71,  141,  139,  139,  139,  139,   98,  141,   98,
      139,  157, 1157,  157,   98,  142,  142,  142,  142,  143,
      155,  143,  142,  197,  155,  143,   71,   71, 1139,  197,
      165,   98,  145,   98,  145,  165,  174,  157,  145,  157,
      174,   98,  200,  148,  149,  148,  149,  155,  200,  148,
      149,  155,   71,   73,   73,   73,   73,   98,  145,   98,
       73,  149,  165,  167,  145,  189,  148,  174,  151,   73,
      151,  146,  154,  146,  154,  154,  154,  146, 1136,  189,
       73,  291,  167,   73,  145,   73,  146,  154,  149,  151,

      145,  163,   73,  148,  168,  196,   73,  196,  202,  259,
      146,  196, 1135,  259,  202,  189,   73,  291,  167,   73,
     1134,   73,  163,  146,  168,  152,  151,  152,   73,  129,
      129,  129,  129,  129,  129,  129,  146,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  152,  159,  163,  159,
      168,  176,  175,  182,  181, 1133,  177,  181,  182,  205,
      169,  205,  175,  177, 1131,  205,  176,  161,  159,  161,
      129,  129,  170,  152,  213, 1126,  213,  164,  169,  198,
      198,  198,  198, 1120,  181,  182,  198,  161,  164,  175,
      177,  161,  176,  170,  164,  159,  129,  133,  133,  133,

      133,  133,  133,  133,  169,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  161,  164,  171,  172,  161,  170,
      164,  184,  185,  208,  188, 1117,  210,  191,  184,  208,
     1116,  188,  210,  185,  191,  173,  172,  171,  133,  133,
      179,  504,  180,  504,  172,  201,  201,  201,  201,  204,
      204,  204,  173, 1112, 1109,  184,  204,  180,  188,  179,
      185,  191,  172,  171,  133,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  173,  144,
      144,  144,  147,  180,  147,  179,  193,  187,  147, 1106,
      183,  186,  187,  217,  274,  217,  187,  194,  190,  217,

      147, 1103,  193,  274,  194,  195,  144,  144,  144,  147,
      147,  218,  183,  186,  281,  192,  221,  218,  221,  187,
      190,  274,  221,  187,  195,  459, 1099,  147,  193,  274,
      192,  194,  144,  281,  192,  147,  147,  178,  183,  186,
      178,  178,  178,  178,  178,  178,  190,  224,  178, 1098,
      195,  459,  178,  224, 1092,  178,  192,  178,  178,  281,
      192,  178,  214,  214,  214,  214,  275,  178,  178,  178,
      178,  178,  178,  228,  226,  178,  226,  283,  178,  228,
      226,  178,  283,  178,  178, 1090,  233,  178,  206,  206,
      206,  206,  233,  275, 1089,  206,  209,  209,  209,  209,

      236,  236,  236,  209,  219,  219,  219,  219,  521,  283,
      521,  219,  220,  220,  220,  220,  220,  220,  220, 1076,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  222,
      222,  222,  222,  225,  225,  225,  222,  284, 1072, 1068,
      225,  229,  229,  229,  229,  230,  237,  230,  229,  290,
      284,  230,  237,  220,  220,  231,  231,  231,  231, 1064,
      290,  288,  231,  234,  234,  234,  234,  238,  238,  238,
      234,  240,  240,  240,  238,  288,  284, 1060,  240,  220,
      223,  223,  223,  223,  223,  223,  223,  290,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  241,  536,  241,

      536,  288,  244,  241,  242,  242,  242,  242,  244, 1056,
      248,  242,  245,  245,  245,  245,  248,  253,  246,  245,
      246,  223,  223,  253,  246,  249,  249,  249,  249,  292,
      439, 1052,  249,  250,  250,  250,  250,  255,  255,  255,
      250,  340,  340,  340,  255,  300, 1046,  223,  256,  256,
      256,  256,  258,  260,  258,  256,  292,  439,  258,  260,
      261,  261,  261,  261,  300, 1044, 1040,  261,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  293,  262,  262,  262,  263,  264,  263,  264,  302,
      300,  263,  264,  266,  265,  266,  265,  293, 1036,  266,

      265,  267,  269,  267,  269,  302, 1033,  267,  269,  262,
      262,  262,  264,  265,  268,  270,  268,  270,  282, 1025,
      268,  270, 1021,  293,  271,  266,  271,  282,  285,  269,
      271,  302,  269,  267,  285,  262,  287,  268,  264,  272,
      265,  272,  278,  286,  278,  272,  286,  280,  270,  280,
      279,  266,  279, 1017,  282,  269,  287,  271,  269,  267,
      289,  285,  278,  289,  268,  272,  278,  294,  280,  542,
      299,  542,  298,  286,  270,  295,  297,  279,  296,  279,
      301,  294,  287,  271,  299,  296,  295,  297, 1013,  278,
      289,  272,  298,  278,  303,  280,  309,  301,  305,  308,

      297,  304,  306,  279, 1009,  279,  309,  294,  310,  304,
      299,  303,  296,  295,  297,  305,  303,  304,  298,  313,
      314,  306,  307,  301,  312,  308,  297,  316,  318,  307,
      319,  317,  316,  309,  310,  318,  304,  303,  312,  314,
      313,  305,  303,  304,  307,  317,  324,  306,  315,  319,
      322,  308,  450,  323,  328,  325,  307,  315,  323,  316,
      310,  328,  318,  324,  312,  314,  313,  315,  450,  322,
      307,  317,  325, 1005,  327,  319,  329,  330,  329,  327,
      332,  336,  329,  330,  315,  323,  332,  336,  328,  324,
      327,  338,  426,  315,  450,  322,  426,  338,  325,  331,

      331,  331,  331,  333,  333,  333,  331,  334,  343,  334,
      333,  599,  856,  334,  343,  599,  856,  327,  335,  335,
      335,  335,  352,  352,  352,  335,  337,  337,  337,  337,
      393,  393,  393,  337,  341,  341,  341,  341,  344,  344,
      344,  346,  346,  346,  560,  344,  560,  993,  346,  349,
      349,  349,  349,  356,  357,  356,  349,  992,  972,  356,
      357,  358,  358,  358,  358,  359,  971,  950,  358,  440,
      363,  359,  360,  360,  360,  361,  363,  361,  441,  360,
      370,  361,  362,  362,  362,  362,  370,  943,  374,  362,
      364,  364,  364,  364,  374,  926,  440,  364,  365,  365,

      365,  365,  365,  365,  365,  441,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  366,  442,  366,  443,  460,
      906,  366,  367,  367,  367,  367,  369,  376,  369,  367,
      872,  844,  369,  376,  371,  371,  371,  371,  826,  365,
      365,  371,  372,  442,  372,  443,  460,  379,  372,  373,
      373,  373,  373,  379,  813,  385,  373,  375,  375,  375,
      375,  385,  808,  806,  375,  365,  368,  368,  368,  368,
      368,  368,  368,  464,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  377,  377,  377,  378,  378,  378,  464,
      377,  803,  388,  378,  381,  381,  381,  382,  388,  382,

      401,  381,  401,  382,  793,  787,  401,  368,  368,  383,
      383,  383,  383,  779,  778,  464,  383,  386,  386,  386,
      386,  390,  390,  390,  386,  445,  756,  445,  390,  391,
      391,  391,  391,  368,  752,  747,  391,  396,  396,  396,
      399,  399,  399,  399,  396,  402,  573,  399,  573,  744,
      404,  402,  403,  403,  403,  403,  404,  665,  445,  403,
      405,  405,  405,  406,  406,  406,  406,  405,  654,  652,
      406,  407,  407,  407,  407,  410,  410,  410,  407,  412,
      413,  412,  410,  466,  445,  412,  413,  414,  414,  414,
      414,  415,  449,  466,  414,  449,  421,  415,  417,  417,

      417,  418,  421,  418,  637,  417,  427,  418,  419,  419,
      419,  419,  427,  621,  596,  419,  422,  422,  422,  422,
      466,  595,  449,  422,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  465,  423,  423,
      423,  424,  425,  424,  425,  465,  487,  424,  425,  428,
      428,  428,  428,  429,  487,  429,  428,  454,  430,  429,
      430,  593,  454,  593,  430,  423,  423,  423,  431,  432,
      431,  432,  465,  591,  431,  432,  433,  434,  433,  434,
      584,  487,  433,  434,  435,  444,  435,  444,  432,  454,
      435,  423,  581,  436,  577,  436,  437,  575,  437,  436,

      431,  563,  437,  433,  632,  438,  434,  438,  436,  561,
      435,  438,  444,  557,  444,  432,  436,  451,  446,  437,
      446,  447,  554,  447,  438,  452,  431,  453,  451,  433,
      632,  452,  434,  455,  453,  436,  435,  446,  444,  455,
      444,  456,  447,  436,  455,  457,  437,  458,  456,  461,
      462,  438,  458,  463,  461,  451,  457,  462,  452,  468,
      467,  453,  469,  471,  446,  477,  455,  463,  472,  447,
      473,  455,  476,  469,  475,  456,  468,  478,  476,  458,
      467,  461,  477,  457,  462,  471,  473,  472,  479,  480,
      481,  478,  479,  463,  485,  475,  483,  481,  490,  550,

      469,  485,  468,  484,  490,  476,  467,  480,  477,  486,
      483,  471,  473,  472,  484,  488,  486,  478,  488,  479,
      489,  475,  491,  493,  481,  491,  492,  489,  485,  494,
      497,  490,  500,  480,  495,  494,  483,  546,  500,  544,
      538,  484,  502,  486,  493,  488,  492,  499,  502,  499,
      497,  627,  491,  499,  489,  517,  495,  501,  501,  501,
      501,  517,  494,  503,  503,  503,  505,  505,  505,  505,
      493,  627,  492,  509,  509,  509,  497,  507,  507,  507,
      507,  525,  495,  510,  510,  510,  511,  511,  511,  511,
      512,  512,  512,  514,  514,  514,  516,  627,  516,  523,

      508,  519,  516,  518,  518,  518,  518,  519,  520,  520,
      520,  522,  522,  522,  522,  524,  524,  524,  524,  526,
      526,  526,  527,  527,  527,  528,  528,  528,  528,  529,
      529,  529,  530,  534,  530,  529,  506,  498,  530,  534,
      529,  531,  531,  531,  531,  532,  532,  532,  533,  540,
      533,  532,  482,  474,  533,  540,  532,  535,  535,  535,
      535,  537,  537,  537,  537,  539,  539,  539,  539,  541,
      541,  541,  543,  543,  543,  543,  545,  545,  545,  545,
      547,  547,  547,  548,  548,  548,  548,  549,  549,  549,
      551,  551,  551,  553,  553,  553,  556,  556,  556,  556,

      558,  558,  558,  562,  562,  562,  562,  564,  564,  564,
      565,  565,  565,  565,  566,  566,  566,  567,  567,  567,
      567,  568,  569,  568,  572,  572,  572,  568,  569,  570,
      570,  570,  570,  571,  574,  574,  574,  574,  470,  571,
      576,  576,  576,  576,  578,  578,  578,  580,  580,  580,
      583,  583,  583,  583,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  611,  585,  585,
      585,  586,  587,  586,  587,  588,  420,  586,  587,  614,
      590,  588,  589,  589,  589,  589,  590,  592,  592,  592,
      594,  594,  594,  594,  611,  585,  585,  585,  597,  597,

      597,  597,  598,  600,  598,  416,  614,  615,  598,  600,
      601,  601,  601,  601,  602,  631,  602,  603,  408,  603,
      602,  585,  604,  603,  604,  605,  400,  605,  604,  624,
      606,  605,  606,  607,  615,  607,  606,  624,  608,  607,
      608,  604,  631,  626,  608,  609,  610,  609,  610,  606,
      626,  609,  610,  605,  398,  616,  607,  616,  617,  608,
      617,  618,  609,  618,  624,  620,  608,  619,  604,  619,
      620,  622,  623,  625,  622,  623,  606,  626,  617,  605,
      618,  628,  629,  607,  765,  783,  608,  630,  616,  609,
      630,  619,  608,  633,  625,  634,  635,  620,  629,  392,

      634,  622,  623,  635,  636,  617,  628,  618,  641,  638,
      765,  639,  783,  634,  616,  633,  638,  630,  619,  642,
      625,  640,  646,  387,  629,  636,  640,  634,  639,  641,
      635,  645,  628,  643,  642,  644,  643,  647,  645,  634,
      644,  633,  647,  638,  646,  648,  647,  649,  384,  650,
      659,  636,  648,  640,  639,  641,  650,  651,  653,  655,
      642,  656,  649,  643,  656,  645,  649,  644,  657,  647,
      646,  663,  659,  647,  660,  653,  651,  658,  655,  648,
      780,  667,  657,  650,  669,  658,  664,  667,  649,  660,
      669,  656,  649,  663,  661,  658,  767,  658,  659,  782,

      780,  653,  651,  673,  655,  661,  662,  664,  657,  673,
      380,  662,  658,  354,  666,  660,  666,  351,  674,  663,
      666,  658,  767,  658,  674,  782,  780,  662,  668,  668,
      668,  668,  661,  664,  350,  668,  792,  679,  662,  670,
      670,  670,  671,  679,  671,  347,  670,  792,  671,  672,
      672,  672,  672,  662,  342,  339,  672,  675,  675,  675,
      676,  676,  676,  676,  675,  326,  681,  676,  677,  677,
      677,  678,  681,  678,  792,  677,  321,  678,  680,  680,
      680,  680,  682,  682,  682,  680,  683,  320,  683,  682,
      311,  685,  683,  684,  684,  684,  684,  685,  686,  694,

      684,  687,  687,  687,  686,  694,  257,  252,  687,  688,
      688,  688,  688,  689,  689,  689,  688,  690,  690,  690,
      689, 1084,  776,  690,  691,  691,  691,  691,  692,  776,
      692,  691,  698,  693,  692,  693,  251,  247,  698,  693,
      695,  695,  695,  695,  696,  243,  696,  695, 1084,  699,
      696,  697,  697,  697,  697,  699,  776,  703,  697,  700,
      700,  700,  701,  703,  701,  235,  700,  704,  701,  702,
      702,  702,  702,  704,  777,  706,  702,  705,  705,  705,
      705,  706,  777, 1085,  705,  707,  707,  707,  708,  708,
      708,  708,  707,  232,  216,  708,  709,  709,  709,  710,

      710,  710,  712,  709,  712,  713,  710,  714,  712,  777,
     1085,  713,  215,  714,  715,  715,  715,  715,  716,  716,
      716,  715,  211,  207,  203,  716,  717,  717,  717,  717,
      718,  719,  718,  717,  156,  140,  718,  719,  720,  720,
      720,  720,  721,  135,  117,  720,  114,  725,  721,  722,
      722,  722,  723,  725,  723,  103,  722,  726,  723,  724,
      724,  724,  724,  726,   87,   85,  724,  727,  727,  727,
      728,  728,  728,  728,  727,  734,  736,  728,  729,  729,
      729,  734,  736,   84,   81,  729,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,   63,

      731,  731,  731,  732,  733,  732,  733,   29,   28,  732,
      733,  735,  735,  735,  735,  737,  737,  737,  735,  738,
      740,  738,  737,   23,   19,  738,  740,  731,  731,  731,
      739,  739,  739,  739,  741,  775, 1142,  739,  775,   18,
      741,  742,  742,  742,  746,  746,  746,  746,  742,  749,
      748,  746,  748,  731,   17,  749,  748,  750,  750,  750,
      750,  751,  781, 1142,  750,  775,  757,  751,  753,  753,
      753,  754,  757,  754,    6,  753,  781,  754,  755,  755,
      755,  755,  758,    0,  758,  755,    0,  759,  758,  759,
      760,    0,  760,  759,  790,  761,  760,  761,  762,  790,

      762,  761,  781,  763,  762,  763,  764,  772,  764,  763,
      758,  784,  764,  768,  769,  768,  769,  770,  771,  770,
      771,  764,  773,  761,  774,  786,  790,  760,  772,  785,
      784,  788,  762,  768,  788,    0,  758,  763,  769,  771,
      789,  770,  791,  773,  786,  774,  785,    0,  764,  761,
      794,    0,  795,  760,  772,  791,  784,  796,  762,  789,
      768,  788,  801,  763,  794,  769,  771,  799,  770,  773,
      786,  774,  785,  795,  797,  798,  796,  802,  800,  801,
      805,  791,  798,  800,  804,  789,  799,  807,  797,  809,
      794,  804,  807,  811,  802,  816,  805,  810,  812,  795,

      814,  815,  796,  959,  815,  801,    0,    0,    0,  798,
      800,  809,  799,  817,  797,  811,  810,  812,  804,  807,
      802,  816,  805,  814,  818,    0,  819,  817,  819,  959,
      820,  815,  819,  822,  827,  818,  820,  809,    0,  822,
      827,  811,  810,  812,  823,  823,  823,  816,    0,  814,
      962,  823,  962,  817,  821,  821,  821,  821,  824,  960,
      824,  821,  818,  829,  824,  825,  825,  825,  825,  829,
     1143,  962,  825,  828,  828,  828,  828,  830,  830,  830,
      828,  832,  832,  832,  830,  960,    0,  973,  832,  833,
      833,  833,  833,  834,  834,  834,  833, 1143,  962,    0,

      834,  835,  835,  835,  835,  836,  836,  836,  835,  837,
      838,  837,  836,  973, 1000,  837,  838,  839,  839,  839,
      839,  840,    0,  963,  839,  963,  845,  840,  841,  841,
      841,  842,  845,  842, 1000,  841,  847,  842,  843,  843,
      843,  843,  847, 1147,  963,  843,  846,  846,  846,  846,
      848,  848,  848,  846,  850,  850,  850,  848,    0,    0,
     1000,  850,  851,  851,  851,  851,  852,  852,  852,  851,
     1147,  963,    0,  852,  853,  853,  853,  853,  854,  854,
      854,  853,  855, 1001,  855,  854,  858,  863,  855,  857,
      857,  857,  858,  863,    0,  857,  859,  859,  859,  859,

      860, 1001,  860,  859,    0,    0,  860,  861,  861,  861,
      861,  862, 1094,  862,  861,    0,    0,  862,  864,  864,
      864,  864,  865,  866,  865,  864,    0, 1001,  865,  866,
      867,  867,  867,  867,  868,    0,    0,  867, 1094,  873,
      868,  869,  869,  869,  870,  873,  870,    0,  869,  876,
      870,  871,  871,  871,  871,  876,  969,  966,  871,  874,
      874,  874,  874,  875,  966,  875,  874,    0,  879,  875,
      877,  877,  877,  877,  879,  969,    0,  877,  878,  878,
      878,  878,  880,  880,  880,  878,  881,    0,    0,  880,
        0,  966,  881,  882,  882,  882,  884,  884,  884,  965,

      882,  969,  892,  884,  885,  885,  885,  885,  892,    0,
      965,  885,  886,  886,  886,  886,  887,  887,  887,  886,
        0,    0,    0,  887,  888,  888,  888,  888,  889,  889,
      889,  888,  890,  890,  890,  889,  891,  965,  891,  890,
        0,  894,  891,  893,  893,  893,  893,  894,  980, 1172,
      893,  895,  895,  895,  896,  896,  896,  896,  895,  980,
        0,  896,  897,  897,  897,  898,  898,  898,  898,  897,
      900,  899,  898,  899,  989, 1172,  900,  899,  901,  901,
      901,  901,  902,  968,    0,  901,  980,  907,  902,  903,
      903,  903,  904,  907,  904,  989,  903,  909,  904,  905,

      905,  905,  905,  909,  976,  968,  905,  908,  908,  908,
      908,  910,  910,  910,  908,  912,  912,  912,  910,  976,
        0,  989,  912,  913,  913,  913,  913,  914,  914,  914,
      913,  968,    0,    0,  914,  915,  915,  915,  915,  916,
      916,  916,  915, 1173,    0,  976,  916,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
        0,  917,  917,  917,  918,  919,  918,  919,  920, 1173,
      918,  919, 1177,  922,  920,  921,  921,  921,  921,  922,
        0,  924,  921,  924,  923,  923,  923,  924,  917,  917,
      917,  923,  925,  925,  925,  925,  927,    0, 1177,  925,

        0,  929,  927,  928,  928,  928,  928,  929,    0,    0,
      928,  930,  930,  930,  917,  932,  932,  932,  930,    0,
        0,    0,  932,  933,  933,  933,  933,  934,  934,  934,
      933,    0,    0,    0,  934,  935,  935,  935,  935,  936,
      937,  936,  935, 1111,    0,  936,  937,  938,  938,  938,
      938,  939,    0,    0,  938,    0,  944,  939,  940,  940,
      940,  941,  944,  941, 1111,  940,  946,  941,  942,  942,
      942,  942,  946,    0,    0,  942,  945,  945,  945,  945,
      947,  947,  947,  945,  949,  949,  949,  947,    0,    0,
     1111,  949,  951,  951,  951,  951,  953,  967,  953,  951,

      967,  954,  953,  954,  955,  970,  955,  954,  970,  956,
      955,  956,  957,    0,  957,  956,  978,  958,  957,  958,
      961,  975,  961,  958,    0,  977,  979,  967,  953,  982,
      978,  957,  977,  979,  982,  970,  955,  983,  956,  981,
      975,  984,  986,  958,  961,  981,  991,  985,  996,  986,
      988,  983,  984,  988,  953,  985,  978,  987,  957,  977,
      979,  982,  955,  987,  956,  996,  975,  990,  991,  958,
      995,  961,  981,  990,  994,    0,  986,  983, 1020,  984,
      988,  994,  985,  997, 1020,  998,  995,  997,  999, 1002,
      987,  996,  998, 1003,  991,  999, 1002, 1086,    0, 1086,

      990, 1026,    0, 1004, 1004, 1004, 1004, 1026,  994, 1003,
     1004, 1023,  995, 1023,  997, 1031,    0, 1023, 1086,  998,
        0, 1031,  999, 1002, 1006, 1006, 1006, 1008, 1008, 1008,
     1008, 1006,    0,    0, 1008, 1003, 1010, 1010, 1010, 1012,
     1012, 1012, 1012, 1010, 1150, 1086, 1012, 1014, 1014, 1014,
     1016, 1016, 1016, 1016, 1014, 1150,    0, 1016, 1018, 1018,
     1018, 1022, 1022, 1022, 1197, 1018,    0, 1032, 1022, 1024,
     1024, 1024, 1024, 1032,    0,    0, 1024, 1027, 1027, 1027,
     1027, 1028, 1150, 1028, 1027,    0, 1029, 1028, 1029, 1030,
     1197, 1030, 1029, 1037, 1034, 1030, 1034,    0,    0, 1037,

     1034, 1035, 1035, 1035, 1035,    0,    0, 1096, 1035, 1038,
     1038, 1038, 1038, 1093,    0,    0, 1038, 1039, 1039, 1039,
     1039, 1041, 1041, 1041, 1039, 1096,    0,    0, 1041, 1043,
     1043, 1043, 1043, 1088,    0, 1093, 1043, 1045, 1045, 1045,
     1045, 1047, 1047, 1047, 1045, 1049, 1049, 1049, 1047, 1088,
        0, 1096, 1049, 1051, 1051, 1051, 1051, 1053, 1053, 1053,
     1051, 1093,    0,    0, 1053, 1055, 1055, 1055, 1055, 1057,
     1057, 1057, 1055,    0,    0, 1088, 1057, 1059, 1059, 1059,
     1059, 1061, 1061, 1061, 1059,    0,    0,    0, 1061, 1063,
     1063, 1063, 1063, 1065, 1065, 1065, 1063, 1091,    0,    0,

     1065, 1067, 1067, 1067, 1067, 1069, 1069, 1069, 1067,    0,
        0, 1091, 1069, 1071, 1071, 1071, 1071, 1073, 1073, 1073,
     1071,    0,    0,    0, 1073, 1075, 1075, 1075, 1075, 1077,
     1077, 1077, 1075, 1079,    0, 1079, 1077, 1091, 1080, 1079,
     1080, 1081, 1100, 1081, 1080, 1100, 1082, 1081, 1082, 1083,
     1095, 1083, 1082, 1097, 1104, 1083, 1079, 1095, 1097, 1101,
     1102, 1105, 1101, 1102, 1105, 1107, 1108, 1115, 1113, 1118,
     1110, 1104, 1100, 1113, 1114, 1081, 1118,    0,    0, 1114,
        0, 1108,    0, 1079, 1095, 1097, 1115, 1107, 1119, 1101,
     1102, 1105, 1110, 1122,    0, 1119, 1127, 1104, 1121, 1122,

     1113, 1081, 1127, 1118,    0, 1121, 1114, 1108, 1123, 1123,
     1123, 1132, 1115, 1107,    0, 1123, 1144, 1132, 1110, 1125,
     1125, 1125, 1119, 1129, 1129, 1129, 1125,    0, 1145,    0,
     1129,    0, 1121, 1130, 1130, 1130, 1130, 1144, 1148, 1146,
     1130, 1138, 1138, 1138, 1138, 1140, 1149, 1140, 1138, 1145,
     1141, 1140, 1141, 1146, 1148, 1151, 1141, 1152, 1153, 1155,
     1149, 1154, 1156, 1144, 1155,    0, 1160, 1182,    0, 1158,
     1182, 1162, 1153, 1159, 1140, 1145, 1151, 1154, 1152, 1146,
     1148, 1156, 1141, 1158, 1159, 1161, 1149, 1160, 1162, 1176,
        0, 1155, 1161,    0, 1166, 1166, 1166, 1182, 1153, 1174,

     1140, 1166, 1151, 1154, 1152, 1178, 1174, 1156, 1141, 1158,
     1176, 1159,    0, 1160, 1162, 1168, 1168, 1168, 1170, 1161,
     1170, 1171, 1168, 1171, 1170, 1179, 1178, 1171, 1180, 1188,
     1181, 1185, 1179, 1174, 1186, 1187, 1176, 1181, 1185, 1189,
     1191, 1186, 1187, 1190, 1195, 1188, 1170, 1200, 1180, 1190,
     1189, 1192, 1178, 1192, 1199,    0, 1207, 1192, 1200, 1179,
     1206, 1208, 1191, 1195, 1181, 1185, 1209, 1206, 1186, 1187,
     1217, 1188, 1170, 1207, 1180, 1215, 1190, 1189, 1218, 1199,
        0,    0, 1212, 1208, 1219, 1200, 1217, 1209, 1191, 1195,
     1212, 1221, 1215, 1223, 1206, 1219,    0, 1218, 1220, 1207,

     1223, 1220,    0, 1224,    0, 1199, 1225, 1221, 1228, 1208,
        0, 1225, 1217, 1209, 1229, 1228,    0, 1212, 1215, 1224,
        0, 1229, 1219, 1218,    0,    0,    0, 1223, 1220,    0,
        0,    0,    0, 1221,    0,    0,    0,    0, 1225,    0,
        0,    0, 1228,    0,    0, 1224,    0,    0, 1229, 1233,
     1233, 1233, 1233, 1233, 1234, 1234, 1234, 1234, 1234, 1235,
     1235, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236, 1237,
     1237, 1237, 1237, 1237, 1238, 1238, 1238, 1238, 1238, 1239,
     1239, 1239, 1239, 1239, 1240, 1240, 1240, 1240, 1240, 1241,
     1241, 1241, 1241, 1241, 1242, 1242, 1243,    0, 1243, 1243,

     1244, 1244, 1244, 1244, 1244, 1245, 1245, 1245, 1245, 1245,
     1246, 1246, 1246, 1246, 1246, 1247, 1247, 1247, 1247, 1247,
     1248, 1248, 1248, 1248, 1248, 1249, 1249, 1249, 1249, 1249,
     1250, 1250, 1250, 1250, 1250, 1251, 1251, 1251, 1251, 1252,
        0, 1252, 1253,    0, 1253, 1254, 1254, 1254, 1254, 1254,
     1255, 1255, 1255, 1255, 1255, 1256, 1256, 1256, 1256, 1256,
     1257, 1257, 1257, 1257, 1257, 1258, 1258, 1258, 1258, 1258,
     1259, 1259, 1259, 1259, 1259, 1260, 1260, 1260, 1260, 1260,
     1261, 1261, 1261, 1261, 1261, 1262, 1262, 1262, 1262, 1262,
     1263, 1263, 1263, 1263, 1263, 1264, 1264, 1264, 1264, 1264,

     1265, 1265, 1265, 1265, 1265, 1266, 1266, 1266, 1266, 1266,
     1267, 1267, 1267, 1267, 1267, 1268, 1268, 1268, 1268, 1268,
     1269, 1269, 1269, 1269, 1269, 1270, 1270, 1270, 1270, 1270,
     1271, 1271, 1271, 1271, 1271, 1272, 1272, 1272, 1272, 1272,
     1273, 1273, 1273, 1273, 1273, 1274, 1274, 1274, 1274, 1274,
     1275, 1275, 1275, 1275, 1275, 1276, 1276, 1276, 1276, 1276,
     1277, 1277, 1277, 1277, 1277, 1278, 1278, 1278, 1278, 1278,
     1279, 1279, 1279, 1279, 1279, 1280, 1280, 1280, 1280, 1280,
     1281, 1281, 1281, 1281, 1281, 1282, 1282, 1282, 1282, 1282,
     1283, 1283, 1283, 1283, 1283, 1284, 1284, 1284, 1284, 1284,

     1285, 1285, 1285, 1285, 1285, 1286, 1286, 1286, 1286, 1286,
     1287, 1287, 1287, 1287, 1287, 1288, 1288, 1288, 1288, 1288,
     1289, 1289, 1289, 1289, 1289, 1290, 1290, 1290, 1290, 1290,
     1291, 1291, 1291, 1291, 1291, 1292, 1292, 1292, 1292, 1292,
     1293, 1293, 1293, 1293, 1293, 1294, 1294, 1294, 1294, 1294,
     1295, 1295, 1295, 1295, 1295, 1296, 1296, 1296, 1296, 1296,
     1297, 1297, 1298, 1298, 1298, 1298, 1298, 1299, 1299, 1299,
     1299, 1299, 1300, 1300, 1300, 1300, 1300, 1301, 1301, 1301,
     1301, 1301, 1302, 1302, 1302, 1302, 1302, 1303, 1303, 1303,
     1303, 1303, 1304, 1304, 1304, 1304, 1304, 1305, 1305, 1305,

     1305, 1305, 1306, 1306, 1306, 1306, 1306, 1307, 1307, 1307,
     1307, 1307, 1308, 1308, 1308, 1308, 1308, 1309, 1309, 1309,
     1309, 1309, 1310, 1310, 1310, 1310, 1310, 1311, 1311, 1311,
     1311, 1311, 1312, 1312, 1312, 1312, 1312, 1313, 1313, 1313,
     1313, 1313, 1314, 1314, 1314, 1314, 1314, 1315, 1315, 1315,
     1315, 1315, 1316, 1316, 1316, 1316, 1316, 1317, 1317, 1317,
     1317, 1317, 1318, 1318, 1318, 1318, 1318, 1319, 1319, 1319,
     1319, 1319, 1320, 1320, 1320, 1320, 1320, 1321, 1321, 1321,
     1321, 1321, 1322, 1322, 1322, 1322, 1322, 1323, 1323, 1323,
     1323, 1323, 1324, 1324, 1324, 1324, 1324, 1325, 1325, 1325,

     1325, 1325, 1326, 1326, 1327, 1327, 1327, 1327, 1327, 1328,
     1328, 1328, 1328, 1328, 1329, 1329, 1329, 1329, 1329, 1330,
     1330, 1330, 1330, 1330, 1331, 1331, 1331, 1331, 1331, 1332,
     1332, 1332, 1332, 1332, 1333, 1333, 1333, 1333, 1333, 1334,
     1334, 1334, 1334, 1334, 1335, 1335, 1335, 1335, 1335, 1336,
     1336, 1336, 1336, 1336, 1337, 1337, 1337, 1337, 1337, 1338,
     1338, 1338, 1338, 1338, 1339, 1339, 1339, 1339, 1339, 1340,
     1340, 1340, 1340, 1340, 1341, 1341, 1341, 1341, 1341, 1342,
     1342, 1342, 1342, 1342, 1343, 1343, 1343, 1343, 1343, 1344,
     1344, 1344, 1344, 1344, 1345, 1345, 1345, 1345, 1345, 1346,

     1346, 1346, 1346, 1346, 1347, 1347, 1347, 1347, 1347, 1348,
     1348, 1348, 1348, 1348, 1349, 1349, 1349, 1349, 1349, 1350,
     1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351, 1351, 1352,
     1352, 1352, 1352, 1352, 1353, 1353, 1353, 1353, 1353, 1354,
     1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355, 1355, 1356,
     1356, 1356, 1356, 1356, 1357, 1357, 1358, 1358, 1358, 1358,
     1358, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360, 1360,
     1360, 1361, 1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362,
     1362, 1363, 1363, 1363, 1363, 1363, 1364, 1364, 1364, 1364,
     1364, 1365, 1365, 1365, 1365, 1365, 1366, 1366, 1366, 1366,

     1366, 1367, 1367, 1367, 1367, 1367, 1368, 1368, 1368, 1368,
     1368, 1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370,
     1370, 1371, 1371, 1371, 1371, 1371, 1372, 1372, 1372, 1372,
     1372, 1373, 1373, 1373, 1373, 1373, 1374, 1374, 1374, 1374,
     1374, 1375, 1375, 1375, 1375, 1375, 1376, 1376, 1376, 1376,
     1376, 1377, 1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378,
     1378, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380,
     1380, 1381, 1381, 1381, 1381, 1381, 1382, 1382, 1382, 1382,
     1382, 1383, 1383, 1383, 1383, 1383, 1384, 1384, 1384, 1384,
     1384, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386,

     1386, 1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388,
     1388, 1389, 1389, 1389, 1389, 1389, 1390, 1390, 1390, 1390,
     1390, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1393, 1393,
     1393, 1393, 1393, 1394, 1394, 1394, 1394, 1394, 1395, 1395,
     1395, 1395, 1395, 1396, 1396, 1396, 1396, 1396, 1397, 1397,
     1397, 1397, 1397, 1398, 1398, 1398, 1398, 1398, 1399, 1399,
     1399, 1399, 1399, 1400, 1400, 1400, 1400, 1400, 1401, 1401,
     1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1403, 1403,
     1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404, 1405, 1405,
     1405, 1405, 1405, 1406, 1406, 1406, 1406, 1406, 1407, 1407,

     1407, 1407, 1407, 1408, 1408, 1408, 1408, 1408, 1409, 1409,
     1409, 1409, 1409, 1410, 1410, 1410, 1410, 1410, 1411, 1411,
     1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1413, 1413,
     1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414, 1415, 1415,
     1415, 1415, 1415, 1416, 1416, 1416, 1416, 1416, 1417, 1417,
     1417, 1417, 1417, 1418, 1418, 1418, 1418, 1418, 1419, 1419,
     1419, 1419, 1419, 1420, 1420, 1420, 1420, 1420, 1421, 1421,
     1421, 1421, 1421, 1422, 1422, 1422, 1422, 1422, 1423, 1423,
     1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424, 1425, 1425,
     1425, 1425, 1425, 1426, 1426, 1426, 1426, 1426, 1427, 1427,

     1427, 1427, 1427, 1428, 1428, 1428, 1428, 1428, 1429, 1429,
     1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431, 1431, 1431,
     1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433, 1433,
     1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435, 1435, 1435,
     1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437, 1437, 1437,
     1438, 1438, 1438, 1438, 1438, 1439, 1439, 1439, 1439, 1439,
     1440, 1440, 1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441,
     1442, 1442,    0, 1442, 1442, 1443, 1443, 1443, 1443, 1443,
     1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445, 1445, 1445,
     1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447, 1447, 1447,

     1448, 1448, 1448, 1448, 1448, 1449, 1449, 1449, 1449, 1449,
     1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451,
     1452, 1452, 1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453,
     1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455,
     1456, 1456, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
// $Id: lexer.l 291 2018-07-10 13:21:04Z willem_vermin $
#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include "parser.h"
#include "findent.h"
#include "debug.h"
#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
class line_prep pline;




//  following are keywords starting with c
#line 2092 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 29 "lexer.l"


#line 2326 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1233 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5143 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 34 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 51 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 56 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 74 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 77 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 85 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 100 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 104 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 120 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 125 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 105:
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 223 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 228 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 231 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 234 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 237 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 240 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 244 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 247 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 250 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 253 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 256 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 260 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 261 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 119:
YY_RULE_SETUP
#line 264 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.type_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.type_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.type_dot_operator)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 120:
/* rule 120 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 288 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 294 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 300 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 307 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 314 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 316 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 317 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 319 "lexer.l"
ECHO;
	YY_BREAK
#line 3180 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_scanfixpre):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1233 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1233 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1232);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 319 "lexer.l"



void lexer_set(class line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(std::string s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:  BEGIN(state_identifier);   break;
      case SKIPALL:     BEGIN(state_skipall);      break;
      case SKIP:        BEGIN(state_skip);         break;
      case SKIPNOOP:    BEGIN(state_skipnoop);     break;
      case KEYWORD:     BEGIN(state_keyword);      break;
      case FINDFORMAT:  BEGIN(state_findformat);   break;
      case SCANFIXPRE:  BEGIN(state_scanfixpre);   break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


