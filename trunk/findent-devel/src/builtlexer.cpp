#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 143
#define YY_END_OF_BUFFER 144
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1298] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  144,  142,  141,  142,
      138,  137,  142,  139,  140,   16,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
        4,    5,    2,    3,    8,    9,    6,    7,   15,   14,
       10,   12,   11,   13,    1,  143,  143,  107,  143,  107,
      143,  143,  143,  143,  143,  143,  143,  134,  134,  133,
      134,  134,  123,  134,  134,  112,  111,  112,  116,  115,
      116,  116,  135,    0,  137,    0,    0,   16,   17,   16,

        0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
        0,    0,    0,   69,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   88,    0,    0,    0,  107,    0,
       95,    0,    0,    0,   95,    0,    0,    0,  107,    0,
        0,    0,    0,    0,    0,   97,    0,    0,    0,    0,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  123,    0,    0,    0,
        0,    0,    0,  128,  110,    0,    0,    0,  136,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   34,    0,
        0,    0,    0,    0,   50,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       95,    0,    0,    0,   95,    0,    0,    0,   95,    0,
        0,    0,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   96,    0,    0,    0,    0,   99,
        0,    0,    0,    0,    0,    0,   97,    0,    0,    0,
       99,    0,    0,    0,   95,    0,    0,    0,    0,    0,
        0,   95,    0,    0,   95,    0,   94,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  124,    0,    0,    0,    0,  110,

      110,    0,  114,  113,    0,    0,    0,    0,   24,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   66,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   81,   82,    0,    0,    0,
        0,   89,   90,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   97,    0,    0,  101,    0,    0,
       95,    0,   95,   95,    0,   95,    0,    0,   95,   95,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   96,    0,    0,    0,   96,
        0,    0,  102,    0,   97,    0,    0,   99,    0,  101,
       97,    0,   97,  107,    0,   99,    0,    0,    0,    0,
        0,    0,    0,    0,   97,    0,   95,    0,    0,    0,
        0,   94,    0,    0,    0,   94,    0,    0,    0,    0,
        0,  105,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  129,  110,    0,    0,    0,    0,
       21,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   49,

        0,    0,    0,   54,    0,    0,    0,    0,    0,    0,
        0,    0,   65,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   91,    0,   93,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   97,    0,   95,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   96,    0,   96,   96,    0,   96,    0,
       97,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       94,    0,   94,   94,    0,   94,    0,    0,    0,    0,
        0,    0,   97,    0,    0,    0,   99,    0,    0,    0,
      104,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  127,  126,    0,    0,    0,    0,
        0,    0,  108,  108,    0,   20,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   67,    0,
       70,    0,    0,    0,    0,   75,    0,    0,    0,    0,

        0,    0,   92,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   96,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   94,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       97,  105,   97,    0,   99,    0,    0,    0,    0,   97,
        0,    0,    0,   99,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  125,    0,    0,  131,    0,    0,
      109,  109,  108,  108,    0,    0,    0,    0,    0,    0,
        0,   29,   30,    0,    0,    0,    0,    0,    0,    0,
       37,    0,    0,    0,    0,    0,   51,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   62,   63,    0,    0,
       71,   72,    0,   74,    0,    0,    0,    0,   80,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   95,    0,    0,    0,    0,   95,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  101,
        0,    0,    0,    0,   97,    0,    0,    0,    0,    0,

        0,  106,    0,    0,    0,    0,    0,   98,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   96,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   94,    0,    0,    0,    0,   94,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  101,    0,    0,    0,    0,   97,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  101,    0,
        0,    0,    0,   97,    0,  104,    0,   97,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      130,    0,    0,    0,    0,    0,    0,    0,   31,   32,
        0,   38,    0,    0,    0,    0,    0,    0,   46,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   64,
       68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   95,    0,   95,    0,   95,    0,   95,    0,
      100,    0,   97,    0,  100,    0,   97,    0,   97,    0,
        0,    0,  100,    0,    0,   98,    0,   98,    0,    0,
       97,    0,    0,  100,    0,    0,    0,   96,    0,   96,
        0,   96,    0,  100,    0,   97,    0,   96,    0,   95,

        0,   95,    0,   94,    0,   94,    0,   94,    0,   94,
        0,  100,    0,   97,    0,  100,    0,   97,    0,  100,
        0,   97,    0,  100,    0,   97,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  132,    0,   19,   22,    0,
        0,   25,    0,    0,    0,    0,    0,   41,   44,    0,
        0,    0,   52,    0,    0,   56,    0,    0,   59,    0,
        0,   73,    0,    0,    0,   79,   83,    0,    0,   86,
        0,    0,    0,   97,    0,  103,    0,   97,    0,    0,
      100,    0,   97,    0,   98,  106,   97,    0,  100,    0,
        0,    0,    0,    0,    0,    0,   27,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   58,    0,
        0,    0,    0,    0,   84,   85,   87,    0,   97,    0,
       97,    0,    0,    0,    0,    0,    0,   23,    0,    0,
        0,    0,    0,    0,    0,   48,   53,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   26,    0,
       35,    0,    0,   45,   47,   55,   57,   61,    0,    0,
        0,    0,  121,  122,    0,   36,   39,    0,   60,    0,
        0,    0,    0,    0,    0,    0,   78,    0,    0,    0,
        0,    0,   40,   76,    0,    0,    0,    0,   77,    0,
      117,    0,  118,   18,  119,  120,    0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,   14,    1,    1,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
       18,    1,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       29,   36,   37,   38,   39,   40,   41,   42,   43,   29,
       44,    1,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   29,   57,   58,   59,   60,
       61,   62,   29,   63,   64,   65,   66,   67,   68,   69,
       70,   29,    1,   71,    1,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    1,    4,    4,    5,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    6,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1
    } ;

static yyconst flex_uint16_t yy_base[1529] =
    {   0,
        0,   71,  142,  213,  282, 2934,   17,   19,   18,   20,
       22,   23,   47,   48,   91,  119, 2921, 2899, 2874,  348,
       32,  162, 2866,   90, 2859,   50, 2861, 5606, 5606,   27,
     5606,   23, 2834, 5606, 5606,   52,  216,   83,  383,  174,
      176,  222,  237,  177,  230,  232,   82,  227,  322,  155,
     5606, 5606, 5606, 5606, 5606, 5606, 5606, 5606, 5606, 5606,
     5606, 5606, 5606, 5606, 5606, 5606, 2811, 5606,  100,  118,
      446,  104,  128,  174,  517,  166,  587, 5606,  106, 5606,
      248,  270,  357,  290, 2794, 5606, 5606, 2803, 5606, 5606,
      134, 2791, 5606,  188,   33, 2764,    0, 2765,    0,  188,

      291,  305,  265,  331,  153,  261,  356,  362,  527,  369,
      449,  361,  341, 2755,  345,  451,  358,  379,  374,  406,
      454,  269,  355,  370, 2739,  408,  415, 2734, 5606,  197,
      236,  237,  475,  431,  258,  239,  424,  490,  307,  657,
      402,  500,  543,  728,  472, 2718,  504,  551,  534,  567,
     2713,  548,  576,  594,  799,  646,  595,  675,  816,  758,
      603,  481,  580,  695,  426,  492,  826, 2697,  827,  578,
      485,  696,  530,  832,  624,  615, 2708,  195, 5606,  614,
      734,  615,  550,  733,  617,  548,  688,  689,  730,  798,
      665,  765,  738,  570,  872,  805,  806,  596,  668,  825,

      816,  670,  807,  860,  836,  672,  840,  863,  849,  910,
      852,  891,  870,  708,  638,  755,  316,  716,  773,  776,
     2698,  785,  936,  945, 2701,  902,  953,  929, 2687,  689,
       65,  914, 2690, 2681,  956,  957,  972,  981,  998, 1006,
     1052,  961, 1010, 1013,  703,  969, 1026, 1029, 1037, 2660,
     1014, 1070, 2637,  949, 1034, 1074, 5606, 1078, 1042, 1086,
     2607, 1041, 1097, 1100, 2599, 1083, 1108, 1116, 2598, 2575,
     1105, 5606, 1124, 1127, 2563, 1132,  958, 1113, 1140, 1149,
     1166, 1167, 1175, 1174, 1182, 1199, 1183, 1200, 1207, 1212,
     1221,  596, 1185,  550, 5606,  655, 1229, 1236, 1240,  126,

     1271,  964, 5606, 5606,  985, 1147, 1201, 1003, 1123, 1230,
     1180, 1231,  913, 1241, 1226,  722, 1228, 1243, 1076, 1263,
     1247, 1273, 1261, 1107, 1271, 1275, 1280, 1283, 1285, 1287,
     1288, 1291, 1303, 1299, 1289, 2503, 1306, 1295, 1311, 1314,
     1335, 1341, 1325, 1345, 1348, 2495, 2481, 1349, 1350, 1353,
     1358, 2480, 1371, 1369, 1373, 1387, 1399, 1404, 1413, 1415,
     1426, 1423, 1434, 1431, 2481, 1002, 1442, 2455, 1439, 1447,
     5606, 1450, 2439, 5606, 1458, 2389, 2383, 1462, 5606, 2369,
     5606, 1465, 1466, 1474, 1477, 1485, 1487, 1495, 1482, 1503,
     1512, 1529, 1537, 1583, 1540, 1492, 1550, 1557, 1565, 1500,

     1573, 1541, 1601, 1604, 1562, 2345, 1612, 1614, 1628, 2309,
     1570, 1636, 2284, 1609, 5606, 1640, 1648, 2261, 1469, 5606,
     5606, 1656, 5606, 2258, 1659, 2218, 1617, 1663, 1671, 1668,
     1679, 1682, 1690, 2211, 5606, 1694, 5606, 1697, 1698, 1706,
     1709, 2170, 1717, 1719, 1727, 2137, 1714, 1735, 1744, 1761,
     1762, 1261, 1724, 1770, 1773, 1778, 1790, 1789, 1797, 1798,
     1805, 1814, 1815, 1822, 1831, 1288, 1352, 1371, 1454, 1497,
     1844, 1850, 1782, 1807, 5606, 1632, 1663, 1516, 1424, 1830,
     1718, 1844, 1845, 1763, 1842, 1856, 1839, 1857, 1346, 1507,
     1859, 1865, 1868, 1867, 1743, 1687, 1652, 1871, 1873, 2075,

     1825, 1875, 1877, 2072, 1886, 1889, 1896, 1902, 1899, 1898,
     1742, 1904, 2071, 1905, 1906, 1918, 1908, 1926, 1922, 1924,
     1928, 1932, 1941, 1936, 1947, 1948, 1937, 5606, 1949, 2057,
     1979, 1819, 1988, 1965, 1992, 1606, 2002, 2068, 2006, 2067,
     2012, 2015, 2018, 2022, 5606, 2025, 5606, 2027, 1978, 2035,
     2032, 2040, 1964, 2043, 2031, 2047, 1999, 2051, 2054, 2057,
     2060, 2063, 2075, 2078, 2081, 2064, 2093, 1974, 2097, 1998,
     2101, 2082, 2105, 2028, 2108, 1995, 2112, 1994, 2116, 2119,
     2123, 1848, 2126, 5606, 2129, 1833, 5606, 2132, 1824, 2136,
     5606, 2138, 1809, 2142, 1794, 2146, 2149, 2153, 2156, 2159,

     2160, 2168, 2171, 2163, 2172, 2179, 1740, 2183, 1731, 2187,
     5606, 2190, 1720, 5606, 2193, 1708, 2198, 2215, 2216, 2219,
     2227, 2224, 1696, 2232, 2173, 2235, 1685, 1667, 2244, 2247,
     1542, 2248, 2256, 2259, 2262, 2267, 2270, 2275, 2282, 2287,
     2290, 2295, 2298, 2189, 5606, 5606, 2201, 2229, 2284, 2308,
     2316, 2323, 2322,  560, 2280, 1639, 2257, 2311, 2316, 2319,
     2323, 2325, 2292, 2296, 2329, 2335, 2297, 2224, 2336, 2341,
     2347, 2349, 1638, 2356, 2351, 2373, 2355, 2365, 2361, 2379,
     2381, 2353, 2389, 2383, 2396, 2393, 2410, 2400, 1629, 2387,
     1618, 2413, 2405, 2425, 2409, 2421, 2414, 2432, 2433, 2449,

     2430, 2437, 1608, 2467, 2448, 2501, 2475, 2491, 2483, 2513,
     2498, 2510, 2521, 2524, 2532, 2534, 2529, 2542, 2539, 2550,
     2552, 2560, 2547, 2557, 2568, 2571, 2579, 2581, 2589, 2592,
     2597, 2596, 2605, 2608, 2616, 2613, 2620, 2624, 2627, 2635,
     2632, 2639, 2647, 2644, 2655, 2658, 2666, 2669, 5606, 2671,
     2674, 2676, 2684, 2688, 2696, 2699, 2700, 2708, 2711, 2719,
     2721, 2729, 2716, 2726, 2737, 2740, 2748, 5606, 2757, 2774,
     2775, 2744, 2783, 2745, 2787, 2790, 2803, 2791, 2806, 2814,
     5606, 1619, 5606, 2817, 1586, 2822, 2821, 2830, 2833, 1572,
     2841, 2843, 2851, 1575, 2838, 2854, 2861, 2862, 2869, 2870,

     2877, 2878, 2886, 2448, 5606, 2449, 2894, 2886, 2895, 2641,
     5606, 2414, 2475, 5606, 2617, 2820, 2867, 2887, 2572, 2876,
     2562, 1555, 1544, 2494, 2780, 2501, 2497, 2719, 2891, 2884,
     1520, 2892, 2893, 2905, 2896, 2812, 1494, 2914, 2898, 2922,
     2931, 2940, 2924, 2932, 2916, 2942, 1485, 1476, 2944, 2948,
     1464, 1441, 2949, 1438, 2952, 2950, 2956, 2957, 1416, 2614,
     2958, 2962, 2953, 2973, 2995, 2985, 3012, 3016, 3024, 3031,
     3039, 1420, 3021, 3047, 3028, 3051, 5606, 3055, 3063, 3067,
     3075, 3079, 3082, 3036, 3090, 3087, 3098, 3100, 3108, 1405,
     3095, 3116, 3105, 3120, 5606, 3124, 3132, 3136, 3144, 3148,

     3151, 1832, 3158, 3155, 3166, 3169, 3177, 3180, 3156, 3188,
     3191, 3192, 3200, 3203, 3211, 3213, 3221, 1404, 3208, 3229,
     3232, 3218, 3240, 3248, 3237, 3252, 3255, 3263, 5606, 3266,
     3274, 3282, 3286, 3294, 3298, 3302, 3305, 3271, 3313, 3310,
     3321, 3324, 3332, 3335, 3340, 3339, 3348, 3351, 3359, 3361,
     3369, 1389, 3356, 3377, 3366, 3381, 5606, 3385, 3393, 3397,
     3405, 3409, 3418, 3435, 3436, 3439, 3447, 3444, 3457, 3464,
     3472, 1363, 3469, 3481, 3479, 3489, 5606, 3492, 3500, 3504,
     3512, 3515, 3516, 3524, 3527, 3535, 3537, 3545, 1345, 3532,
     3553, 3542, 3557, 5606, 3561, 1330, 3569, 5606, 3572, 3577,

     3580, 3585, 3592, 3595, 3600, 2811, 2942, 3565, 3604, 3608,
     5606, 3018, 3575, 3451, 3243, 3559, 3080, 3567, 1257, 1220,
     2947, 5606, 3295, 3030, 3594, 3585, 3596, 3191, 3600, 3613,
     3608, 3264, 3611, 3620, 3617, 3625, 3256, 3633, 3338, 1212,
     1197, 3635, 3437, 3621, 3648, 3643, 3653, 3339, 3645, 3654,
     3657, 3689, 1201, 3699, 5606, 3707, 1185, 3711, 5606, 3719,
     1184, 3723, 5606, 3731, 1177, 3735, 5606, 3672, 1172, 3739,
     3680, 3747, 1143, 3744, 3755, 3758, 3763, 3766, 3767, 3770,
     1144, 3775, 3783, 1134, 3774, 3791, 3799, 1110, 3803, 5606,
     3811, 1099, 3819, 1089, 3823, 5606, 3827, 5606, 3835, 1080,

     3839, 5606, 3847, 1079, 3851, 5606, 3859, 1044, 3863, 5606,
     3871, 1031, 3875, 5606, 3883, 1019, 3887, 5606, 3895,  984,
     3899, 5606, 3907,  930, 3911, 5606, 3914, 3919, 3922, 3927,
     3930, 3935, 3380, 3390, 3939, 5606, 3671,  897,  886, 3890,
     3920,  864, 3679, 3079, 3738, 3925, 3928,  855,  844, 3909,
     3929, 3934,  835, 3748, 3936,  823, 3780, 3938,  820, 3941,
     3948,  810, 3946, 3950, 3683,  809,  774, 3793, 3952,  767,
     3957, 3980, 3999, 5606, 4008,  776, 3982, 5606, 4012, 4020,
      760, 3985,  713,  704,  643,  622, 5606, 4028,  619, 4031,
     4036, 4039, 3943, 3962, 3981, 3988,  542, 3989, 4003, 4018,

     4021, 4026, 4033, 4039, 4041, 4032, 4044, 4045,  533, 4042,
     4040, 4047, 4043, 3757,  525,  524,  508, 4084, 5606, 4107,
     5606, 4110, 4115, 4118, 3194, 3712, 4090,  495, 4063, 4042,
     4067, 4105, 4089, 4113, 4114,  428,  420, 4116, 4119, 4121,
     4118, 4124, 4066, 4108, 4141,  403,  365, 4122,  349, 4111,
      320, 4137, 4138,  319,  312,  307,  294,  270, 4139, 4143,
     4142, 4144, 4134, 4135, 4147, 5606,  260, 4150,  238, 4166,
     4169, 4173,  229,  166, 4172, 4170,  103, 4171, 4181, 4173,
     4176, 4195,  102,   44, 4198, 4191, 4194, 4201,   39, 4168,
     5606, 4203, 5606,    7, 5606, 5606, 5606, 4256, 4262, 4268,

     4274, 4280, 4286, 4292, 4298, 4304, 4310, 4316, 4319, 4323,
     4328, 4334, 4340, 4346, 4352, 4358, 4364, 4370, 4375, 4378,
     4382, 4388, 4394, 4400, 4406, 4412, 4418, 4424, 4430, 4436,
     4442, 4448, 4454, 4460, 4466, 4472, 4478, 4484, 4490, 4496,
     4502, 4508, 4514, 4520, 4526, 4532, 4538, 4544, 4550, 4556,
     4562, 4568, 4574, 4580, 4586, 4592, 4598, 4604, 4610, 4616,
     4622, 4628, 4634, 4637, 4642, 4648, 4654, 4660, 4666, 4672,
     4678, 4684, 4690, 4696, 4702, 4708, 4714, 4720, 4726, 4732,
     4738, 4744, 4750, 4756, 4762, 4768, 4774, 4780, 4786, 4792,
     4798, 4804, 4810, 4813, 4818, 4824, 4830, 4836, 4842, 4848,

     4854, 4860, 4866, 4872, 4878, 4884, 4890, 4896, 4902, 4908,
     4914, 4920, 4926, 4932, 4938, 4944, 4950, 4956, 4962, 4968,
     4974, 4980, 4986, 4992, 4998, 5000, 5005, 5011, 5017, 5023,
     5029, 5035, 5041, 5047, 5053, 5059, 5065, 5071, 5077, 5083,
     5089, 5095, 5101, 5107, 5113, 5119, 5125, 5131, 5137, 5143,
     5149, 5155, 5161, 5167, 5173, 5179, 5185, 5191, 5197, 5203,
     5206, 5211, 5217, 5223, 5229, 5235, 5241, 5247, 5253, 5259,
     5265, 5271, 5277, 5283, 5289, 5295, 5301, 5307, 5313, 5319,
     5325, 5331, 5337, 5343, 5349, 5355, 5361, 5367, 5373, 5379,
     5385, 5391, 5397, 5403, 5409, 5415, 5421, 5427, 5430, 5435,

     5441, 5447, 5453, 5459, 5465, 5471, 5477, 5483, 5489, 5495,
     5501, 5507, 5513, 5519, 5525, 5531, 5537, 5543, 5549, 5555,
     5561, 5567, 5573, 5579, 5585, 5591, 5597, 5600
    } ;

static yyconst flex_int16_t yy_def[1529] =
    {   0,
     1298, 1298, 1299, 1299,    2,    5, 1300, 1300, 1301, 1301,
     1302, 1302, 1302, 1302, 1302, 1302, 1303, 1303, 1304, 1305,
     1306, 1306, 1307, 1307, 1308, 1308, 1297, 1297, 1297, 1297,
     1297, 1297, 1309, 1297, 1297, 1310, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1311, 1297, 1312, 1313,
     1314, 1315, 1316, 1317, 1314, 1312, 1316, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1309, 1318, 1319, 1320, 1310,

     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1311, 1297, 1321,
     1322, 1323, 1324, 1313, 1322, 1325, 1326, 1327, 1322, 1328,
     1329, 1330, 1331, 1328, 1329, 1332, 1333, 1334, 1335, 1335,
     1336, 1337, 1335, 1338, 1339, 1327, 1327, 1327, 1327, 1327,
     1327, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1297, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,

     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1340, 1341, 1342, 1322, 1343, 1336, 1341,
     1332, 1344, 1342, 1342, 1336, 1344, 1342, 1325, 1332, 1345,
     1326, 1326, 1336, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
     1349, 1347, 1352, 1350, 1322, 1353, 1354, 1351, 1351, 1336,
     1355, 1351, 1332, 1297, 1352, 1352, 1297, 1352, 1348, 1348,
     1336, 1352, 1348, 1356, 1336, 1357, 1356, 1356, 1336, 1358,
     1357, 1297, 1357, 1356, 1336, 1359, 1322, 1360, 1361, 1362,
     1363, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,

     1297, 1297, 1297, 1297, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1297, 1297, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1365, 1366, 1367, 1366, 1368, 1367,
     1367, 1368, 1367, 1369, 1332, 1358, 1336, 1336, 1368, 1368,
     1297, 1368, 1336, 1297, 1367, 1336, 1370, 1370, 1297, 1336,
     1297, 1371, 1372, 1373, 1372, 1374, 1373, 1373, 1374, 1373,
     1375, 1376, 1377, 1375, 1376, 1378, 1379, 1377, 1377, 1380,

     1377, 1374, 1374, 1374, 1378, 1332, 1381, 1379, 1379, 1336,
     1381, 1379, 1336, 1380, 1297, 1380, 1377, 1336, 1297, 1297,
     1297, 1374, 1297, 1336, 1373, 1336, 1382, 1383, 1382, 1383,
     1383, 1382, 1382, 1358, 1297, 1383, 1297, 1384, 1385, 1386,
     1385, 1332, 1387, 1386, 1386, 1336, 1387, 1386, 1388, 1389,
     1389, 1390, 1391, 1392, 1393, 1393, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1371, 1371, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1297, 1297,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,

     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1297, 1394, 1394,
     1395, 1396, 1397, 1396, 1398, 1397, 1397, 1398, 1397, 1398,
     1398, 1398, 1397, 1358, 1297, 1398, 1297, 1399, 1400, 1401,
     1400, 1402, 1401, 1401, 1402, 1401, 1402, 1402, 1402, 1401,
     1399, 1403, 1404, 1399, 1403, 1405, 1406, 1404, 1404, 1407,
     1404, 1405, 1408, 1406, 1406, 1408, 1406, 1407, 1407, 1404,
     1402, 1408, 1408, 1297, 1408, 1336, 1297, 1406, 1336, 1407,
     1297, 1409, 1410, 1409, 1410, 1410, 1409, 1410, 1409, 1411,

     1412, 1413, 1412, 1414, 1413, 1413, 1414, 1413, 1414, 1414,
     1297, 1414, 1336, 1297, 1413, 1336, 1415, 1416, 1416, 1417,
     1418, 1417, 1419, 1420, 1418, 1418, 1336, 1420, 1418, 1421,
     1422, 1423, 1424, 1399, 1421, 1421, 1399, 1399, 1399, 1399,
     1399, 1399, 1421, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1425, 1297, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1297, 1297, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,

     1426, 1426, 1426, 1427, 1428, 1429, 1428, 1430, 1429, 1429,
     1430, 1430, 1430, 1429, 1430, 1431, 1432, 1433, 1432, 1434,
     1433, 1433, 1434, 1434, 1434, 1433, 1434, 1435, 1436, 1435,
     1437, 1438, 1439, 1440, 1440, 1441, 1438, 1442, 1439, 1439,
     1442, 1441, 1440, 1442, 1442, 1439, 1441, 1442, 1297, 1443,
     1444, 1444, 1443, 1444, 1443, 1445, 1446, 1447, 1446, 1448,
     1447, 1447, 1448, 1448, 1448, 1447, 1448, 1297, 1449, 1450,
     1450, 1451, 1452, 1451, 1453, 1452, 1452, 1453, 1453, 1453,
     1297, 1454, 1297, 1452, 1454, 1455, 1456, 1457, 1456, 1458,
     1459, 1457, 1457, 1454, 1459, 1460, 1460, 1455, 1460, 1460,

     1460, 1460, 1460, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1297, 1297, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1462, 1463, 1464, 1463, 1465, 1464,
     1464, 1454, 1465, 1464, 1465, 1465, 1297, 1465, 1464, 1465,
     1464, 1465, 1460, 1466, 1467, 1466, 1468, 1467, 1467, 1454,
     1468, 1467, 1468, 1468, 1297, 1468, 1467, 1468, 1467, 1468,

     1469, 1470, 1469, 1471, 1472, 1473, 1473, 1474, 1475, 1476,
     1477, 1478, 1479, 1478, 1480, 1479, 1479, 1454, 1480, 1479,
     1481, 1482, 1481, 1481, 1482, 1482, 1480, 1480, 1297, 1480,
     1479, 1481, 1480, 1479, 1482, 1480, 1483, 1484, 1483, 1484,
     1484, 1483, 1484, 1483, 1485, 1486, 1487, 1486, 1488, 1487,
     1487, 1454, 1488, 1487, 1488, 1488, 1297, 1488, 1487, 1488,
     1487, 1488, 1489, 1490, 1490, 1491, 1492, 1491, 1493, 1492,
     1492, 1454, 1493, 1492, 1493, 1493, 1297, 1493, 1492, 1493,
     1492, 1494, 1495, 1496, 1495, 1497, 1496, 1496, 1454, 1497,
     1496, 1497, 1497, 1297, 1497, 1454, 1496, 1297, 1498, 1498,

     1494, 1498, 1498, 1498, 1498, 1297, 1297, 1297, 1297, 1297,
     1297, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1297, 1297, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1500, 1454, 1501, 1297, 1500, 1454, 1501, 1297, 1502,
     1454, 1503, 1297, 1502, 1454, 1503, 1297, 1504, 1505, 1506,
     1507, 1507, 1454, 1508, 1507, 1509, 1509, 1509, 1510, 1511,
     1512, 1513, 1513, 1454, 1506, 1513, 1514, 1454, 1515, 1297,
     1514, 1454, 1516, 1454, 1517, 1297, 1515, 1297, 1518, 1454,

     1519, 1297, 1520, 1454, 1521, 1297, 1520, 1454, 1521, 1297,
     1522, 1454, 1523, 1297, 1522, 1454, 1523, 1297, 1524, 1454,
     1525, 1297, 1524, 1454, 1525, 1297, 1526, 1526, 1527, 1526,
     1527, 1527, 1297, 1297, 1297, 1297, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1297, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1506, 1506, 1297, 1506, 1454, 1508, 1297, 1508, 1507,
     1454, 1510, 1512, 1512, 1512, 1454, 1297, 1513, 1454, 1526,
     1526, 1526, 1297, 1297, 1528, 1528, 1528, 1528, 1297, 1528,

     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1506, 1297, 1508,
     1297, 1527, 1526, 1527, 1297, 1297, 1528, 1528, 1528, 1297,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1527, 1297, 1297, 1528, 1528, 1297,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1297, 1297, 1528, 1297, 1528, 1528, 1528, 1528,
     1528, 1528, 1297, 1297, 1528, 1528, 1528, 1528, 1528, 1297,
     1297, 1528, 1528, 1528, 1528, 1297, 1297, 1528, 1528, 1297,
     1297, 1297, 1297, 1528, 1297, 1297,    0, 1297, 1297, 1297,

     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,

     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,

     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297
    } ;

static yyconst flex_uint16_t yy_nxt[5678] =
    {   0,
       28,   28,   29,   30,   28,   28,   28,   28,   28,   31,
       28,   28,   28,   28,   32,   32,   28,   28,   28,   52,
       56,   52,   56,   97,   60,   60,   53,   54,   53,   54,
       93,   61,   61,   79,   80,   79,   81,   95,   95,   62,
       62,   94,   94,   34,   28,   28,   28,   95,   95,   60,
       60,   91,   90,   91,   92,   97,   61,   61,   98,   99,
       97,   57,   58,   57,   58,   63,   63,  380,   97,  234,
       28,   28,   28,   35,   30,   28,   28,   28,   28,   28,
       31,   28,   28,   28,   28,   32,   32,   28,   28,   28,
       63,   63,   87,   60,   88,   64,   64,   64,   97,   97,

       61,   88,  131,   64,  132,  121,  146,  162,  133,  162,
      163,   88,  147,  103,   34,   28,   28,   28,   97,   97,
      135,   60,  136,   64,   64,   64,  137,  300,   61,  300,
      139,   64,  141,  121,   63,  176,  148,  176,  177,   88,
      103,   28,   28,   28,   29,   30,   28,   28,   28,   28,
       28,   31,   28,   28,   28,   28,   32,   32,   28,   28,
       28,   64,   63,   82,   80,   82,   81,   83,  131,   97,
      132,   97,  184,   84,  133,  150,  151,  150,  152, 1281,
       85,  127,  153,   84,  154,   34,   28,   28,   28,   64,
       97,   93,   97,   97,   98,   99,  303,  304,  303,  131,

      184,  215,   94,   94,   97,  216,  110,  109,  111,  127,
      117,   84,   28,   28,   28,   35,   30,   28,   28,   28,
       28,   28,   31,   28,   28,   28,   28,   32,   32,   28,
       28,   28,   97,  110,  109,  111,  101,  117,   97,  221,
      218,  229, 1280,   97,  219,  222,   97,  230,   97,  164,
      122,  164,  102,   97,   97,  112,   34,   28,   28,   28,
      113,  114,  218,  118,  101,  123,  219,  119,  115,  116,
      120,  166,  165,  166,  163,  167,   97,   97,  122,  102,
      185,   97,  112,   28,   29,   97,   97,  113,  168,  114,
      118,  172,  123,  172,  119,  115,  116,  120,  182,  209,

      165,   37,   38,   39,   40,   41,   42,   97,  185,   43,
       97,  218,   44,   45,  173,  219,   46,   47,   48,   49,
      218,   97,   50,   97,  219,  182,  209,  180,   97,   37,
       38,   39,   40,   41,   42,   97,   97,   43,   97,   44,
       45,  181,  173,   46,   47,   48,   49,   97,  124,   50,
       70,   71,   72,   73,  180,  125,   74,   97,  169,   73,
      169,   97,   75,   75,  126,   97,   76,  183,  181,   77,
       73,   97,   97,  199,   97,  210,  124,   97,   97,  200,
      170, 1264,  125,  203,  171,   97,   97,  186,  187,  188,
       97,  126,  193,  211,  183,   97,  198,   77,   73,   97,

      199,  204,  104,  210,  146,  194,  200,  205,  170,  105,
      243,  203,  171,  106,  186,  187,  107,  188,  108, 1263,
      193,  211,   97,  198,   97,  232,  233,  232,  234,  204,
      104,   97,  194,  135,  205,  136,   97,  105,  213,  137,
      106,  206,  212,  107,   97,  108,  138,  138,  139,  140,
      141,  138,  138,  292,  143,  138,  138,  138,  138,  138,
      144,  144,  138,  138,  138,   97,  213,   97,  206,  212,
       97,  195,  201,  207,  146,  208,  224,  225,  224,  226,
      243,  292,  162,  227,  162,  163,  196,  197,  202,  138,
      138,  138,  139,  166,  236,  166,  163,  167,  237,  195,

      201,  207,  245,  208,  246,  256,  257,  256,  247,  295,
      168,   97,  258,  196,  197,  202,  138,  138,  138,  139,
      144,  141,  138,  138,   97,  148,  138,  138,  138,  138,
      138,  144,  144,  138,  138,  138,  265,  295,  266,  189,
       97,   97,  267,   97,  249,  250,  249,  251,  190,   97,
      272,  252,  260,  261,  260,  262,  273,  296,   97,  263,
      138,  138,  138,  814,   97,  191,   97,  192,  268,  151,
      268,  266,  469,  309,  814,  267,  190,  274,  275,  274,
      266,  164,  313,  164,  267,  296,   97,  138,  155,  139,
      155,  141,  191,  322,  192,  148,  277,  139,  278,  236,

      469,  309,  279,  237,  165,  139,  156,  236,  293,  313,
      294,  237,   97,  157,  284,  337,  176,  158,  176,  177,
      159,  322,  160,  270,  291,  300,  270,  301,  466,  161,
       97,   97,  165,   97,  156,  293,  308,  294,  302,  302,
      221,  157,  284,  337,  158, 1185,  359,  159,  139,  160,
      236,  305,  291,  312,  237,  466,  161,  235,  235,  139,
      238,  236,  235,  235,  308,  240,  235,  235,  235,  235,
      235,  241,  241,  235,  235,  235,  282,  139,  305,  236,
      312,   97,  283,  237,   97,  319,   97,  470,   97,  338,
      378,  379,  378,  341,  285,  346,  164,  172,  164,  172,

      235,  235,  235,  282,   97,   97, 1185,  218,  286,  283,
      131,  219,  356,  319,  470, 1185,  357,  338,  365,  165,
      173,  341,  285,  346,  366,  314,  315,  235,  235,  235,
      139,  241,  236,  235,  235,  286,  237,  235,  235,  235,
      235,  235,  241,  241,  235,  235,  235,  165,  173,   97,
       97,  316,  314,  315,   97,  489,  361,  225,  361,  362,
      139,  306,  236,  363,  270,  310,  237,  307,  311,  321,
      317,  235,  235,  235,  367,  368,  367,  270,  221,  316,
      270,   97,  489,   97,  359,  290,  370,  371,  370,  306,
       97,  320,  310,  372,  307,  311,  321,  317,  235,  235,

      280,  139,  280,  236,  235,  235,  235,  237,  235,  235,
      235,  235,  235,  290,   97,  235,  235,  235,  139,  320,
      236,   97,   97,   97,  237,   97,   97,  169,  169,  169,
      169,  318,   97,  297,  342,  297,   97,  336,  287,   97,
      335,   97,  235,  235,  235,  235,  340,  288,  289,  170,
      170,   97,   97,  171,  171,  298,   97,  344,  318,  299,
       97,  345,  342,  339,  336,   97,  287,  335,   97,  235,
      347,   97,  349,  340,  288,  289,   97,  170,  170,   97,
       97,  171,  171,  298,  352,  344,   97,  299,   97,  345,
      339,  323,  324,  325,  326,  327,  328,  347,  343,  329,

      349,  348,   97,  330,  374,  354,  331,   97,  332,  333,
      372,  352,  334,   97,  353,  232,  233,  232,  234,  323,
      324,  325,  326,  327,  328,  343,   97,  329,  348,   97,
      330,  229,  354,  331,  270,  332,  333,  230,  373,  334,
      362,  350,  353,  486,  363,  351,  361,  225,  361,  362,
      419,  420,  419,  363,  375,  376,  375,  362,  139,  146,
      383,  363,  218,  146,  384,  386,  219,  477,  350,  386,
      486,  406,  351,  388,  261,  388,  389,  407,  477,  477,
      390,  382,  382,  139,  391,  383,  382,  382,  270,  393,
      382,  382,  382,  382,  382,  394,  394,  382,  382,  382,

      245,   97,  396,  544,  545,  544,  397,  399,  250,  399,
      400,  403,  257,  403,  401,  245,  415,  396,  404,   97,
      478,  397,  416,  270,  382,  382,  382,  409,  410,  409,
      411,  413,  481,  400,  412,  270,  421,  401,  399,  250,
      399,  400,  404,  421,  424,  401,  389,  478,  270,  404,
      390,  382,  382,  382,  139,  394,  383,  382,  382,  481,
      384,  382,  382,  382,  382,  382,  394,  394,  382,  382,
      382,  417,  418,  417,  400,  403,  257,  403,  401,  422,
      423,  422,  404,  270,  270,  272,  404,  388,  261,  388,
      389,  431,   97,  270,  390,  382,  382,  382,  425,  426,

      425,  389,  265,  270,  428,  390,  492,  272,  429,  432,
      275,  432,  428,  431,  270,  442,  429,  433,  151,  433,
      428,  443,  382,   97,  429,  436,  437,  436,  432,  275,
      432,  428,  431,  492,  277,  429,  439,  498,  270,   97,
      440,  445,  446,  445,  447,  482, 1185,  270,  448,  382,
      449,  139,  449,  383,  382,  382,  382,  384,  382,  382,
      382,  382,  382,   97,  498,  382,  382,  382,  452,  139,
      453,  383,  479,  482,  454,  384,  139,  139,  383,  383,
      254,  270,  384,  384,  139,  139,  383,  383,  270,  270,
      384,  384,  382,  382,  382,  382,   97,  455,  456,  484,

      479,  139,  139,  383,  383,  270,  457,  384,  384,  139,
      460,  383,  467,   97,  139,  384,  383,   97,  458,  382,
      384,  468,  480,  139,  455,  383,  456,  484,   97,  384,
      297,  461,  297,  457,  462,  459,   97,  471,  460,  471,
      467,  474,   97,  474,  463,  458,   97,   97,  468,  464,
      480,  465,  298,  488,  490,  483,  299,   97,  461,   97,
      487,  462,  459,   97,  475,  218,  472,  485,  473,  219,
      494,  463,  300,   97,  476,  491,  464,   97,  465,   97,
      298,  488,  490,  483,  299,  477,  477,   97,  487,   97,
      493,   97,  475,  472,  485,  473,   97,  497,  494,   97,

      495,   97,  491,   97,   97,   97,  499,   97,  500,  504,
      644,   97,  501,  496,  508,   97,  502,  505,  493,   97,
      506,  503,   97,  507,  497,  512,  510,   97,  495,  509,
       97,  513,  515,  499,  270,  500,  514,  504,  644,  501,
      496,   97,  508,  502,  505,  511,  516,  506,  503,  270,
      507,   97,  517,  512,  510,  521,  509,   97,  513,  515,
      518,   97,  520,  514,   97,   97,   97,  270,  522,   97,
      519,  525,  511,  516,   97,  131,  645,  532,  667,  517,
      528,  533,  521,  523,  524,   97,  526,   97,  518,  221,
      520,  527,  530,  270,  646,  535,  522,  519,  529,  525,

      537,  225,  537,  538,  645,  667,  221,  539,  270,  270,
      523,  524,  535,  526,  541,  371,  541,  373,  527,  538,
      530,  542,  646,  539,  270,  374,  529,  537,  225,  537,
      538,  542,   97,  365,  539,  543,  376,  543,  538,  366,
       97,  374,  539,  367,  368,  367,  270,  542,  541,  371,
      541,  546,  547,  546,   97,  542,  656,   97,  542,  543,
      376,  543,  538,  378,  379,  378,  539,  139,  146,  549,
      419,  420,  419,  550,  552,  554,  261,  554,  555,  146,
       97,  647,  556,  656,  421,  552,  558,  257,  558,  424,
      559,  555,   97,  559,  406,  556,  554,  261,  554,  555,

      573,   97,  415,  556,  560,  426,  560,  555,  579,  647,
       97,  556,  548,  548,  139,  561,  549,  548,  548,  648,
      563,  548,  548,  548,  548,  548,  564,  564,  548,  548,
      548,  245,   97,  566,  668,  655,   97,  567,  569,  250,
      569,  570,  245,  421,  566,  571,  218,  648,  567,  559,
      219,  575,  410,  575,  576,  548,  548,  548,  577,  413,
       97,  570,  668,  655,  406,  571,  569,  250,  569,  570,
      573,   97,  587,  571,  580,  418,  580,  570,  585,  270,
      254,  571,  548,  548,  548,  139,  564,  549,  548,  548,
      270,  550,  548,  548,  548,  548,  548,  564,  564,  548,

      548,  548,  558,  257,  558,  581,  423,  581,  373,  559,
      711,  415,  559,  583,  584,  583,  586,  579,  576,  265,
      585,  593,  577,  270,   97,  594,  548,  548,  548,  575,
      410,  575,  576,  300,   97,  653,  577,  588,  589,  588,
      576,  590,  591,  590,  577,   97,  654,  654,  579,  580,
      418,  580,  570,  548,   97,   97,  571,  581,  423,  581,
      560,  426,  560,  555,  559,  272,  654,  556,   97,  783,
      272,  596,  597,  275,  597,  593,  596,  654,  654,  594,
      598,  437,  598,  597,  275,  597,  593,  596,  675,  270,
      594,  599,  151,  599,  593,  598,  437,  598,  594,  277,

      442,  601,  596,   97,  254,  602,  604,  606,  446,  606,
      607,  442,  270,  674,  608,  675,  614,  604,  610,  611,
      610,  613,  612,  607,  270,  612,  623,  608,  606,  446,
      606,  607,  624,  614,   97,  608,  615,  616,  615,  607,
      658,  674,  614,  608,  548,  617,  139,  617,  549,  548,
      548,  548,  550,  548,  548,  548,  548,  548,   97,   97,
      548,  548,  548,  452,  452,  620,  620,  673,  658,  621,
      621,  626,  627,  626,  628,  631,  687,  632,  629,   97,
      631,  633,  632,  651,  661,  651,  633,  548,  548,  548,
      548,  139,  139,  549,  549,  673,  272,  550,  550,  139,

      139,  549,  549,  687,  652,  550,  550,  139,  474,  549,
      474,  272,  661,  550,  548,  634,  139,  139,  549,  549,
      636,  221,  550,  550,  139,  635,  549,  708,  270,  637,
      550,  475,  652,  139,  640,  549,  218,  270,  638,  550,
      219,   97,  641,  634,  639,  471,   97,  471,  636,  642,
      587,  649,  635,  649,  643,   97,  637,  657,   97,  475,
       97,   97,  640,  678,  662,  638,  665,  659,  660,  663,
      641,  639,   97,   97,  472,   97,  473,  642,  666,  664,
      669,   97,  643,   97,   97,  657,  650,   97,  670,   97,
      678,   97,  662,   97,  665,  659,  660,  663,  671,  672,

      677,  472,   97,  473,  676,   97,  666,  664,  669,  680,
      679,  682,   97,  650,   97,   97,  670,  686,   97,  685,
       97,   97,   97,  681,   97,  671,  672,  688,  677,  683,
      692,  676,  684,  690,   97,  689,  680,  679,   97,  682,
       97,  691,   97,  695,   97,  686,  694,  685,   97,  693,
      681,  696,   97,   97,  697,  688,  683,   97,  692,  684,
      698,  690,  689,   97,   97,   97,  424,  221,  723,  691,
      701,  695,  699,  708,  694,  702,  413,  693,  736,  696,
      146,  131,  697,  705,  700,  703,  720,  706,  698,  710,
      225,  710,  711,  713,  371,  713,  415,  587,  701,  699,

      415,  421,  702,  710,  225,  710,  711,  714,  376,  714,
      711,  700,  703,  713,  371,  713,  715,  547,  715,  714,
      376,  714,  711,  544,  545,  544,  715,  547,  715,  139,
      586,  717,  741,  421,  146,  718,  722,  261,  722,  723,
      720,  725,  257,  725,  722,  261,  722,  723,  726,  426,
      726,  723,  725,  257,  725,  727,  423,  727,  726,  426,
      726,  723,  139,  728,  717,  245,  406,  732,  729,  374,
      374,  733,  738,   97,  730,  730,  735,  250,  735,  736,
      139,  730,  717,  245,  406,  732,  718,   97,   97,  733,
      738,   97,  730,  730,  740,  410,  740,  741,  735,  250,

      735,  736,  743,  418,  743,  736,  745,  584,  745,  740,
      410,  740,  741,  746,  589,  746,  741,  747,  591,  747,
      743,  418,  743,  736,  727,  423,  727,  745,  584,  745,
      748,  749,  748,  746,  589,  746,  741,  747,  591,  747,
      265,  270,  751,  753,  275,  753,  751,  754,  437,  754,
      753,  275,  753,  751,  754,  437,  754,  755,  151,  755,
      751,  277,  442,  757,  765,  611,  765,  758,  760,  762,
      446,  762,  763,  442,  613,  782,  763,  778,  254,  760,
      762,  446,  762,  763,  766,  616,  766,  763,  765,  611,
      765,  767,  768,  767,  766,  616,  766,  763,  716,  769,

      139,  769,  717,  716,  716,  716,  718,  716,  716,  716,
      716,  716,  804,  435,  716,  716,  716,  452,  452,  772,
      772,  623,  270,  773,  773,  805,  623,  775,  777,  627,
      777,  778,  775,  780,  781,  780,  777,  627,  777,  778,
      804,  716,  716,  716,  716,  784,  785,  784,  778,  631,
      790,  787,  806,  805,  827,  788,  791,  793,  794,  793,
      795,  139,  270,  717,  631,  270,  787,  718,  716,  631,
      788,  787,  139,   97,  717,  788,  816,  139,  718,  717,
      806,  827,  796,  718,  139,  649,  717,  649,  270,  139,
      718,  717,  139,  797,  717,  718,   97,  139,  718,  717,

      631,  815,  787,  718,  816,  799,  788,  798,   97,  807,
      796,  807,   97,  270,  800,  801,  803,  651,  826,  651,
      650,  797,  802,  812,  809,  813,  809,   97,  822,  815,
      817,  808,   97,  799,  798,   97,  814,  823,  652,   97,
      818,   97,  800,  801,  803,   97,  826,  650,  821,  802,
      810,   97,   97,  254,  825,  822,  819,   97,  817,  808,
      820,  824,  829,   97,  823,   97,  652,   97,  818,   97,
      831,   97,   97,  270,  828,  830,  821,   97,  810,  833,
      838,   97,  825,  819,  834,  381,  832,  820,  824,   97,
      829,  841,  836,  270,  835,   97,  837,   97,  831,   97,

      839,  828,  830,   97,  840,   97,  844,  833,  838,   97,
      842,  834,   97,  832,  843,  300,   97,  300,  841,  836,
      850,   97,  835,  837,  847,   97,   97,  845,  839,   97,
       97,  846,  840,  848,  844,  849,  851,   97,  842,  854,
      852,   97,  843,  270,  853,  855,   97,  850,   97,   97,
      221,  847,  858,   97,  845,  856,  869,  857,  846,  270,
      860,  848,  849,  859,  851,   97,  854,  852,  863,  131,
      861,  866,  853,  855,  864,  867,  300,  221,  300,  858,
     1006, 1007,  856,  869,  857,  373,  862,  873,  860,  254,
      859,  874,  876,  877,  876,  863,   97,   97,  861,  878,

      374,  864,  871,  872,  871,  873,  878, 1006, 1007,  874,
       97,   97,  374,  862,  879,  225,  879,  873,  878,   97,
     1022,  874,  880,  371,  880,  881,  376,  881,  873,  878,
     1019,  146,  874,  882,  547,  882,  139,  887,  884, 1021,
      878,  146,  885,  889,  890,  889,  891,  887, 1022,  421,
      892,  894,  895,  894,  424,  896,  891, 1019,  896,  421,
      892,  897,  261,  897,  891,  896, 1021,  270,  892,  898,
      257,  898,  899,  426,  899,  891,  896,  435,   97,  892,
      900,  423,  900,  902,  903,  904, 1018,  896,   97,  905,
      907,  908,  907,  909,  902, 1016,  904,  892,  406,  245,

      910,  912,  270,  270,  915,  913,  917,  918,  917,  919,
      413,  270,  922,  920, 1018,  415,  923,  924,  250,  924,
      922,  926,  406, 1016,  923,  928,  929,  928,  915,  586,
       97,  919,  930,   97,  587,  920,  931,  410,  931,  919,
      930,  415, 1010,  920, 1010,  254,  587,  926,  932,  418,
      932,  922,  930, 1047, 1012,  923,  933,  584,  933,  934,
      589,  934,  919,  930,  270, 1011,  920,  935,  591,  935,
      936,  749,  936,  265,  926,  938,  272,  930,  272,  939,
     1047, 1012,  941,  381,  941,  942,  275,  942,  938,  943,
      437,  943,  939, 1011,  270,  254,  941,  944,  151,  944,

      938,  277,  442,  946,  939,  270,  254,  947,  949,  951,
      952,  951,  953,  442,  178,  174,  954,  270,  614,  949,
      956,  957,  956,  613,  958,  953,  254,  958,  614,  954,
      959,  446,  959,  953,  958,   97,  129,  954,  960,  611,
      960,  961,  616,  961,  953,  958,  623,  623,  954,  962,
      768,  962,  969,  969, 1023,   97,  958,  883,  963,  139,
      963,  884,  883,  883,  883,  885,  883,  883,  883,  883,
      883,   97,   99,  883,  883,  883,  452,  452,  966,  966,
       97, 1023,  967,  967,  971,  972,  971,  973,  976,  977,
      976,  974,  782,  783,  973,  978,   97,  178,  974,  978,

      883,  883,  883,  883,  979,  627,  979,  973,  783,  175,
     1020,  974,  174,  129,  978,  980,  781,  980,  981,  785,
      981,  973,  978,  790,  631,  974,  983,  883,   97,  986,
      984,  988,  989,  988,  990,  790,   97, 1020,  991, 1030,
      998,  986,  993,  994,  993,  996,  995,  990, 1133,  995,
       97,  991,  997,  794,  997,  990,  139, 1013,  884,  991,
     1297,   90,  885,  139,  631,  884,  983, 1030,   87,  885,
      984,  139,  139,  884,  884, 1133,   68,  885,  885,  139,
      139,  884,  884,   97, 1013,  885,  885, 1008,  139, 1008,
      884,  999,   97, 1000,  885,  807,  809,  807,  809, 1017,

       97,   66, 1002,   97, 1014, 1005, 1015,   97,   97,   97,
     1001, 1026,   97, 1009,   97, 1003, 1004,  808,  999, 1025,
     1000,   97,  810,   66, 1024, 1029, 1028, 1017, 1027, 1002,
       97, 1014,   97, 1005, 1015, 1032,   35, 1001,   97, 1026,
       97, 1009, 1003, 1004, 1031,  808, 1025,   97,   97, 1038,
      810, 1024, 1029, 1037, 1028, 1027,   97, 1033,   97, 1036,
       97, 1034, 1032, 1035,   97,   97,   97, 1040,   97,   97,
     1042, 1031,   97,   97,   97, 1039, 1038, 1048,   97, 1134,
     1041, 1037, 1144, 1050, 1033, 1044, 1036,  221, 1034,   97,
     1043, 1035, 1046,  869, 1045, 1040, 1297,  131, 1042,  866,

     1051, 1297, 1039,  867, 1049, 1048, 1134, 1041, 1297, 1144,
     1050, 1297, 1044, 1052, 1053, 1052,  873, 1043,  221, 1046,
      874, 1045, 1297,  374,  869, 1054, 1055, 1054, 1051,  878,
      374, 1049,  878,  373,   97,  873,  878, 1297,  146,  874,
      871,  872,  871,  873,  887, 1137,   97,  874, 1056, 1057,
     1056,  873,  876,  877,  876,  874, 1058, 1059, 1058,  878,
     1297, 1146, 1297,  878,  879,  225,  879,  873,  880,  371,
      880,  874, 1297, 1137, 1297,  878,  881,  376,  881,  873,
      882,  547,  882,  874,  139, 1297,  884,  878, 1146,  146,
      885, 1060, 1061, 1060,  891,  887,   97,  421,  892, 1062,

     1063, 1062,  424,  896,  891, 1297,  896,  421,  892,  889,
      890,  889,  891,  896, 1199, 1142,  892, 1064, 1065, 1064,
      891,  894,  895,  894,  892, 1066, 1067, 1066,  896, 1297,
     1297, 1297,  896,  897,  261,  897,  891,  898,  257,  898,
      892, 1199, 1142, 1297,  896,  899,  426,  899,  891,  900,
      423,  900,  892,  902, 1297,  904,  896, 1069, 1081,  910,
      902,  903,  904, 1070,  896, 1297,  905, 1072, 1073, 1072,
     1074, 1076, 1297,  909, 1075, 1297, 1297,  892,  907,  908,
      907,  909, 1078, 1297, 1079,  892, 1297, 1297,  269, 1083,
     1084, 1083, 1085,  245,  406,  912, 1086, 1297, 1297,  913,

      915, 1087, 1088, 1087,  919,  406, 1297,   97,  920, 1297,
      587,  915, 1089, 1090, 1089,  586,  930,  919, 1150,  930,
      415,  920,  917,  918,  917,  919,  926, 1297, 1297,  920,
     1091, 1092, 1091,  919,  413, 1246,  922,  920, 1297,  415,
      923, 1093, 1094, 1093,  922,  926, 1150, 1297,  923,  924,
      250,  924,  922, 1095, 1096, 1095,  923,  587, 1297,   97,
      926, 1297, 1246,  930,  928,  929,  928, 1097, 1098, 1097,
     1297,  930,   97,  272,  930,  931,  410,  931,  919,  941,
       97, 1140,  920,  932,  418,  932,  922,  933,  584,  933,
      923, 1154, 1297, 1159,  930,  934,  589,  934,  919,  935,

      591,  935,  920,  936,  749,  936,  926,  265, 1140,  938,
      930,   97,  272,  939, 1099, 1100, 1099,  938,  941, 1154,
     1159,  939, 1101, 1102, 1101,  942,  275,  942,  938,  941,
     1145, 1297,  939,  943,  437,  943,  944,  151,  944,  938,
      941,  442,  277,  939,  946, 1297, 1297,  949,  947, 1103,
     1104, 1103,  953,  442,   97,   97,  954, 1145,  614,  949,
     1105, 1106, 1105,  613,  958,  953, 1297,  958,  614,  954,
      951,  952,  951,  953,  958, 1168, 1161,  954, 1107, 1108,
     1107,  953,  956,  957,  956,  954, 1109, 1110, 1109,  958,
     1297, 1297, 1297,  958,  959,  446,  959,  953,  960,  611,

      960,  954, 1168, 1161, 1193,  958,  961,  616,  961,  953,
      962,  768,  962,  954, 1194, 1297, 1297,  958,  883,  963,
      139,  963,  884,  883,  883,  883,  885,  883,  883,  883,
      883,  883, 1193, 1297,  883,  883,  883,  452,  452,  966,
      966,  623, 1194,  967,  967, 1297,  623,  969, 1111, 1112,
     1111,  973,  969,   97, 1297,  974, 1297, 1297, 1113, 1114,
     1113,  883,  883,  883,  883,  978,  782,   97,  973, 1163,
     1139,  783,  974,  971,  972,  971,  973,  978, 1297, 1297,
      974,  783, 1115, 1116, 1115,  973, 1297,  978,  883,  974,
      976,  977,  976, 1117, 1118, 1117, 1163,  978, 1139, 1297,

      978,  979,  627,  979,  973,  980,  781,  980,  974, 1297,
     1297, 1297,  978,  981,  785,  981,  973,  631,  790,  983,
      974, 1297, 1297,  984,  986, 1119, 1120, 1119,  990,  790,
     1297, 1297,  991, 1297,  998,  986, 1121, 1122, 1121,  996,
      995,  990, 1297,  995,  998,  991,  988,  989,  988,  990,
      995, 1297, 1297,  991, 1123, 1124, 1123,  990,  993,  994,
      993,  991, 1125, 1126, 1125,  995, 1008, 1297, 1008,  995,
      997,  794,  997,  990,  139,   97,  884,  991, 1141,  139,
      885,  884,  631,   97,  983,  885, 1143,  139,  984,  884,
     1297,   97, 1009,  885,  139, 1127,  884,  139, 1138,  884,

      885,   97,  139,  885,  884, 1135, 1141, 1135,  885, 1010,
       97, 1010,   97, 1128, 1143, 1148,   97, 1147, 1131, 1149,
     1009, 1129, 1151, 1127,   97, 1130, 1138,   97, 1136,   97,
     1132, 1297, 1011,   97, 1152, 1155,   97,   97, 1153, 1157,
     1128,   97, 1148, 1156, 1158, 1147, 1131, 1149, 1129,   97,
     1151,   97, 1130, 1297, 1164, 1160, 1136, 1132, 1162,   97,
     1011,   97, 1152, 1155,   97, 1153, 1166, 1157, 1165,   97,
       97, 1156, 1158,   97, 1069, 1297, 1167, 1170, 1297, 1169,
     1070, 1164, 1176, 1160, 1074, 1297, 1162,   97, 1075, 1171,
     1052, 1053, 1052,  873, 1166,   97, 1165,  874, 1297,   97,

     1054, 1055, 1054, 1195, 1167, 1170, 1169,  878, 1056, 1057,
     1056,  873, 1058, 1059, 1058,  874, 1171, 1198, 1214,  878,
     1060, 1061, 1060,  891, 1062, 1063, 1062,  892, 1297, 1297,
     1195,  896, 1064, 1065, 1064,  891, 1066, 1067, 1066,  892,
     1173, 1174, 1173,  896, 1198, 1214, 1178, 1175, 1072, 1073,
     1072, 1074, 1179, 1247,   97, 1075, 1180, 1181, 1180, 1074,
     1078, 1200, 1079, 1075,   97, 1078,  269, 1079, 1078, 1183,
     1079,  269, 1081,   97,  269,  434, 1187, 1186,  896, 1085,
     1247, 1206, 1175, 1086, 1083, 1084, 1083, 1085, 1297, 1200,
     1244, 1086, 1188, 1189, 1188, 1085,   97, 1297, 1297, 1086,

     1087, 1088, 1087,  919, 1089, 1090, 1089,  920, 1206,   97,
     1297,  930, 1091, 1092, 1091,  919, 1215, 1244, 1208,  920,
     1093, 1094, 1093,  922, 1095, 1096, 1095,  923, 1097, 1098,
     1097,  926, 1297, 1297, 1297,  930, 1099, 1100, 1099,  938,
     1101, 1102, 1101,  939, 1215, 1208, 1297,  941, 1103, 1104,
     1103,  953, 1105, 1106, 1105,  954, 1297, 1297, 1297,  958,
     1107, 1108, 1107,  953, 1109, 1110, 1109,  954, 1297, 1297,
     1297,  958, 1111, 1112, 1111,  973, 1113, 1114, 1113,  974,
     1297, 1297, 1297,  978, 1115, 1116, 1115,  973, 1117, 1118,
     1117,  974, 1297, 1297, 1297,  978, 1119, 1120, 1119,  990,

     1121, 1122, 1121,  991, 1297, 1297,   97,  995, 1123, 1124,
     1123,  990, 1125, 1126, 1125,  991,  139, 1297,  884,  995,
     1196,  139,  885,  884,  631,   97,  983,  885, 1203,  139,
      984,  884,  631, 1190,  983,  885,   97,  631,  984,  983,
     1135,   97, 1135,  984,   97,   97, 1191, 1196, 1204, 1202,
       97, 1197,   97, 1205,   97, 1207, 1203,   97, 1297, 1201,
     1297, 1190,   97, 1136,   97, 1192,   97, 1212,   97, 1209,
     1225, 1213, 1297,   97, 1191, 1216, 1204, 1202, 1197, 1210,
     1217, 1205, 1187, 1207, 1178, 1211, 1201, 1183, 1175, 1226,
     1179, 1136, 1192,  434, 1297, 1212, 1209,   97, 1225, 1213,

     1173, 1174, 1173, 1216,   97,   97, 1210, 1175, 1217, 1218,
     1219, 1218, 1211, 1220, 1221, 1220, 1175, 1226, 1227, 1229,
     1179, 1180, 1181, 1180, 1074, 1228, 1230, 1297, 1075, 1188,
     1189, 1188, 1085,  139,   97,  884, 1086,   97,  139,  885,
      884,  139,   97,  884,  885, 1227, 1229,  885,   97,   97,
     1231, 1232, 1228, 1233, 1230,   97,   97,   97,   97,   97,
       97,   97, 1222,   97, 1237, 1238, 1243, 1241, 1297, 1223,
     1234, 1236, 1240, 1297, 1250, 1224, 1235, 1231, 1232,   97,
     1239, 1233,   97,   97, 1242, 1218, 1219, 1218, 1261, 1222,
     1297, 1237, 1175, 1238, 1243, 1241, 1223, 1234, 1236, 1240,

     1249, 1250, 1224, 1235, 1251,   97,   97, 1239, 1220, 1221,
     1220, 1242,  631, 1248,  983, 1179, 1261,  139,  984,  884,
      631,   97,  983,  885,   97, 1253,  984, 1249, 1252,   97,
       97, 1251,   97, 1255,   97,   97, 1254,   97,   97, 1256,
       97, 1248, 1257,  631, 1258,  983, 1262, 1245, 1266,  984,
     1259, 1260, 1253,   97,   97,   97, 1252, 1265,   97,   97,
       97, 1255, 1269,   97, 1254, 1268,   97, 1256, 1273, 1274,
     1257, 1275, 1258, 1262, 1245, 1266, 1270, 1259, 1267, 1260,
     1271, 1272,   97, 1276, 1265,   97,   97,   97,   97,   97,
     1269, 1282, 1295, 1268, 1284, 1273, 1274,   97, 1277, 1275,

     1279, 1297, 1283, 1270, 1278, 1267, 1286, 1271, 1272, 1287,
     1276,   97, 1297, 1285,   97, 1290, 1288,   97, 1292, 1282,
     1295, 1289, 1284, 1291, 1294, 1277, 1293, 1296, 1279, 1283,
     1297, 1278, 1297, 1286, 1297, 1297, 1287, 1297, 1297, 1297,
     1285, 1297, 1297, 1290, 1288, 1297, 1292, 1297, 1297, 1289,
     1291, 1297, 1294, 1293, 1297, 1296,   33,   33,   33,   33,
       33,   33,   36,   36,   36,   36,   36,   36,   51,   51,
       51,   51,   51,   51,   55,   55,   55,   55,   55,   55,
       59,   59,   59,   59,   59,   59,   65,   65,   65,   65,
       65,   65,   67,   67,   67,   67,   67,   67,   69,   69,

       69,   69,   69,   69,   78,   78,   78,   78,   78,   78,
       86,   86,   86,   86,   86,   86,   89,   89,   89,   89,
       89,   89,   96,   96,  100, 1297,  100,  100,  128,  128,
      128,  128,  128,  128,  130,  130,  130,  130,  130,  130,
      134,  134,  134,  134,  134,  134,  142,  142,  142,  142,
      142,  142,  145,  145,  145,  145,  145,  145,  138,  138,
      138,  138,  138,  138,  149,  149,  149,  149,  149,  149,
      179,  179,  179,  179, 1297,  179,   98, 1297,   98,   99,
     1297,   99,  214,  214,  214,  214,  214,  214,  217,  217,
      217,  217,  217,  217,  220,  220,  220,  220,  220,  220,

      223,  223,  223,  223,  223,  223,  228,  228,  228,  228,
      228,  228,  231,  231,  231,  231,  231,  231,  235,  235,
      235,  235,  235,  235,  239,  239,  239,  239,  239,  239,
      242,  242,  242,  242,  242,  242,  244,  244,  244,  244,
      244,  244,  248,  248,  248,  248,  248,  248,  253,  253,
      253,  253,  253,  253,  255,  255,  255,  255,  255,  255,
      259,  259,  259,  259,  259,  259,  264,  264,  264,  264,
      264,  264,  269,  269,  269,  269,  269,  269,  271,  271,
      271,  271,  271,  271,  276,  276,  276,  276,  276,  276,
      281,  281,  281,  281,  281,  281,  355,  355,  355,  355,

      355,  355,  358,  358,  358,  358,  358,  358,  360,  360,
      360,  360,  360,  360,  364,  364,  364,  364,  364,  364,
      369,  369,  369,  369,  369,  369,  377,  377,  377,  377,
      377,  377,  382,  382,  382,  382,  382,  382,  385,  385,
      385,  385,  385,  385,  387,  387,  387,  387,  387,  387,
      392,  392,  392,  392,  392,  392,  395,  395,  395,  395,
      395,  395,  398,  398,  398,  398,  398,  398,  402,  402,
      402,  402,  402,  402,  405,  405,  405,  405,  405,  405,
      408,  408,  408,  408,  408,  408,  414,  414,  414,  414,
      414,  414,  427,  427,  427,  427,  427,  427,  430,  430,

      430,  430,  430,  430,  434,  434,  434,  434,  434,  434,
      438,  438,  438,  438,  438,  438,  441,  441,  441,  441,
      441,  441,  444,  444,  444,  444,  444,  444,  450,  450,
      450,  450,  450,  450,  451,  451,  451,  451,  451,  451,
       96,   96,  531,  531,  531,  531,  531,  531,  534,  534,
      534,  534,  534,  534,  536,  536,  536,  536,  536,  536,
      540,  540,  540,  540,  540,  540,  364,  364,  364,  364,
      364,  364,  377,  377,  377,  377,  377,  377,  548,  548,
      548,  548,  548,  548,  551,  551,  551,  551,  551,  551,
      553,  553,  553,  553,  553,  553,  557,  557,  557,  557,

      557,  557,  562,  562,  562,  562,  562,  562,  565,  565,
      565,  565,  565,  565,  568,  568,  568,  568,  568,  568,
      572,  572,  572,  572,  572,  572,  574,  574,  574,  574,
      574,  574,  578,  578,  578,  578,  578,  578,  582,  582,
      582,  582,  582,  582,  592,  592,  592,  592,  592,  592,
      595,  595,  595,  595,  595,  595,  600,  600,  600,  600,
      600,  600,  603,  603,  603,  603,  603,  603,  605,  605,
      605,  605,  605,  605,  609,  609,  609,  609,  609,  609,
      618,  618,  618,  618,  618,  618,  619,  619,  619,  619,
      619,  619,  217,  217,  217,  217,  217,  217,  622,  622,

      622,  622,  622,  622,  625,  625,  625,  625,  625,  625,
      630,  630,  630,  630,  630,  630,   96,   96,  704,  704,
      704,  704,  704,  704,  707,  707,  707,  707,  707,  707,
      709,  709,  709,  709,  709,  709,  712,  712,  712,  712,
      712,  712,  716,  716,  716,  716,  716,  716,  719,  719,
      719,  719,  719,  719,  721,  721,  721,  721,  721,  721,
      724,  724,  724,  724,  724,  724,  731,  731,  731,  731,
      731,  731,  734,  734,  734,  734,  734,  734,  737,  737,
      737,  737,  737,  737,  739,  739,  739,  739,  739,  739,
      742,  742,  742,  742,  742,  742,  744,  744,  744,  744,

      744,  744,  750,  750,  750,  750,  750,  750,  752,  752,
      752,  752,  752,  752,  756,  756,  756,  756,  756,  756,
      759,  759,  759,  759,  759,  759,  761,  761,  761,  761,
      761,  761,  764,  764,  764,  764,  764,  764,  770,  770,
      770,  770,  770,  770,  771,  771,  771,  771,  771,  771,
      774,  774,  774,  774,  774,  774,  776,  776,  776,  776,
      776,  776,  253,  253,  253,  253,  253,  253,  779,  779,
      779,  779,  779,  779,  786,  786,  786,  786,  786,  786,
      217,  217,  217,  217,  217,  217,  789,  789,  789,  789,
      789,  789,  792,  792,  792,  792,  792,  792,  811,  811,

      811,  811,  811,   96,   96,  865,  865,  865,  865,  865,
      865,  868,  868,  868,  868,  868,  868,  870,  870,  870,
      870,  870,  870,  875,  875,  875,  875,  875,  875,  883,
      883,  883,  883,  883,  883,  886,  886,  886,  886,  886,
      886,  888,  888,  888,  888,  888,  888,  893,  893,  893,
      893,  893,  893,  901,  901,  901,  901,  901,  901,  906,
      906,  906,  906,  906,  906,  911,  911,  911,  911,  911,
      911,  914,  914,  914,  914,  914,  914,  916,  916,  916,
      916,  916,  916,  921,  921,  921,  921,  921,  921,  925,
      925,  925,  925,  925,  925,  927,  927,  927,  927,  927,

      927,  937,  937,  937,  937,  937,  937,  940,  940,  940,
      940,  940,  940,  945,  945,  945,  945,  945,  945,  948,
      948,  948,  948,  948,  948,  950,  950,  950,  950,  950,
      950,  955,  955,  955,  955,  955,  955,  964,  964,  964,
      964,  964,  964,  965,  965,  965,  965,  965,  965,  968,
      968,  968,  968,  968,  968,  970,  970,  970,  970,  970,
      970,  975,  975,  975,  975,  975,  975,  269,  269,  269,
      269,  269,  269,  982,  982,  982,  982,  982,  982,  985,
      985,  985,  985,  985,  985,  987,  987,  987,  987,  987,
      987,  253,  253,  253,  253,  253,  253,  992,  992,  992,

      992,  992,  992,  883,  883,  883,  883,  883,  883,   96,
       96,  865,  865,  865,  865,  865,  865,  868,  868,  868,
      868,  868,  868,  870,  870,  870,  870,  870,  870,  875,
      875,  875,  875,  875,  875,  886,  886,  886,  886,  886,
      886,  888,  888,  888,  888,  888,  888,  893,  893,  893,
      893,  893,  893,  901,  901,  901,  901,  901,  901,  217,
      217,  217,  217,  217,  217, 1068, 1068, 1068, 1068, 1068,
     1068, 1071, 1071, 1071, 1071, 1071, 1071,  906,  906,  906,
      906,  906,  906, 1077, 1077, 1077, 1077, 1077, 1077, 1080,
     1080, 1080, 1080, 1080, 1080, 1082, 1082, 1082, 1082, 1082,

     1082,  911,  911,  911,  911,  911,  911,  914,  914,  914,
      914,  914,  914,  916,  916,  916,  916,  916,  916,  927,
      927,  927,  927,  927,  927,  921,  921,  921,  921,  921,
      921,  925,  925,  925,  925,  925,  925,  937,  937,  937,
      937,  937,  937,  940,  940,  940,  940,  940,  940,  945,
      945,  945,  945,  945,  945,  948,  948,  948,  948,  948,
      948,  950,  950,  950,  950,  950,  950,  955,  955,  955,
      955,  955,  955,  964,  964,  964,  964,  964,  964,  965,
      965,  965,  965,  965,  965,  968,  968,  968,  968,  968,
      968,  970,  970,  970,  970,  970,  970,  975,  975,  975,

      975,  975,  975,  982,  982,  982,  982,  982,  982,  985,
      985,  985,  985,  985,  985,  987,  987,  987,  987,  987,
      987,  992,  992,  992,  992,  992,  992,  883,  883,  883,
      883,  883,  883,   96,   96,  870,  870,  870,  870,  870,
      870,  875,  875,  875,  875,  875,  875,  888,  888,  888,
      888,  888,  888,  893,  893,  893,  893,  893,  893, 1068,
     1068, 1068, 1068, 1068, 1068,  253,  253,  253,  253,  253,
      253, 1172, 1172, 1172, 1172, 1172, 1172, 1071, 1071, 1071,
     1071, 1071, 1071, 1177, 1177, 1177, 1177, 1177, 1177, 1077,
     1077, 1077, 1077, 1077, 1077, 1182, 1182, 1182, 1182, 1182,

     1182, 1080, 1080, 1080, 1080, 1080, 1080, 1184, 1184, 1297,
     1184, 1184, 1184, 1082, 1082, 1082, 1082, 1082, 1082,  916,
      916,  916,  916,  916,  916,  927,  927,  927,  927,  927,
      927,  921,  921,  921,  921,  921,  921,  925,  925,  925,
      925,  925,  925,  937,  937,  937,  937,  937,  937,  940,
      940,  940,  940,  940,  940,  950,  950,  950,  950,  950,
      950,  955,  955,  955,  955,  955,  955,  970,  970,  970,
      970,  970,  970,  975,  975,  975,  975,  975,  975,  987,
      987,  987,  987,  987,  987,  992,  992,  992,  992,  992,
      992,  883,  883,  883,  883,  883,  883,  982,  982,  982,

      982,  982,  982,   96,   96,   27, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297
    } ;

static yyconst flex_int16_t yy_chk[5678] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    7,
        9,    8,   10, 1294,   11,   12,    7,    7,    8,    8,
       30,   11,   12,   21,   21,   21,   21,   32,   32,   11,
       12,   30,   30,    1,    1,    1,    1,   95,   95,   13,
       14,   26,   26,   26,   26, 1289,   13,   14,   36,   36,
     1284,    9,    9,   10,   10,   11,   12,  231,   36,  231,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       13,   14,   24,   15,   24,   15,   15,   15,   47,   38,

       15,   24,   69,   15,   69,   47,   72,   79,   69,   79,
       79,   24,   72,   38,    2,    2,    2,    2, 1283, 1277,
       70,   16,   70,   16,   16,   16,   70,  300,   16,  300,
       73,   16,   73,   47,   15,   91,   73,   91,   91,   24,
       38,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,   15,   16,   22,   22,   22,   22,   22,   76,  105,
       76,   50,  105,   22,   76,   74,   74,   74,   74, 1274,
       22,   50,   74,   22,   76,    3,    3,    3,    3,   16,
       40,   94,   41,   44,  100,  100,  178,  178,  178,  130,

      105,  130,   94,   94,  100,  130,   41,   40,   41,   50,
       44,   22,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,   37,   41,   40,   41,   37,   44,   42,  132,
      131,  136, 1273,   48,  131,  132,   45,  136,   46,   81,
       48,   81,   37,   43, 1269,   42,    4,    4,    4,    4,
       42,   43,  135,   45,   37,   48,  135,   46,   43,   43,
       46,   82,   81,   82,   82,   82, 1267,  106,   48,   37,
      106,  103,   42,    4,    5,  122, 1258,   42,   82,   43,
       45,   84,   48,   84,   46,   43,   43,   46,  103,  122,

       81,    5,    5,    5,    5,    5,    5,  101,  106,    5,
     1257,  139,    5,    5,   84,  139,    5,    5,    5,    5,
      217,  102,    5, 1256,  217,  103,  122,  101, 1255,    5,
        5,    5,    5,    5,    5, 1254, 1251,    5,   49,    5,
        5,  102,   84,    5,    5,    5,    5,  104,   49,    5,
       20,   20,   20,   20,  101,   49,   20,  113,   83,   20,
       83,  115,   20,   20,   49, 1249,   20,  104,  102,   20,
       20,  123,  107,  113,  117,  123,   49,  112,  108,  115,
       83, 1247,   49,  117,   83,  110,  124,  107,  107,  108,
      119,   49,  110,  124,  104,  118,  112,   20,   20,   39,

      113,  118,   39,  123,  141,  110,  115,  119,   83,   39,
      141,  117,   83,   39,  107,  107,   39,  108,   39, 1246,
      110,  124,  120,  112,  126,  137,  137,  137,  137,  118,
       39,  127,  110,  134,  119,  134, 1237,   39,  127,  134,
       39,  120,  126,   39, 1236,   39,   71,   71,   71,   71,
       71,   71,   71,  165,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  111,  127,  116,  120,  126,
      121,  111,  116,  121,  145,  121,  133,  133,  133,  133,
      145,  165,  162,  133,  162,  162,  111,  111,  116,   71,
       71,   71,  138,  166,  138,  166,  166,  166,  138,  111,

      116,  121,  142,  121,  142,  147,  147,  147,  142,  171,
      166, 1228,  147,  111,  111,  116,   71,   75,   75,   75,
       75,   75,   75,   75, 1217,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,  149,  171,  149,  109,
     1216, 1215,  149,  109,  143,  143,  143,  143,  109, 1209,
      152,  143,  148,  148,  148,  148,  152,  173, 1197,  148,
       75,   75,   75,  654,  186,  109,  183,  109,  150,  150,
      150,  150,  294,  183,  654,  150,  109,  153,  153,  153,
      153,  163,  186,  163,  153,  173,  194,   75,   77,   77,
       77,   77,  109,  194,  109,   77,  154,  157,  154,  157,

      294,  183,  154,  157,  163,  161,   77,  161,  170,  186,
      170,  161,  198,   77,  157,  198,  176,   77,  176,  176,
       77,  194,   77, 1189,  161,  175, 1186,  175,  292,   77,
      180,  182,  163,  185,   77,  170,  182,  170,  175,  175,
      215,   77,  157,  198,   77, 1185,  215,   77,  156,   77,
      156,  180,  161,  185,  156,  292,   77,  140,  140,  140,
      140,  140,  140,  140,  182,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  156,  158,  180,  158,
      185,  191,  156,  158,  199,  191,  202,  296,  206,  199,
      230,  230,  230,  202,  158,  206,  164,  172,  164,  172,

      140,  140,  140,  156,  187,  188, 1184,  245,  158,  156,
      214,  245,  214,  191,  296, 1183,  214,  199,  218,  164,
      172,  202,  158,  206,  218,  187,  188,  140,  144,  144,
      144,  144,  144,  144,  144,  158,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  164,  172,  184,
      181,  189,  187,  188,  193,  316,  216,  216,  216,  216,
      160,  181,  160,  216, 1181,  184,  160,  181,  184,  193,
      189,  144,  144,  144,  219,  219,  219,  219,  220,  189,
     1176,  192,  316, 1170,  220,  160,  222,  222,  222,  181,
     1167,  192,  184,  222,  181,  184,  193,  189,  144,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  160,  190,  155,  155,  155,  159,  192,
      159,  196,  197,  203,  159, 1166, 1162,  167,  169,  167,
      169,  190,  201,  174,  203,  174, 1159,  197,  159, 1156,
      196,  200,  155,  155,  155,  155,  201,  159,  159,  167,
      169, 1153,  205,  167,  169,  174,  207,  205,  190,  174,
     1149,  205,  203,  200,  197,  209,  159,  196,  211,  155,
      207, 1148,  209,  201,  159,  159,  204,  167,  169,  208,
     1142,  167,  169,  174,  211,  205,  213,  174,  195,  205,
      200,  195,  195,  195,  195,  195,  195,  207,  204,  195,

      209,  208, 1139,  195,  226,  213,  195,  212,  195,  195,
      226,  211,  195, 1138,  212,  232,  232,  232,  232,  195,
      195,  195,  195,  195,  195,  204,  210,  195,  208,  313,
      195,  228,  213,  195, 1124,  195,  195,  228,  223,  195,
      223,  210,  212,  313,  223,  210,  224,  224,  224,  224,
      254,  254,  254,  224,  227,  227,  227,  227,  235,  236,
      235,  227,  277,  242,  235,  236,  277,  302,  210,  242,
      313,  246,  210,  237,  237,  237,  237,  246,  302,  302,
      237,  238,  238,  238,  238,  238,  238,  238, 1120,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,

      239,  305,  239,  366,  366,  366,  239,  240,  240,  240,
      240,  243,  243,  243,  240,  244,  251,  244,  243,  308,
      305,  244,  251, 1116,  238,  238,  238,  247,  247,  247,
      247,  248,  308,  248,  247, 1112,  255,  248,  249,  249,
      249,  249,  255,  262,  259,  249,  259,  305, 1108,  262,
      259,  238,  241,  241,  241,  241,  241,  241,  241,  308,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  252,  252,  252,  252,  256,  256,  256,  252,  258,
      258,  258,  256, 1104, 1100,  266,  258,  260,  260,  260,
      260,  266,  319, 1094,  260,  241,  241,  241,  263,  263,

      263,  263,  264, 1092,  264,  263,  319,  271,  264,  267,
      267,  267,  267,  271, 1088,  278,  267,  268,  268,  268,
      268,  278,  241,  324,  268,  273,  273,  273,  274,  274,
      274,  274,  273,  319,  276,  274,  276,  324, 1084,  309,
      276,  279,  279,  279,  279,  309, 1081, 1073,  279,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  306,  324,  280,  280,  280,  281,  282,
      281,  282,  306,  309,  281,  282,  284,  283,  284,  283,
     1069, 1065,  284,  283,  285,  287,  285,  287, 1061, 1057,
      285,  287,  280,  280,  280,  280,  311,  282,  283,  311,

      306,  286,  288,  286,  288, 1053,  284,  286,  288,  289,
      287,  289,  293, 1041,  290,  289,  290,  307,  285,  280,
      290,  293,  307,  291,  282,  291,  283,  311, 1040,  291,
      297,  288,  297,  284,  288,  286, 1020,  298,  287,  298,
      293,  299,  315,  299,  289,  285,  310,  312,  293,  290,
      307,  291,  297,  315,  317,  310,  297,  314,  288,  318,
      314,  288,  286,  321,  299,  452,  298,  312,  298,  452,
      321,  289,  301, 1019,  301,  318,  290,  323,  291,  320,
      297,  315,  317,  310,  297,  301,  301,  325,  314,  322,
      320,  326,  299,  298,  312,  298,  327,  323,  321,  328,

      322,  329,  318,  330,  331,  335,  325,  332,  326,  329,
      466,  338,  327,  322,  332,  334,  328,  329,  320,  333,
      330,  328,  337,  331,  323,  334,  333,  339,  322,  332,
      340,  335,  338,  325,  996,  326,  337,  329,  466,  327,
      322,  343,  332,  328,  329,  333,  339,  330,  328,  989,
      331,  341,  340,  334,  333,  343,  332,  342,  335,  338,
      341,  344,  342,  337,  345,  348,  349,  972,  344,  350,
      341,  349,  333,  339,  351,  355,  467,  355,  489,  340,
      353,  355,  343,  345,  348,  354,  350,  353,  341,  356,
      342,  351,  354,  952,  468,  356,  344,  341,  353,  349,

      357,  357,  357,  357,  467,  489,  358,  357,  918,  890,
      345,  348,  358,  350,  359,  359,  359,  360,  351,  360,
      354,  359,  468,  360,  872,  362,  353,  361,  361,  361,
      361,  362,  859,  364,  361,  363,  363,  363,  363,  364,
      479,  369,  363,  367,  367,  367,  367,  369,  370,  370,
      370,  372,  372,  372,  854,  370,  479,  852,  372,  375,
      375,  375,  375,  378,  378,  378,  375,  382,  383,  382,
      419,  419,  419,  382,  383,  384,  384,  384,  384,  385,
      851,  469,  384,  479,  389,  385,  386,  386,  386,  387,
      389,  387,  848,  386,  396,  387,  388,  388,  388,  388,

      396,  847,  400,  388,  390,  390,  390,  390,  400,  469,
      837,  390,  391,  391,  391,  391,  391,  391,  391,  470,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  392,  478,  392,  490,  478,  831,  392,  393,  393,
      393,  393,  395,  402,  395,  393,  631,  470,  395,  402,
      631,  397,  397,  397,  397,  391,  391,  391,  397,  398,
      823,  398,  490,  478,  405,  398,  399,  399,  399,  399,
      405,  822,  411,  399,  401,  401,  401,  401,  411,  794,
      790,  401,  391,  394,  394,  394,  394,  394,  394,  394,
      785,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  403,  403,  403,  404,  404,  404,  536,  403,
      536,  414,  404,  407,  407,  407,  408,  414,  408,  427,
      407,  427,  408,  782,  703,  427,  394,  394,  394,  409,
      409,  409,  409,  476,  691,  476,  409,  412,  412,  412,
      412,  416,  416,  416,  412,  689,  476,  476,  416,  417,
      417,  417,  417,  394,  673,  656,  417,  422,  422,  422,
      425,  425,  425,  425,  422,  428,  477,  425,  497,  628,
      430,  428,  429,  429,  429,  429,  430,  477,  477,  429,
      431,  431,  431,  432,  432,  432,  432,  431,  497,  627,
      432,  433,  433,  433,  433,  436,  436,  436,  433,  438,

      439,  438,  436,  496,  623,  438,  439,  440,  440,  440,
      440,  441,  616,  496,  440,  497,  447,  441,  443,  443,
      443,  444,  447,  444,  613,  443,  453,  444,  445,  445,
      445,  445,  453,  609,  481,  445,  448,  448,  448,  448,
      481,  496,  607,  448,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  511,  495,
      449,  449,  449,  450,  451,  450,  451,  495,  481,  450,
      451,  454,  454,  454,  454,  455,  511,  455,  454,  484,
      456,  455,  456,  473,  484,  473,  456,  449,  449,  449,
      449,  458,  457,  458,  457,  495,  595,  458,  457,  459,

      460,  459,  460,  511,  473,  459,  460,  461,  474,  461,
      474,  593,  484,  461,  449,  457,  462,  463,  462,  463,
      459,  532,  462,  463,  464,  458,  464,  532,  589,  460,
      464,  474,  473,  465,  463,  465,  902,  586,  461,  465,
      902,  501,  463,  457,  462,  471,  480,  471,  459,  464,
      582,  472,  458,  472,  465,  487,  460,  480,  485,  474,
      482,  483,  463,  501,  485,  461,  487,  482,  483,  485,
      463,  462,  486,  488,  471,  491,  471,  464,  488,  486,
      491,  492,  465,  494,  493,  480,  472,  498,  492,  499,
      501,  502,  485,  503,  487,  482,  483,  485,  493,  494,

      499,  471,  505,  471,  498,  506,  488,  486,  491,  503,
      502,  506,  507,  472,  510,  509,  492,  510,  508,  509,
      512,  514,  515,  505,  517,  493,  494,  512,  499,  507,
      517,  498,  508,  515,  516,  514,  503,  502,  519,  506,
      520,  516,  518,  520,  521,  510,  519,  509,  522,  518,
      505,  521,  524,  527,  522,  512,  507,  523,  517,  508,
      523,  515,  514,  525,  526,  529,  553,  534,  553,  516,
      526,  520,  524,  534,  519,  527,  568,  518,  568,  521,
      549,  531,  522,  531,  525,  529,  549,  531,  523,  533,
      533,  533,  533,  535,  535,  535,  578,  576,  526,  524,

      570,  557,  527,  537,  537,  537,  537,  539,  539,  539,
      539,  525,  529,  541,  541,  541,  542,  542,  542,  543,
      543,  543,  543,  544,  544,  544,  546,  546,  546,  548,
      574,  548,  574,  555,  551,  548,  550,  550,  550,  550,
      551,  552,  552,  552,  554,  554,  554,  554,  556,  556,
      556,  556,  558,  558,  558,  559,  559,  559,  560,  560,
      560,  560,  561,  561,  561,  562,  566,  562,  561,  540,
      538,  562,  566,  530,  561,  561,  563,  563,  563,  563,
      564,  564,  564,  565,  572,  565,  564,  513,  504,  565,
      572,  500,  564,  564,  567,  567,  567,  567,  569,  569,

      569,  569,  571,  571,  571,  571,  573,  573,  573,  575,
      575,  575,  575,  577,  577,  577,  577,  579,  579,  579,
      580,  580,  580,  580,  581,  581,  581,  583,  583,  583,
      585,  585,  585,  588,  588,  588,  588,  590,  590,  590,
      592,  446,  592,  594,  594,  594,  594,  596,  596,  596,
      597,  597,  597,  597,  598,  598,  598,  599,  599,  599,
      599,  600,  601,  600,  604,  604,  604,  600,  601,  602,
      602,  602,  602,  603,  605,  625,  605,  625,  442,  603,
      606,  606,  606,  606,  608,  608,  608,  608,  610,  610,
      610,  612,  612,  612,  615,  615,  615,  615,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  644,  434,  617,  617,  617,  618,  619,  618,
      619,  620,  426,  618,  619,  647,  622,  620,  621,  621,
      621,  621,  622,  624,  624,  624,  626,  626,  626,  626,
      644,  617,  617,  617,  617,  629,  629,  629,  629,  630,
      632,  630,  648,  647,  668,  630,  632,  633,  633,  633,
      633,  634,  424,  634,  635,  418,  635,  634,  617,  636,
      635,  636,  637,  657,  637,  636,  657,  638,  637,  638,
      648,  668,  634,  638,  639,  649,  639,  649,  413,  640,
      639,  640,  641,  637,  641,  640,  655,  642,  641,  642,

      643,  655,  643,  642,  657,  639,  643,  638,  663,  650,
      634,  650,  664,  410,  640,  641,  642,  651,  667,  651,
      649,  637,  641,  653,  652,  653,  652,  658,  663,  655,
      658,  650,  659,  639,  638,  660,  653,  664,  651,  661,
      659,  662,  640,  641,  642,  665,  667,  649,  662,  641,
      652,  666,  669,  406,  666,  663,  660,  670,  658,  650,
      661,  665,  670,  671,  664,  672,  651,  675,  659,  682,
      671,  677,  674,  380,  669,  670,  662,  679,  652,  674,
      679,  678,  666,  660,  675,  377,  672,  661,  665,  676,
      670,  682,  677,  376,  676,  680,  678,  681,  671,  684,

      680,  669,  670,  690,  681,  683,  684,  674,  679,  686,
      683,  675,  685,  672,  683,  812,  688,  812,  682,  677,
      690,  693,  676,  678,  686,  695,  687,  685,  680,  692,
      697,  685,  681,  687,  684,  688,  692,  696,  683,  695,
      693,  694,  683,  373,  694,  696,  701,  690,  698,  699,
      705,  686,  697,  702,  685,  696,  705,  696,  685,  368,
      699,  687,  688,  698,  692,  700,  695,  693,  701,  704,
      700,  704,  694,  696,  702,  704,  813,  707,  813,  697,
      804,  806,  696,  707,  696,  709,  700,  709,  699,  365,
      698,  709,  708,  708,  708,  701,  352,  347,  700,  708,

      711,  702,  706,  706,  706,  706,  711,  804,  806,  706,
      824,  346,  712,  700,  710,  710,  710,  710,  712,  336,
      827,  710,  713,  713,  713,  714,  714,  714,  714,  713,
      824,  717,  714,  715,  715,  715,  716,  717,  716,  826,
      715,  719,  716,  718,  718,  718,  718,  719,  827,  723,
      718,  720,  720,  720,  721,  723,  721,  824,  720,  724,
      721,  722,  722,  722,  722,  724,  826,  275,  722,  725,
      725,  725,  726,  726,  726,  726,  725,  270,  821,  726,
      727,  727,  727,  728,  728,  728,  821,  727,  819,  728,
      729,  729,  729,  729,  730,  819,  730,  729,  732,  731,

      730,  731,  269,  265,  732,  731,  733,  733,  733,  733,
      734,  261,  734,  733,  821,  736,  734,  735,  735,  735,
      735,  736,  737,  819,  735,  738,  738,  738,  737,  739,
      860,  739,  738,  815,  741,  739,  740,  740,  740,  740,
      741,  742,  810,  740,  810,  253,  744,  742,  743,  743,
      743,  743,  744,  860,  815,  743,  745,  745,  745,  746,
      746,  746,  746,  745,  250,  810,  746,  747,  747,  747,
      748,  748,  748,  750,  747,  750,  751,  748,  752,  750,
      860,  815,  751,  234,  752,  753,  753,  753,  753,  754,
      754,  754,  753,  810,  233,  229,  754,  755,  755,  755,

      755,  756,  757,  756,  755,  225,  221,  756,  757,  758,
      758,  758,  758,  759,  177,  168,  758,  151,  763,  759,
      760,  760,  760,  761,  763,  761,  146,  760,  764,  761,
      762,  762,  762,  762,  764,  828,  128,  762,  765,  765,
      765,  766,  766,  766,  766,  765,  772,  774,  766,  767,
      767,  767,  772,  774,  828,  125,  767,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  114,   98,  769,  769,  769,  770,  771,  770,  771,
       96,  828,  770,  771,  773,  773,  773,  773,  775,  775,
      775,  773,  776,  778,  776,  775,  825,   92,  776,  778,

      769,  769,  769,  769,  777,  777,  777,  777,  779,   88,
      825,  777,   85,   67,  779,  780,  780,  780,  784,  784,
      784,  784,  780,  787,  786,  784,  786,  769,  836,  787,
      786,  788,  788,  788,  788,  789,  816,  825,  788,  836,
      795,  789,  791,  791,  791,  792,  795,  792, 1006,  791,
       33,  792,  793,  793,  793,  793,  796,  816,  796,  793,
       27,   25,  796,  797,  798,  797,  798,  836,   23,  797,
      798,  799,  800,  799,  800, 1006,   19,  799,  800,  801,
      802,  801,  802,  817,  816,  801,  802,  808,  803,  808,
      803,  796,  820,  797,  803,  807,  809,  807,  809,  820,

      830,   18,  800,  818,  817,  803,  818,  829,  832,  833,
      799,  832,  835,  808,  839,  801,  802,  807,  796,  830,
      797,  834,  809,   17,  829,  835,  834,  820,  833,  800,
      838,  817,  845,  803,  818,  839,    6,  799,  840,  832,
      843,  808,  801,  802,  838,  807,  830,  841,  844,  845,
      809,  829,  835,  844,  834,  833,  842,  840,  846,  843,
      849,  841,  839,  842,  850,  853,  856,  849,  855,  863,
      853,  838,  857,  858,  861,  846,  845,  861,  862, 1007,
      850,  844, 1021,  863,  840,  856,  843,  866,  841,  864,
      855,  842,  858,  866,  857,  849,    0,  865,  853,  865,

      864,    0,  846,  865,  862,  861, 1007,  850,    0, 1021,
      863,    0,  856,  867,  867,  867,  867,  855,  868,  858,
      867,  857,    0,  873,  868,  869,  869,  869,  864,  873,
      875,  862,  869,  870, 1012,  870,  875,    0,  884,  870,
      871,  871,  871,  871,  884, 1012, 1024,  871,  874,  874,
      874,  874,  876,  876,  876,  874,  878,  878,  878,  876,
        0, 1024,    0,  878,  879,  879,  879,  879,  880,  880,
      880,  879,    0, 1012,    0,  880,  881,  881,  881,  881,
      882,  882,  882,  881,  883,    0,  883,  882, 1024,  886,
      883,  885,  885,  885,  885,  886, 1017,  891,  885,  887,

      887,  887,  888,  891,  888,    0,  887,  893,  888,  889,
      889,  889,  889,  893, 1144, 1017,  889,  892,  892,  892,
      892,  894,  894,  894,  892,  896,  896,  896,  894,    0,
        0,    0,  896,  897,  897,  897,  897,  898,  898,  898,
      897, 1144, 1017,    0,  898,  899,  899,  899,  899,  900,
      900,  900,  899,  901,    0,  901,  900,  904,  909,  901,
      903,  903,  903,  904,  909,    0,  903,  905,  905,  905,
      905,  906,    0,  906,  905,    0,    0,  906,  907,  907,
      907,  907,  908,    0,  908,  907,    0,    0,  908,  910,
      910,  910,  910,  911,  912,  911,  910,    0,    0,  911,

      912,  913,  913,  913,  913,  914,    0, 1028,  913,    0,
      919,  914,  915,  915,  915,  916,  919,  916, 1028,  915,
      922,  916,  917,  917,  917,  917,  922,    0,    0,  917,
      920,  920,  920,  920,  921, 1225,  921,  920,    0,  925,
      921,  923,  923,  923,  923,  925, 1028,    0,  923,  924,
      924,  924,  924,  926,  926,  926,  924,  927,    0, 1015,
      926,    0, 1225,  927,  928,  928,  928,  930,  930,  930,
        0,  928, 1037,  938,  930,  931,  931,  931,  931,  938,
     1032, 1015,  931,  932,  932,  932,  932,  933,  933,  933,
      932, 1032,    0, 1037,  933,  934,  934,  934,  934,  935,

      935,  935,  934,  936,  936,  936,  935,  937, 1015,  937,
      936, 1023,  940,  937,  939,  939,  939,  939,  940, 1032,
     1037,  939,  941,  941,  941,  942,  942,  942,  942,  941,
     1023,    0,  942,  943,  943,  943,  944,  944,  944,  944,
      943,  946,  945,  944,  945,    0,    0,  946,  945,  947,
      947,  947,  947,  948, 1039, 1048,  947, 1023,  953,  948,
      949,  949,  949,  950,  953,  950,    0,  949,  955,  950,
      951,  951,  951,  951,  955, 1048, 1039,  951,  954,  954,
      954,  954,  956,  956,  956,  954,  958,  958,  958,  956,
        0,    0,    0,  958,  959,  959,  959,  959,  960,  960,

      960,  959, 1048, 1039, 1133,  960,  961,  961,  961,  961,
      962,  962,  962,  961, 1134,    0,    0,  962,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963, 1133,    0,  963,  963,  963,  964,  965,  964,
      965,  966, 1134,  964,  965,    0,  968,  966,  967,  967,
      967,  967,  968, 1043,    0,  967,    0,    0,  969,  969,
      969,  963,  963,  963,  963,  969,  970, 1014,  970, 1043,
     1014,  973,  970,  971,  971,  971,  971,  973,    0,    0,
      971,  975,  974,  974,  974,  974,    0,  975,  963,  974,
      976,  976,  976,  978,  978,  978, 1043,  976, 1014,    0,

      978,  979,  979,  979,  979,  980,  980,  980,  979,    0,
        0,    0,  980,  981,  981,  981,  981,  982,  983,  982,
      981,    0,    0,  982,  983,  984,  984,  984,  984,  985,
        0,    0,  984,    0,  990,  985,  986,  986,  986,  987,
      990,  987,    0,  986,  992,  987,  988,  988,  988,  988,
      992,    0,    0,  988,  991,  991,  991,  991,  993,  993,
      993,  991,  995,  995,  995,  993, 1008,    0, 1008,  995,
      997,  997,  997,  997,  999, 1016,  999,  997, 1016, 1000,
      999, 1000, 1001, 1018, 1001, 1000, 1018, 1002, 1001, 1002,
        0, 1013, 1008, 1002, 1003,  999, 1003, 1004, 1013, 1004,

     1003, 1026, 1005, 1004, 1005, 1009, 1016, 1009, 1005, 1010,
     1025, 1010, 1027, 1000, 1018, 1026, 1029, 1025, 1004, 1027,
     1008, 1002, 1029,  999, 1031, 1003, 1013, 1033, 1009, 1030,
     1005,    0, 1010, 1035, 1030, 1033, 1034, 1044, 1031, 1035,
     1000, 1036, 1026, 1034, 1036, 1025, 1004, 1027, 1002, 1038,
     1029, 1042, 1003,    0, 1044, 1038, 1009, 1005, 1042, 1046,
     1010, 1049, 1030, 1033, 1045, 1031, 1046, 1035, 1045, 1047,
     1050, 1034, 1036, 1051, 1068,    0, 1047, 1050,    0, 1049,
     1068, 1044, 1071, 1038, 1071,    0, 1042, 1137, 1071, 1051,
     1052, 1052, 1052, 1052, 1046, 1143, 1045, 1052,    0, 1165,

     1054, 1054, 1054, 1137, 1047, 1050, 1049, 1054, 1056, 1056,
     1056, 1056, 1058, 1058, 1058, 1056, 1051, 1143, 1165, 1058,
     1060, 1060, 1060, 1060, 1062, 1062, 1062, 1060,    0,    0,
     1137, 1062, 1064, 1064, 1064, 1064, 1066, 1066, 1066, 1064,
     1070, 1070, 1070, 1066, 1143, 1165, 1074, 1070, 1072, 1072,
     1072, 1072, 1074, 1226, 1145, 1072, 1075, 1075, 1075, 1075,
     1076, 1145, 1076, 1075, 1154, 1077, 1076, 1077, 1078, 1079,
     1078, 1077, 1080, 1214, 1078, 1079, 1085, 1082, 1080, 1082,
     1226, 1154, 1085, 1082, 1083, 1083, 1083, 1083,    0, 1145,
     1214, 1083, 1086, 1086, 1086, 1086, 1157,    0,    0, 1086,

     1087, 1087, 1087, 1087, 1089, 1089, 1089, 1087, 1154, 1168,
        0, 1089, 1091, 1091, 1091, 1091, 1168, 1214, 1157, 1091,
     1093, 1093, 1093, 1093, 1095, 1095, 1095, 1093, 1097, 1097,
     1097, 1095,    0,    0,    0, 1097, 1099, 1099, 1099, 1099,
     1101, 1101, 1101, 1099, 1168, 1157,    0, 1101, 1103, 1103,
     1103, 1103, 1105, 1105, 1105, 1103,    0,    0,    0, 1105,
     1107, 1107, 1107, 1107, 1109, 1109, 1109, 1107,    0,    0,
        0, 1109, 1111, 1111, 1111, 1111, 1113, 1113, 1113, 1111,
        0,    0,    0, 1113, 1115, 1115, 1115, 1115, 1117, 1117,
     1117, 1115,    0,    0,    0, 1117, 1119, 1119, 1119, 1119,

     1121, 1121, 1121, 1119,    0,    0, 1140, 1121, 1123, 1123,
     1123, 1123, 1125, 1125, 1125, 1123, 1127,    0, 1127, 1125,
     1140, 1128, 1127, 1128, 1129, 1150, 1129, 1128, 1150, 1130,
     1129, 1130, 1131, 1127, 1131, 1130, 1141, 1132, 1131, 1132,
     1135, 1146, 1135, 1132, 1147, 1151, 1128, 1140, 1151, 1147,
     1152, 1141, 1155, 1152, 1158, 1155, 1150, 1160,    0, 1146,
        0, 1127, 1163, 1135, 1161, 1130, 1164, 1163, 1169, 1158,
     1193, 1164,    0, 1171, 1128, 1169, 1151, 1147, 1141, 1160,
     1171, 1152, 1172, 1155, 1177, 1161, 1146, 1182, 1172, 1194,
     1177, 1135, 1130, 1182,    0, 1163, 1158, 1195, 1193, 1164,

     1173, 1173, 1173, 1169, 1196, 1198, 1160, 1173, 1171, 1175,
     1175, 1175, 1161, 1179, 1179, 1179, 1175, 1194, 1195, 1198,
     1179, 1180, 1180, 1180, 1180, 1196, 1199,    0, 1180, 1188,
     1188, 1188, 1188, 1190, 1200, 1190, 1188, 1201, 1191, 1190,
     1191, 1192, 1202, 1192, 1191, 1195, 1198, 1192, 1206, 1203,
     1200, 1201, 1196, 1202, 1199, 1204, 1211, 1205, 1210, 1213,
     1207, 1208, 1190, 1212, 1206, 1207, 1213, 1211,    0, 1191,
     1203, 1205, 1210,    0, 1230, 1192, 1204, 1200, 1201, 1229,
     1208, 1202, 1243, 1231, 1212, 1218, 1218, 1218, 1243, 1190,
        0, 1206, 1218, 1207, 1213, 1211, 1191, 1203, 1205, 1210,

     1229, 1230, 1192, 1204, 1231, 1233, 1227, 1208, 1220, 1220,
     1220, 1212, 1222, 1227, 1222, 1220, 1243, 1223, 1222, 1223,
     1224, 1232, 1224, 1223, 1244, 1233, 1224, 1229, 1232, 1234,
     1235, 1231, 1238, 1235, 1241, 1239, 1234, 1240, 1248, 1238,
     1242, 1227, 1239, 1245, 1240, 1245, 1244, 1223, 1250, 1245,
     1241, 1242, 1233, 1252, 1253, 1259, 1232, 1248, 1261, 1260,
     1262, 1235, 1259, 1265, 1234, 1253, 1268, 1238, 1263, 1264,
     1239, 1265, 1240, 1244, 1223, 1250, 1260, 1241, 1252, 1242,
     1261, 1262, 1270, 1268, 1248, 1271, 1276, 1278, 1275, 1272,
     1259, 1275, 1290, 1253, 1278, 1263, 1264, 1279, 1270, 1265,

     1272,    0, 1276, 1260, 1271, 1252, 1280, 1261, 1262, 1281,
     1268, 1282,    0, 1279, 1285, 1286, 1282, 1288, 1287, 1275,
     1290, 1285, 1278, 1286, 1288, 1270, 1287, 1292, 1272, 1276,
        0, 1271,    0, 1280,    0,    0, 1281,    0,    0,    0,
     1279,    0,    0, 1286, 1282,    0, 1287,    0,    0, 1285,
     1286,    0, 1288, 1287,    0, 1292, 1298, 1298, 1298, 1298,
     1298, 1298, 1299, 1299, 1299, 1299, 1299, 1299, 1300, 1300,
     1300, 1300, 1300, 1300, 1301, 1301, 1301, 1301, 1301, 1301,
     1302, 1302, 1302, 1302, 1302, 1302, 1303, 1303, 1303, 1303,
     1303, 1303, 1304, 1304, 1304, 1304, 1304, 1304, 1305, 1305,

     1305, 1305, 1305, 1305, 1306, 1306, 1306, 1306, 1306, 1306,
     1307, 1307, 1307, 1307, 1307, 1307, 1308, 1308, 1308, 1308,
     1308, 1308, 1309, 1309, 1310,    0, 1310, 1310, 1311, 1311,
     1311, 1311, 1311, 1311, 1312, 1312, 1312, 1312, 1312, 1312,
     1313, 1313, 1313, 1313, 1313, 1313, 1314, 1314, 1314, 1314,
     1314, 1314, 1315, 1315, 1315, 1315, 1315, 1315, 1316, 1316,
     1316, 1316, 1316, 1316, 1317, 1317, 1317, 1317, 1317, 1317,
     1318, 1318, 1318, 1318,    0, 1318, 1319,    0, 1319, 1320,
        0, 1320, 1321, 1321, 1321, 1321, 1321, 1321, 1322, 1322,
     1322, 1322, 1322, 1322, 1323, 1323, 1323, 1323, 1323, 1323,

     1324, 1324, 1324, 1324, 1324, 1324, 1325, 1325, 1325, 1325,
     1325, 1325, 1326, 1326, 1326, 1326, 1326, 1326, 1327, 1327,
     1327, 1327, 1327, 1327, 1328, 1328, 1328, 1328, 1328, 1328,
     1329, 1329, 1329, 1329, 1329, 1329, 1330, 1330, 1330, 1330,
     1330, 1330, 1331, 1331, 1331, 1331, 1331, 1331, 1332, 1332,
     1332, 1332, 1332, 1332, 1333, 1333, 1333, 1333, 1333, 1333,
     1334, 1334, 1334, 1334, 1334, 1334, 1335, 1335, 1335, 1335,
     1335, 1335, 1336, 1336, 1336, 1336, 1336, 1336, 1337, 1337,
     1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338, 1338, 1338,
     1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340, 1340, 1340,

     1340, 1340, 1341, 1341, 1341, 1341, 1341, 1341, 1342, 1342,
     1342, 1342, 1342, 1342, 1343, 1343, 1343, 1343, 1343, 1343,
     1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345, 1345, 1345,
     1345, 1345, 1346, 1346, 1346, 1346, 1346, 1346, 1347, 1347,
     1347, 1347, 1347, 1347, 1348, 1348, 1348, 1348, 1348, 1348,
     1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350, 1350, 1350,
     1350, 1350, 1351, 1351, 1351, 1351, 1351, 1351, 1352, 1352,
     1352, 1352, 1352, 1352, 1353, 1353, 1353, 1353, 1353, 1353,
     1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355,
     1355, 1355, 1356, 1356, 1356, 1356, 1356, 1356, 1357, 1357,

     1357, 1357, 1357, 1357, 1358, 1358, 1358, 1358, 1358, 1358,
     1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360, 1360,
     1360, 1360, 1361, 1361, 1361, 1361, 1361, 1361, 1362, 1362,
     1362, 1362, 1362, 1362, 1363, 1363, 1363, 1363, 1363, 1363,
     1364, 1364, 1365, 1365, 1365, 1365, 1365, 1365, 1366, 1366,
     1366, 1366, 1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367,
     1368, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369, 1369,
     1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1371, 1371,
     1371, 1371, 1371, 1371, 1372, 1372, 1372, 1372, 1372, 1372,
     1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374, 1374, 1374,

     1374, 1374, 1375, 1375, 1375, 1375, 1375, 1375, 1376, 1376,
     1376, 1376, 1376, 1376, 1377, 1377, 1377, 1377, 1377, 1377,
     1378, 1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379, 1379,
     1379, 1379, 1380, 1380, 1380, 1380, 1380, 1380, 1381, 1381,
     1381, 1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382, 1382,
     1383, 1383, 1383, 1383, 1383, 1383, 1384, 1384, 1384, 1384,
     1384, 1384, 1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386,
     1386, 1386, 1386, 1386, 1387, 1387, 1387, 1387, 1387, 1387,
     1388, 1388, 1388, 1388, 1388, 1388, 1389, 1389, 1389, 1389,
     1389, 1389, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391,

     1391, 1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1392,
     1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394, 1395, 1395,
     1395, 1395, 1395, 1395, 1396, 1396, 1396, 1396, 1396, 1396,
     1397, 1397, 1397, 1397, 1397, 1397, 1398, 1398, 1398, 1398,
     1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400,
     1400, 1400, 1400, 1400, 1401, 1401, 1401, 1401, 1401, 1401,
     1402, 1402, 1402, 1402, 1402, 1402, 1403, 1403, 1403, 1403,
     1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404, 1405, 1405,
     1405, 1405, 1405, 1405, 1406, 1406, 1406, 1406, 1406, 1406,
     1407, 1407, 1407, 1407, 1407, 1407, 1408, 1408, 1408, 1408,

     1408, 1408, 1409, 1409, 1409, 1409, 1409, 1409, 1410, 1410,
     1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411, 1411, 1411,
     1412, 1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413,
     1413, 1413, 1414, 1414, 1414, 1414, 1414, 1414, 1415, 1415,
     1415, 1415, 1415, 1415, 1416, 1416, 1416, 1416, 1416, 1416,
     1417, 1417, 1417, 1417, 1417, 1417, 1418, 1418, 1418, 1418,
     1418, 1418, 1419, 1419, 1419, 1419, 1419, 1419, 1420, 1420,
     1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421, 1421,
     1422, 1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423,
     1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424, 1425, 1425,

     1425, 1425, 1425, 1426, 1426, 1427, 1427, 1427, 1427, 1427,
     1427, 1428, 1428, 1428, 1428, 1428, 1428, 1429, 1429, 1429,
     1429, 1429, 1429, 1430, 1430, 1430, 1430, 1430, 1430, 1431,
     1431, 1431, 1431, 1431, 1431, 1432, 1432, 1432, 1432, 1432,
     1432, 1433, 1433, 1433, 1433, 1433, 1433, 1434, 1434, 1434,
     1434, 1434, 1434, 1435, 1435, 1435, 1435, 1435, 1435, 1436,
     1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437, 1437, 1437,
     1437, 1438, 1438, 1438, 1438, 1438, 1438, 1439, 1439, 1439,
     1439, 1439, 1439, 1440, 1440, 1440, 1440, 1440, 1440, 1441,
     1441, 1441, 1441, 1441, 1441, 1442, 1442, 1442, 1442, 1442,

     1442, 1443, 1443, 1443, 1443, 1443, 1443, 1444, 1444, 1444,
     1444, 1444, 1444, 1445, 1445, 1445, 1445, 1445, 1445, 1446,
     1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447, 1447, 1447,
     1447, 1448, 1448, 1448, 1448, 1448, 1448, 1449, 1449, 1449,
     1449, 1449, 1449, 1450, 1450, 1450, 1450, 1450, 1450, 1451,
     1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452,
     1452, 1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454,
     1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455, 1455, 1456,
     1456, 1456, 1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457,
     1457, 1458, 1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459,

     1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460, 1461,
     1461, 1462, 1462, 1462, 1462, 1462, 1462, 1463, 1463, 1463,
     1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464, 1464, 1465,
     1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466, 1466, 1466,
     1466, 1467, 1467, 1467, 1467, 1467, 1467, 1468, 1468, 1468,
     1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469, 1469, 1470,
     1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471,
     1471, 1472, 1472, 1472, 1472, 1472, 1472, 1473, 1473, 1473,
     1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474, 1474, 1475,
     1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476, 1476, 1476,

     1476, 1477, 1477, 1477, 1477, 1477, 1477, 1478, 1478, 1478,
     1478, 1478, 1478, 1479, 1479, 1479, 1479, 1479, 1479, 1480,
     1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481, 1481, 1481,
     1481, 1482, 1482, 1482, 1482, 1482, 1482, 1483, 1483, 1483,
     1483, 1483, 1483, 1484, 1484, 1484, 1484, 1484, 1484, 1485,
     1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486, 1486,
     1486, 1487, 1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488,
     1488, 1488, 1488, 1489, 1489, 1489, 1489, 1489, 1489, 1490,
     1490, 1490, 1490, 1490, 1490, 1491, 1491, 1491, 1491, 1491,
     1491, 1492, 1492, 1492, 1492, 1492, 1492, 1493, 1493, 1493,

     1493, 1493, 1493, 1494, 1494, 1494, 1494, 1494, 1494, 1495,
     1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496, 1496,
     1496, 1497, 1497, 1497, 1497, 1497, 1497, 1498, 1498, 1498,
     1498, 1498, 1498, 1499, 1499, 1500, 1500, 1500, 1500, 1500,
     1500, 1501, 1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502,
     1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503, 1503, 1504,
     1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505, 1505,
     1505, 1506, 1506, 1506, 1506, 1506, 1506, 1507, 1507, 1507,
     1507, 1507, 1507, 1508, 1508, 1508, 1508, 1508, 1508, 1509,
     1509, 1509, 1509, 1509, 1509, 1510, 1510, 1510, 1510, 1510,

     1510, 1511, 1511, 1511, 1511, 1511, 1511, 1512, 1512,    0,
     1512, 1512, 1512, 1513, 1513, 1513, 1513, 1513, 1513, 1514,
     1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515, 1515,
     1515, 1516, 1516, 1516, 1516, 1516, 1516, 1517, 1517, 1517,
     1517, 1517, 1517, 1518, 1518, 1518, 1518, 1518, 1518, 1519,
     1519, 1519, 1519, 1519, 1519, 1520, 1520, 1520, 1520, 1520,
     1520, 1521, 1521, 1521, 1521, 1521, 1521, 1522, 1522, 1522,
     1522, 1522, 1522, 1523, 1523, 1523, 1523, 1523, 1523, 1524,
     1524, 1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525,
     1525, 1526, 1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527,

     1527, 1527, 1527, 1528, 1528, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest, lexer_string;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;




//  following are keywords starting with c
#line 2218 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10
#define state_scanompfixed 11
#define state_scanompfree 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 31 "lexer.l"


#line 2454 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1298 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5606 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 33 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 52 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 53 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 58 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 79 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 87 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 102 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 103 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 106 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 118 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 122 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 123 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENDTEAM");Y);            return ENDTEAM;           }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("INCLUDE");Y;);           return INCLUDE;           }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 91:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 219 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 108:
#line 224 "lexer.l"
case 109:
/* rule 109 can match eol */
#line 225 "lexer.l"
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 225 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 228 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 229 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 113:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 232 "lexer.l"
case 114:
YY_RULE_SETUP
#line 233 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 236 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 237 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 117:
YY_RULE_SETUP
#line 240 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 243 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 246 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 249 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 252 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 257 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 262 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 265 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 268 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 271 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 274 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 278 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 281 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 284 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 287 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 290 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 294 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 295 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 135:
YY_RULE_SETUP
#line 298 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       lexer_string = pline.get_value(std::string(yytext));
		       D(O("QSTRING");O(lexer_string);Y;);
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 136:
/* rule 136 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 323 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 329 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 336 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 343 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 350 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 352 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 353 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 355 "lexer.l"
ECHO;
	YY_BREAK
#line 3404 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_scanfixpre):
case YY_STATE_EOF(state_scanompfixed):
case YY_STATE_EOF(state_scanompfree):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1298 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1298 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1297);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 355 "lexer.l"



void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}
std::string lexer_getstring()
{
   return lexer_string;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


