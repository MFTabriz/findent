#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1249] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  132,  130,  129,  130,  126,  125,  130,  127,
      128,   16,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,    4,    5,    2,    3,
        8,    9,    6,    7,   15,   14,   10,   12,   11,   13,
        1,  131,  131,  104,  131,  104,  131,  131,  131,  131,
      131,  131,  131,  122,  122,  121,  122,  122,  111,  122,
      122,  123,    0,  125,    0,    0,   16,   17,   16,    0,
        0,    0,    0,    0,    0,    0,    0,   32,    0,    0,

        0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   85,    0,    0,    0,  104,    0,   92,
        0,    0,    0,   92,    0,    0,    0,  104,    0,    0,
        0,    0,    0,    0,   94,    0,    0,    0,    0,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  111,    0,    0,    0,    0,    0,
      116,  124,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   33,    0,    0,    0,    0,    0,   49,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   92,    0,    0,    0,   92,    0,    0,    0,
       92,    0,    0,    0,   92,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,   96,    0,    0,    0,    0,    0,    0,   94,    0,
        0,    0,   96,    0,    0,    0,   92,    0,    0,    0,
        0,    0,    0,   92,    0,    0,   92,    0,   91,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
        0,    0,    0,    0,   24,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   41,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       64,    0,    0,    0,    0,    0,    0,    0,    0,   78,
       79,    0,    0,    0,    0,   86,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
        0,   98,    0,    0,   92,    0,   92,   92,    0,   92,
        0,    0,   92,   92,   92,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
        0,    0,    0,   93,    0,    0,   99,    0,   94,    0,
        0,   96,    0,   98,   94,    0,   94,  104,    0,   96,

        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
       92,    0,    0,    0,    0,   91,    0,    0,    0,   91,
        0,    0,    0,    0,    0,  102,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  117,    0,    0,
        0,   21,    0,    0,   27,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   48,
        0,    0,    0,   53,    0,    0,    0,    0,    0,    0,
        0,   63,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   88,    0,   90,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   94,    0,   92,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   93,    0,   93,   93,    0,   93,    0,   94,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   91,    0,
       91,   91,    0,   91,    0,    0,    0,    0,    0,    0,
       94,    0,    0,    0,   96,    0,    0,    0,  101,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  115,  114,    0,    0,    0,    0,    0,    0,    0,
       20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   65,    0,   68,    0,    0,    0,   72,    0,    0,
        0,    0,    0,    0,   89,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   91,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   94,  102,   94,    0,   96,    0,    0,    0,
        0,   94,    0,    0,    0,   96,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  113,    0,    0,  119,    0,
        0,    0,    0,    0,    0,    0,    0,   28,   29,    0,
        0,    0,    0,    0,    0,    0,   36,    0,    0,    0,
        0,    0,   50,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   61,    0,    0,   69,    0,   71,    0,    0,
        0,    0,   77,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,    0,    0,    0,    0,
       92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,    0,    0,    0,    0,   94,    0,
        0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
        0,   95,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   93,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   93,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   91,    0,    0,    0,    0,
       91,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   98,    0,    0,    0,    0,   94,    0,  101,
        0,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  118,    0,    0,    0,    0,    0,    0,
       30,   31,    0,   37,    0,    0,    0,    0,    0,    0,
       45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   62,   66,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   92,    0,   92,    0,   92,    0,
       92,    0,   97,    0,   94,    0,   97,    0,   94,    0,
       94,    0,    0,    0,   97,    0,    0,   95,    0,   95,
        0,    0,   94,    0,    0,   97,    0,    0,    0,   93,
        0,   93,    0,   93,    0,   97,    0,   94,    0,   93,
        0,   92,    0,   92,    0,   91,    0,   91,    0,   91,
        0,   91,    0,   97,    0,   94,    0,   97,    0,   94,
        0,   97,    0,   94,    0,   97,    0,   94,    0,    0,
        0,    0,    0,    0,    0,    0,  120,    0,   19,   22,
        0,   25,    0,    0,    0,    0,    0,   40,   43,    0,

        0,    0,   51,    0,    0,   55,    0,    0,   58,    0,
        0,   70,    0,    0,    0,   76,   80,    0,    0,   83,
        0,    0,    0,   94,    0,  100,    0,   94,    0,    0,
       97,    0,   94,    0,   95,  103,   94,    0,   97,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   57,    0,    0,    0,
        0,    0,   81,   82,   84,    0,   94,    0,   94,    0,
        0,    0,    0,    0,   23,    0,    0,    0,    0,    0,
        0,    0,   47,   52,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   26,    0,   34,    0,    0,

       44,   46,   54,   56,   60,    0,    0,    0,    0,  109,
      110,    0,   35,   38,    0,   59,    0,    0,    0,    0,
        0,    0,    0,   75,    0,    0,    0,    0,    0,   39,
       73,    0,    0,    0,    0,   74,    0,    0,   18,    0,
        0,    0,  105,    0,  106,  107,  108,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,   14,    1,    1,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    1,    1,
       17,    1,   18,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       28,   35,   36,   37,   38,   39,   40,   41,   42,   28,
       43,    1,   44,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   28,   55,   56,   57,   58,
       59,   60,   28,   61,   62,   63,   64,   65,   66,   67,
       68,   28,    1,   69,    1,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[70] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    1,    4,    5,    1,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_uint16_t yy_base[1477] =
    {   0,
        0,   69,  138,  207,  274, 2644,   16,   18,   17,   19,
       21,   22,   45,   46,   88,  115, 2627, 2619, 2603,  338,
       31,  157, 2587, 5200, 5200,   26, 5200, 2571, 2561, 5200,
     5200,   43,  210,   36,  372,   74,  171,  215,  212,  173,
      221,  223,   80,  217,  313,   83, 5200, 5200, 5200, 5200,
     5200, 5200, 5200, 5200, 5200, 5200, 5200, 5200, 5200, 5200,
     5200, 5200, 2565, 5200,   37,   97,  433,   44,  114,  162,
      502,  167,  570, 5200,  106, 5200,  262,  186,  262,  350,
     2548, 5200,   53, 2550, 2541,    0, 2548,    0,  108,  226,
      229,  240,  302,  222,  287,  346,  341,  512,  335,  345,

      284,  357, 2530,  359,  333,  374,  405,  347,  349,  436,
      219,  440,  267, 2529,  398,  443, 2541, 5200,  190,   49,
      123,  459,  191,  168,  126,  467,  408,  193,  638,  165,
      470,  486,  707,  177, 2525,  420,  527,  489,  535, 2527,
      323,  552,  518,  776,  561,  587,  579,  560,  538,  476,
      611,  655,  447,  659,  499, 2498,  551,  459,  664,  470,
      676, 5200,  404,  642,  546,  535,  564,  669,  561,  711,
      712,  725,  736,  651,  644,  577,  679,  830,  737,  739,
      716,  718,  784,  717,  781,  791,  785,  721,  783,  796,
      786,  812,  798,  788,  807,  681,  539,  754,  273,  595,

      689,  615, 2506,  822,  733,  895, 2499,  680,  903,  738,
     2487,  670,  627,  813, 2490, 2490,  880,  751,  911,  920,
      936,  944,  989,  856,  948,  951,  407,  879,  963,  966,
      974, 2469,  892, 1006, 2453,  907,  952,  978, 5200, 1010,
     1013, 1021, 2448, 1018, 1032, 1035, 2432, 1036, 1044, 1052,
     2424, 2425, 1056, 5200, 1060, 1068, 2394, 1071,  491, 1057,
     1079, 1088, 1104, 1105, 1113, 1112, 1120, 1125, 1134, 1135,
     1144, 1155,  202, 1115,  783, 5200,  859, 1169, 1174, 1027,
      924, 1027, 1138, 1095, 1167,  825,  926,  928,  856, 1139,
     1009,  917, 1087, 1111, 1168, 1164, 1172, 1174, 1185, 1051,

     1184, 1181, 1187, 1205, 1202, 1189, 1217, 1186, 1218, 1211,
     2355, 1229, 1215, 1231, 1248, 1241, 1242, 1226, 1249, 2351,
     2342, 1252, 1253, 1244, 1264, 2323, 1272, 1270, 1299, 1117,
     1312, 1287, 1303, 1319, 1327, 1316, 1335, 1324, 2311, 1339,
     1343, 2313, 1346, 1348, 5200, 1356, 2311, 5200, 1359, 2302,
     2283, 1367, 5200, 2260, 5200, 1369, 1364, 1377, 1374, 1385,
     1387, 1395, 1382, 1403, 1412, 1428, 1436, 1481, 1439, 1392,
     1448, 1455, 1463, 1400, 1471, 1440, 1498, 1501, 1460, 2246,
     1509, 1511, 1524, 2198, 1468, 1532, 2156, 1506, 5200, 1536,
     1544, 2052, 1432, 5200, 5200, 1552, 5200, 2015, 1555, 1966,

     1514, 1559, 1567, 1564, 1575, 1578, 1586, 1965, 5200, 1590,
     5200, 1593, 1594, 1602, 1605, 1958, 1613, 1615, 1623, 1949,
     1610, 1631, 1640, 1656, 1657,  695, 1620, 1665, 1668, 1673,
     1683, 1684, 1691, 1692, 1699, 1708, 1709, 1721, 1226, 1267,
     1343, 1348, 1362, 1701, 1736, 1457, 1561, 5200, 1704, 1605,
     1683, 1725, 1656, 1737, 1748, 1716, 1733, 1740, 1388, 1435,
     1752, 1753, 1749, 1623, 1550, 1751, 1765, 1762, 1764, 1935,
     1768, 1773, 1767, 1934, 1770, 1774, 1776, 1794, 1795, 1682,
     1796, 1898, 1798, 1766, 1806, 1814, 1815, 1797, 1822, 1825,
     1832, 1824, 1820, 1833, 1837, 5200, 1843, 1869, 1858, 1712,

     1866, 1743, 1528,  740, 1885, 1881, 1889, 1878, 1540, 1893,
     1904, 1896, 5200, 1900, 5200, 1907, 1849, 1915, 1912, 1920,
     1082, 1923, 1877, 1927, 1874, 1931, 1934, 1937, 1940, 1943,
     1954, 1957, 1960, 1944, 1971, 1351, 1975, 1873, 1979, 1961,
     1983, 1908, 1986, 1870, 1990, 1862, 1994, 1997, 2001, 1859,
     2004, 5200, 2007, 1821, 5200, 2010, 1789, 2014, 5200, 2016,
     1740, 2020, 1725, 2024, 2027, 2031, 2034, 2037, 2038, 2046,
     2049, 2041, 2050, 2057, 1687, 2061, 1677, 2065, 5200, 2068,
     1670, 5200, 2071, 1633, 2076, 2092, 2093, 2096, 2104, 2101,
     1622, 2109, 2051, 2112, 1625, 1607, 2120, 2123,  759, 2124,

     2132, 2135, 2138, 2143, 2146, 2151, 2154, 2159, 2162, 2167,
     1641, 5200, 5200, 1793, 2068, 2171, 2127, 2178, 2185, 2137,
     1593, 2084, 2123, 2170, 2172, 2174, 2163, 2179, 2182, 2186,
     2171, 2166, 2190, 2197, 2200, 2199, 1584, 2214, 2210, 2213,
     2222, 2225, 2228, 2232, 2226, 2235, 2242, 2252, 2256, 2254,
     2236, 1570, 2250, 1559, 2244, 2262, 2268, 2276, 2273, 2272,
     2279, 2298, 2277, 2285, 1536, 2323, 2322, 2340, 2331, 2348,
     2350, 2360, 2351, 2363, 2371, 2374, 2382, 2384, 2379, 2392,
     2389, 2400, 2402, 2410, 2397, 2407, 2418, 2421, 2429, 2431,
     2439, 2442, 2447, 2446, 2455, 2458, 2466, 2463, 2470, 2474,

     2477, 2485, 2482, 2489, 2497, 2494, 2505, 2508, 2516, 2519,
     5200, 2521, 2524, 2526, 2534, 2538, 2546, 2549, 2550, 2558,
     2561, 2569, 2571, 2579, 2566, 2576, 2587, 2590, 2598, 5200,
     2607, 2623, 2624, 2594, 2632, 2595, 2636, 2639, 2651, 2640,
     2654, 2662, 5200, 1546, 5200, 2665, 1517, 2670, 2669, 2678,
     2681, 1512, 2689, 2691, 2699, 1503, 2686, 2702, 2707, 2710,
     2715, 2718, 2723, 2726, 2289, 5200, 2298, 2734, 2695, 2735,
     2366, 2402, 2468, 2717, 2642, 2725, 2430, 1462, 1454, 2714,
     2736, 2567, 2273, 2709, 2726, 2730, 1438, 2748, 2739, 2742,
     2630, 2752, 1431, 2753, 2762, 2770, 2765, 2780, 2772, 2781,

     2777, 2782, 1416, 2785, 2788, 1394, 2795, 1360, 2796, 2797,
     2801, 2802, 1337, 2803, 2807, 2798, 2808, 2828, 2842, 2819,
     2867, 2845, 2871, 2847, 2881, 1330, 2858, 2889, 2878, 2893,
     5200, 2897, 2905, 2909, 2917, 2921, 2924, 2925, 2933, 2936,
     2944, 2946, 2954, 1329, 2941, 2962, 2951, 2966, 5200, 2970,
     2978, 2982, 2990, 2994, 2997,  853, 3004, 3001, 3012, 3015,
     3023, 3026, 3002, 3034, 3037, 3038, 3046, 3049, 3057, 3059,
     3067, 1306, 3054, 3075, 3078, 3064, 3086, 3094, 3083, 3098,
     3101, 3109, 5200, 3112, 3120, 3128, 3132, 3140, 3144, 3148,
     3151, 3117, 3159, 3156, 3167, 3170, 3178, 3181, 3186, 3185,

     3194, 3197, 3205, 3207, 3215, 1290, 3202, 3223, 3212, 3227,
     5200, 3231, 3239, 3243, 3251, 3255, 3264, 3280, 3281, 3284,
     3292, 3289, 3301, 3297, 3309, 1289, 3312, 3320, 3317, 3328,
     5200, 3332, 3340, 3344, 3352, 3355, 3356, 3364, 3367, 3375,
     3377, 3385, 1265, 3372, 3393, 3382, 3397, 5200, 3401, 1204,
     3409, 5200, 3412, 3417, 3420, 3425, 3428, 3433, 2677, 2680,
     3405, 3104, 3115, 5200, 2861, 3059, 2843, 2841, 2927, 3400,
     1192, 1159, 2843, 5200, 3188, 3206, 3427, 3411, 3429, 3234,
     3431, 3423, 3419, 3438, 3444, 3441, 3439, 3450, 2915, 3454,
     3456, 1154, 1146, 3467, 3465, 3469, 3484, 3482, 3483, 3177,

     2985, 3485, 3493, 3509, 1141, 3534, 5200, 3537, 1070, 3545,
     5200, 3553, 1045, 3557, 5200, 3565, 1023, 3569, 5200, 3484,
     1011, 3573, 3521, 3581, 1012, 3507, 3589, 3592, 3597, 3600,
     3512, 3541,  994, 3605, 3613,  981, 3578, 3621, 3629,  969,
     3633, 5200, 3641,  968, 3649,  923, 3653, 5200, 3657, 5200,
     3665,  914, 3669, 5200, 3677,  913, 3681, 5200, 3689,  898,
     3693, 5200, 3701,  889, 3705, 5200, 3713,  881, 3717, 5200,
     3725,  869, 3729, 5200, 3737,  858, 3741, 5200, 3744, 3749,
     3752, 3757, 3760, 2357, 3116, 3625, 5200, 3631,  824,  811,
     3583,  787, 3649, 2995, 3529, 3740, 3743,  745,  671, 3732,

     3751, 3756,  660, 3752, 3757,  611, 3661, 3761,  606, 3763,
     3767,  603, 3765, 3766, 3764,  586,  552, 3625, 3772,  519,
     3773, 3803, 3806, 5200, 3817,  529, 3825, 5200, 3829, 3837,
      494, 3826,  483,  482,  462,  448, 5200, 3845,  425, 3848,
     3853, 3480, 3526, 3808, 3827, 3836, 3794, 3843, 3839, 3845,
     3847, 3849, 3844, 3851, 3857, 3852,  384, 3861, 3866, 3860,
     3880, 3869,  376,  363,  360, 3922, 5200, 3930, 5200, 3913,
     3932, 3250, 3522, 3888,  353, 3890, 3679, 3892, 3898, 3920,
     3924, 3927,  332,  311, 3926, 3928, 3934, 3936, 3938, 3942,
     3943, 3957,  299,  291, 3945,  286, 3926,  276, 3954, 3956,

      255,  243,  231,  181,  163, 3963, 3969, 3959, 3951, 3943,
     3956, 3980, 5200,  121, 3982,  118, 3977, 3983, 3984, 3967,
     3974, 4001, 4008,  111, 3989, 4010, 3985, 3988, 4009,   89,
       88, 4013,   83,   53, 4027,   21, 3999, 4000,    7, 4022,
     4028, 4013, 5200, 4025, 5200, 5200, 5200, 5200, 4086, 4091,
     4096, 4101, 4106, 4111, 4116, 4121, 4126, 4128, 4132, 4137,
     4142, 4147, 4152, 4157, 4162, 4167, 4172, 4175, 4178, 4182,
     4187, 4192, 4197, 4202, 4207, 4212, 4217, 4222, 4227, 4232,
     4237, 4242, 4247, 4252, 4257, 4262, 4267, 4272, 4277, 4282,
     4287, 4292, 4297, 4302, 4307, 4312, 4317, 4322, 4327, 4332,

     4337, 4342, 4347, 4352, 4357, 4362, 4367, 4372, 4377, 4382,
     4387, 4392, 4394, 4399, 4404, 4409, 4414, 4419, 4424, 4429,
     4434, 4439, 4444, 4449, 4454, 4459, 4464, 4469, 4474, 4479,
     4484, 4489, 4494, 4499, 4504, 4509, 4514, 4519, 4524, 4529,
     4534, 4539, 4541, 4546, 4551, 4556, 4561, 4566, 4571, 4576,
     4581, 4586, 4591, 4596, 4601, 4606, 4611, 4616, 4621, 4626,
     4631, 4636, 4641, 4646, 4651, 4656, 4661, 4666, 4671, 4676,
     4681, 4686, 4691, 4693, 4698, 4703, 4708, 4713, 4718, 4723,
     4728, 4733, 4738, 4743, 4748, 4753, 4758, 4763, 4768, 4773,
     4778, 4783, 4788, 4793, 4798, 4803, 4808, 4813, 4818, 4823,

     4828, 4833, 4838, 4843, 4848, 4853, 4858, 4863, 4865, 4870,
     4875, 4880, 4885, 4890, 4895, 4900, 4905, 4910, 4915, 4920,
     4925, 4930, 4935, 4940, 4945, 4950, 4955, 4960, 4965, 4970,
     4975, 4980, 4985, 4990, 4995, 5000, 5005, 5010, 5015, 5020,
     5025, 5030, 5035, 5040, 5045, 5050, 5052, 5057, 5062, 5067,
     5072, 5077, 5082, 5087, 5092, 5097, 5102, 5107, 5112, 5117,
     5122, 5127, 5132, 5137, 5142, 5147, 5152, 5157, 5162, 5167,
     5172, 5177, 5182, 5187, 5192, 5194
    } ;

static yyconst flex_int16_t yy_def[1477] =
    {   0,
     1249, 1249, 1250, 1250,    2,    5, 1251, 1251, 1252, 1252,
     1253, 1253, 1253, 1253, 1253, 1253, 1254, 1254, 1255, 1256,
     1257, 1257, 1248, 1248, 1248, 1248, 1248, 1248, 1258, 1248,
     1248, 1259, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1260, 1248, 1261, 1262, 1263, 1264, 1265, 1266,
     1263, 1261, 1265, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1258, 1267, 1268, 1269, 1259, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,

     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1260, 1248, 1270, 1271,
     1272, 1273, 1262, 1271, 1274, 1275, 1276, 1271, 1277, 1278,
     1279, 1280, 1277, 1278, 1281, 1282, 1283, 1284, 1284, 1285,
     1286, 1284, 1287, 1288, 1276, 1276, 1276, 1276, 1276, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1248, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1289, 1290, 1291, 1271, 1292,

     1285, 1290, 1281, 1293, 1291, 1291, 1285, 1293, 1291, 1274,
     1281, 1294, 1275, 1275, 1285, 1294, 1295, 1296, 1297, 1298,
     1299, 1300, 1298, 1296, 1301, 1299, 1271, 1302, 1303, 1300,
     1300, 1285, 1304, 1300, 1281, 1248, 1301, 1301, 1248, 1301,
     1297, 1297, 1285, 1301, 1297, 1305, 1285, 1306, 1305, 1305,
     1285, 1307, 1306, 1248, 1306, 1305, 1285, 1308, 1271, 1309,
     1310, 1311, 1312, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1248, 1248, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,

     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1314, 1315,
     1316, 1315, 1317, 1316, 1316, 1317, 1316, 1318, 1281, 1307,
     1285, 1285, 1317, 1317, 1248, 1317, 1285, 1248, 1316, 1285,
     1319, 1319, 1248, 1285, 1248, 1320, 1321, 1322, 1321, 1323,
     1322, 1322, 1323, 1322, 1324, 1325, 1326, 1324, 1325, 1327,
     1328, 1326, 1326, 1329, 1326, 1323, 1323, 1323, 1327, 1281,
     1330, 1328, 1328, 1285, 1330, 1328, 1285, 1329, 1248, 1329,
     1326, 1285, 1248, 1248, 1248, 1323, 1248, 1285, 1322, 1285,

     1331, 1332, 1331, 1332, 1332, 1331, 1331, 1307, 1248, 1332,
     1248, 1333, 1334, 1335, 1334, 1281, 1336, 1335, 1335, 1285,
     1336, 1335, 1337, 1338, 1338, 1339, 1340, 1341, 1342, 1342,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1248, 1248,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1248, 1343, 1343, 1344, 1345,

     1346, 1345, 1347, 1346, 1346, 1347, 1346, 1347, 1347, 1347,
     1346, 1307, 1248, 1347, 1248, 1348, 1349, 1350, 1349, 1351,
     1350, 1350, 1351, 1350, 1351, 1351, 1351, 1350, 1348, 1352,
     1353, 1348, 1352, 1354, 1355, 1353, 1353, 1356, 1353, 1354,
     1357, 1355, 1355, 1357, 1355, 1356, 1356, 1353, 1351, 1357,
     1357, 1248, 1357, 1285, 1248, 1355, 1285, 1356, 1248, 1358,
     1359, 1358, 1359, 1359, 1358, 1359, 1358, 1360, 1361, 1362,
     1361, 1363, 1362, 1362, 1363, 1362, 1363, 1363, 1248, 1363,
     1285, 1248, 1362, 1285, 1364, 1365, 1365, 1366, 1367, 1366,
     1368, 1369, 1367, 1367, 1285, 1369, 1367, 1370, 1371, 1372,

     1373, 1370, 1370, 1348, 1348, 1348, 1348, 1348, 1348, 1370,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1248, 1248, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1375, 1376, 1377, 1376, 1378,
     1377, 1377, 1378, 1378, 1378, 1377, 1378, 1379, 1380, 1381,
     1380, 1382, 1381, 1381, 1382, 1382, 1382, 1381, 1382, 1383,
     1384, 1383, 1385, 1386, 1387, 1388, 1388, 1389, 1386, 1390,

     1387, 1387, 1390, 1389, 1388, 1390, 1390, 1387, 1389, 1390,
     1248, 1391, 1392, 1392, 1391, 1392, 1391, 1393, 1394, 1395,
     1394, 1396, 1395, 1395, 1396, 1396, 1396, 1395, 1396, 1248,
     1397, 1398, 1398, 1399, 1400, 1399, 1401, 1400, 1400, 1401,
     1401, 1401, 1248, 1402, 1248, 1400, 1402, 1403, 1404, 1405,
     1404, 1406, 1407, 1405, 1405, 1402, 1407, 1408, 1403, 1408,
     1408, 1408, 1408, 1408, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1248, 1248, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1410, 1411,
     1412, 1411, 1413, 1412, 1412, 1402, 1413, 1412, 1413, 1413,
     1248, 1413, 1412, 1413, 1412, 1413, 1408, 1414, 1415, 1414,
     1416, 1415, 1415, 1402, 1416, 1415, 1416, 1416, 1248, 1416,
     1415, 1416, 1415, 1416, 1417, 1418, 1417, 1419, 1420, 1421,
     1421, 1422, 1423, 1424, 1425, 1426, 1427, 1426, 1428, 1427,
     1427, 1402, 1428, 1427, 1429, 1430, 1429, 1429, 1430, 1430,
     1428, 1428, 1248, 1428, 1427, 1429, 1428, 1427, 1430, 1428,
     1431, 1432, 1431, 1432, 1432, 1431, 1432, 1431, 1433, 1434,

     1435, 1434, 1436, 1435, 1435, 1402, 1436, 1435, 1436, 1436,
     1248, 1436, 1435, 1436, 1435, 1436, 1437, 1438, 1438, 1439,
     1440, 1439, 1441, 1440, 1440, 1402, 1441, 1440, 1441, 1441,
     1248, 1441, 1440, 1441, 1440, 1442, 1443, 1444, 1443, 1445,
     1444, 1444, 1402, 1445, 1444, 1445, 1445, 1248, 1445, 1402,
     1444, 1248, 1446, 1442, 1446, 1446, 1446, 1446, 1248, 1248,
     1248, 1248, 1248, 1248, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1248, 1248, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,

     1447, 1447, 1447, 1448, 1402, 1449, 1248, 1448, 1402, 1449,
     1248, 1450, 1402, 1451, 1248, 1450, 1402, 1451, 1248, 1452,
     1453, 1454, 1455, 1455, 1402, 1456, 1455, 1457, 1457, 1457,
     1458, 1459, 1460, 1461, 1461, 1402, 1454, 1461, 1462, 1402,
     1463, 1248, 1462, 1402, 1464, 1402, 1465, 1248, 1463, 1248,
     1466, 1402, 1467, 1248, 1468, 1402, 1469, 1248, 1468, 1402,
     1469, 1248, 1470, 1402, 1471, 1248, 1470, 1402, 1471, 1248,
     1472, 1402, 1473, 1248, 1472, 1402, 1473, 1248, 1474, 1475,
     1474, 1475, 1475, 1248, 1248, 1248, 1248, 1476, 1476, 1476,
     1476, 1476, 1476, 1248, 1476, 1476, 1476, 1476, 1476, 1476,

     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1454, 1454, 1248, 1454, 1402, 1456, 1248, 1456, 1455,
     1402, 1458, 1460, 1460, 1460, 1402, 1248, 1461, 1402, 1474,
     1474, 1248, 1248, 1476, 1476, 1476, 1248, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1454, 1248, 1456, 1248, 1474,
     1475, 1248, 1248, 1476, 1476, 1476, 1248, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1475, 1248, 1248, 1476, 1476, 1248, 1476, 1476, 1476,

     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1248,
     1248, 1476, 1248, 1476, 1476, 1476, 1476, 1476, 1476, 1248,
     1248, 1476, 1476, 1476, 1476, 1476, 1248, 1248, 1476, 1476,
     1476, 1476, 1248, 1248, 1476, 1476, 1248, 1248, 1476, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248,    0, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,

     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,

     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248
    } ;

static yyconst flex_uint16_t yy_nxt[5270] =
    {   0,
       24,   24,   25,   26,   24,   24,   24,   24,   24,   27,
       24,   24,   24,   24,   28,   24,   24,   24,   48,   52,
       48,   52,   86,   56,   56,   49,   50,   49,   50,   82,
       57,   57,   75,   76,   75,   77,   86,   58,   58,  120,
       83,  121,   30,   24,   24,  122,  135,   56,   56,   87,
       88,   86,  136,  200,   57,   57,   82,  201,   86,   53,
       54,   53,   54,   59,   59,   92, 1238,   83,   24,   24,
       24,   31,   26,   24,   24,   24,   24,   24,   27,   24,
       24,   24,   24,   28,   24,   24,   24,   59,   59,   86,
       56,   92,   60,   60,   60,   86, 1237,   57,   86,  124,

       60,  125,  110,   86,   86,  126,   98,  150,  116,  150,
      151,   30,   24,   24,   87,   88,  128,   56,  130,   60,
       60,   60,  137,   86,   57,  203,   86,   60,  211,  110,
       59,  204,   98,   86,  212,  116,   86,   24,   24,   24,
       25,   26,   24,   24,   24,   24,   24,   27,   24,   24,
       24,   24,   28,   24,   24,   24,   60,   59,   78,   76,
       78,   77,   79,  139,  140,  139,  141,  135,   80,  120,
      142,  121,  200,  225,   81,  122,  201,   80,   86,  135,
       30,   24,   24,   60,  143,  225,   86,  154,   86,  154,
      151,  155,  120,  124,  197,  125,   86,  200,  198,  126,

       99,  201,  100,  156,   80,  106,   24,   24,   24,   31,
       26,   24,   24,   24,   24,   24,   27,   24,   24,   24,
       24,   28,   24,   24,   24,   86,   99,   86,  100,   90,
       86,  106,   86,  439,   86,  103,   86,   86,   86,  111,
      167,   86,  104,  105,   86,   91,   86,  101,  191,   30,
       24,   24,  102,  107,  112,   86,   90,  108,   86,  439,
      109,  163,  103,  152,  164,  152,  111,  167,  104,  105,
       86,   91,  165,  101,  191,   24,   25,  200,  102,  107,
      112,  201,   86,  108,  157,  153,  109,  163,  158,  193,
      164,   86,   33,   34,   35,   36,   37,   38,  165,   86,

       39,   86,   86,   40,   41,  168, 1211,   42,   43,   44,
       45,  157,  153,   46, 1210,  158,  193,   86,  181,   33,
       34,   35,   36,   37,   38,  254,   86,   39,   86,   40,
       41,  255,  168,   42,   43,   44,   45,  166,  113,   46,
       66,   67,   68,   69,  181,  114,   70,   86,   86,   69,
       86,  159,   71,  159,  115,   72,   86,  176,   73,   69,
       86,   86,   86,  166,   86,  113,  178,  171,   86,  184,
      177,  114,   86,  160,   86,   86,  169,  170,   86,  187,
      115,  179,  180,  188,  176,   73,   69,   86,  182,   86,
       93,   86,  183,  178,  171,  184,  177,   94,  185,   86,

      160,   95,  169,  170,   96,  187,   97,  179,  180,  188,
      128,  200,  218,   86,  182,  201,  219,   93,  183,   86,
       86,  238,  239,  238,   94,  185,  186,   95,  240,  252,
       96,  194,   97,  127,  127,  128,  129,  130,  127,  127,
      281,  132,  127,  127,  127,  127,  127,  133,  127,  127,
      127,   86,  252,  186,  189,   86,  190,  194,   86,  192,
      206,  207,  206,  208, 1135,  195,  281,  209,  214,  215,
      214,  216,  227,  273,  228,  127,  127,  150,  229,  150,
      151,  189,  276,  190, 1135, 1135,  192,  231,  232,  231,
      233,  247,  195,  248,  234,  200,  277,  249,  252,  201,

      273,  127,  127,  127,  128,  133,  130,  127,  127,  276,
      137,  127,  127,  127,  127,  127,  133,  127,  127,  127,
      259,  157,  260,  277,  172,  158,  261,   86,  242,  243,
      242,  244,  173,  252,   86,  245,  250,  140,  250,  248,
      128,  203,  218,  249,  127,  127,  219,  333,  157,  174,
       86,  175,  158,  256,  257,  256,  248,  285,  272,  173,
      249,   86,  128,  128,  218,  218,  284,   86,  219,  219,
      127,  144,  128,  144,  130,  174,   86,  175,  137,   86,
      274,  128,  275,  218,  285,  272,  271,  219,  145,  128,
      264,  218,   86,  284,  288,  219,  265,  339,  286,  146,

      268,   86,  147,  340,  148,  266,  274,  296,  275,  269,
      270,  149,  152,  271,  152,  145,  264,  203,   86,  267,
      288,   86,  265,  333,  286,  146,   86,  268,  147,  354,
      148,  216,  266,  296,  153,  269,  270,  149,  217,  217,
      128,  220,  218,  217,  217,  267,  222,  217,  217,  217,
      217,  217,  223,  217,  217,  217,  152,   86,  152,   86,
      154,  153,  154,  151,  155,  159,   86,  159,  282,  295,
      294,  352,  353,  352,  283,   86,  156,  278,  153,  278,
      217,  217,  348,  120,   86,  330,   86,  160,  346,  331,
      341,  342,  341,  252,   86,  282,  295,  294,  279,  200,

      283,  297,  280,  201,  287,  153,  217,  217,  217,  128,
      223,  218,  217,  217,  160,  219,  217,  217,  217,  217,
      217,  223,  217,  217,  217,  279,   86,   86,  297,  280,
      287,   86,   86,   86,  312,  347,   86,  336,  313,  315,
      211,  337,  347,  320,  673,  291,  212,  289,  290,  217,
      217,   86,   86,  135,   86,  335,  207,  335,  336,  360,
       86,  312,  337,  200,  292,  313,  315,  201,  293,  311,
      320,  310,  291,  289,  290,  217,  217,  262,  128,  262,
      218,  217,  217,  217,  219,  217,  217,  217,  217,  217,
      292,  217,  217,  217,  293,  311,   86,  310,   86,   86,

       86,   86,   86,   86,  442,  318,   86,  316,  323,  319,
      327,   86,  321,   86,  214,  215,  214,  216,  217,  217,
      217,  314,   86,  344,  345,  344,   86,   86,  317,  326,
      346,  442,  318,  322,  316,  323,  319,  327,  321,   86,
       86,  328,  324,  454,  217,   86,  325,  314,  298,  299,
      300,  301,  302,  303,  317,  326,  304,  200,  135,  322,
      305,  201,  252,  306,  360,  307,  308,  328,  324,  309,
      454,   86,  325,  252,  457,  298,  299,  300,  301,  302,
      303,  380,  128,  304,  357,  252,  305,  381,  358,  306,
      443,  307,  308,  252,  389,  309,  335,  207,  335,  336,

      390,  457,  252,  337,  349,  350,  349,  336,  393,  394,
      393,  337,  362,  243,  362,  363,  443,  252,  252,  364,
      356,  356,  128,  365,  357,  356,  356,  252,  367,  356,
      356,  356,  356,  356,  368,  356,  356,  356,  227,   86,
      370,   86,  460,   86,  371,  373,  232,  373,  374,  377,
      239,  377,  375,  227,  395,  370,  378,  456,  449,  371,
      378,  455,  356,  356,  383,  384,  383,  385,  387,  460,
      374,  386,  252,  252,  375,  373,  232,  373,  374,  377,
      239,  377,  375,  456,  449,  252,  378,  455,  356,  356,
      356,  128,  368,  357,  356,  356, 1135,  358,  356,  356,

      356,  356,  356,  368,  356,  356,  356,  391,  392,  391,
      374,  396,  397,  396,  375,  398,  252,  363,  378,  236,
      395,  364,  362,  243,  362,  363,  378,  252,  447,  364,
      447,  356,  356,  399,  400,  399,  363,  247,  254,  402,
      364,  459,   86,  403,  405,  406,  257,  406,  402,  252,
      448,  450,  403,  407,  140,  407,  402,  356,  254,  416,
      403,  410,  411,  410,  405,  417,   86,  459,  405,  406,
      257,  406,  402,  259,  252,  413,  403,  448,  450,  414,
      419,  420,  419,  421,  398,  469,  685,  422,  356,  423,
      128,  423,  357,  356,  356,  356,  358,  356,  356,  356,

      356,  356,   86,  356,  356,  356,  426,  128,  427,  357,
       86,  469,  428,  358,  128,  128,  357,  357,  461,  203,
      358,  358,  128,  452,  357,  503,   86,  128,  358,  357,
      356,  356,  356,  358,  429,  430,  128,  128,  357,  357,
      462,  440,  358,  358,  461,  252,  128,  431,  357,  452,
      441,  433,  358,   86,   86,  432,  356,  128,  451,  357,
      429,   86,  430,  358,  434,  458,  462,  435,  440,   86,
      278,  436,  278,  431,   86,  444,  441,  444,  433,   86,
      437,  432,   86,   86,  438,  451,  464,   86,  453,   86,
      434,  279,  458,  435,  463,  280,   86,  436,  465,   86,

       86,   86,   86,  445,   86,  446,  437,   86,  252,  467,
      438,  466,  471,  464,  468,  453,  470,   86,  279,  472,
       86,  463,  280,  477,  473,  465,   86,  480,  474,  445,
       86,  446,   86,   86,  476,  467,  475,  466,  471,  478,
      468,   86,  470,  481,   86,  472,   86,  611,  490,  477,
      473,  484,  482,  480,  479,  474,   86,   86,  483,   86,
      476,  488,  475,   86,   86,  485,  478,   86,   86,  252,
      481,  489,  486,  493,  611,  490,  494,  484,  482,   86,
      479,  496,  487,  491,  483,   86,  492,   86,  488,  203,
      612,  485,  498,  252,  252,  503,  495,  489,  497,  486,

      493,  120,  494,  500,  509,  345,  509,  501,  487,  491,
      252,  510,  492,  505,  207,  505,  506,  612,  348,  498,
      507,  347,  495,  506,  510,  497,  339,  507,  505,  207,
      505,  506,  340,  252,  252,  507,  511,  350,  511,  506,
      512,  513,  512,  507,  341,  342,  341,  252,  348,  509,
      345,  509,   86,  387,  510,  698,  510,  514,  515,  514,
      511,  350,  511,  506,  510,  613,  135,  507,  352,  353,
      352,  128,  520,  517,  614,   86,  135,  518,  522,  243,
      522,  523,  520,  615,  395,  524,  526,  239,  526,  398,
      527,  523,  613,  527,  380,  524,  522,  243,  522,  523,

      541,  614,  389,  524,  528,  400,  528,  523,  547,   86,
      615,  524,  516,  516,  128,  529,  517,  516,  516,  631,
      531,  516,  516,  516,  516,  516,  532,  516,  516,  516,
      227,   86,  534,  393,  394,  393,  535,  537,  232,  537,
      538,  227,  395,  534,  539,  631,   86,  535,  527,  543,
      384,  543,  544,   86,  516,  516,  545,  387,  618,  538,
      618,  632,  380,  539,  537,  232,  537,  538,  541,   86,
      555,  539,  548,  392,  548,  538,  553,   86,  619,  539,
      516,  516,  516,  128,  532,  517,  516,  516,  632,  518,
      516,  516,  516,  516,  516,  532,  516,  516,  516,  526,

      239,  526,  549,  397,  549,  619,  527,  252,  389,  527,
      551,  552,  551,  554,  547,  544,  247,  553,  561,  545,
      236,  252,  562,  516,  516,  543,  384,  543,  544,  675,
      345,  675,  545,  556,  557,  556,  544,  558,  559,  558,
      545,  675,  345,  675,  547,  548,  392,  548,  538,  516,
      252,   86,  539,  549,  397,  549,  528,  400,  528,  523,
      527,  254,  447,  524,  447,   86,  254,  564,  565,  257,
      565,  561,  564,  637,   86,  562,  566,  411,  566,  565,
      257,  565,  561,  564,  448,   86,  562,  567,  140,  567,
      561,  566,  411,  566,  562,  259,  416,  569,  564,   86,

      637,  570,  572,  574,  420,  574,  575,  416,   86,  745,
      576,  448,  582,  572,  578,  579,  578,  581,  580,  575,
       86,  580,  591,  576,  574,  420,  574,  575,  592,  252,
      236,  576,  583,  584,  583,  575,  621,  252,   86,  576,
      516,  585,  128,  585,  517,  516,  516,  516,  518,  516,
      516,  516,  516,  516,  636,  516,  516,  516,  426,  426,
      588,  588,  621,  765,  589,  589,  594,  595,  594,  596,
      599,   86,  600,  597,  252,  599,  601,  600,  624,  582,
      636,  601,  516,  516,  516,  128,  128,  517,  517,  582,
      765,  518,  518,  128,  128,  517,  517,   86,   86,  518,

      518,  128,  444,  517,  444,  624,  603,  518,  516,  622,
      128,  128,  517,  517,  203,  650,  518,  518,  602,   86,
      670,  604,  620,  128,  605,  517,  607,  254,  606,  518,
      445,   86,  446,  603,  608,  609,  622,  616,  628,  616,
       86,  650,  254,  610,  602,  203,  623,  604,   86,  620,
      605,  670,   86,  607,  606,   86,  445,  625,  446,  629,
      630,  608,  609,   86,   86,  628,   86,   86,   86,  626,
      610,  617,  633,  623,  627,  634,  638,   86,  635,   86,
       86,   86,   86,   86,  625,   86,  629,  630,   86,   86,
      641,   86,  653,  252,  640,  646,  626,  617,  644,  633,

      639,  627,  634,  638,  635,  642,  645,  643,  647,   86,
       86,   86,   86,   86,  649,  657,  766,  641,  651,  653,
      640,   86,  646,  648,  644,  252,  639,  652,  654,   86,
       86,  642,  645,  643,  647,   86,  655,   86,  656,   86,
       86,  649,  657,  766,  658,  651,  659,   86,   86,  648,
      660,  135,   86,  652,  663,  654,  662,  682,   86,  661,
      120,  555,  667,  655,  389,  656,  668,  672,  207,  672,
      673,  658,  555,  659,  664,  389,  395,  660,  665,  395,
      348,  663,  662,  348,   86,  661,  672,  207,  672,  673,
      676,  350,  676,  673,  677,  515,  677,  512,  513,  512,

      664,  677,  515,  677,  665,  676,  350,  676,  673,  128,
      554,  679,  703,   86,  135,  680,  684,  243,  684,  685,
      682,  687,  239,  687,  684,  243,  684,  685,  688,  400,
      688,  685,  687,  239,  687,  689,  397,  689,  688,  400,
      688,  685,  128,  690,  679,  227,  380,  694,  691,   86,
       86,  695,  700,  252,  692,  697,  232,  697,  698,  128,
      692,  679,  227,  380,  694,  680,  236,  409,  695,  700,
      252,  692,  702,  384,  702,  703,  697,  232,  697,  698,
      705,  392,  705,  698,  707,  552,  707,  702,  384,  702,
      703,  708,  557,  708,  703,  709,  559,  709,  705,  392,

      705,  698,  689,  397,  689,  707,  552,  707,  710,  711,
      710,  708,  557,  708,  703,  709,  559,  709,  247,  252,
      713,  715,  257,  715,  713,  716,  411,  716,  715,  257,
      715,  713,  716,  411,  716,  717,  140,  717,  713,  259,
      416,  719,  727,  579,  727,  720,  722,  724,  420,  724,
      725,  416,  581,  744,  725,  740,  252,  722,  724,  420,
      724,  725,  728,  584,  728,  725,  727,  579,  727,  729,
      730,  729,  728,  584,  728,  725,  678,  731,  128,  731,
      679,  678,  678,  678,  680,  678,  678,  678,  678,  678,
      767,  678,  678,  678,  426,  426,  734,  734,  591,   86,

      735,  735,  773,  591,  737,  739,  595,  739,  740,  737,
      742,  743,  742,  739,  595,  739,  740,  767,  678,  678,
      678,  746,  747,  746,  740,  599,  752,  749,  768,  773,
      768,  750,  753,  755,  756,  755,  757,  599,   86,  749,
      599,  774,  749,  750,  678,  128,  750,  679,  128,  769,
      679,  680,   86,  128,  680,  679,  128,  772,  679,  680,
      252,  128,  680,  679,  128,  758,  679,  680,  774,  599,
      680,  749,  616,  760,  616,  750,  769,  759,   86,  618,
      761,  618,  764,  762,  772,   86,  770,   86,  770,   86,
      763,  782,  758,  775,   86,  783,  777,   86,  778,  619,

      760,   86,  252,  759,  781,   86,  617,  761,  776,  764,
      762,  771,   86,  780,   86,   86,  763,  785,  782,  779,
      775,  783,  787,  777,  778,   86,  619,  784,   86,   86,
      786,  781,  617,  791,  776,  788,  789,   86,  771,  780,
       86,   86,  790,   86,  785,  779,  794,   86,  796,  787,
       86,   86,  795,  784,  236,  793,  786,   86,  792,   86,
      791,  788,  798,  789,  252,   86,  799,   86,  790,   86,
      804,   86,  797,  794,  800,  796,  803,   86,  806,  795,
      807,  793,  805,   86,  792,  355,  801,   86,   86,  798,
      802,   86,   86,  799,   86,  974,  804,  808,  797,  809,

       86,  800,  813,  803,  806,  814,  252,  807,  805,  810,
      812,  811,  801,   86,  817,  252,  802,  252,  815,  236,
      959,  818,  974,  808,  203,  120,  809,  820,  813,  960,
      823,  821,  814,  203,  816,  810,  812,  811,   86,  823,
      817,  825,  826,  825,  827,  815,  959,  818,  828,  830,
      831,  830,  347,  348,  827,  960,  832,   86,  828,  832,
      816,  833,  207,  833,  827,  348,   86,  963,  828,  963,
       86,  832,  834,  345,  834,  835,  350,  835,  827,  832,
     1142,  135,  828,  836,  515,  836,  128,  841,  838,  964,
      832,  135,  839,  843,  844,  843,  845,  841,  252,  395,

      846,  848,  849,  848,  398,  850,  845, 1142,  850,  395,
      846,  851,  243,  851,  845,  850,  964,   86,  846,  852,
      239,  852,  853,  400,  853,  845,  850,  409,  252,  846,
      854,  397,  854,  856,  857,  858,  252,  850,  965,  859,
      861,  862,  861,  863,  856,   86,  858,  846,  380,  227,
      864,  866,  252,  970,  869,  867,  871,  872,  871,  873,
      387,  236,  876,  874,  965,  389,  877,  878,  232,  878,
      876,  880,  380,  252,  877,  882,  883,  882,  869,  554,
      970,  873,  884,   86,  555,  874,  885,  384,  885,  873,
      884,  389,  355,  874,  252,  236,  555,  880,  886,  392,

      886,  876,  884,  252,  966,  877,  887,  552,  887,  888,
      557,  888,  873,  884,  236,  161,  874,  889,  559,  889,
      890,  711,  890,  247,  880,  892,  254,  884,  254,  893,
      966,  252,  895,  236,  895,  896,  257,  896,  892,  897,
      411,  897,  893,  118,   86,   86,  895,  898,  140,  898,
      892,  259,  416,  900,  893,   88,   86,  901,  903,  905,
      906,  905,  907,  416,   84,  161,  908,  118,  582,  903,
      910,  911,  910,  581,  912,  907,   86,  912,  582,  908,
      913,  420,  913,  907,  912,   84, 1248,  908,  914,  579,
      914,  915,  584,  915,  907,  912,  591,  591,  908,  916,

      730,  916,  923,  923,  973,   64,  912,  837,  917,  128,
      917,  838,  837,  837,  837,  839,  837,  837,  837,  837,
      837,   62,  837,  837,  837,  426,  426,  920,  920,   62,
      973,  921,  921,  925,  926,  925,  927,  930,  931,  930,
      928,  744,  745,  927,  932,   86,   31,  928,  932,  837,
      837,  837,  933,  595,  933,  927,  745,   86,  981,  928,
      968, 1248,  932,  934,  743,  934,  935,  747,  935,  927,
      932,  752,  599,  928,  937,  837, 1248,  940,  938,  942,
      943,  942,  944,  752,  981, 1248,  945,  968,  952,  940,
      947,  948,  947,  950,  949,  944,  961,  949,  961,  945,

      951,  756,  951,  944,  128, 1248,  838,  945, 1248,  599,
      839,  937,  128, 1084,  838,  938, 1085,  128,  839,  838,
      128,  962,  838,  839,   86,  128,  839,  838,  128,   86,
      838,  839,   86,  953,  839,  768,  770,  768,  770, 1084,
       86,   86, 1085,  975,  958,   86,  955,  969,  962,  971,
      954,   86, 1248,  967,   86,  956,  769,   86,  976,  953,
      957,  771,  980,   86,  977,  972,  978,   86,   86,  975,
     1248,  958,  955,  979,  969,  971,  954,   86,  982,  967,
       86,  956,  983,  769,  976,   86,  957,   86,  771,  980,
      977,  972,   86,  978,  986,   86,   86,   86,  984,  979,

       86,  989,  987,   86,  985,  982,  988,  992,  983,  990,
       86,   86,   86,   86,  991,  994,   86,   86,   86,  993,
      986,  203,   86,   86,  984, 1000, 1248,  823,  989,  987,
      985,  996,  988,  995,  992,  990,  998, 1002,  997, 1001,
      991,  999,  994,   86,  120,  993,  820,  203, 1248,  347,
      821,  827, 1000,  823, 1003,  828,   86,  996,   86,  995,
      348, 1090,  998, 1002,  997, 1001,  832,  999, 1004, 1005,
     1004,  827, 1006, 1007, 1006,  828,   86, 1094, 1091,  832,
      348, 1003,  825,  826,  825,  827,  832, 1088, 1090,  828,
     1008, 1009, 1008,  827,  830,  831,  830,  828, 1010, 1011,

     1010,  832, 1248, 1094, 1091,  832,  833,  207,  833,  827,
      834,  345,  834,  828, 1088, 1248, 1248,  832,  835,  350,
      835,  827,  836,  515,  836,  828,  128,  135,  838,  832,
       86, 1248,  839,  841, 1012, 1013, 1012,  845,  135, 1248,
     1248,  846,   86,  395,  841, 1014, 1015, 1014,  398,  850,
      845, 1109,  850,  395,  846,  843,  844,  843,  845,  850,
     1248, 1092,  846, 1016, 1017, 1016,  845,  848,  849,  848,
      846, 1018, 1019, 1018,  850, 1248, 1248, 1109,  850,  851,
      243,  851,  845,  852,  239,  852,  846, 1092, 1248, 1248,
      850,  853,  400,  853,  845,  854,  397,  854,  846,  856,

       86,  858,  850, 1021, 1033,  864,  856,  857,  858, 1022,
      850, 1248,  859, 1024, 1025, 1024, 1026, 1028, 1119,  863,
     1027, 1248, 1248,  846,  861,  862,  861,  863, 1030, 1147,
     1031,  846, 1248, 1248,  251, 1035, 1036, 1035, 1037,  227,
      380,  866, 1038, 1248, 1119,  867,  869, 1039, 1040, 1039,
      873,  380, 1248, 1248,  874, 1147,  555,  869, 1041, 1042,
     1041,  554,  884,  873, 1248,  884,  389,  874,  871,  872,
      871,  873,  880, 1248,   86,  874, 1043, 1044, 1043,  873,
      387, 1089,  876,  874, 1248,  389,  877, 1045, 1046, 1045,
      876,  880, 1248, 1248,  877,  878,  232,  878,  876, 1047,

     1048, 1047,  877,  555, 1248, 1086,  880, 1086, 1089,  884,
      882,  883,  882, 1049, 1050, 1049,  963,  884,  963,  254,
      884,  885,  384,  885,  873,  895, 1248, 1087,  874,  886,
      392,  886,  876,  887,  552,  887,  877, 1248,  964, 1143,
      884,  888,  557,  888,  873,  889,  559,  889,  874,  890,
      711,  890,  880,  247, 1087,  892,  884, 1248,  254,  893,
     1051, 1052, 1051,  892,  895,  964, 1143,  893, 1053, 1054,
     1053,  896,  257,  896,  892,  895, 1248, 1248,  893,  897,
      411,  897,  898,  140,  898,  892,  895,  416,  259,  893,
      900, 1248,   86,  903,  901, 1055, 1056, 1055,  907,  416,

     1248, 1248,  908,   86,  582,  903, 1057, 1058, 1057,  581,
      912,  907, 1118,  912,  582,  908,  905,  906,  905,  907,
      912,   86, 1095,  908, 1059, 1060, 1059,  907,  910,  911,
      910,  908, 1061, 1062, 1061,  912, 1096, 1248, 1118,  912,
      913,  420,  913,  907,  914,  579,  914,  908, 1095,   86,
     1248,  912,  915,  584,  915,  907,  916,  730,  916,  908,
     1100, 1248, 1096,  912,  837,  917,  128,  917,  838,  837,
      837,  837,  839,  837,  837,  837,  837,  837, 1248,  837,
      837,  837,  426,  426,  920,  920,  591, 1100,  921,  921,
     1193,  591,  923, 1063, 1064, 1063,  927,  923, 1248,  744,

      928,  927, 1065, 1066, 1065,  928,  837,  837,  837,  932,
      925,  926,  925,  927,  745, 1248, 1193,  928, 1248,  745,
      932, 1067, 1068, 1067,  927,  932, 1248, 1248,  928,  930,
      931,  930,  837, 1069, 1070, 1069,  932, 1248, 1248, 1248,
      932,  933,  595,  933,  927,  934,  743,  934,  928, 1248,
     1248, 1248,  932,  935,  747,  935,  927,  599,  752,  937,
      928, 1248, 1248,  938,  940, 1071, 1072, 1071,  944,  752,
     1248, 1248,  945, 1248,  952,  940, 1073, 1074, 1073,  950,
      949,  944, 1248,  949,  952,  945,  942,  943,  942,  944,
      949, 1248, 1248,  945, 1075, 1076, 1075,  944,  947,  948,

      947,  945, 1077, 1078, 1077,  949,  961, 1248,  961,  949,
      951,  756,  951,  944,  128,   86,  838,  945, 1093,  599,
      839,  937,  128, 1248,  838,  938,   86,  128,  839,  838,
      128,  962,  838,  839,   86,  128,  839,  838,   86, 1248,
     1098,  839,   86, 1102,   86, 1093,   86, 1079, 1103, 1097,
     1082, 1099, 1101,   86,   86, 1080,   86, 1081,  962,   86,
     1107, 1248, 1083, 1106, 1104,   86, 1098, 1105, 1108,   86,
     1102,   86, 1248, 1079, 1103, 1110, 1097, 1082, 1099, 1101,
       86, 1080,   86, 1081,   86, 1248, 1021, 1107, 1083, 1112,
     1106, 1104, 1022, 1111, 1105, 1108, 1113,   86,   86,   86,

       86, 1114, 1110, 1115, 1116, 1117, 1172, 1120,   86, 1128,
     1004, 1005, 1004,  827, 1133, 1129, 1112,  828, 1248, 1111,
      408, 1248, 1113, 1126, 1121, 1026, 1248, 1114, 1248, 1027,
     1115, 1116, 1117, 1172, 1120, 1006, 1007, 1006, 1008, 1009,
     1008,  827,  832, 1033,   86,  828, 1010, 1011, 1010,  850,
     1121, 1148, 1173,  832, 1012, 1013, 1012,  845, 1014, 1015,
     1014,  846, 1194, 1248, 1248,  850, 1016, 1017, 1016,  845,
     1018, 1019, 1018,  846, 1123, 1124, 1123,  850, 1148, 1173,
     1137, 1125, 1024, 1025, 1024, 1026, 1125, 1248, 1194, 1027,
     1130, 1131, 1130, 1026, 1030, 1248, 1031, 1027,   86, 1030,

      251, 1031, 1030, 1248, 1031,  251, 1248, 1136,  251, 1037,
     1248, 1248, 1145, 1038, 1035, 1036, 1035, 1037, 1248, 1248,
     1248, 1038, 1138, 1139, 1138, 1037, 1086, 1248, 1086, 1038,
     1039, 1040, 1039,  873, 1041, 1042, 1041,  874, 1145, 1248,
       86,  884, 1043, 1044, 1043,  873,   86, 1163, 1087,  874,
     1045, 1046, 1045,  876, 1047, 1048, 1047,  877, 1049, 1050,
     1049,  880, 1144, 1248,   86,  884, 1051, 1052, 1051,  892,
     1053, 1054, 1053,  893, 1163, 1087,   86,  895, 1055, 1056,
     1055,  907, 1057, 1058, 1057,  908, 1146, 1248, 1144,  912,
     1059, 1060, 1059,  907, 1061, 1062, 1061,  908, 1156, 1248,

     1248,  912, 1063, 1064, 1063,  927, 1065, 1066, 1065,  928,
     1197, 1248, 1146,  932, 1067, 1068, 1067,  927, 1069, 1070,
     1069,  928, 1248, 1248, 1156,  932, 1071, 1072, 1071,  944,
     1073, 1074, 1073,  945, 1248, 1248, 1197,  949, 1075, 1076,
     1075,  944, 1077, 1078, 1077,  945,  128,   86,  838,  949,
     1151,  599,  839,  937,  128,   86,  838,  938,   86,  599,
      839,  937,  599, 1150,  937,  938,   86,   86,  938, 1152,
     1140,   86,   86, 1149, 1153, 1155,   86, 1151,   86,   86,
       86,   86,   86, 1248, 1154, 1160, 1161,   86,   86, 1141,
     1150, 1157, 1248, 1248, 1164, 1165, 1152, 1140, 1162, 1149,

     1158, 1153, 1155, 1159, 1248, 1137, 1248, 1123, 1124, 1123,
     1154, 1125, 1160, 1161, 1125, 1141, 1177, 1157, 1166, 1167,
     1166, 1164, 1165,   86, 1162, 1125, 1158, 1128, 1133, 1159,
     1168, 1169, 1168, 1129,  408, 1248, 1248, 1129, 1130, 1131,
     1130, 1026,   86, 1177, 1174, 1027, 1138, 1139, 1138, 1037,
      128,   86,  838, 1038,   86,  128,  839,  838,   86,   86,
       86,  839,   86, 1175,   86, 1176,   86,   86, 1179, 1248,
     1174, 1180,   86, 1183, 1178,   86,   86, 1185, 1248, 1248,
     1170,   86, 1184, 1181,   86, 1182, 1186, 1248, 1171, 1175,
     1187, 1176, 1188, 1248, 1179,   86, 1189, 1248, 1180, 1183,

     1178, 1191, 1190,   86, 1185,   86, 1170,   86, 1184, 1181,
     1195, 1182, 1186,   86, 1171,  128, 1187,  838, 1248, 1188,
     1199,  839, 1189, 1166, 1167, 1166, 1196, 1191, 1198, 1190,
     1125, 1168, 1169, 1168,  599,   86,  937, 1195, 1129,   86,
      938,   86,   86,   86, 1192, 1202, 1201, 1199, 1203,   86,
     1204,   86, 1196,   86, 1198, 1200, 1205,   86,   86,  599,
       86,  937, 1213, 1208, 1207,  938,   86, 1206, 1248,   86,
     1192,   86, 1202, 1201,   86, 1203, 1220, 1204,   86, 1212,
     1209, 1200, 1215, 1205,   86, 1216, 1248, 1219, 1213, 1221,
     1208, 1207,   86, 1206, 1214,   86, 1218,   86,   86,   86,

     1227, 1217, 1220, 1222,   86, 1212, 1209, 1228, 1224, 1215,
     1226, 1231, 1216, 1219, 1223, 1221,   86, 1225, 1233, 1229,
     1214, 1234, 1218,   86,   86,   86, 1227, 1217,   86, 1235,
     1222, 1240, 1241, 1228, 1224, 1236, 1246, 1226, 1231, 1230,
     1223, 1232,   86, 1225, 1233, 1242, 1229, 1234, 1247, 1239,
     1248, 1244, 1248, 1243, 1248, 1248, 1235, 1240, 1241, 1245,
     1248, 1248, 1236, 1246, 1248, 1230, 1248, 1232, 1248, 1248,
     1248, 1248, 1242, 1248, 1248, 1247, 1239, 1248, 1244, 1243,
     1248, 1248, 1248, 1248, 1248, 1245,   29,   29,   29,   29,
       29,   32,   32,   32,   32,   32,   47,   47,   47,   47,

       47,   51,   51,   51,   51,   51,   55,   55,   55,   55,
       55,   61,   61,   61,   61,   61,   63,   63,   63,   63,
       63,   65,   65,   65,   65,   65,   74,   74,   74,   74,
       74,   85,   85,   89, 1248,   89,   89,  117,  117,  117,
      117,  117,  119,  119,  119,  119,  119,  123,  123,  123,
      123,  123,  131,  131,  131,  131,  131,  134,  134,  134,
      134,  134,  127,  127,  127,  127,  127,  138,  138,  138,
      138,  138,  162,  162,  162,  162,   87, 1248,   87,   88,
     1248,   88,  196,  196,  196,  196,  196,  199,  199,  199,
      199,  199,  202,  202,  202,  202,  202,  205,  205,  205,

      205,  205,  210,  210,  210,  210,  210,  213,  213,  213,
      213,  213,  217,  217,  217,  217,  217,  221,  221,  221,
      221,  221,  224,  224,  224,  224,  224,  226,  226,  226,
      226,  226,  230,  230,  230,  230,  230,  235,  235,  235,
      235,  235,  237,  237,  237,  237,  237,  241,  241,  241,
      241,  241,  246,  246,  246,  246,  246,  251,  251,  251,
      251,  251,  253,  253,  253,  253,  253,  258,  258,  258,
      258,  258,  263,  263,  263,  263,  263,  329,  329,  329,
      329,  329,  332,  332,  332,  332,  332,  334,  334,  334,
      334,  334,  338,  338,  338,  338,  338,  343,  343,  343,

      343,  343,  351,  351,  351,  351,  351,  356,  356,  356,
      356,  356,  359,  359,  359,  359,  359,  361,  361,  361,
      361,  361,  366,  366,  366,  366,  366,  369,  369,  369,
      369,  369,  372,  372,  372,  372,  372,  376,  376,  376,
      376,  376,  379,  379,  379,  379,  379,  382,  382,  382,
      382,  382,  388,  388,  388,  388,  388,  401,  401,  401,
      401,  401,  404,  404,  404,  404,  404,  408,  408,  408,
      408,  408,  412,  412,  412,  412,  412,  415,  415,  415,
      415,  415,  418,  418,  418,  418,  418,  424,  424,  424,
      424,  424,  425,  425,  425,  425,  425,   85,   85,  499,

      499,  499,  499,  499,  502,  502,  502,  502,  502,  504,
      504,  504,  504,  504,  508,  508,  508,  508,  508,  338,
      338,  338,  338,  338,  351,  351,  351,  351,  351,  516,
      516,  516,  516,  516,  519,  519,  519,  519,  519,  521,
      521,  521,  521,  521,  525,  525,  525,  525,  525,  530,
      530,  530,  530,  530,  533,  533,  533,  533,  533,  536,
      536,  536,  536,  536,  540,  540,  540,  540,  540,  542,
      542,  542,  542,  542,  546,  546,  546,  546,  546,  550,
      550,  550,  550,  550,  560,  560,  560,  560,  560,  563,
      563,  563,  563,  563,  568,  568,  568,  568,  568,  571,

      571,  571,  571,  571,  573,  573,  573,  573,  573,  577,
      577,  577,  577,  577,  586,  586,  586,  586,  586,  587,
      587,  587,  587,  587,  199,  199,  199,  199,  199,  590,
      590,  590,  590,  590,  593,  593,  593,  593,  593,  598,
      598,  598,  598,  598,   85,   85,  666,  666,  666,  666,
      666,  669,  669,  669,  669,  669,  671,  671,  671,  671,
      671,  674,  674,  674,  674,  674,  678,  678,  678,  678,
      678,  681,  681,  681,  681,  681,  683,  683,  683,  683,
      683,  686,  686,  686,  686,  686,  693,  693,  693,  693,
      693,  696,  696,  696,  696,  696,  699,  699,  699,  699,

      699,  701,  701,  701,  701,  701,  704,  704,  704,  704,
      704,  706,  706,  706,  706,  706,  712,  712,  712,  712,
      712,  714,  714,  714,  714,  714,  718,  718,  718,  718,
      718,  721,  721,  721,  721,  721,  723,  723,  723,  723,
      723,  726,  726,  726,  726,  726,  732,  732,  732,  732,
      732,  733,  733,  733,  733,  733,  736,  736,  736,  736,
      736,  738,  738,  738,  738,  738,  235,  235,  235,  235,
      235,  741,  741,  741,  741,  741,  748,  748,  748,  748,
      748,  199,  199,  199,  199,  199,  751,  751,  751,  751,
      751,  754,  754,  754,  754,  754,   85,   85,  819,  819,

      819,  819,  819,  822,  822,  822,  822,  822,  824,  824,
      824,  824,  824,  829,  829,  829,  829,  829,  837,  837,
      837,  837,  837,  840,  840,  840,  840,  840,  842,  842,
      842,  842,  842,  847,  847,  847,  847,  847,  855,  855,
      855,  855,  855,  860,  860,  860,  860,  860,  865,  865,
      865,  865,  865,  868,  868,  868,  868,  868,  870,  870,
      870,  870,  870,  875,  875,  875,  875,  875,  879,  879,
      879,  879,  879,  881,  881,  881,  881,  881,  891,  891,
      891,  891,  891,  894,  894,  894,  894,  894,  899,  899,
      899,  899,  899,  902,  902,  902,  902,  902,  904,  904,

      904,  904,  904,  909,  909,  909,  909,  909,  918,  918,
      918,  918,  918,  919,  919,  919,  919,  919,  922,  922,
      922,  922,  922,  924,  924,  924,  924,  924,  929,  929,
      929,  929,  929,  251,  251,  251,  251,  251,  936,  936,
      936,  936,  936,  939,  939,  939,  939,  939,  941,  941,
      941,  941,  941,  235,  235,  235,  235,  235,  946,  946,
      946,  946,  946,  837,  837,  837,  837,  837,   85,   85,
      819,  819,  819,  819,  819,  822,  822,  822,  822,  822,
      824,  824,  824,  824,  824,  829,  829,  829,  829,  829,
      840,  840,  840,  840,  840,  842,  842,  842,  842,  842,

      847,  847,  847,  847,  847,  855,  855,  855,  855,  855,
      199,  199,  199,  199,  199, 1020, 1020, 1020, 1020, 1020,
     1023, 1023, 1023, 1023, 1023,  860,  860,  860,  860,  860,
     1029, 1029, 1029, 1029, 1029, 1032, 1032, 1032, 1032, 1032,
     1034, 1034, 1034, 1034, 1034,  865,  865,  865,  865,  865,
      868,  868,  868,  868,  868,  870,  870,  870,  870,  870,
      881,  881,  881,  881,  881,  875,  875,  875,  875,  875,
      879,  879,  879,  879,  879,  891,  891,  891,  891,  891,
      894,  894,  894,  894,  894,  899,  899,  899,  899,  899,
      902,  902,  902,  902,  902,  904,  904,  904,  904,  904,

      909,  909,  909,  909,  909,  918,  918,  918,  918,  918,
      919,  919,  919,  919,  919,  922,  922,  922,  922,  922,
      924,  924,  924,  924,  924,  929,  929,  929,  929,  929,
      936,  936,  936,  936,  936,  939,  939,  939,  939,  939,
      941,  941,  941,  941,  941,  946,  946,  946,  946,  946,
      837,  837,  837,  837,  837,   85,   85,  824,  824,  824,
      824,  824,  829,  829,  829,  829,  829,  842,  842,  842,
      842,  842,  847,  847,  847,  847,  847, 1020, 1020, 1020,
     1020, 1020,  235,  235,  235,  235,  235, 1122, 1122, 1122,
     1122, 1122, 1023, 1023, 1023, 1023, 1023, 1127, 1127, 1127,

     1127, 1127, 1029, 1029, 1029, 1029, 1029, 1132, 1132, 1132,
     1132, 1132, 1032, 1032, 1032, 1032, 1032, 1134, 1134, 1248,
     1134, 1134, 1034, 1034, 1034, 1034, 1034,  870,  870,  870,
      870,  870,  881,  881,  881,  881,  881,  875,  875,  875,
      875,  875,  879,  879,  879,  879,  879,  891,  891,  891,
      891,  891,  894,  894,  894,  894,  894,  904,  904,  904,
      904,  904,  909,  909,  909,  909,  909,  924,  924,  924,
      924,  924,  929,  929,  929,  929,  929,  941,  941,  941,
      941,  941,  946,  946,  946,  946,  946,  837,  837,  837,
      837,  837,  936,  936,  936,  936,  936,   85,   85,   23,

     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248
    } ;

static yyconst flex_int16_t yy_chk[5270] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    7,    9,
        8,   10, 1239,   11,   12,    7,    7,    8,    8,   26,
       11,   12,   21,   21,   21,   21, 1236,   11,   12,   65,
       26,   65,    1,    1,    1,   65,   68,   13,   14,   32,
       32,   34,   68,  120,   13,   14,   83,  120,   32,    9,
        9,   10,   10,   11,   12,   34, 1234,   83,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,   13,   14,   36,
       15,   34,   15,   15,   15,   43, 1233,   15,   46,   66,

       15,   66,   43, 1231, 1230,   66,   36,   75,   46,   75,
       75,    2,    2,    2,   89,   89,   69,   16,   69,   16,
       16,   16,   69,   89,   16,  121, 1224,   16,  125,   43,
       15,  121,   36, 1216,  125,   46, 1214,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,   15,   16,   22,   22,
       22,   22,   22,   70,   70,   70,   70,  130,   22,   72,
       70,   72,  124,  130,   22,   72,  124,   22, 1205,  134,
        3,    3,    3,   16,   72,  134,   37,   78,   40,   78,
       78,   78,  119,  123,  119,  123, 1204,  128,  119,  123,

       37,  128,   37,   78,   22,   40,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,   33,   37,   39,   37,   33,
       38,   40,   44,  273,  111,   39,   41,   94,   42,   44,
       94,   90,   39,   39,   91,   33, 1203,   38,  111,    4,
        4,    4,   38,   41,   44,   92,   33,   42, 1202,  273,
       42,   90,   39,   77,   91,   77,   44,   94,   39,   39,
     1201,   33,   92,   38,  111,    4,    5,  199,   38,   41,
       44,  199,  113,   42,   79,   77,   42,   90,   79,  113,
       91, 1198,    5,    5,    5,    5,    5,    5,   92,  101,

        5, 1196,   95,    5,    5,   95, 1194,    5,    5,    5,
        5,   79,   77,    5, 1193,   79,  113,   93,  101,    5,
        5,    5,    5,    5,    5,  141, 1184,    5,   45,    5,
        5,  141,   95,    5,    5,    5,    5,   93,   45,    5,
       20,   20,   20,   20,  101,   45,   20, 1183,  105,   20,
       99,   80,   20,   80,   45,   20,   97,   99,   20,   20,
      100,   96,  108,   93,  109,   45,  100,   97, 1175,  105,
       99,   45,  102,   80,  104, 1165,   96,   96, 1164,  108,
       45,  100,  100,  109,   99,   20,   20,   35,  102,  106,
       35, 1163,  104,  100,   97,  105,   99,   35,  106, 1157,

       80,   35,   96,   96,   35,  108,   35,  100,  100,  109,
      127,  227,  127,  115,  102,  227,  127,   35,  104,  163,
      107,  136,  136,  136,   35,  106,  107,   35,  136, 1139,
       35,  115,   35,   67,   67,   67,   67,   67,   67,   67,
      163,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,  110, 1136,  107,  110,  112,  110,  115,  116,  112,
      122,  122,  122,  122, 1135,  116,  163,  122,  126,  126,
      126,  126,  131,  153,  131,   67,   67,  150,  131,  150,
      150,  110,  158,  110, 1134, 1133,  112,  132,  132,  132,
      132,  138,  116,  138,  132,  259,  160,  138, 1131,  259,

      153,   67,   71,   71,   71,   71,   71,   71,   71,  158,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      143,  155,  143,  160,   98,  155,  143,   98,  137,  137,
      137,  137,   98, 1126, 1120,  137,  139,  139,  139,  139,
      149,  197,  149,  139,   71,   71,  149,  197,  155,   98,
      166,   98,  155,  142,  142,  142,  142,  166,  149,   98,
      142,  165,  148,  145,  148,  145,  165, 1117,  148,  145,
       71,   73,   73,   73,   73,   98,  169,   98,   73,  167,
      157,  147,  157,  147,  166,  149,  148,  147,   73,  146,
      145,  146,  176,  165,  169,  146,  145,  200,  167,   73,

      147, 1116,   73,  200,   73,  146,  157,  176,  157,  147,
      147,   73,  151,  148,  151,   73,  145,  202, 1112,  146,
      169, 1109,  145,  202,  167,   73, 1106,  147,   73,  213,
       73,  213,  146,  176,  151,  147,  147,   73,  129,  129,
      129,  129,  129,  129,  129,  146,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  152,  164,  152,  175,
      154,  151,  154,  154,  154,  159,  174,  159,  164,  175,
      174,  212,  212,  212,  164, 1103,  154,  161,  152,  161,
      129,  129,  208,  196,  168,  196, 1099,  159,  208,  196,
      201,  201,  201,  201,  177,  164,  175,  174,  161,  426,

      164,  177,  161,  426,  168,  152,  129,  133,  133,  133,
      133,  133,  133,  133,  159,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  161,  170,  171,  177,  161,
      168,  181,  184,  182,  181,  205,  188,  205,  182,  184,
      210,  205,  504,  188,  504,  172,  210,  170,  171,  133,
      133,  173,  179,  218,  180,  198,  198,  198,  198,  218,
     1098,  181,  198,  599,  172,  182,  184,  599,  173,  180,
      188,  179,  172,  170,  171,  133,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      172,  144,  144,  144,  173,  180,  185,  179,  189,  183,

      187,  191, 1092,  194,  275,  187,  186,  185,  191,  187,
      194,  190,  189,  193,  214,  214,  214,  214,  144,  144,
      144,  183,  195,  204,  204,  204, 1090,  192,  186,  193,
      204,  275,  187,  190,  185,  191,  187,  194,  189, 1089,
      286,  195,  192,  286,  144,  178,  192,  183,  178,  178,
      178,  178,  178,  178,  186,  193,  178,  856,  224,  190,
      178,  856, 1076,  178,  224,  178,  178,  195,  192,  178,
      286,  289,  192, 1072,  289,  178,  178,  178,  178,  178,
      178,  228,  217,  178,  217, 1068,  178,  228,  217,  178,
      277,  178,  178, 1064,  233,  178,  206,  206,  206,  206,

      233,  289, 1060,  206,  209,  209,  209,  209,  236,  236,
      236,  209,  219,  219,  219,  219,  277, 1056, 1052,  219,
      220,  220,  220,  220,  220,  220,  220, 1046,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  221,  281,
      221,  287,  292,  288,  221,  222,  222,  222,  222,  225,
      225,  225,  222,  226,  237,  226,  225,  288,  281,  226,
      237,  287,  220,  220,  229,  229,  229,  229,  230,  292,
      230,  229, 1044, 1040,  230,  231,  231,  231,  231,  238,
      238,  238,  231,  288,  281, 1036,  238,  287,  220,  223,
      223,  223,  223,  223,  223,  223, 1033,  223,  223,  223,

      223,  223,  223,  223,  223,  223,  223,  234,  234,  234,
      234,  240,  240,  240,  234,  241, 1025,  241,  240, 1021,
      244,  241,  242,  242,  242,  242,  244, 1017,  280,  242,
      280,  223,  223,  245,  245,  245,  245,  246,  248,  246,
      245,  291,  282,  246,  248,  249,  249,  249,  249, 1013,
      280,  282,  249,  250,  250,  250,  250,  223,  253,  260,
      250,  255,  255,  255,  253,  260,  300,  291,  255,  256,
      256,  256,  256,  258, 1009,  258,  256,  280,  282,  258,
      261,  261,  261,  261,  521,  300,  521,  261,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  293,  262,  262,  262,  263,  264,  263,  264,
      284,  300,  263,  264,  266,  265,  266,  265,  293,  330,
      266,  265,  267,  284,  267,  330,  294,  268,  267,  268,
      262,  262,  262,  268,  264,  265,  269,  270,  269,  270,
      294,  274,  269,  270,  293, 1005,  271,  266,  271,  284,
      274,  268,  271,  283,  290,  267,  262,  272,  283,  272,
      264,  993,  265,  272,  269,  290,  294,  269,  274,  992,
      278,  270,  278,  266,  972,  279,  274,  279,  268,  296,
      271,  267,  285,  295,  272,  283,  296,  297,  285,  298,
      269,  278,  290,  269,  295,  278,  302,  270,  297,  301,

      299,  308,  303,  279,  306,  279,  271,  971,  950,  298,
      272,  297,  302,  296,  299,  285,  301,  305,  278,  303,
      304,  295,  278,  306,  303,  297,  310,  308,  304,  279,
      313,  279,  307,  309,  305,  298,  304,  297,  302,  307,
      299,  318,  301,  309,  312,  303,  314,  439,  318,  306,
      303,  313,  310,  308,  307,  304,  316,  317,  312,  324,
      305,  316,  304,  315,  319,  314,  307,  322,  323,  943,
      309,  317,  315,  323,  439,  318,  324,  313,  310,  325,
      307,  327,  315,  319,  312,  328,  322,  327,  316,  332,
      440,  314,  328,  926,  906,  332,  325,  317,  327,  315,

      323,  329,  324,  329,  333,  333,  333,  329,  315,  319,
      872,  333,  322,  331,  331,  331,  331,  440,  336,  328,
      331,  334,  325,  334,  336,  327,  338,  334,  335,  335,
      335,  335,  338,  844,  826,  335,  337,  337,  337,  337,
      340,  340,  340,  337,  341,  341,  341,  341,  343,  344,
      344,  344,  813,  536,  343,  536,  344,  346,  346,  346,
      349,  349,  349,  349,  346,  441,  357,  349,  352,  352,
      352,  356,  357,  356,  442,  808,  359,  356,  358,  358,
      358,  358,  359,  443,  363,  358,  360,  360,  360,  361,
      363,  361,  441,  360,  370,  361,  362,  362,  362,  362,

      370,  442,  374,  362,  364,  364,  364,  364,  374,  806,
      443,  364,  365,  365,  365,  365,  365,  365,  365,  459,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      366,  803,  366,  393,  393,  393,  366,  367,  367,  367,
      367,  369,  376,  369,  367,  459,  793,  369,  376,  371,
      371,  371,  371,  787,  365,  365,  371,  372,  446,  372,
      446,  460,  379,  372,  373,  373,  373,  373,  379,  779,
      385,  373,  375,  375,  375,  375,  385,  778,  446,  375,
      365,  368,  368,  368,  368,  368,  368,  368,  460,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  377,

      377,  377,  378,  378,  378,  446,  377,  756,  388,  378,
      381,  381,  381,  382,  388,  382,  401,  381,  401,  382,
      752,  747,  401,  368,  368,  383,  383,  383,  383,  503,
      503,  503,  383,  386,  386,  386,  386,  390,  390,  390,
      386,  509,  509,  509,  390,  391,  391,  391,  391,  368,
      744,  665,  391,  396,  396,  396,  399,  399,  399,  399,
      396,  402,  447,  399,  447,  465,  404,  402,  403,  403,
      403,  403,  404,  465,  654,  403,  405,  405,  405,  406,
      406,  406,  406,  405,  447,  652,  406,  407,  407,  407,
      407,  410,  410,  410,  407,  412,  413,  412,  410,  637,

      465,  412,  413,  414,  414,  414,  414,  415,  621,  596,
      414,  447,  421,  415,  417,  417,  417,  418,  421,  418,
      450,  417,  427,  418,  419,  419,  419,  419,  427,  595,
      591,  419,  422,  422,  422,  422,  450,  584,  464,  422,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  464,  423,  423,  423,  424,  425,
      424,  425,  450,  611,  424,  425,  428,  428,  428,  428,
      429,  453,  429,  428,  581,  430,  429,  430,  453,  577,
      464,  430,  423,  423,  423,  431,  432,  431,  432,  575,
      611,  431,  432,  433,  434,  433,  434,  480,  451,  433,

      434,  435,  444,  435,  444,  453,  432,  435,  423,  451,
      436,  437,  436,  437,  500,  480,  436,  437,  431,  449,
      500,  433,  449,  438,  434,  438,  436,  563,  435,  438,
      444,  456,  444,  432,  436,  437,  451,  445,  456,  445,
      452,  480,  561,  438,  431,  502,  452,  433,  457,  449,
      434,  502,  454,  436,  435,  458,  444,  454,  444,  457,
      458,  436,  437,  455,  463,  456,  466,  461,  462,  455,
      438,  445,  461,  452,  455,  462,  466,  468,  463,  469,
      467,  484,  473,  471,  454,  475,  457,  458,  472,  476,
      469,  477,  484,  557,  468,  476,  455,  445,  473,  461,

      467,  455,  462,  466,  463,  471,  475,  472,  477,  478,
      479,  481,  488,  483,  479,  488,  614,  469,  481,  484,
      468,  485,  476,  478,  473,  554,  467,  483,  485,  486,
      487,  471,  475,  472,  477,  493,  486,  489,  487,  492,
      490,  479,  488,  614,  489,  481,  490,  491,  494,  478,
      491,  517,  495,  483,  494,  485,  493,  517,  497,  492,
      499,  550,  499,  486,  546,  487,  499,  501,  501,  501,
      501,  489,  544,  490,  495,  538,  525,  491,  497,  523,
      508,  494,  493,  506,  498,  492,  505,  505,  505,  505,
      507,  507,  507,  507,  510,  510,  510,  512,  512,  512,

      495,  514,  514,  514,  497,  511,  511,  511,  511,  516,
      542,  516,  542,  482,  519,  516,  518,  518,  518,  518,
      519,  520,  520,  520,  522,  522,  522,  522,  524,  524,
      524,  524,  526,  526,  526,  527,  527,  527,  528,  528,
      528,  528,  529,  529,  529,  530,  534,  530,  529,  474,
      470,  530,  534,  420,  529,  531,  531,  531,  531,  532,
      532,  532,  533,  540,  533,  532,  416,  408,  533,  540,
      400,  532,  535,  535,  535,  535,  537,  537,  537,  537,
      539,  539,  539,  539,  541,  541,  541,  543,  543,  543,
      543,  545,  545,  545,  545,  547,  547,  547,  548,  548,

      548,  548,  549,  549,  549,  551,  551,  551,  553,  553,
      553,  556,  556,  556,  556,  558,  558,  558,  560,  398,
      560,  562,  562,  562,  562,  564,  564,  564,  565,  565,
      565,  565,  566,  566,  566,  567,  567,  567,  567,  568,
      569,  568,  572,  572,  572,  568,  569,  570,  570,  570,
      570,  571,  573,  593,  573,  593,  392,  571,  574,  574,
      574,  574,  576,  576,  576,  576,  578,  578,  578,  580,
      580,  580,  583,  583,  583,  583,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      615,  585,  585,  585,  586,  587,  586,  587,  588,  622,

      586,  587,  622,  590,  588,  589,  589,  589,  589,  590,
      592,  592,  592,  594,  594,  594,  594,  615,  585,  585,
      585,  597,  597,  597,  597,  598,  600,  598,  617,  622,
      617,  598,  600,  601,  601,  601,  601,  602,  623,  602,
      603,  623,  603,  602,  585,  604,  603,  604,  605,  617,
      605,  604,  620,  606,  605,  606,  607,  620,  607,  606,
      387,  608,  607,  608,  609,  604,  609,  608,  623,  610,
      609,  610,  616,  606,  616,  610,  617,  605,  627,  618,
      607,  618,  609,  608,  620,  624,  619,  625,  619,  626,
      608,  631,  604,  624,  628,  632,  626,  629,  627,  618,

      606,  630,  384,  605,  630,  633,  616,  607,  625,  609,
      608,  619,  634,  629,  636,  635,  608,  634,  631,  628,
      624,  632,  635,  626,  627,  639,  618,  633,  640,  638,
      634,  630,  616,  640,  625,  636,  638,  641,  619,  629,
      642,  645,  639,  643,  634,  628,  643,  644,  645,  635,
      646,  651,  644,  633,  380,  642,  634,  647,  641,  655,
      640,  636,  647,  638,  354,  653,  647,  648,  639,  650,
      651,  649,  646,  643,  648,  645,  650,  656,  655,  644,
      656,  642,  653,  657,  641,  351,  649,  660,  659,  647,
      649,  658,  663,  647,  661,  783,  651,  657,  646,  658,

      664,  648,  660,  650,  655,  661,  350,  656,  653,  658,
      659,  658,  649,  662,  663,  347,  649,  342,  662,  339,
      765,  664,  783,  657,  667,  666,  658,  666,  660,  767,
      667,  666,  661,  669,  662,  658,  659,  658,  326,  669,
      663,  668,  668,  668,  668,  662,  765,  664,  668,  670,
      670,  670,  671,  673,  671,  767,  670,  321,  671,  673,
      662,  672,  672,  672,  672,  674,  320,  771,  672,  771,
      311,  674,  675,  675,  675,  676,  676,  676,  676,  675,
     1084,  679,  676,  677,  677,  677,  678,  679,  678,  771,
      677,  681,  678,  680,  680,  680,  680,  681,  257,  685,

      680,  682,  682,  682,  683,  685,  683, 1084,  682,  686,
      683,  684,  684,  684,  684,  686,  771,  772,  684,  687,
      687,  687,  688,  688,  688,  688,  687,  252,  251,  688,
      689,  689,  689,  690,  690,  690,  247,  689,  772,  690,
      691,  691,  691,  691,  692,  777,  692,  691,  694,  693,
      692,  693,  243,  777,  694,  693,  695,  695,  695,  695,
      696,  235,  696,  695,  772,  698,  696,  697,  697,  697,
      697,  698,  699,  232,  697,  700,  700,  700,  699,  701,
      777,  701,  700,  773,  703,  701,  702,  702,  702,  702,
      703,  704,  216,  702,  215,  211,  706,  704,  705,  705,

      705,  705,  706,  207,  773,  705,  707,  707,  707,  708,
      708,  708,  708,  707,  203,  156,  708,  709,  709,  709,
      710,  710,  710,  712,  709,  712,  713,  710,  714,  712,
      773,  140,  713,  135,  714,  715,  715,  715,  715,  716,
      716,  716,  715,  117,  114,  103,  716,  717,  717,  717,
      717,  718,  719,  718,  717,   87,   85,  718,  719,  720,
      720,  720,  720,  721,   84,   81,  720,   63,  725,  721,
      722,  722,  722,  723,  725,  723,   29,  722,  726,  723,
      724,  724,  724,  724,  726,   28,   23,  724,  727,  727,
      727,  728,  728,  728,  728,  727,  734,  736,  728,  729,

      729,  729,  734,  736,  782,   19,  729,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,   18,  731,  731,  731,  732,  733,  732,  733,   17,
      782,  732,  733,  735,  735,  735,  735,  737,  737,  737,
      735,  738,  740,  738,  737,  791,    6,  738,  740,  731,
      731,  731,  739,  739,  739,  739,  741,  775,  791,  739,
      775,    0,  741,  742,  742,  742,  746,  746,  746,  746,
      742,  749,  748,  746,  748,  731,    0,  749,  748,  750,
      750,  750,  750,  751,  791,    0,  750,  775,  757,  751,
      753,  753,  753,  754,  757,  754,  769,  753,  769,  754,

      755,  755,  755,  755,  758,    0,  758,  755,    0,  759,
      758,  759,  760,  959,  760,  759,  960,  761,  760,  761,
      762,  769,  762,  761,  784,  763,  762,  763,  764,  780,
      764,  763,  774,  758,  764,  768,  770,  768,  770,  959,
      776,  785,  960,  784,  764,  786,  761,  776,  769,  780,
      760,  781,    0,  774,  789,  762,  768,  790,  785,  758,
      763,  770,  790,  788,  786,  781,  788,  792,  794,  784,
        0,  764,  761,  789,  776,  780,  760,  795,  792,  774,
      797,  762,  794,  768,  785,  796,  763,  799,  770,  790,
      786,  781,  801,  788,  797,  798,  800,  802,  795,  789,

      804,  800,  798,  805,  796,  792,  799,  804,  794,  801,
      807,  809,  810,  816,  802,  807,  811,  812,  814,  805,
      797,  820,  815,  817,  795,  815,    0,  820,  800,  798,
      796,  810,  799,  809,  804,  801,  812,  817,  811,  816,
      802,  814,  807,  818,  819,  805,  819,  822,    0,  824,
      819,  824,  815,  822,  818,  824,  968,  810,  967,  809,
      827,  967,  812,  817,  811,  816,  827,  814,  821,  821,
      821,  821,  823,  823,  823,  821,  965,  973,  968,  823,
      829,  818,  825,  825,  825,  825,  829,  965,  967,  825,
      828,  828,  828,  828,  830,  830,  830,  828,  832,  832,

      832,  830,    0,  973,  968,  832,  833,  833,  833,  833,
      834,  834,  834,  833,  965,    0,    0,  834,  835,  835,
      835,  835,  836,  836,  836,  835,  837,  838,  837,  836,
      989,    0,  837,  838,  839,  839,  839,  839,  840,    0,
        0,  839,  969,  845,  840,  841,  841,  841,  842,  845,
      842,  989,  841,  847,  842,  843,  843,  843,  843,  847,
        0,  969,  843,  846,  846,  846,  846,  848,  848,  848,
      846,  850,  850,  850,  848,    0,    0,  989,  850,  851,
      851,  851,  851,  852,  852,  852,  851,  969,    0,    0,
      852,  853,  853,  853,  853,  854,  854,  854,  853,  855,

     1001,  855,  854,  858,  863,  855,  857,  857,  857,  858,
      863,    0,  857,  859,  859,  859,  859,  860, 1001,  860,
      859,    0,    0,  860,  861,  861,  861,  861,  862, 1094,
      862,  861,    0,    0,  862,  864,  864,  864,  864,  865,
      866,  865,  864,    0, 1001,  865,  866,  867,  867,  867,
      867,  868,    0,    0,  867, 1094,  873,  868,  869,  869,
      869,  870,  873,  870,    0,  869,  876,  870,  871,  871,
      871,  871,  876,    0,  966,  871,  874,  874,  874,  874,
      875,  966,  875,  874,    0,  879,  875,  877,  877,  877,
      877,  879,    0,    0,  877,  878,  878,  878,  878,  880,

      880,  880,  878,  881,    0,  962,  880,  962,  966,  881,
      882,  882,  882,  884,  884,  884,  963,  882,  963,  892,
      884,  885,  885,  885,  885,  892,    0,  962,  885,  886,
      886,  886,  886,  887,  887,  887,  886,    0,  963, 1085,
      887,  888,  888,  888,  888,  889,  889,  889,  888,  890,
      890,  890,  889,  891,  962,  891,  890,    0,  894,  891,
      893,  893,  893,  893,  894,  963, 1085,  893,  895,  895,
      895,  896,  896,  896,  896,  895,    0,    0,  896,  897,
      897,  897,  898,  898,  898,  898,  897,  900,  899,  898,
      899,    0, 1000,  900,  899,  901,  901,  901,  901,  902,

        0,    0,  901,  975,  907,  902,  903,  903,  903,  904,
      907,  904, 1000,  903,  909,  904,  905,  905,  905,  905,
      909,  976,  975,  905,  908,  908,  908,  908,  910,  910,
      910,  908,  912,  912,  912,  910,  976,    0, 1000,  912,
      913,  913,  913,  913,  914,  914,  914,  913,  975,  980,
        0,  914,  915,  915,  915,  915,  916,  916,  916,  915,
      980,    0,  976,  916,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,    0,  917,
      917,  917,  918,  919,  918,  919,  920,  980,  918,  919,
     1172,  922,  920,  921,  921,  921,  921,  922,    0,  924,

      921,  924,  923,  923,  923,  924,  917,  917,  917,  923,
      925,  925,  925,  925,  927,    0, 1172,  925,    0,  929,
      927,  928,  928,  928,  928,  929,    0,    0,  928,  930,
      930,  930,  917,  932,  932,  932,  930,    0,    0,    0,
      932,  933,  933,  933,  933,  934,  934,  934,  933,    0,
        0,    0,  934,  935,  935,  935,  935,  936,  937,  936,
      935,    0,    0,  936,  937,  938,  938,  938,  938,  939,
        0,    0,  938,    0,  944,  939,  940,  940,  940,  941,
      944,  941,    0,  940,  946,  941,  942,  942,  942,  942,
      946,    0,    0,  942,  945,  945,  945,  945,  947,  947,

      947,  945,  949,  949,  949,  947,  961,    0,  961,  949,
      951,  951,  951,  951,  953,  970,  953,  951,  970,  954,
      953,  954,  955,    0,  955,  954,  978,  956,  955,  956,
      957,  961,  957,  956,  983,  958,  957,  958,  982,    0,
      978,  958,  977,  982,  979,  970,  981,  953,  983,  977,
      957,  979,  981,  984,  987,  955,  986,  956,  961,  985,
      987,    0,  958,  986,  984,  988,  978,  985,  988,  990,
      982,  991,    0,  953,  983,  990,  977,  957,  979,  981,
      995,  955,  994,  956,  996,    0, 1020,  987,  958,  994,
      986,  984, 1020,  991,  985,  988,  995,  998,  999,  997,

     1002,  996,  990,  997,  998,  999, 1142, 1002, 1003, 1026,
     1004, 1004, 1004, 1004, 1031, 1026,  994, 1004,    0,  991,
     1031,    0,  995, 1023, 1003, 1023,    0,  996,    0, 1023,
      997,  998,  999, 1142, 1002, 1006, 1006, 1006, 1008, 1008,
     1008, 1008, 1006, 1032, 1095, 1008, 1010, 1010, 1010, 1032,
     1003, 1095, 1143, 1010, 1012, 1012, 1012, 1012, 1014, 1014,
     1014, 1012, 1173,    0,    0, 1014, 1016, 1016, 1016, 1016,
     1018, 1018, 1018, 1016, 1022, 1022, 1022, 1018, 1095, 1143,
     1037, 1022, 1024, 1024, 1024, 1024, 1037,    0, 1173, 1024,
     1027, 1027, 1027, 1027, 1028,    0, 1028, 1027, 1091, 1029,

     1028, 1029, 1030,    0, 1030, 1029,    0, 1034, 1030, 1034,
        0,    0, 1091, 1034, 1035, 1035, 1035, 1035,    0,    0,
        0, 1035, 1038, 1038, 1038, 1038, 1086,    0, 1086, 1038,
     1039, 1039, 1039, 1039, 1041, 1041, 1041, 1039, 1091,    0,
     1118, 1041, 1043, 1043, 1043, 1043, 1088, 1118, 1086, 1043,
     1045, 1045, 1045, 1045, 1047, 1047, 1047, 1045, 1049, 1049,
     1049, 1047, 1088,    0, 1093, 1049, 1051, 1051, 1051, 1051,
     1053, 1053, 1053, 1051, 1118, 1086, 1107, 1053, 1055, 1055,
     1055, 1055, 1057, 1057, 1057, 1055, 1093,    0, 1088, 1057,
     1059, 1059, 1059, 1059, 1061, 1061, 1061, 1059, 1107,    0,

        0, 1061, 1063, 1063, 1063, 1063, 1065, 1065, 1065, 1063,
     1177,    0, 1093, 1065, 1067, 1067, 1067, 1067, 1069, 1069,
     1069, 1067,    0,    0, 1107, 1069, 1071, 1071, 1071, 1071,
     1073, 1073, 1073, 1071,    0,    0, 1177, 1073, 1075, 1075,
     1075, 1075, 1077, 1077, 1077, 1075, 1079, 1100, 1079, 1077,
     1100, 1080, 1079, 1080, 1081, 1096, 1081, 1080, 1097, 1082,
     1081, 1082, 1083, 1097, 1083, 1082, 1101, 1104, 1083, 1101,
     1079, 1102, 1105, 1096, 1102, 1105, 1108, 1100, 1110, 1115,
     1113, 1114, 1111,    0, 1104, 1113, 1114, 1119, 1121, 1081,
     1097, 1108,    0,    0, 1119, 1121, 1101, 1079, 1115, 1096,

     1110, 1102, 1105, 1111,    0, 1122,    0, 1123, 1123, 1123,
     1104, 1122, 1113, 1114, 1123, 1081, 1147, 1108, 1125, 1125,
     1125, 1119, 1121, 1144, 1115, 1125, 1110, 1127, 1132, 1111,
     1129, 1129, 1129, 1127, 1132,    0,    0, 1129, 1130, 1130,
     1130, 1130, 1145, 1147, 1144, 1130, 1138, 1138, 1138, 1138,
     1140, 1146, 1140, 1138, 1149, 1141, 1140, 1141, 1148, 1153,
     1150, 1141, 1151, 1145, 1152, 1146, 1154, 1156, 1149,    0,
     1144, 1150, 1155, 1153, 1148, 1160, 1158, 1155,    0,    0,
     1140, 1159, 1154, 1151, 1162, 1152, 1156,    0, 1141, 1145,
     1158, 1146, 1159,    0, 1149, 1161, 1160,    0, 1150, 1153,

     1148, 1162, 1161, 1174, 1155, 1176, 1140, 1178, 1154, 1151,
     1174, 1152, 1156, 1179, 1141, 1170, 1158, 1170,    0, 1159,
     1179, 1170, 1160, 1166, 1166, 1166, 1176, 1162, 1178, 1161,
     1166, 1168, 1168, 1168, 1171, 1180, 1171, 1174, 1168, 1181,
     1171, 1185, 1182, 1186, 1170, 1182, 1181, 1179, 1185, 1187,
     1186, 1188, 1176, 1189, 1178, 1180, 1187, 1190, 1191, 1192,
     1195, 1192, 1197, 1190, 1189, 1192, 1209, 1188,    0, 1199,
     1170, 1200, 1182, 1181, 1208, 1185, 1210, 1186, 1206, 1195,
     1191, 1180, 1200, 1187, 1207, 1206,    0, 1209, 1197, 1211,
     1190, 1189, 1217, 1188, 1199, 1212, 1208, 1215, 1218, 1219,

     1220, 1207, 1210, 1212, 1225, 1195, 1191, 1221, 1217, 1200,
     1219, 1225, 1206, 1209, 1215, 1211, 1222, 1218, 1227, 1222,
     1199, 1228, 1208, 1223, 1229, 1226, 1220, 1207, 1232, 1229,
     1212, 1237, 1238, 1221, 1217, 1232, 1242, 1219, 1225, 1223,
     1215, 1226, 1235, 1218, 1227, 1240, 1222, 1228, 1244, 1235,
        0, 1241,    0, 1240,    0,    0, 1229, 1237, 1238, 1241,
        0,    0, 1232, 1242,    0, 1223,    0, 1226,    0,    0,
        0,    0, 1240,    0,    0, 1244, 1235,    0, 1241, 1240,
        0,    0,    0,    0,    0, 1241, 1249, 1249, 1249, 1249,
     1249, 1250, 1250, 1250, 1250, 1250, 1251, 1251, 1251, 1251,

     1251, 1252, 1252, 1252, 1252, 1252, 1253, 1253, 1253, 1253,
     1253, 1254, 1254, 1254, 1254, 1254, 1255, 1255, 1255, 1255,
     1255, 1256, 1256, 1256, 1256, 1256, 1257, 1257, 1257, 1257,
     1257, 1258, 1258, 1259,    0, 1259, 1259, 1260, 1260, 1260,
     1260, 1260, 1261, 1261, 1261, 1261, 1261, 1262, 1262, 1262,
     1262, 1262, 1263, 1263, 1263, 1263, 1263, 1264, 1264, 1264,
     1264, 1264, 1265, 1265, 1265, 1265, 1265, 1266, 1266, 1266,
     1266, 1266, 1267, 1267, 1267, 1267, 1268,    0, 1268, 1269,
        0, 1269, 1270, 1270, 1270, 1270, 1270, 1271, 1271, 1271,
     1271, 1271, 1272, 1272, 1272, 1272, 1272, 1273, 1273, 1273,

     1273, 1273, 1274, 1274, 1274, 1274, 1274, 1275, 1275, 1275,
     1275, 1275, 1276, 1276, 1276, 1276, 1276, 1277, 1277, 1277,
     1277, 1277, 1278, 1278, 1278, 1278, 1278, 1279, 1279, 1279,
     1279, 1279, 1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281,
     1281, 1281, 1282, 1282, 1282, 1282, 1282, 1283, 1283, 1283,
     1283, 1283, 1284, 1284, 1284, 1284, 1284, 1285, 1285, 1285,
     1285, 1285, 1286, 1286, 1286, 1286, 1286, 1287, 1287, 1287,
     1287, 1287, 1288, 1288, 1288, 1288, 1288, 1289, 1289, 1289,
     1289, 1289, 1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291,
     1291, 1291, 1292, 1292, 1292, 1292, 1292, 1293, 1293, 1293,

     1293, 1293, 1294, 1294, 1294, 1294, 1294, 1295, 1295, 1295,
     1295, 1295, 1296, 1296, 1296, 1296, 1296, 1297, 1297, 1297,
     1297, 1297, 1298, 1298, 1298, 1298, 1298, 1299, 1299, 1299,
     1299, 1299, 1300, 1300, 1300, 1300, 1300, 1301, 1301, 1301,
     1301, 1301, 1302, 1302, 1302, 1302, 1302, 1303, 1303, 1303,
     1303, 1303, 1304, 1304, 1304, 1304, 1304, 1305, 1305, 1305,
     1305, 1305, 1306, 1306, 1306, 1306, 1306, 1307, 1307, 1307,
     1307, 1307, 1308, 1308, 1308, 1308, 1308, 1309, 1309, 1309,
     1309, 1309, 1310, 1310, 1310, 1310, 1310, 1311, 1311, 1311,
     1311, 1311, 1312, 1312, 1312, 1312, 1312, 1313, 1313, 1314,

     1314, 1314, 1314, 1314, 1315, 1315, 1315, 1315, 1315, 1316,
     1316, 1316, 1316, 1316, 1317, 1317, 1317, 1317, 1317, 1318,
     1318, 1318, 1318, 1318, 1319, 1319, 1319, 1319, 1319, 1320,
     1320, 1320, 1320, 1320, 1321, 1321, 1321, 1321, 1321, 1322,
     1322, 1322, 1322, 1322, 1323, 1323, 1323, 1323, 1323, 1324,
     1324, 1324, 1324, 1324, 1325, 1325, 1325, 1325, 1325, 1326,
     1326, 1326, 1326, 1326, 1327, 1327, 1327, 1327, 1327, 1328,
     1328, 1328, 1328, 1328, 1329, 1329, 1329, 1329, 1329, 1330,
     1330, 1330, 1330, 1330, 1331, 1331, 1331, 1331, 1331, 1332,
     1332, 1332, 1332, 1332, 1333, 1333, 1333, 1333, 1333, 1334,

     1334, 1334, 1334, 1334, 1335, 1335, 1335, 1335, 1335, 1336,
     1336, 1336, 1336, 1336, 1337, 1337, 1337, 1337, 1337, 1338,
     1338, 1338, 1338, 1338, 1339, 1339, 1339, 1339, 1339, 1340,
     1340, 1340, 1340, 1340, 1341, 1341, 1341, 1341, 1341, 1342,
     1342, 1342, 1342, 1342, 1343, 1343, 1344, 1344, 1344, 1344,
     1344, 1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346,
     1346, 1347, 1347, 1347, 1347, 1347, 1348, 1348, 1348, 1348,
     1348, 1349, 1349, 1349, 1349, 1349, 1350, 1350, 1350, 1350,
     1350, 1351, 1351, 1351, 1351, 1351, 1352, 1352, 1352, 1352,
     1352, 1353, 1353, 1353, 1353, 1353, 1354, 1354, 1354, 1354,

     1354, 1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356,
     1356, 1357, 1357, 1357, 1357, 1357, 1358, 1358, 1358, 1358,
     1358, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360, 1360,
     1360, 1361, 1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362,
     1362, 1363, 1363, 1363, 1363, 1363, 1364, 1364, 1364, 1364,
     1364, 1365, 1365, 1365, 1365, 1365, 1366, 1366, 1366, 1366,
     1366, 1367, 1367, 1367, 1367, 1367, 1368, 1368, 1368, 1368,
     1368, 1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370,
     1370, 1371, 1371, 1371, 1371, 1371, 1372, 1372, 1372, 1372,
     1372, 1373, 1373, 1373, 1373, 1373, 1374, 1374, 1375, 1375,

     1375, 1375, 1375, 1376, 1376, 1376, 1376, 1376, 1377, 1377,
     1377, 1377, 1377, 1378, 1378, 1378, 1378, 1378, 1379, 1379,
     1379, 1379, 1379, 1380, 1380, 1380, 1380, 1380, 1381, 1381,
     1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382, 1383, 1383,
     1383, 1383, 1383, 1384, 1384, 1384, 1384, 1384, 1385, 1385,
     1385, 1385, 1385, 1386, 1386, 1386, 1386, 1386, 1387, 1387,
     1387, 1387, 1387, 1388, 1388, 1388, 1388, 1388, 1389, 1389,
     1389, 1389, 1389, 1390, 1390, 1390, 1390, 1390, 1391, 1391,
     1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1393, 1393,
     1393, 1393, 1393, 1394, 1394, 1394, 1394, 1394, 1395, 1395,

     1395, 1395, 1395, 1396, 1396, 1396, 1396, 1396, 1397, 1397,
     1397, 1397, 1397, 1398, 1398, 1398, 1398, 1398, 1399, 1399,
     1399, 1399, 1399, 1400, 1400, 1400, 1400, 1400, 1401, 1401,
     1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1403, 1403,
     1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404, 1405, 1405,
     1405, 1405, 1405, 1406, 1406, 1406, 1406, 1406, 1407, 1407,
     1407, 1407, 1407, 1408, 1408, 1408, 1408, 1408, 1409, 1409,
     1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411, 1411,
     1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413,
     1414, 1414, 1414, 1414, 1414, 1415, 1415, 1415, 1415, 1415,

     1416, 1416, 1416, 1416, 1416, 1417, 1417, 1417, 1417, 1417,
     1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419,
     1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421,
     1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423, 1423,
     1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425,
     1426, 1426, 1426, 1426, 1426, 1427, 1427, 1427, 1427, 1427,
     1428, 1428, 1428, 1428, 1428, 1429, 1429, 1429, 1429, 1429,
     1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431, 1431, 1431,
     1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433, 1433,
     1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435, 1435, 1435,

     1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437, 1437, 1437,
     1438, 1438, 1438, 1438, 1438, 1439, 1439, 1439, 1439, 1439,
     1440, 1440, 1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441,
     1442, 1442, 1442, 1442, 1442, 1443, 1443, 1443, 1443, 1443,
     1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445, 1445, 1445,
     1446, 1446, 1446, 1446, 1446, 1447, 1447, 1448, 1448, 1448,
     1448, 1448, 1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450,
     1450, 1450, 1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452,
     1452, 1452, 1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454,
     1454, 1454, 1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456,

     1456, 1456, 1457, 1457, 1457, 1457, 1457, 1458, 1458, 1458,
     1458, 1458, 1459, 1459, 1459, 1459, 1459, 1460, 1460,    0,
     1460, 1460, 1461, 1461, 1461, 1461, 1461, 1462, 1462, 1462,
     1462, 1462, 1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464,
     1464, 1464, 1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466,
     1466, 1466, 1467, 1467, 1467, 1467, 1467, 1468, 1468, 1468,
     1468, 1468, 1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470,
     1470, 1470, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472,
     1472, 1472, 1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474,
     1474, 1474, 1475, 1475, 1475, 1475, 1475, 1476, 1476, 1248,

     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
// $Id: lexer.l 333 2018-08-03 07:09:12Z willem_vermin $
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
class line_prep pline;




//  following are keywords starting with c
#line 2110 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 32 "lexer.l"


#line 2344 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1249 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5200 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 34 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 37 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 39 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 53 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 54 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 59 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 63 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 80 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 88 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 103 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 107 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 119 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 123 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 124 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 105:
YY_RULE_SETUP
#line 221 "lexer.l"
{ D(O("FINDENTFIX PPP-ON");Y;); 
				return PPP_ON;
		              }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 224 "lexer.l"
{ D(O("FIXFINDENTFIX PPP-ON");Y;);
				return PPP_ON;
		              }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 227 "lexer.l"
{ D(O("FINDENTFIX PPP-OFF");Y;); 
				return PPP_OFF;
		              }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 230 "lexer.l"
{ D(O("FIXFINDENTFIX PPP-OFF");Y;);
				return PPP_OFF;
		              }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 233 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 238 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 243 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 246 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 249 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 252 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 255 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 259 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 262 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 265 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 268 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 271 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 275 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 276 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 123:
YY_RULE_SETUP
#line 279 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.type_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.type_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.type_dot_operator)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 124:
/* rule 124 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 303 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 309 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 315 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 322 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 329 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 331 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 332 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 334 "lexer.l"
ECHO;
	YY_BREAK
#line 3226 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_scanfixpre):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1249 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1249 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1248);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 334 "lexer.l"



void lexer_set(class line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(std::string s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:  BEGIN(state_identifier);   break;
      case SKIPALL:     BEGIN(state_skipall);      break;
      case SKIP:        BEGIN(state_skip);         break;
      case SKIPNOOP:    BEGIN(state_skipnoop);     break;
      case KEYWORD:     BEGIN(state_keyword);      break;
      case FINDFORMAT:  BEGIN(state_findformat);   break;
      case SCANFIXPRE:  BEGIN(state_scanfixpre);   break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


