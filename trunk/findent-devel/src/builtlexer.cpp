#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 150
#define YY_END_OF_BUFFER 151
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1340] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      151,  149,  148,  149,  145,  144,  149,  146,  147,   16,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,    4,    5,    2,    3,
        8,    9,    6,    7,   15,   14,   10,   12,   11,   13,
        1,  150,  150,  112,  150,  112,  150,  150,  150,  150,
      150,  150,  150,  141,  141,  140,  141,  141,  128,  141,
      141,  117,  116,  117,  121,  120,  121,  121,   18,   20,

       19,  142,    0,  144,    0,    0,   16,   17,   16,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
        0,    0,    0,    0,   72,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   93,    0,    0,    0,  112,
        0,  100,    0,    0,    0,  100,    0,    0,    0,  112,
        0,    0,    0,    0,    0,    0,  102,    0,    0,    0,
        0,  100,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  128,    0,    0,
        0,    0,    0,    0,  134,  115,    0,    0,    0,   18,
      143,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   37,    0,    0,    0,    0,    0,   53,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,    0,    0,    0,  100,    0,
        0,    0,  100,    0,    0,    0,  100,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  101,    0,
        0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
      102,    0,    0,    0,  104,    0,    0,    0,  100,    0,
        0,    0,    0,    0,    0,  100,    0,    0,  100,    0,
       99,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,    0,    0,    0,  115,  115,    0,  119,  118,    0,
        0,    0,    0,    0,    0,   27,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   69,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   86,   87,    0,    0,    0,    0,   94,   95,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  102,    0,    0,  106,    0,    0,  100,    0,  100,
      100,    0,  100,    0,    0,  100,  100,  100,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  101,    0,    0,    0,  101,    0,    0,  107,
        0,  102,    0,    0,  104,    0,  106,  102,    0,  102,
      112,    0,  104,    0,    0,    0,    0,    0,    0,    0,
        0,  102,    0,  100,    0,    0,    0,    0,   99,    0,
        0,    0,   99,    0,    0,    0,    0,    0,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  135,    0,  115,    0,    0,    0,    0,    0,

        0,   24,    0,    0,    0,   31,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       52,    0,    0,    0,   57,    0,    0,    0,    0,    0,
        0,    0,    0,   68,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   96,    0,
       98,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  102,    0,  100,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  101,    0,  101,  101,    0,  101,
        0,  102,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   99,    0,   99,   99,    0,   99,    0,    0,    0,
        0,    0,    0,  102,    0,    0,    0,  104,    0,    0,
        0,  109,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  132,  131,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  113,  113,    0,    0,
        0,   23,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   46,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   70,    0,   73,    0,    0,    0,
        0,   80,    0,    0,    0,    0,    0,    0,   97,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  101,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   99,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  102,  110,  102,    0,
      104,    0,    0,    0,    0,  102,    0,    0,    0,  104,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      130,    0,    0,    0,  137,    0,    0,    0,    0,  114,
      114,  113,  113,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   32,   33,    0,    0,    0,    0,    0,    0,
        0,   40,    0,    0,    0,    0,    0,   54,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   65,   66,    0,
        0,   74,   77,    0,   79,    0,    0,    0,    0,   85,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  100,    0,    0,    0,    0,  100,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      106,    0,    0,    0,    0,  102,    0,    0,    0,    0,
        0,    0,  111,    0,    0,    0,    0,    0,  103,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  101,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  101,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   99,    0,    0,    0,    0,   99,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  106,    0,    0,    0,    0,  102,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  106,
        0,    0,    0,    0,  102,    0,  109,    0,  102,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  136,    0,    0,   75,    0,    0,    0,    0,
        0,    0,    0,    0,   34,   35,    0,   41,    0,    0,
        0,    0,    0,    0,   49,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   67,   71,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  100,    0,
      100,    0,  100,    0,  100,    0,  105,    0,  102,    0,

      105,    0,  102,    0,  102,    0,    0,    0,  105,    0,
        0,  103,    0,  103,    0,    0,  102,    0,    0,  105,
        0,    0,    0,  101,    0,  101,    0,  101,    0,  105,
        0,  102,    0,  101,    0,  100,    0,  100,    0,   99,
        0,   99,    0,   99,    0,   99,    0,  105,    0,  102,
        0,  105,    0,  102,    0,  105,    0,  102,    0,  105,
        0,  102,    0,    0,    0,    0,    0,    0,    0,  133,
        0,    0,  138,    0,    0,   76,    0,   22,   25,    0,
        0,   28,    0,    0,    0,    0,    0,   44,   47,    0,
        0,    0,   55,    0,    0,   59,    0,    0,   62,    0,

        0,   78,    0,    0,    0,   84,   88,    0,    0,   91,
        0,    0,    0,  102,    0,  108,    0,  102,    0,    0,
      105,    0,  102,    0,  103,  111,  102,    0,  105,    0,
        0,    0,    0,    0,    0,  139,    0,    0,   30,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       61,    0,    0,    0,    0,    0,   89,   90,   92,    0,
      102,    0,  102,    0,    0,    0,    0,    0,    0,   26,
        0,    0,    0,    0,    0,    0,    0,   51,   56,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       29,    0,   38,    0,    0,   48,   50,   58,   60,   64,

        0,    0,    0,    0,  126,  127,    0,   39,   42,    0,
       63,    0,    0,    0,    0,    0,    0,    0,   83,    0,
        0,    0,    0,    0,   43,   81,    0,    0,    0,    0,
       82,    0,  122,    0,  123,   21,  124,  125,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,   14,    1,    1,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       30,   37,   38,   39,   40,   41,   42,   43,   44,   30,
       45,    1,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   30,   58,   59,   60,   61,
       62,   63,   30,   64,   65,   66,   67,   68,   69,   70,
       71,   30,    1,   72,    1,   72,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    1,    4,    4,    5,    1,    6,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    7,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1
    } ;

static yyconst flex_uint16_t yy_base[1575] =
    {   0,
        0,   72,  144,  216,  286, 3247,   18,   20,   19,   21,
       23,   24,   48,   49,   50,   93, 3240, 3239, 3236,  353,
       33,  164, 3229,  120, 3218,  105, 3191, 3179, 3194, 3193,
     3172, 5943, 5943,   28, 5943,   24, 3120, 5943, 5943,   54,
       72, 3066,  220,   80,  389,  176,  180,  231,  223,  233,
      234,  235,   88,  280,  336,  157, 5943, 5943, 5943, 5943,
     5943, 5943, 5943, 5943, 5943, 5943, 5943, 5943, 5943, 5943,
     5943, 5943, 3082, 5943,  121,  128,  453,  112,  131,  177,
      525,  271,  596, 5943,  173, 5943,  277,  377,  359,  340,
     3064, 5943, 5943, 3074, 5943, 5943,  194, 2921,    0, 5943,

     5943, 5943,  112,   34, 2903,    0, 2902,    0,  187,  139,
       85,  229,  248,  238,  310,  353,  369,  386,  230,  410,
      376,  457,  372,  361, 2880,  324,  467,  227,  391,  337,
      458,  459,  461,  466,  494, 2871,  485,  529, 2870, 5943,
      198,  197,  323,  547,  425,  200,  382,  510,  482,  312,
      667,  422,  498,  555,  739,  483, 2847,  559,  571,  574,
      582, 2835,  585,  604,  587,  811,  656,  613,  698,  774,
      618,  641,  435,  600,  637,  272,  691,  835, 2811,  836,
      666,  676,  778,  460,  841,  551,  610, 2807,  633,    0,
     5943,  542,  149,  564,  819,  602,  709,  810,  700,  593,

      572,  816,  667,  833,  682,  707,  836,  744,  882,  850,
      867,  747,  749,  649,  858,  750,  834,  845,  899,  753,
      869,  862,  756,  920,  906,  824,  921,  784,  639,  957,
      325,  640,  966,  648, 2786,  970,  785,  973, 2789,  719,
      984,  720, 2765,  961,   99,  992, 2768, 2762,  796,  843,
      996, 1005, 1023, 1031, 1077,  869, 1035, 1038,  391,  910,
     1051, 1054, 1062, 2759,  940, 1096, 2745,  988,  943, 1066,
     5943, 1100, 1103, 1111, 2748, 1039, 1123, 1126, 2737, 1108,
     1134, 1142, 2734, 2720, 1131, 5943, 1150, 1153, 2708, 1158,
      786, 1139, 1166, 1175, 1193, 1194, 1202, 1201, 1210, 1225,

     1209, 1228, 1237, 1240, 1249,  922, 1179,  750, 5943,  874,
      968, 1267, 1255, 1268,  241, 1282, 1057, 5943, 5943,  971,
     1023, 1192, 1250, 1149, 1102, 1208, 1256, 1261, 1263, 1268,
     1292, 1278,  969, 1145, 1207, 1287, 1301, 1298, 1308, 1295,
     1300, 1317, 1304, 1309, 1321, 1314, 1327, 1330, 1332, 1338,
     1336, 1325, 2675, 1354, 1010, 1356, 1124, 1363, 1361, 1370,
     1378, 1380, 2665, 2653, 1384, 1381, 1388, 1389, 2644, 1397,
     1394, 1425, 1290, 1433, 1407, 1437, 1440, 1453, 1450, 1461,
     1458, 2627, 1469, 1472, 2620, 1475, 1477, 5943, 1485, 2611,
     5943, 1488, 2600, 2601, 1496, 5943, 2576, 5943, 1498, 1493,

     1506, 1503, 1514, 1516, 1524, 1511, 1532, 1541, 1559, 1567,
     1613, 1570, 1521, 1580, 1587, 1595, 1529, 1603, 1571, 1632,
     1635, 1592, 2571, 1643, 1645, 1659, 2556, 1600, 1667, 2534,
     1640, 5943, 1671, 1679, 2532, 1563, 5943, 5943, 1687, 5943,
     2488, 1690, 2481, 1648, 1694, 1702, 1699, 1710, 1713, 1721,
     2453, 5943, 1725, 5943, 1728, 1729, 1737, 1740, 2445, 1748,
     1750, 1758, 2427, 1745, 1766, 1775, 1793, 1794, 1053, 1755,
     1802, 1805, 1810, 1821, 1822, 1829, 1830, 1837, 1846, 1859,
     1856, 1864, 1461, 1523, 1538, 1564, 1320, 1720, 1875, 1854,
     1879, 1889, 5943, 1898, 1663, 1235, 1385, 1401, 1795, 1739,

     1800, 1819, 1784, 1869, 1878, 1901, 1879, 1881, 1889, 1434,
     1761, 1897, 1910, 1907, 1836, 1911, 1916, 1466, 1849, 1925,
     2403, 1669, 1683, 1928, 2368, 1929, 1935, 1934, 1924, 1938,
     1950, 1940, 1953, 2348, 1958, 1944, 1960, 1957, 1967, 1974,
     1976, 1969, 1981, 1987, 1985, 1990, 1994, 1995, 5943, 1993,
     2327, 2021, 2012, 2035, 2038, 2040,  311, 2049, 2333, 2061,
     2330, 2057, 2065, 2068, 2072, 5943, 2075, 5943, 2077, 2046,
     2085, 2082, 2090,  408, 2093, 2315, 2097, 2307, 2101, 2104,
     2107, 2110, 2113, 2125, 2128, 2131, 2114, 2143,  439, 2147,
     2304, 2151, 2132, 2155,  703, 2158, 2296, 2162, 2294, 2166,

     2169, 2173, 2264, 2176, 5943, 2179, 2251, 5943, 2182, 2221,
     2186, 5943, 1371, 2139, 2189, 2136, 2193, 2196, 2200, 2203,
     2206, 2207, 2215, 2218, 2210, 1637, 2220, 2135, 2226, 2118,
     2230, 5943, 2233, 2043, 5943, 2236, 2040, 2241, 2259, 2260,
     2263, 2271, 2268, 2010, 2276, 1847, 2279, 1975, 1976, 2288,
     2291, 1836, 2292, 2300, 2303, 2306, 2311, 2314, 2321, 2322,
     2329, 2332, 2337, 2340, 2232, 5943, 5943, 2244, 2017, 2297,
     2359, 2349, 2360, 2350, 2366, 2367, 2012,  490, 2305, 2281,
     2355, 1947, 2356, 2359, 2364, 2374, 2375, 2378, 2377, 2366,
     2387, 2379, 2378, 2366, 2393, 2399, 2394, 2406, 1930, 2413,

     2417, 2420, 2410, 2422, 2436, 2441, 2434, 2427, 2446, 2453,
     2444, 2451, 2463, 2458, 1909, 2448, 1858, 2473, 2472, 2479,
     2482, 2495, 2485, 2474, 2486, 2496, 2500, 2488, 1857, 2515,
     2520, 2561, 2529, 2542, 2550, 2569, 2539, 2547, 2573, 2581,
     2585, 2588, 2589, 2597, 2600, 2608, 2610, 2618, 2605, 2615,
     2626, 2629, 2637, 2639, 2647, 2650, 2655, 2654, 2663, 2666,
     2674, 2671, 2678, 2682, 2685, 2693, 2690, 2697, 2705, 2702,
     2713, 2716, 2724, 2727, 5943, 2729, 2732, 2734, 2742, 2746,
     2754, 2757, 2758, 2766, 2769, 2777, 2779, 2787, 2774, 2784,
     2795, 2798, 2806, 5943, 2815, 2833, 2834, 2802, 2842, 2803,

     2846, 2849, 2862, 2850, 2865, 2873, 5943, 1823, 5943, 2876,
     1786, 2881, 2880, 2889, 2892, 1765, 2900, 2902, 2910, 1761,
     2897, 2913, 2920, 2921, 2928, 2929, 2936, 2937, 2944, 2496,
     5943, 2422, 2534, 2699, 2953, 2954, 2946, 2957, 2868, 5943,
     2030, 2079, 5943, 2554, 2602, 2904, 2947, 2949, 2952, 2620,
     2687, 2759, 1748, 1728, 2879, 2630, 2529, 2816, 2943, 2950,
     2957, 1718, 2970, 2958, 2945, 2975, 2980, 1704, 2919, 2985,
     2988, 2967, 3003, 2997, 3006, 3000, 3001, 1693, 1684, 3013,
     3010, 1681, 1670, 3022, 1660, 2991, 3023, 3015, 3030, 1649,
     3024, 3025, 3026, 3032, 3051, 3045, 3050, 3074, 3066, 3086,

     3093, 3101, 1651, 3090, 3109, 3098, 3113, 5943, 3117, 3125,
     3129, 3137, 3141, 3144, 3145, 3153, 3156, 3164, 3166, 3174,
     1650, 3161, 3182, 3171, 3186, 5943, 3190, 3198, 3202, 3210,
     3214, 3217, 2115, 3224, 3221, 3232, 3235, 3243, 3246, 3222,
     3254, 3257, 3258, 3266, 3269, 3277, 3279, 3287, 1606, 3274,
     3295, 3298, 3284, 3306, 3314, 3303, 3318, 3321, 3329, 5943,
     3332, 3340, 3348, 3352, 3360, 3364, 3368, 3371, 3337, 3379,
     3376, 3387, 3390, 3398, 3401, 3406, 3405, 3414, 3417, 3425,
     3427, 3435, 1605, 3422, 3443, 3432, 3447, 5943, 3451, 3459,
     3463, 3471, 3475, 3484, 3502, 3503, 3506, 3514, 3511, 3524,

     3531, 3539, 1597, 3536, 3548, 3546, 3556, 5943, 3559, 3567,
     3571, 3579, 3582, 3583, 3591, 3594, 3602, 3604, 3612, 1589,
     3599, 3620, 3609, 3624, 5943, 3628, 1576, 3636, 5943, 3639,
     3644, 3647, 3652, 3660, 3663, 3668, 2791, 2874, 3070, 3656,
     3672, 3676, 5943, 3679, 3335, 5943, 3047, 3106, 3626, 3672,
     3308, 3680, 3144, 3682, 1561, 1523, 3087, 5943, 3405, 3504,
     3679, 3603, 3689, 3256, 3688, 3701, 3691, 3442, 3248, 3690,
     3711, 3716, 3143, 3717, 3619, 1522, 1505, 3719, 3650, 3584,
     3703, 3722, 3731, 3721, 3361, 3732, 3728, 3774, 1500, 3764,
     5943, 3788, 1477, 3778, 5943, 3796, 1464, 3800, 5943, 3808,

     1417, 3812, 5943, 3751, 1406, 3816, 3819, 3827, 1403, 3752,
     3835, 3838, 3843, 3846, 3755, 3785, 1342, 3851, 3859, 1331,
     3824, 3867, 3875, 1269, 3879, 5943, 3887, 1260, 3895, 1211,
     3899, 5943, 3903, 5943, 3911, 1185, 3915, 5943, 3923, 1169,
     3927, 5943, 3935, 1160, 3939, 5943, 3947, 1145, 3951, 5943,
     3959, 1125, 3963, 5943, 3971, 1116, 3975, 5943, 3983, 1113,
     3987, 5943, 3990, 3995, 3998, 4003, 4010, 4011, 3332, 5943,
     3456, 3943, 5943, 3871, 4019, 5943, 3789, 1093, 1090, 3977,
     3825, 1068, 3965, 3088, 3840, 3790, 4005, 1028,  996, 4008,
     4009, 4010,  964, 4000, 4016,  938, 4001, 4017,  927, 4021,

     3404,  924, 4023, 4025, 3857,  913,  893, 4028, 4030,  892,
     4046, 4051, 4076, 5943, 4087,  875, 4064, 5943, 4091, 4099,
      868, 4066,  839,  807,  789,  771, 5943, 4107,  766, 4110,
     4115, 4118, 3509, 3830, 4080, 5943, 4075, 4089,  714, 4090,
     4072, 4100, 4112, 4069, 4113, 4114, 4115, 4120, 4122, 4121,
      703, 4119, 4131, 4118, 4142, 4129,  688,  615,  603, 4190,
     5943, 4194, 5943, 4160, 4197, 4163, 3765, 3940, 4165,  578,
     4123, 4152, 4170, 4187, 4184, 4190, 4193,  561,  552, 4191,
     4194, 4200, 4203, 4204, 4210, 4188, 4221,  487,  432, 4215,
      418, 4184,  415, 4222, 4212,  350,  287,  273,  261,  243,

     4221, 4228, 4231, 4218, 4215, 4218, 4242, 5943,  236, 4250,
      191, 4239, 4243, 4253,  174,  158, 4255, 4260,  118, 4258,
     4269, 4231, 4252, 4272,   94,   53, 4274, 4271, 4275, 4291,
       37, 4280, 5943, 4287, 5943,    8, 5943, 5943, 5943, 4344,
     4351, 4358, 4365, 4372, 4379, 4386, 4393, 4400, 4407, 4414,
     4421, 4428, 4432, 4436, 4441, 4448, 4455, 4462, 4469, 4476,
     4483, 4490, 4497, 4503, 4506, 4510, 4517, 4524, 4531, 4538,
     4545, 4552, 4559, 4566, 4573, 4580, 4587, 4594, 4601, 4608,
     4615, 4622, 4629, 4636, 4643, 4650, 4657, 4664, 4671, 4678,
     4685, 4692, 4699, 4706, 4713, 4720, 4727, 4734, 4741, 4748,

     4755, 4762, 4769, 4776, 4783, 4790, 4797, 4804, 4811, 4815,
     4820, 4827, 4834, 4841, 4848, 4855, 4862, 4869, 4876, 4883,
     4890, 4897, 4904, 4911, 4918, 4925, 4932, 4939, 4946, 4953,
     4960, 4967, 4974, 4981, 4988, 4995, 5002, 5009, 5016, 5020,
     5025, 5032, 5039, 5046, 5053, 5060, 5067, 5074, 5081, 5088,
     5095, 5102, 5109, 5116, 5123, 5130, 5137, 5144, 5151, 5158,
     5165, 5172, 5179, 5186, 5193, 5200, 5207, 5214, 5221, 5228,
     5235, 5238, 5243, 5250, 5257, 5264, 5271, 5278, 5285, 5292,
     5299, 5306, 5313, 5320, 5327, 5334, 5341, 5348, 5355, 5362,
     5369, 5376, 5383, 5390, 5397, 5404, 5411, 5418, 5425, 5432,

     5439, 5446, 5453, 5460, 5467, 5474, 5478, 5483, 5490, 5497,
     5504, 5511, 5518, 5525, 5532, 5539, 5546, 5553, 5560, 5567,
     5574, 5581, 5588, 5595, 5602, 5609, 5616, 5623, 5630, 5637,
     5644, 5651, 5658, 5665, 5672, 5679, 5686, 5693, 5700, 5707,
     5714, 5721, 5728, 5735, 5739, 5744, 5751, 5758, 5765, 5772,
     5779, 5786, 5793, 5800, 5807, 5814, 5821, 5828, 5835, 5842,
     5849, 5856, 5863, 5870, 5877, 5884, 5891, 5898, 5905, 5912,
     5919, 5926, 5933, 5937
    } ;

static yyconst flex_int16_t yy_def[1575] =
    {   0,
     1340, 1340, 1341, 1341,    2,    5, 1342, 1342, 1343, 1343,
     1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345, 1346, 1347,
     1348, 1348, 1349, 1349, 1350, 1350, 1351, 1351, 1352, 1352,
     1339, 1339, 1339, 1339, 1339, 1339, 1353, 1339, 1339, 1354,
     1339, 1339, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1355, 1339, 1356, 1357, 1358, 1359, 1360, 1361,
     1358, 1356, 1360, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1362, 1339,

     1339, 1339, 1339, 1339, 1353, 1363, 1364, 1365, 1354, 1339,
     1339, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1355, 1339,
     1366, 1367, 1368, 1369, 1357, 1367, 1370, 1371, 1372, 1367,
     1373, 1374, 1375, 1376, 1373, 1374, 1377, 1378, 1379, 1380,
     1380, 1381, 1382, 1380, 1383, 1384, 1372, 1372, 1372, 1372,
     1372, 1372, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1385,
     1339, 1339, 1339, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1339, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1386, 1387, 1388,
     1367, 1389, 1381, 1387, 1377, 1390, 1388, 1388, 1381, 1390,
     1388, 1370, 1377, 1391, 1371, 1371, 1381, 1391, 1392, 1393,
     1394, 1395, 1396, 1397, 1395, 1393, 1398, 1396, 1367, 1399,
     1400, 1397, 1397, 1381, 1401, 1397, 1377, 1339, 1398, 1398,
     1339, 1398, 1394, 1394, 1381, 1398, 1394, 1402, 1381, 1403,
     1402, 1402, 1381, 1404, 1403, 1339, 1403, 1402, 1381, 1405,
     1367, 1406, 1407, 1408, 1409, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1339, 1339, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1411, 1412, 1413, 1412, 1414, 1413, 1413, 1414, 1413,
     1415, 1377, 1404, 1381, 1381, 1414, 1414, 1339, 1414, 1381,
     1339, 1413, 1381, 1416, 1416, 1339, 1381, 1339, 1417, 1418,

     1419, 1418, 1420, 1419, 1419, 1420, 1419, 1421, 1422, 1423,
     1421, 1422, 1424, 1425, 1423, 1423, 1426, 1423, 1420, 1420,
     1420, 1424, 1377, 1427, 1425, 1425, 1381, 1427, 1425, 1381,
     1426, 1339, 1426, 1423, 1381, 1339, 1339, 1339, 1420, 1339,
     1381, 1419, 1381, 1428, 1429, 1428, 1429, 1429, 1428, 1428,
     1404, 1339, 1429, 1339, 1430, 1431, 1432, 1431, 1377, 1433,
     1432, 1432, 1381, 1433, 1432, 1434, 1435, 1435, 1436, 1437,
     1438, 1439, 1439, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1440, 1440,

     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1339,
     1339, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1339, 1440,
     1440, 1441, 1442, 1443, 1442, 1444, 1443, 1443, 1444, 1443,
     1444, 1444, 1444, 1443, 1404, 1339, 1444, 1339, 1445, 1446,
     1447, 1446, 1448, 1447, 1447, 1448, 1447, 1448, 1448, 1448,
     1447, 1445, 1449, 1450, 1445, 1449, 1451, 1452, 1450, 1450,
     1453, 1450, 1451, 1454, 1452, 1452, 1454, 1452, 1453, 1453,

     1450, 1448, 1454, 1454, 1339, 1454, 1381, 1339, 1452, 1381,
     1453, 1339, 1455, 1456, 1455, 1456, 1456, 1455, 1456, 1455,
     1457, 1458, 1459, 1458, 1460, 1459, 1459, 1460, 1459, 1460,
     1460, 1339, 1460, 1381, 1339, 1459, 1381, 1461, 1462, 1462,
     1463, 1464, 1463, 1465, 1466, 1464, 1464, 1381, 1466, 1464,
     1467, 1468, 1469, 1470, 1445, 1467, 1467, 1445, 1445, 1445,
     1445, 1445, 1445, 1467, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1471, 1339, 1339, 1339,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1339, 1339, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1473,
     1474, 1475, 1474, 1476, 1475, 1475, 1476, 1476, 1476, 1475,
     1476, 1477, 1478, 1479, 1478, 1480, 1479, 1479, 1480, 1480,
     1480, 1479, 1480, 1481, 1482, 1481, 1483, 1484, 1485, 1486,
     1486, 1487, 1484, 1488, 1485, 1485, 1488, 1487, 1486, 1488,
     1488, 1485, 1487, 1488, 1339, 1489, 1490, 1490, 1489, 1490,
     1489, 1491, 1492, 1493, 1492, 1494, 1493, 1493, 1494, 1494,
     1494, 1493, 1494, 1339, 1495, 1496, 1496, 1497, 1498, 1497,

     1499, 1498, 1498, 1499, 1499, 1499, 1339, 1500, 1339, 1498,
     1500, 1501, 1502, 1503, 1502, 1504, 1505, 1503, 1503, 1500,
     1505, 1506, 1506, 1501, 1506, 1506, 1506, 1506, 1506, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1339, 1339, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1508, 1509, 1510, 1509, 1511,

     1510, 1510, 1500, 1511, 1510, 1511, 1511, 1339, 1511, 1510,
     1511, 1510, 1511, 1506, 1512, 1513, 1512, 1514, 1513, 1513,
     1500, 1514, 1513, 1514, 1514, 1339, 1514, 1513, 1514, 1513,
     1514, 1515, 1516, 1515, 1517, 1518, 1519, 1519, 1520, 1521,
     1522, 1523, 1524, 1525, 1524, 1526, 1525, 1525, 1500, 1526,
     1525, 1527, 1528, 1527, 1527, 1528, 1528, 1526, 1526, 1339,
     1526, 1525, 1527, 1526, 1525, 1528, 1526, 1529, 1530, 1529,
     1530, 1530, 1529, 1530, 1529, 1531, 1532, 1533, 1532, 1534,
     1533, 1533, 1500, 1534, 1533, 1534, 1534, 1339, 1534, 1533,
     1534, 1533, 1534, 1535, 1536, 1536, 1537, 1538, 1537, 1539,

     1538, 1538, 1500, 1539, 1538, 1539, 1539, 1339, 1539, 1538,
     1539, 1538, 1540, 1541, 1542, 1541, 1543, 1542, 1542, 1500,
     1543, 1542, 1543, 1543, 1339, 1543, 1500, 1542, 1339, 1544,
     1544, 1540, 1544, 1544, 1544, 1544, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1545, 1545, 1545,
     1545, 1545, 1545, 1545, 1545, 1545, 1339, 1339, 1545, 1545,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1546, 1500, 1547,
     1339, 1546, 1500, 1547, 1339, 1548, 1500, 1549, 1339, 1548,

     1500, 1549, 1339, 1550, 1551, 1552, 1553, 1553, 1500, 1554,
     1553, 1555, 1555, 1555, 1556, 1557, 1558, 1559, 1559, 1500,
     1552, 1559, 1560, 1500, 1561, 1339, 1560, 1500, 1562, 1500,
     1563, 1339, 1561, 1339, 1564, 1500, 1565, 1339, 1566, 1500,
     1567, 1339, 1566, 1500, 1567, 1339, 1568, 1500, 1569, 1339,
     1568, 1500, 1569, 1339, 1570, 1500, 1571, 1339, 1570, 1500,
     1571, 1339, 1572, 1572, 1573, 1572, 1573, 1573, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1339, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1552, 1552, 1339, 1552, 1500, 1554, 1339, 1554, 1553,
     1500, 1556, 1558, 1558, 1558, 1500, 1339, 1559, 1500, 1572,
     1572, 1572, 1339, 1339, 1339, 1339, 1574, 1574, 1574, 1574,
     1339, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1552,
     1339, 1554, 1339, 1573, 1572, 1573, 1339, 1339, 1574, 1574,
     1574, 1339, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1573, 1339, 1339, 1574,
     1574, 1339, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1339, 1339, 1574, 1339, 1574, 1574,
     1574, 1574, 1574, 1574, 1339, 1339, 1574, 1574, 1574, 1574,
     1574, 1339, 1339, 1574, 1574, 1574, 1574, 1339, 1339, 1574,
     1574, 1339, 1339, 1339, 1339, 1574, 1339, 1339,    0, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,

     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,

     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339
    } ;

static yyconst flex_uint16_t yy_nxt[6016] =
    {   0,
       32,   32,   33,   34,   32,   32,   32,   32,   32,   35,
       32,   32,   32,   32,   36,   36,   32,   32,   32,   32,
       58,   62,   58,   62,  106,   66,   66,   59,   60,   59,
       60,  102,   67,   67,   85,   86,   85,   87,  104,  104,
       68,   68,  103,  103,   38,   32,   32,   32,  104,  104,
       66,   66,   66,  106,   70,   70,   70,   67,   67,   67,
      107,  108,   70,   63,   64,   63,   64,   69,   69,  106,
      106,   32,   32,   32,   39,   34,   32,   32,   32,   32,
       32,   35,   32,   32,   32,   32,   36,   36,   32,   32,
       32,   32,   69,   69,   69,   66,  106,   70,   70,   70,

      110,  397,   67,  248,  106,   70,   97,   96,   97,   98,
      106,  114,  132,  193,  157,  102,   38,   32,   32,   32,
      158,   70,   93,  142,   94,  143,  103,  103,  110,  144,
      146,   94,  147,  150,  106,  152,  148,   69,  114,  159,
      132,  193,   94,   32,   32,   32,   33,   34,   32,   32,
       32,   32,   32,   35,   32,   32,   32,   32,   36,   36,
       32,   32,   32,   32,   70,   88,   86,   88,   87,   89,
       94, 1323,  192,  106,  173,   90,  173,  174,  161,  162,
      161,  163,  321,   91,  138,  164,   90, 1322,   38,   32,
       32,   32,  106,  107,  108,  187,  106,  187,  188,  192,

      142,  232,  229,  106,  232,  233,  230,  106,  233,  321,
      120,  121,  138,  122,   90,   32,   32,   32,   39,   34,
       32,   32,   32,   32,   32,   35,   32,   32,   32,   32,
       36,   36,   32,   32,   32,   32,  106,  120,  121,  106,
      122,  112,  315,  106,  315,  106,  106,  106,  125,  106,
      106,  106,  106,  217,  106,  126,  127,  113,  202,  106,
       38,   32,   32,   32,  106,  123,  194,  128,  129,  112,
      124,  130,  196,  142,  131,  143,  125,  106,  175,  144,
      175,  217,  126,  127,  113,  195,  202,   32,   33,  106,
      165,   41,  123,  194,  128,  129,  106,  124,  130,  196,

      306,  131,  176,  106,  133,   42,   43,   44,   45,   46,
       47,   48,  195,  390,   49,  737,  232,   50,   51,  134,
      233,   52,   53,   54,   55,  235,  106,   56,  306,  232,
      176,  236,  133,  233,   43,   44,   45,   46,   47,   48,
      106,  183,   49,  183,   50,   51,  134,  197,   52,   53,
       54,   55,  106,  106,   56,   76,   77,   78,   79,  214,
      180,   80,  180,  135,   79,  184,  106,   81,   81,  106,
      136,  219,   82,  198,  197,   83,   79,  106,  177,  137,
      177,  174,  178,  181,  243,  106,  214,  182,  106,  199,
      244,  135,  106,  184,  213,  232,  179,  136,  219,  233,

      207,  198,  106,   83,   79,  106,  137,  106,  212,  115,
      441,  181,  749,  208,  218,  182,  116,  199,  200,  201,
      117,  213,  203,  118,  157,  119,  106,  146,  207,  147,
      257,  106,  204,  148,  106,  212,  173,  115,  173,  174,
      208,  430,  218,  762,  116,  200,  201,  117, 1306,  205,
      118,  206,  119,  149,  149,  150,  151,  152,  149,  149,
      204,  154,  149,  149,  149,  149,  149,  155,  155,  149,
      149,  149,  149,  106,  106,  106,  205,  106,  206,  221,
      209,  222,  106,  106,  150,  157,  250,  224,  311,  215,
      251,  257,  223,  843,  220,  210,  211,  149,  149,  149,

      259,  106,  260, 1305,  843,  216,  261,  221,  209,  222,
      106,  246,  247,  246,  248,  224,  311,  215,  225,  223,
      226,  220,  210,  211,  149,  149,  149,  150,  155,  152,
      149,  149,  216,  159,  149,  149,  149,  149,  149,  155,
      155,  149,  149,  149,  149,  106,  225,  226,  238,  239,
      238,  240,  315,  227,  316,  241,  263,  264,  263,  265,
      270,  271,  270,  266,  320,  317,  317,  272,  106,  149,
      149,  149,  274,  275,  274,  276,  279,  106,  280,  277,
      106,  227,  281,  282,  162,  282,  280,  286,  106,  291,
      281,  292,  320,  287,  106,  293,  149,  166,  150,  166,

      152,  175,  322,  175,  159,  288,  289,  288,  280,  106,
      331,  187,  281,  187,  188,  150,  167,  250,  106,  106,
      150,  251,  250,  168,  325,  176,  251,  169,  330,  322,
      170,  106,  171,  298,  318,  319,  318,  331,  175,  172,
      175,  235,  382,  150,  167,  250,  304,  376,  383,  251,
      235,  168,  325,  176,  169,  330,  376,  170,  150,  171,
      250,  298,  176,  305,  251,  106,  172,  249,  249,  150,
      252,  250,  249,  249,  304,  254,  249,  249,  249,  249,
      249,  255,  255,  249,  249,  249,  249,  296,  356,  333,
      176,  305,  177,  297,  177,  174,  178,  307,  106,  308,

      150,  309,  250,  336,  106,  607,  251,  767,  334,  310,
      179,  249,  249,  249,  296,  356,  106,  333,  299,  106,
      297,  391,  243,  106,  307,  106,  308,  389,  244,  309,
      106,  336,  300,  326,  337,  334,  310,  329,  249,  249,
      249,  150,  255,  250,  249,  249,  299,  251,  249,  249,
      249,  249,  249,  255,  255,  249,  249,  249,  249,  300,
      106,  326,  337,  106,  329,  106,  106,  354,  339,  106,
      284,  355,  106,  486,  358,  284,  150,  363,  250,  183,
      366,  183,  251,  249,  249,  249,  142,  390,  373,  379,
      232, 1225,  374,  380,  233,  354,  339,  301,  150,  355,

      400,  486,  358,  184,  401,  363,  302,  303,  366, 1225,
      249,  249,  294,  150,  294,  250,  249,  249,  249,  251,
      249,  249,  249,  249,  249,  301,  106,  249,  249,  249,
      249,  184,  106,  302,  303,  106,  180,  180,  180,  180,
      106, 1225,  312,  327,  312,  157,  328,  323,  370,  106,
      106,  403,  106,  324,  332,  249,  249,  249,  249,  181,
      181,  106,  359,  182,  182,  313,  106,  335,  338,  314,
      327,  157,  284,  328,  106,  323,  370,  403,  106,  284,
      324,  332,  249,  106,  360,  106,  352,  181,  181,  357,
      359,  182,  182,  313,  335,  338,  487,  314,  106,  353,

      364,  365,  340,  341,  342,  343,  344,  345,  106,  106,
      346,  360,  423,  352,  347,  106,  357,  348,  424,  349,
      350,  361,  106,  351,  487,  362,  353,  364,  365,  106,
      340,  341,  342,  343,  344,  345,  106,  106,  346,  369,
      106,  347,  432,  106,  348,  438,  349,  350,  433,  361,
      351,  421,  367,  362,  106,  483,  368,  371,  378,  239,
      378,  379,  395,  396,  395,  380,  369,  384,  385,  384,
      284,  387,  388,  387,  378,  239,  378,  379,  389,  367,
      106,  380,  483,  368,  371,  392,  393,  392,  379,  436,
      437,  436,  380,  246,  247,  246,  248,  405,  275,  405,

      406,  488,  497,  510,  407,  399,  399,  150,  408,  400,
      399,  399,  106,  410,  399,  399,  399,  399,  399,  411,
      411,  399,  399,  399,  399,  259,  106,  413,  488,  497,
      510,  414,  416,  264,  416,  417,  420,  271,  420,  418,
      259,  438,  413,  421,  106,  498,  414,  421,  536,  399,
      399,  399,  426,  427,  426,  428,  430,  232,  417,  429,
      496,  233,  418,  416,  264,  416,  417,  420,  271,  420,
      418,  496,  496,  498,  421,  536,  399,  399,  399,  150,
      411,  400,  399,  399,  106,  401,  399,  399,  399,  399,
      399,  411,  411,  399,  399,  399,  399,  434,  435,  434,

      417,  439,  440,  439,  418,  441,  106,  406,  421,  106,
      286,  407,  405,  275,  405,  406,  448,  284,  106,  407,
      284,  399,  399,  399,  442,  443,  442,  406,  279,  284,
      445,  407,  502,  286,  446,  449,  289,  449,  445,  448,
      106,  459,  446,  450,  162,  450,  445,  460,  399,  284,
      446,  453,  454,  453,  449,  289,  449,  445,  448,  502,
      291,  446,  456,  538,  284,  106,  457,  462,  463,  462,
      464,  501,  511,  284,  465,  399,  466,  150,  466,  400,
      399,  399,  399,  401,  399,  399,  399,  399,  399,  284,
      538,  399,  399,  399,  399,  469,  150,  470,  400,  501,

      511,  471,  401,  150,  150,  400,  400,  484,  106,  401,
      401,  150,  150,  400,  400,  284,  485,  401,  401,  399,
      399,  399,  399,  106,  106,  472,  473,  150,  499,  400,
      150,  503,  400,  401,  474,  484,  401,  477,  678,  150,
      512,  400,  150,  485,  400,  401,  399,  475,  401,  678,
      678,  150,  472,  400,  473,  499,  489,  401,  489,  503,
      478,  474,  476,  479,  284,  477,  106,  512,  312,  492,
      312,  492,  106,  284,  475,  480,  500,  106,  481,  106,
      482,  505,  504,  315,  106,  495,  490,  478,  491,  476,
      479,  313,  235,  493,  106,  314,  496,  496,  556,  507,

      506,  494,  480,  106,  500,  481,  509,  482,  106,  505,
      504,  106,  508,  490,  106,  491,  106,  106,  513,  313,
      106,  493,  515,  314,  106,  106,  507,  506,  494,  514,
      106,  519,  518,  106,  509,  284,  516,  106,  521,  525,
      508,  106,  522,  106, 1225,  513,  106,  526,  106,  517,
      515,  669,  106,  520,  106,  523,  529,  514,  519,  518,
      524,  527,  531,  533,  516,  521,  528,  525,  534,  522,
      106,  530,  106,  279,  526,  777,  517,  106,  669,  106,
      520,  532,  523,  541,  529,  535,  106,  524,  527,  539,
      531,  533,  537,  528,  106,  534,  106,  106,  530,  540,

      106,  542,  543,  546,  106,  106,  549,  284,  532,  235,
      106,  541,  535,  106,  268,  556,  544,  539,  551,  537,
      545,  284,  547,  548,  679,  550,  540,  142,  542,  553,
      543,  546,  680,  554,  558,  239,  558,  559,  562,  388,
      562,  560,  390,  544,  559,  563,  551,  545,  560,  547,
      548,  679,  391,  550,  558,  239,  558,  559,  563,  680,
      382,  560,  564,  393,  564,  559,  383,  693,  284,  560,
      565,  566,  565,  384,  385,  384,  284,  391,  562,  388,
      562,  284,  106,  563,  665,  563,  567,  568,  567,  564,
      393,  564,  559,  563,  693,  157,  560,  395,  396,  395,

      150,  573,  570,  701,  284,  157,  571,  575,  275,  575,
      576,  573,  665,  438,  577,  579,  271,  579,  441,  580,
      576,  106,  580,  423,  577,  575,  275,  575,  576,  594,
      701,  432,  577,  581,  443,  581,  576,  600,  106,  106,
      577,  569,  569,  150,  582,  570,  569,  569,  666,  584,
      569,  569,  569,  569,  569,  585,  585,  569,  569,  569,
      569,  259,  667,  587,  436,  437,  436,  588,  590,  264,
      590,  591,  259,  438,  587,  592,  666,  106,  588,  580,
      284,  596,  427,  596,  597,  569,  569,  569,  598,  430,
      667,  591,  668,  284,  423,  592,  590,  264,  590,  591,

      594,  284,  608,  592,  601,  435,  601,  591,  606,  284,
      284,  592,  569,  569,  569,  150,  585,  570,  569,  569,
      668,  571,  569,  569,  569,  569,  569,  585,  585,  569,
      569,  569,  569,  579,  271,  579,  602,  440,  602,  634,
      580,  789,  432,  580,  604,  605,  604,  607,  600,  597,
      279,  606,  614,  598,  284,  284,  615,  569,  569,  569,
      596,  427,  596,  597,  315,  106,  677,  598,  609,  610,
      609,  597,  611,  612,  611,  598,  106,  678,  678,  600,
      601,  435,  601,  591,  569,  106,  106,  592,  602,  440,
      602,  581,  443,  581,  576,  580,  286,  106,  577,  106,

      106,  286,  617,  618,  289,  618,  614,  617,  704,  106,
      615,  619,  454,  619,  618,  289,  618,  614,  617,  705,
      106,  615,  620,  162,  620,  614,  619,  454,  619,  615,
      291,  459,  622,  617,  106,  704,  623,  625,  627,  463,
      627,  628,  459,  670,  106,  629,  705,  635,  625,  631,
      632,  631,  634,  633,  628,  106,  633,  644,  629,  627,
      463,  627,  628,  645,  106,  284,  629,  636,  637,  636,
      628,  670,  682,  268,  629,  569,  638,  150,  638,  570,
      569,  569,  569,  571,  569,  569,  569,  569,  569,  694,
      284,  569,  569,  569,  569,  469,  469,  641,  641,  682,

      106,  642,  642,  647,  648,  647,  649,  652,  685,  653,
      650,  106,  652,  654,  653,  681,  106,  694,  654,  569,
      569,  569,  569,  150,  150,  570,  570,  284,  683,  571,
      571,  150,  150,  570,  570,  106,  685,  571,  571,  150,
      232,  570,  684,  681,  233,  571,  569,  655,  150,  808,
      570,  804,  106,  657,  571,  671,  683,  671,  150,  656,
      570,  150,  658,  570,  571,  106,  150,  571,  570,  698,
      684,  659,  571,  106,  106,  655,  489,  660,  489,  661,
      673,  657,  673,  702,  663,  106,  656,  662,  664,  658,
      492,  672,  492,  686,  106,  106,  698,  106,  659,  675,

      687,  675,  674,  690,  660,  106,  490,  661,  491,  691,
      702,  692,  663,  106,  493,  662,  664,  106,  672,  695,
      676,  686,  494,  106,  688,  106,  106,  106,  687,  689,
      674,  690,  106,  490,  696,  491,  699,  691,  697,  692,
      106,  106,  493,  700,  106,  106,  106,  695,  676,  494,
      106,  106,  688,  703,  106,  710,  106,  689,  708,  711,
      106,  706,  696,  106,  699,  697,  106,  707,  709,  106,
      712,  700,  716,  106,  106,  713,  106,  714,  809,  284,
      718,  703,  710,  106,  717,  106,  708,  711,  706,  715,
      106,  719,  106,  722,  707,  709,  721,  106,  712,  720,

      716,  106,  713,  106,  723,  714,  106,  724,  718,  106,
      106,  106,  717,  841,  235,  842,  715,  727,  268,  719,
      734,  722,  725,  142,  721,  731,  843,  720,  726,  732,
      729,  315,  723,  315,  728,  724,  736,  239,  736,  737,
      235,  739,  388,  739,  284,  727,  734,  284,  157,  725,
      736,  239,  736,  737,  746,  726,  832,  729,  739,  388,
      739,  728,  740,  393,  740,  737,  741,  568,  741,  740,
      393,  740,  737,  565,  566,  565,  741,  568,  741,  150,
      315,  743,  315,  832,  157,  744,  748,  275,  748,  749,
      746,  751,  271,  751,  748,  275,  748,  749,  752,  443,

      752,  749,  751,  271,  751,  753,  440,  753,  752,  443,
      752,  749,  150,  754,  743,  259,  423,  758,  755,  232,
      635,  759,  764,  233,  756,  756,  761,  264,  761,  762,
      150,  756,  743,  259,  423,  758,  744,  635,  286,  759,
      764,  286,  756,  756,  766,  427,  766,  767,  761,  264,
      761,  762,  769,  435,  769,  762,  771,  605,  771,  766,
      427,  766,  767,  772,  610,  772,  767,  773,  612,  773,
      769,  435,  769,  762,  753,  440,  753,  771,  605,  771,
      774,  775,  774,  772,  610,  772,  767,  773,  612,  773,
      779,  289,  779,  777,  780,  454,  780,  779,  289,  779,

      777,  780,  454,  780,  781,  162,  781,  777,  291,  459,
      783,  791,  632,  791,  784,  786,  788,  463,  788,  789,
      459,  788,  463,  788,  789,  284,  786,  792,  637,  792,
      789,  791,  632,  791,  793,  794,  793,  792,  637,  792,
      789,  742,  795,  150,  795,  743,  742,  742,  742,  744,
      742,  742,  742,  742,  742,  284,  830,  742,  742,  742,
      742,  469,  469,  798,  798,  644,  608,  799,  799,  831,
      644,  801,  803,  648,  803,  804,  801,  806,  807,  806,
      803,  648,  803,  804,  830,  742,  742,  742,  742,  810,
      811,  810,  804,  652,  816,  813,  432,  831,  608,  814,

      817,  819,  820,  819,  821,  150,  432,  743,  652,  438,
      813,  744,  742,  652,  814,  813,  150,  438,  743,  814,
      845,  833,  744,  150,  150,  743,  743,  822,  844,  744,
      744,  150,  391,  743,  150,  391,  743,  744,  823,  150,
      744,  743,  652,  106,  813,  744,  825,  845,  814,  833,
      834,  836,  834,  836,  824,  822,  844,  826,  827,  829,
      671,  673,  671,  673,  106,  828,  823,  675,  838,  675,
      838,  106,  106,  835,  825,  106,  847,  846,  837,  848,
      106,  824,  106,  674,  106,  826,  827,  829,  676,  849,
      106,  106,  828,  106,  106,  106,  672,  858,  839,  856,

      857,  835,  852,  106,  847,  846,  837,  848,  854,  106,
      106,  674,  850,  851,  853,  106,  676,  849,  862,  106,
      855,  860,  106,  672,  858,  839,  106,  856,  857,  106,
      852,  284,  859,  106,  861,  854,  106,  864,  106,  850,
      851,  853,  866,  106,  863, 1038,  862,  855,  867,  860,
      106,  865,  106,  268,  868,  452,  869,  106,  871,  859,
      106,  861,  106,  870,  106,  864,  872,  106,  873,  106,
      866,  863,  874, 1038,  106,  867,  876,  875,  865,  106,
      877,  868,  881,  878,  869,  284,  871,  879,  106,  106,
      106,  870,  284,  872,  880,  106,  873,  882,  106,  884,

      874,  106,  106,  876,  106,  875,  890,  877,  883,  881,
      878,  106,  106,  885,  891,  879,  106,  142,  892,  897,
      886,  880,  235,  898,  889,  882,  895,  884,  900, 1037,
      887,  235,  888,  890,  893,  883,  284,  900,  284,  894,
      885,  391,  891,  907,  908,  907,  892,  909,  886,  391,
      909,  889,  390,  895,  904,  909, 1037,  887,  905,  888,
      284,  893,  902,  903,  902,  904,  894, 1039, 1057,  905,
      910,  239,  910,  904,  911,  388,  911,  905, 1046,  268,
      284,  909,  912,  393,  912,  904,  913,  568,  913,  905,
      150,  157,  915,  909, 1039, 1057,  916,  918,  920,  921,

      920,  922,  157,  398,  284,  923, 1046,  438,  918,  925,
      926,  925,  441,  927,  922,  284,  927,  438,  923,  928,
      275,  928,  922,  927,  284, 1047,  923,  929,  271,  929,
      930,  443,  930,  922,  927,  268,  106,  923,  931,  440,
      931,  933,  934,  935, 1052,  927,  106,  936,  938,  939,
      938,  940,  933, 1047,  935,  923,  423,  259,  941,  943,
      106, 1056,  946,  944,  948,  949,  948,  950,  430,  106,
      953,  951, 1052,  432,  954,  955,  264,  955,  953,  957,
      423,  106,  954,  959,  960,  959,  946,  607, 1056,  950,
      961,  106,  608,  951,  962,  427,  962,  950,  961,  432,

      834,  951,  834,  106,  608,  957,  963,  435,  963,  953,
      961, 1053,  284,  954,  964,  605,  964,  965,  610,  965,
      950,  961,  452,  835,  951,  966,  612,  966,  967,  775,
      967,  279,  957,  969,  286,  961,  286,  970,  284, 1053,
      972,  284,  972,  973,  289,  973,  969,  974,  454,  974,
      970,  835,  284,  268,  972,  975,  162,  975,  969,  291,
      459,  977,  970,  284,  398,  978,  980,  982,  983,  982,
      984,  459,  284,  268,  985,  106,  635,  980,  987,  988,
      987,  634,  989,  984, 1054,  989,  635,  985,  990,  463,
      990,  984,  989,  284,  268,  985,  991,  632,  991,  992,

      637,  992,  984,  989,  644,  644,  985,  993,  794,  993,
     1000, 1000, 1054,  189,  989,  914,  994,  150,  994,  915,
      914,  914,  914,  916,  914,  914,  914,  914,  914, 1169,
      185,  914,  914,  914,  914,  469,  469,  997,  997,  284,
     1058,  998,  998, 1002, 1003, 1002, 1004, 1007, 1008, 1007,
     1005,  808,  809, 1004, 1009,  268, 1169, 1005, 1009,  914,
      914,  914,  914, 1010,  648, 1010, 1004,  809, 1058, 1044,
     1005, 1044,  140, 1009, 1011,  807, 1011, 1012,  811, 1012,
     1004, 1009,  816,  652, 1005, 1014,  914,  106, 1017, 1015,
     1019, 1020, 1019, 1021,  816,  106,  106, 1022, 1170, 1029,

     1017, 1024, 1025, 1024, 1027, 1026, 1021, 1045, 1026,  108,
     1022, 1028,  820, 1028, 1021,  150, 1055,  915, 1022,  106,
      106,  916,  150,  652,  915, 1014, 1170,  189,  916, 1015,
      150,  150,  915,  915, 1045,  106,  916,  916,  150,  150,
      915,  915, 1048, 1055,  916,  916,  150, 1042,  915, 1042,
     1067, 1030,  916, 1031, 1040,  836, 1040,  836,  838,  106,
      838,  106, 1033,  106, 1036,  106,  106, 1064,  106, 1048,
     1032, 1043, 1051,  106,  106, 1034, 1035, 1067, 1030, 1059,
     1031, 1041,  837,  106, 1060, 1049,  106, 1050,  839, 1033,
     1062,  106, 1036, 1061, 1063, 1064,  106, 1032, 1070, 1043,

     1051,  106, 1034, 1035,  106, 1065, 1059,  106, 1066, 1041,
      837, 1060, 1049,  106, 1050,  839,  106,  106, 1062,  106,
     1061, 1063,  106, 1068, 1069, 1070,  106, 1071, 1073,  106,
     1079,  106, 1065, 1072, 1074, 1075, 1066, 1076,  106,  106,
      106,  106,  106, 1077, 1078, 1084,  106,  142,  106,  897,
     1068, 1069,  235,  898, 1081, 1071, 1073, 1079,  900, 1080,
     1072, 1074, 1075, 1086, 1083, 1076, 1082,  106,  235, 1085,
     1077, 1176, 1078, 1084,  900, 1088, 1089, 1088,  904, 1087,
      186, 1081,  905,  185,  140,  111, 1080, 1090, 1091, 1090,
     1086, 1083,  391, 1082,  909,  390, 1085,  904,  909, 1176,

      391,  905,  902,  903,  902,  904,  909, 1087, 1171,  905,
     1092, 1093, 1092,  904,  907,  908,  907,  905, 1094, 1095,
     1094,  909,  106, 1184, 1241,  909,  910,  239,  910,  904,
      911,  388,  911,  905, 1177, 1171,  106,  909,  912,  393,
      912,  904,  913,  568,  913,  905,  150,  157,  915,  909,
     1184, 1241,  916,  918, 1096, 1097, 1096,  922,  157,  106,
      106,  923, 1177,  438,  918, 1098, 1099, 1098,  441,  927,
      922, 1339,  927,  438,  923,  920,  921,  920,  922,  927,
     1182, 1199,  923, 1100, 1101, 1100,  922,  925,  926,  925,
      923, 1102, 1103, 1102,  927,  101,  101,   72,  927,  928,

      275,  928,  922,  929,  271,  929,  923, 1182, 1199,   72,
      927,  930,  443,  930,  922,  931,  440,  931,  923,  933,
       96,  935,  927, 1105, 1117,  941,  933,  934,  935, 1106,
      927,   93,  936, 1108, 1109, 1108, 1110, 1112,   74,  940,
     1111,   72,   72,  923,  938,  939,  938,  940, 1114,   39,
     1115,  923, 1339, 1339,  283, 1119, 1120, 1119, 1121,  259,
      423,  943, 1122, 1339,  106,  944,  946, 1123, 1124, 1123,
      950,  423,  106, 1195,  951, 1339,  608,  946, 1125, 1126,
     1125,  607,  961,  950, 1190,  961,  432,  951,  948,  949,
      948,  950,  957, 1339, 1339,  951, 1127, 1128, 1127,  950,

      430, 1195,  953,  951, 1339,  432,  954, 1129, 1130, 1129,
      953,  957, 1190, 1339,  954,  955,  264,  955,  953, 1131,
     1132, 1131,  954,  608,  106, 1339,  957, 1339, 1339,  961,
      959,  960,  959, 1133, 1134, 1133, 1174,  961, 1174,  286,
      961,  962,  427,  962,  950,  972, 1339, 1180,  951,  963,
      435,  963,  953,  964,  605,  964,  954, 1233, 1175, 1339,
      961,  965,  610,  965,  950,  966,  612,  966,  951,  967,
      775,  967,  957,  279, 1180,  969,  961,  106,  286,  970,
     1135, 1136, 1135,  969,  972, 1233, 1175,  970, 1137, 1138,
     1137,  973,  289,  973,  969,  972, 1209, 1339,  970,  974,

      454,  974,  975,  162,  975,  969,  972,  459,  291,  970,
      977, 1339, 1339,  980,  978, 1139, 1140, 1139,  984,  459,
      106,  106,  985, 1209,  635,  980, 1141, 1142, 1141,  634,
      989,  984, 1339,  989,  635,  985,  982,  983,  982,  984,
      989, 1185, 1253,  985, 1143, 1144, 1143,  984,  987,  988,
      987,  985, 1145, 1146, 1145,  989, 1339, 1339,  106,  989,
      990,  463,  990,  984,  991,  632,  991,  985, 1185, 1253,
     1194,  989,  992,  637,  992,  984,  993,  794,  993,  985,
     1339, 1234, 1339,  989,  914,  994,  150,  994,  915,  914,
      914,  914,  916,  914,  914,  914,  914,  914, 1194, 1339,

      914,  914,  914,  914,  469,  469,  997,  997,  644, 1234,
      998,  998, 1339,  644, 1000, 1147, 1148, 1147, 1004, 1000,
      106, 1339, 1005, 1339, 1339, 1149, 1150, 1149,  914,  914,
      914,  914, 1009,  808, 1339, 1004, 1186, 1267,  809, 1005,
     1002, 1003, 1002, 1004, 1009, 1339, 1339, 1005,  809, 1151,
     1152, 1151, 1004, 1339, 1009,  914, 1005, 1007, 1008, 1007,
     1153, 1154, 1153, 1186, 1009, 1267, 1339, 1009, 1010,  648,
     1010, 1004, 1011,  807, 1011, 1005, 1339, 1339, 1339, 1009,
     1012,  811, 1012, 1004,  652,  816, 1014, 1005, 1339, 1339,
     1015, 1017, 1155, 1156, 1155, 1021,  816, 1339, 1339, 1022,

      106, 1029, 1017, 1157, 1158, 1157, 1027, 1026, 1021, 1339,
     1026, 1029, 1022, 1019, 1020, 1019, 1021, 1026, 1204,  106,
     1022, 1159, 1160, 1159, 1021, 1024, 1025, 1024, 1022, 1161,
     1162, 1161, 1026, 1339, 1188,  106, 1026, 1028,  820, 1028,
     1021,  150,  106,  915, 1022, 1204,  150,  916,  915,  652,
     1178, 1014,  916, 1339,  150, 1015,  915, 1040, 1201, 1040,
      916, 1188,  150, 1163,  915,  150,  106,  915,  916, 1339,
      150,  916,  915, 1172, 1339, 1172,  916, 1042, 1178, 1042,
     1044, 1164, 1044, 1203, 1041, 1201, 1339, 1167,  106, 1165,
     1339, 1163, 1179, 1339, 1166,  106,  106, 1173,  106, 1168,

     1181, 1043, 1183, 1187,  106,  106,  106,  106, 1164, 1339,
     1203, 1191, 1041, 1189, 1196, 1167, 1165,  106, 1045,  106,
     1179, 1166, 1193, 1192, 1205, 1173, 1168,  106, 1181, 1043,
     1183, 1187,  106,  106, 1197,  106, 1198,  106,  106, 1191,
     1200, 1189, 1196, 1202,  106, 1045, 1206,  106,  106, 1193,
     1339, 1192, 1205, 1105, 1218, 1207, 1210, 1223, 1208, 1106,
     1219, 1211, 1197,  451, 1198, 1090, 1091, 1090, 1200, 1339,
     1339, 1202,  909, 1339, 1206, 1088, 1089, 1088,  904, 1094,
     1095, 1094,  905, 1207, 1210, 1208,  909, 1117, 1211, 1092,
     1093, 1092,  904,  927, 1339, 1339,  905, 1096, 1097, 1096,

      922, 1098, 1099, 1098,  923,  106,  106, 1288,  927, 1100,
     1101, 1100,  922, 1102, 1103, 1102,  923, 1213, 1214, 1213,
      927, 1216, 1237, 1110, 1215, 1243, 1227, 1111, 1108, 1109,
     1108, 1110, 1215, 1339, 1288, 1111, 1220, 1221, 1220, 1110,
     1114,  106, 1115, 1111, 1339, 1114,  283, 1115, 1114, 1237,
     1115,  283, 1243, 1226,  283, 1121,  106, 1239, 1268, 1122,
     1119, 1120, 1119, 1121, 1242, 1339, 1339, 1122, 1228, 1229,
     1228, 1121, 1174,  106, 1174, 1122, 1123, 1124, 1123,  950,
     1125, 1126, 1125,  951, 1239, 1339, 1268,  961, 1127, 1128,
     1127,  950, 1242, 1256, 1175,  951, 1129, 1130, 1129,  953,

     1131, 1132, 1131,  954, 1133, 1134, 1133,  957, 1339, 1339,
     1339,  961, 1135, 1136, 1135,  969, 1137, 1138, 1137,  970,
     1256, 1339, 1175,  972, 1139, 1140, 1139,  984, 1141, 1142,
     1141,  985, 1339, 1339, 1339,  989, 1143, 1144, 1143,  984,
     1145, 1146, 1145,  985, 1172, 1339, 1172,  989, 1147, 1148,
     1147, 1004, 1149, 1150, 1149, 1005, 1339, 1339, 1339, 1009,
     1151, 1152, 1151, 1004, 1153, 1154, 1153, 1005, 1173, 1339,
     1339, 1009, 1155, 1156, 1155, 1021, 1157, 1158, 1157, 1022,
     1339,  106, 1289, 1026, 1159, 1160, 1159, 1021, 1161, 1162,
     1161, 1022,  150,  106,  915, 1026, 1173,  150,  916,  915,

      652, 1339, 1014,  916, 1240,  150, 1015,  915, 1238, 1289,
     1230,  916,  652,  652, 1014, 1014,  106,  106, 1015, 1015,
     1235,  106, 1235, 1231,  106,  106,  106, 1244, 1245, 1246,
     1247, 1240,  106,  106, 1248, 1238, 1249,  106, 1230,  106,
     1250,  106, 1232, 1236,  106, 1254,  106, 1255, 1339, 1251,
     1339, 1231, 1257, 1227, 1258, 1244, 1245, 1246, 1247, 1215,
     1252, 1248,  106, 1339, 1249, 1339, 1218, 1250, 1223, 1232,
     1259, 1236, 1219, 1254,  451, 1255, 1251, 1213, 1214, 1213,
     1257, 1235, 1258, 1235, 1215,  106, 1339, 1252, 1260, 1261,
     1260,  106, 1262, 1263, 1262, 1215, 1272, 1275, 1259, 1219,

     1220, 1221, 1220, 1110, 1236,  106,  106, 1111, 1228, 1229,
     1228, 1121,  150, 1269,  915, 1122,  106,  150,  916,  915,
      150, 1271,  915,  916, 1272, 1275,  916, 1270,  106,  106,
      106,  106, 1236, 1273,  106,  106,  106,  106,  106,  106,
     1269, 1339, 1264, 1274, 1280,  106, 1278,  106, 1271, 1265,
     1282, 1276, 1277, 1279, 1270, 1266, 1284, 1281,  106, 1283,
     1273, 1291,  652, 1286, 1014,  652, 1285, 1014, 1015, 1264,
     1274, 1015, 1280, 1278, 1339, 1339, 1265, 1282, 1276, 1277,
     1279,  106, 1266, 1284, 1281, 1292,  106, 1283, 1291, 1290,
     1286, 1260, 1261, 1260, 1285, 1262, 1263, 1262, 1215,  150,

      106,  915, 1219,  106,  106,  916,  106,  106, 1293,  106,
      106, 1294, 1292, 1297, 1296, 1298,  106, 1290, 1299,  106,
      106, 1295, 1308,  652, 1300, 1014,  106, 1304,  106, 1015,
     1287,  106, 1302, 1303,  106, 1293, 1301,  106,  106, 1294,
     1310, 1297, 1296, 1298,  106, 1311, 1299,  106, 1295, 1308,
     1315, 1307, 1300, 1316, 1304,  106, 1314, 1287,  106,  106,
     1302, 1303, 1312, 1301, 1309, 1328,  106, 1317, 1310,  106,
     1313,  106, 1319, 1311,  106, 1324,  106, 1315, 1307, 1320,
     1316, 1321, 1326, 1314, 1318,  106, 1329, 1339,  106, 1312,
      106, 1309, 1328, 1325, 1330, 1317, 1332, 1313, 1331, 1319,

     1334, 1339, 1327, 1324, 1333, 1337, 1320,  106, 1335, 1321,
     1326, 1318, 1338, 1329, 1339, 1336, 1339, 1339, 1339, 1339,
     1325, 1339, 1330, 1339, 1332, 1339, 1331, 1339, 1334, 1327,
     1339, 1333, 1339, 1337, 1339, 1335, 1339, 1339, 1339, 1339,
     1338, 1339, 1339, 1336,   37,   37,   37,   37,   37,   37,
       37,   40,   40,   40,   40,   40,   40,   40,   57,   57,
       57,   57,   57,   57,   57,   61,   61,   61,   61,   61,
       61,   61,   65,   65,   65,   65,   65,   65,   65,   71,
       71,   71,   71,   71,   71,   71,   73,   73,   73,   73,
       73,   73,   73,   75,   75,   75,   75,   75,   75,   75,

       84,   84,   84,   84,   84,   84,   84,   92,   92,   92,
       92,   92,   92,   92,   95,   95,   95,   95,   95,   95,
       95,   99,   99,   99,   99,   99,   99,   99,  100,  100,
      100,  100,  100,  100,  100,  105,  105,  109, 1339,  109,
      109,  139,  139,  139,  139,  139,  139,  139,  141,  141,
      141,  141,  141,  141,  141,  145,  145,  145,  145,  145,
      145,  145,  153,  153,  153,  153,  153,  153,  153,  156,
      156,  156,  156,  156,  156,  156,  149,  149,  149,  149,
      149,  149,  149,  160,  160,  160,  160,  160,  160,  160,
      190,  190,  190,  190,  190, 1339,  190,  191,  191,  191,

      191, 1339,  191,  191,  107, 1339,  107,  108, 1339,  108,
      228,  228,  228,  228,  228,  228,  228,  231,  231,  231,
      231,  231,  231,  231,  234,  234,  234,  234,  234,  234,
      234,  237,  237,  237,  237,  237,  237,  237,  242,  242,
      242,  242,  242,  242,  242,  245,  245,  245,  245,  245,
      245,  245,  249,  249,  249,  249,  249,  249,  249,  253,
      253,  253,  253,  253,  253,  253,  256,  256,  256,  256,
      256,  256,  256,  258,  258,  258,  258,  258,  258,  258,
      262,  262,  262,  262,  262,  262,  262,  267,  267,  267,
      267,  267,  267,  267,  269,  269,  269,  269,  269,  269,

      269,  273,  273,  273,  273,  273,  273,  273,  278,  278,
      278,  278,  278,  278,  278,  283,  283,  283,  283,  283,
      283,  283,  285,  285,  285,  285,  285,  285,  285,  290,
      290,  290,  290,  290,  290,  290,  295,  295,  295,  295,
      295,  295,  295,  190,  190,  190,  190,  190, 1339,  190,
      372,  372,  372,  372,  372,  372,  372,  375,  375,  375,
      375,  375,  375,  375,  377,  377,  377,  377,  377,  377,
      377,  381,  381,  381,  381,  381,  381,  381,  386,  386,
      386,  386,  386,  386,  386,  394,  394,  394,  394,  394,
      394,  394,  399,  399,  399,  399,  399,  399,  399,  402,

      402,  402,  402,  402,  402,  402,  404,  404,  404,  404,
      404,  404,  404,  409,  409,  409,  409,  409,  409,  409,
      412,  412,  412,  412,  412,  412,  412,  415,  415,  415,
      415,  415,  415,  415,  419,  419,  419,  419,  419,  419,
      419,  422,  422,  422,  422,  422,  422,  422,  425,  425,
      425,  425,  425,  425,  425,  431,  431,  431,  431,  431,
      431,  431,  444,  444,  444,  444,  444,  444,  444,  447,
      447,  447,  447,  447,  447,  447,  451,  451,  451,  451,
      451,  451,  451,  455,  455,  455,  455,  455,  455,  455,
      458,  458,  458,  458,  458,  458,  458,  461,  461,  461,

      461,  461,  461,  461,  467,  467,  467,  467,  467,  467,
      467,  468,  468,  468,  468,  468,  468,  468,  105,  105,
      552,  552,  552,  552,  552,  552,  552,  555,  555,  555,
      555,  555,  555,  555,  557,  557,  557,  557,  557,  557,
      557,  561,  561,  561,  561,  561,  561,  561,  381,  381,
      381,  381,  381,  381,  381,  394,  394,  394,  394,  394,
      394,  394,  569,  569,  569,  569,  569,  569,  569,  572,
      572,  572,  572,  572,  572,  572,  574,  574,  574,  574,
      574,  574,  574,  578,  578,  578,  578,  578,  578,  578,
      583,  583,  583,  583,  583,  583,  583,  586,  586,  586,

      586,  586,  586,  586,  589,  589,  589,  589,  589,  589,
      589,  593,  593,  593,  593,  593,  593,  593,  595,  595,
      595,  595,  595,  595,  595,  599,  599,  599,  599,  599,
      599,  599,  603,  603,  603,  603,  603,  603,  603,  613,
      613,  613,  613,  613,  613,  613,  616,  616,  616,  616,
      616,  616,  616,  621,  621,  621,  621,  621,  621,  621,
      624,  624,  624,  624,  624,  624,  624,  626,  626,  626,
      626,  626,  626,  626,  630,  630,  630,  630,  630,  630,
      630,  639,  639,  639,  639,  639,  639,  639,  640,  640,
      640,  640,  640,  640,  640,  231,  231,  231,  231,  231,

      231,  231,  643,  643,  643,  643,  643,  643,  643,  646,
      646,  646,  646,  646,  646,  646,  651,  651,  651,  651,
      651,  651,  651,  105,  105,  730,  730,  730,  730,  730,
      730,  730,  733,  733,  733,  733,  733,  733,  733,  735,
      735,  735,  735,  735,  735,  735,  738,  738,  738,  738,
      738,  738,  738,  742,  742,  742,  742,  742,  742,  742,
      745,  745,  745,  745,  745,  745,  745,  747,  747,  747,
      747,  747,  747,  747,  750,  750,  750,  750,  750,  750,
      750,  757,  757,  757,  757,  757,  757,  757,  760,  760,
      760,  760,  760,  760,  760,  763,  763,  763,  763,  763,

      763,  763,  765,  765,  765,  765,  765,  765,  765,  768,
      768,  768,  768,  768,  768,  768,  770,  770,  770,  770,
      770,  770,  770,  776,  776,  776,  776,  776,  776,  776,
      778,  778,  778,  778,  778,  778,  778,  782,  782,  782,
      782,  782,  782,  782,  785,  785,  785,  785,  785,  785,
      785,  787,  787,  787,  787,  787,  787,  787,  790,  790,
      790,  790,  790,  790,  790,  796,  796,  796,  796,  796,
      796,  796,  797,  797,  797,  797,  797,  797,  797,  800,
      800,  800,  800,  800,  800,  800,  802,  802,  802,  802,
      802,  802,  802,  267,  267,  267,  267,  267,  267,  267,

      805,  805,  805,  805,  805,  805,  805,  812,  812,  812,
      812,  812,  812,  812,  231,  231,  231,  231,  231,  231,
      231,  815,  815,  815,  815,  815,  815,  815,  818,  818,
      818,  818,  818,  818,  818,  840,  840,  840,  840,  840,
      840,  105,  105,  896,  896,  896,  896,  896,  896,  896,
      899,  899,  899,  899,  899,  899,  899,  901,  901,  901,
      901,  901,  901,  901,  906,  906,  906,  906,  906,  906,
      906,  914,  914,  914,  914,  914,  914,  914,  917,  917,
      917,  917,  917,  917,  917,  919,  919,  919,  919,  919,
      919,  919,  924,  924,  924,  924,  924,  924,  924,  932,

      932,  932,  932,  932,  932,  932,  937,  937,  937,  937,
      937,  937,  937,  942,  942,  942,  942,  942,  942,  942,
      945,  945,  945,  945,  945,  945,  945,  947,  947,  947,
      947,  947,  947,  947,  952,  952,  952,  952,  952,  952,
      952,  956,  956,  956,  956,  956,  956,  956,  958,  958,
      958,  958,  958,  958,  958,  968,  968,  968,  968,  968,
      968,  968,  971,  971,  971,  971,  971,  971,  971,  976,
      976,  976,  976,  976,  976,  976,  979,  979,  979,  979,
      979,  979,  979,  981,  981,  981,  981,  981,  981,  981,
      986,  986,  986,  986,  986,  986,  986,  995,  995,  995,

      995,  995,  995,  995,  996,  996,  996,  996,  996,  996,
      996,  999,  999,  999,  999,  999,  999,  999, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1006, 1006, 1006, 1006, 1006,
     1006, 1006,  283,  283,  283,  283,  283,  283,  283, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
      267,  267,  267,  267,  267,  267,  267, 1023, 1023, 1023,
     1023, 1023, 1023, 1023,  914,  914,  914,  914,  914,  914,
      914,  105,  105,  896,  896,  896,  896,  896,  896,  896,
      899,  899,  899,  899,  899,  899,  899,  901,  901,  901,

      901,  901,  901,  901,  906,  906,  906,  906,  906,  906,
      906,  917,  917,  917,  917,  917,  917,  917,  919,  919,
      919,  919,  919,  919,  919,  924,  924,  924,  924,  924,
      924,  924,  932,  932,  932,  932,  932,  932,  932,  231,
      231,  231,  231,  231,  231,  231, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
      937,  937,  937,  937,  937,  937,  937, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1118, 1118, 1118, 1118, 1118, 1118, 1118,  942,  942,
      942,  942,  942,  942,  942,  945,  945,  945,  945,  945,

      945,  945,  947,  947,  947,  947,  947,  947,  947,  958,
      958,  958,  958,  958,  958,  958,  952,  952,  952,  952,
      952,  952,  952,  956,  956,  956,  956,  956,  956,  956,
      968,  968,  968,  968,  968,  968,  968,  971,  971,  971,
      971,  971,  971,  971,  976,  976,  976,  976,  976,  976,
      976,  979,  979,  979,  979,  979,  979,  979,  981,  981,
      981,  981,  981,  981,  981,  986,  986,  986,  986,  986,
      986,  986,  995,  995,  995,  995,  995,  995,  995,  996,
      996,  996,  996,  996,  996,  996,  999,  999,  999,  999,
      999,  999,  999, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  914,  914,  914,  914,  914,
      914,  914,  105,  105,  901,  901,  901,  901,  901,  901,
      901,  906,  906,  906,  906,  906,  906,  906,  919,  919,
      919,  919,  919,  919,  919,  924,  924,  924,  924,  924,
      924,  924, 1104, 1104, 1104, 1104, 1104, 1104, 1104,  267,
      267,  267,  267,  267,  267,  267, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1107, 1107, 1107, 1107, 1107, 1107, 1107,

     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1224, 1224,
     1339, 1224, 1224, 1224, 1224, 1118, 1118, 1118, 1118, 1118,
     1118, 1118,  947,  947,  947,  947,  947,  947,  947,  958,
      958,  958,  958,  958,  958,  958,  952,  952,  952,  952,
      952,  952,  952,  956,  956,  956,  956,  956,  956,  956,
      968,  968,  968,  968,  968,  968,  968,  971,  971,  971,
      971,  971,  971,  971,  981,  981,  981,  981,  981,  981,
      981,  986,  986,  986,  986,  986,  986,  986, 1001, 1001,

     1001, 1001, 1001, 1001, 1001, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1023,
     1023, 1023, 1023, 1023, 1023, 1023,  914,  914,  914,  914,
      914,  914,  914, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
      105,  105,   31, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,

     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339
    } ;

static yyconst flex_int16_t yy_chk[6016] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        7,    9,    8,   10, 1336,   11,   12,    7,    7,    8,
        8,   34,   11,   12,   21,   21,   21,   21,   36,   36,
       11,   12,   34,   34,    1,    1,    1,    1,  104,  104,
       13,   14,   15, 1331,   15,   15,   15,   13,   14,   15,
       40,   40,   15,    9,    9,   10,   10,   11,   12, 1326,
       40,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   13,   14,   15,   16,   44,   16,   16,   16,

       41,  245,   16,  245,   53,   16,   26,   26,   26,   26,
     1325,   44,   53,  111,   78,  103,    2,    2,    2,    2,
       78,   15,   24,   75,   24,   75,  103,  103,   41,   75,
       76,   24,   76,   79, 1319,   79,   76,   16,   44,   79,
       53,  111,   24,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   16,   22,   22,   22,   22,   22,
       24, 1316,  110,   56,   85,   22,   85,   85,   80,   80,
       80,   80,  193,   22,   56,   80,   22, 1315,    3,    3,
        3,    3,   46,  109,  109,   97,   47,   97,   97,  110,

      141,  142,  141,  109,  146,  142,  141, 1311,  146,  193,
       46,   47,   56,   47,   22,    3,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,   43,   46,   47,   49,
       47,   43,  315,  128,  315,  112,  119,   48,   49,   50,
       51,   52, 1309,  128,  114,   49,   49,   43,  119, 1300,
        4,    4,    4,    4,  113,   48,  112,   50,   51,   43,
       48,   52,  114,   82,   52,   82,   49, 1299,   87,   82,
       87,  128,   49,   49,   43,  113,  119,    4,    5, 1298,
       82,    5,   48,  112,   50,   51,   54,   48,   52,  114,

      176,   52,   87, 1297,   54,    5,    5,    5,    5,    5,
        5,    5,  113,  557,    5,  557,  150,    5,    5,   54,
      150,    5,    5,    5,    5,  143,  115,    5,  176,  231,
       87,  143,   54,  231,    5,    5,    5,    5,    5,    5,
      126,   90,    5,   90,    5,    5,   54,  115,    5,    5,
        5,    5,   55,  130,    5,   20,   20,   20,   20,  126,
       89,   20,   89,   55,   20,   90, 1296,   20,   20,  116,
       55,  130,   20,  116,  115,   20,   20,  124,   88,   55,
       88,   88,   88,   89,  147,  117,  126,   89,  123,  117,
      147,   55,  121,   90,  124,  259,   88,   55,  130,  259,

      121,  116,  118,   20,   20,   45,   55,  129,  123,   45,
      574,   89,  574,  121,  129,   89,   45,  117,  118,  118,
       45,  124,  120,   45,  152,   45,  120,  145,  121,  145,
      152, 1293,  120,  145, 1291,  123,  173,   45,  173,  173,
      121,  589,  129,  589,   45,  118,  118,   45, 1289,  120,
       45,  120,   45,   77,   77,   77,   77,   77,   77,   77,
      120,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  122,  131,  132,  120,  133,  120,  132,
      122,  132,  134,  127,  149,  156,  149,  134,  184,  127,
      149,  156,  133,  678,  131,  122,  122,   77,   77,   77,

      153,  137,  153, 1288,  678,  127,  153,  132,  122,  132,
      135,  148,  148,  148,  148,  134,  184,  127,  135,  133,
      137,  131,  122,  122,   77,   81,   81,   81,   81,   81,
       81,   81,  127,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,  138,  135,  137,  144,  144,
      144,  144,  186,  138,  186,  144,  154,  154,  154,  154,
      158,  158,  158,  154,  192,  186,  186,  158, 1279,   81,
       81,   81,  159,  159,  159,  159,  160, 1278,  160,  159,
      194,  138,  160,  161,  161,  161,  161,  163,  201,  165,
      161,  165,  192,  163, 1270,  165,   81,   83,   83,   83,

       83,  174,  194,  174,   83,  164,  164,  164,  164,  200,
      201,  187,  164,  187,  187,  168,   83,  168,  196, 1259,
      171,  168,  171,   83,  196,  174,  171,   83,  200,  194,
       83, 1258,   83,  168,  189,  189,  189,  201,  175,   83,
      175,  229,  232,  172,   83,  172,  171,  229,  232,  172,
      234,   83,  196,  174,   83,  200,  234,   83,  167,   83,
      167,  168,  175,  172,  167,  214,   83,  151,  151,  151,
      151,  151,  151,  151,  171,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  167,  214,  203,
      175,  172,  177,  167,  177,  177,  177,  181,  205,  181,

      169,  182,  169,  205, 1257,  595,  169,  595,  203,  182,
      177,  151,  151,  151,  167,  214,  199,  203,  169, 1251,
      167,  240,  242,  206,  181,  197,  181,  240,  242,  182,
     1239,  205,  169,  197,  206,  203,  182,  199,  151,  155,
      155,  155,  155,  155,  155,  155,  169,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  169,
      208,  197,  206,  212,  199,  213,  216,  212,  208,  220,
     1229,  213,  223,  308,  216, 1226,  170,  220,  170,  183,
      223,  183,  170,  155,  155,  155,  228,  237,  228,  237,
      291, 1225,  228,  237,  291,  212,  208,  170,  249,  213,

      249,  308,  216,  183,  249,  220,  170,  170,  223, 1224,
      155,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  170,  198,  166,  166,  166,
      166,  183,  202,  170,  170,  195,  178,  180,  178,  180,
      226, 1223,  185,  198,  185,  250,  198,  195,  226,  204,
      217,  250,  207,  195,  202,  166,  166,  166,  166,  178,
      180,  218,  217,  178,  180,  185,  210,  204,  207,  185,
      198,  256, 1221,  198,  215,  195,  226,  256,  222, 1216,
      195,  202,  166,  211,  218,  221,  210,  178,  180,  215,
      217,  178,  180,  185,  204,  207,  310,  185,  209,  211,

      221,  222,  209,  209,  209,  209,  209,  209, 1210, 1207,
      209,  218,  260,  210,  209,  219,  215,  209,  260,  209,
      209,  219,  225,  209,  310,  219,  211,  221,  222, 1206,
      209,  209,  209,  209,  209,  209,  224,  227,  209,  225,
     1202,  209,  265, 1199,  209,  269,  209,  209,  265,  219,
      209,  269,  224,  219, 1196,  306,  224,  227,  230,  230,
      230,  230,  244,  244,  244,  230,  225,  233,  233,  233,
      233,  236,  236,  236,  238,  238,  238,  238,  236,  224,
     1193,  238,  306,  224,  227,  241,  241,  241,  241,  268,
      268,  268,  241,  246,  246,  246,  246,  251,  251,  251,

      251,  311,  320,  333,  251,  252,  252,  252,  252,  252,
      252,  252, 1189,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  253,  355,  253,  311,  320,
      333,  253,  254,  254,  254,  254,  257,  257,  257,  254,
      258,  276,  258,  257, 1188,  321,  258,  276,  355,  252,
      252,  252,  261,  261,  261,  261,  262,  469,  262,  261,
      317,  469,  262,  263,  263,  263,  263,  270,  270,  270,
      263,  317,  317,  321,  270,  355,  252,  255,  255,  255,
      255,  255,  255,  255, 1182,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  266,  266,  266,

      266,  272,  272,  272,  266,  273, 1179,  273,  272, 1178,
      280,  273,  274,  274,  274,  274,  280, 1160,  325,  274,
     1156,  255,  255,  255,  277,  277,  277,  277,  278, 1152,
      278,  277,  325,  285,  278,  281,  281,  281,  281,  285,
      357,  292,  281,  282,  282,  282,  282,  292,  255, 1148,
      282,  287,  287,  287,  288,  288,  288,  288,  287,  325,
      290,  288,  290,  357, 1144,  324,  290,  293,  293,  293,
      293,  324,  334, 1140,  293,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294, 1136,
      357,  294,  294,  294,  294,  295,  296,  295,  296,  324,

      334,  295,  296,  298,  297,  298,  297,  307,  322,  298,
      297,  301,  299,  301,  299, 1130,  307,  301,  299,  294,
      294,  294,  294,  335,  326,  296,  297,  300,  322,  300,
      302,  326,  302,  300,  298,  307,  302,  301,  496,  303,
      335,  303,  304,  307,  304,  303,  294,  299,  304,  496,
      496,  305,  296,  305,  297,  322,  313,  305,  313,  326,
      302,  298,  300,  302, 1128,  301,  323,  335,  312,  314,
      312,  314,  327, 1124,  299,  303,  323,  328,  304,  329,
      305,  328,  327,  316,  330,  316,  313,  302,  313,  300,
      302,  312,  373,  314,  332,  312,  316,  316,  373,  330,

      329,  314,  303,  336,  323,  304,  332,  305,  331,  328,
      327,  340,  331,  313,  338,  313,  341,  337,  336,  312,
      343,  314,  338,  312,  339,  344,  330,  329,  314,  337,
      346,  341,  340,  342,  332, 1120,  339,  345,  343,  346,
      331,  352,  344,  347, 1117,  336,  348,  346,  349,  339,
      338,  487,  351,  342,  350,  345,  349,  337,  341,  340,
      345,  347,  350,  351,  339,  343,  348,  346,  352,  344,
      354,  349,  356,  613,  346,  613,  339,  359,  487,  358,
      342,  350,  345,  359,  349,  354,  360,  345,  347,  358,
      350,  351,  356,  348,  361,  352,  362,  366,  349,  358,

      365,  360,  361,  366,  367,  368,  370, 1109,  350,  375,
      371,  359,  354,  370, 1105,  375,  362,  358,  371,  356,
      365, 1101,  367,  368,  497,  370,  358,  372,  360,  372,
      361,  366,  498,  372,  374,  374,  374,  374,  376,  376,
      376,  374,  377,  362,  377,  376,  371,  365,  377,  367,
      368,  497,  379,  370,  378,  378,  378,  378,  379,  498,
      381,  378,  380,  380,  380,  380,  381,  510, 1097,  380,
      383,  383,  383,  384,  384,  384,  384,  386,  387,  387,
      387, 1093,  518,  386,  483,  387,  389,  389,  389,  392,
      392,  392,  392,  389,  510,  400,  392,  395,  395,  395,

      399,  400,  399,  518, 1089,  402,  399,  401,  401,  401,
      401,  402,  483,  406,  401,  403,  403,  403,  404,  406,
      404, 1077,  403,  413,  404,  405,  405,  405,  405,  413,
      518,  417,  405,  407,  407,  407,  407,  417, 1076, 1056,
      407,  408,  408,  408,  408,  408,  408,  408,  484,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  409,  485,  409,  436,  436,  436,  409,  410,  410,
      410,  410,  412,  419,  412,  410,  484, 1055,  412,  419,
     1027,  414,  414,  414,  414,  408,  408,  408,  414,  415,
      485,  415,  486, 1020,  422,  415,  416,  416,  416,  416,

      422, 1003,  428,  416,  418,  418,  418,  418,  428,  983,
      949,  418,  408,  411,  411,  411,  411,  411,  411,  411,
      486,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  420,  420,  420,  421,  421,  421,  626,
      420,  626,  431,  421,  424,  424,  424,  425,  431,  425,
      444,  424,  444,  425,  921,  903,  444,  411,  411,  411,
      426,  426,  426,  426,  495,  890,  495,  426,  429,  429,
      429,  429,  433,  433,  433,  429,  885,  495,  495,  433,
      434,  434,  434,  434,  411,  522,  883,  434,  439,  439,
      439,  442,  442,  442,  442,  439,  445,  882,  442,  523,

      879,  447,  445,  446,  446,  446,  446,  447,  522,  878,
      446,  448,  448,  448,  449,  449,  449,  449,  448,  523,
      868,  449,  450,  450,  450,  450,  453,  453,  453,  450,
      455,  456,  455,  453,  862,  522,  455,  456,  457,  457,
      457,  457,  458,  488,  854,  457,  523,  464,  458,  460,
      460,  460,  461,  464,  461,  500,  460,  470,  461,  462,
      462,  462,  462,  470,  853,  820,  462,  465,  465,  465,
      465,  488,  500,  816,  465,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  511,
      811,  466,  466,  466,  466,  467,  468,  467,  468,  500,

      503,  467,  468,  471,  471,  471,  471,  472,  503,  472,
      471,  499,  473,  472,  473,  499,  501,  511,  473,  466,
      466,  466,  466,  474,  475,  474,  475,  808,  501,  474,
      475,  476,  477,  476,  477,  502,  503,  476,  477,  478,
      652,  478,  502,  499,  652,  478,  466,  474,  479,  646,
      479,  646,  515,  476,  479,  490,  501,  490,  481,  475,
      481,  480,  477,  480,  481,  519,  482,  480,  482,  515,
      502,  478,  482,  729,  717,  474,  489,  479,  489,  480,
      491,  476,  491,  519,  481,  504,  475,  480,  482,  477,
      492,  490,  492,  504,  505,  507,  515,  508,  478,  494,

      505,  494,  491,  507,  479,  509,  489,  480,  489,  508,
      519,  509,  481,  512,  492,  480,  482,  506,  490,  512,
      494,  504,  492,  514,  506,  715,  513,  516,  505,  506,
      491,  507,  517,  489,  513,  489,  516,  508,  514,  509,
      529,  520,  492,  517,  524,  526,  699,  512,  494,  492,
      528,  527,  506,  520,  530,  529,  532,  506,  527,  530,
      536,  524,  513,  682,  516,  514,  531,  526,  528,  533,
      531,  517,  536,  538,  535,  532,  537,  533,  649,  648,
      538,  520,  529,  539,  537,  542,  527,  530,  524,  535,
      540,  539,  541,  542,  526,  528,  541,  543,  531,  540,

      536,  545,  532,  544,  543,  533,  546,  544,  538,  550,
      547,  548,  537,  677,  553,  677,  535,  547,  644,  539,
      553,  542,  545,  552,  541,  552,  677,  540,  546,  552,
      550,  841,  543,  841,  548,  544,  554,  554,  554,  554,
      555,  556,  556,  556,  637,  547,  555,  634,  570,  545,
      558,  558,  558,  558,  570,  546,  669,  550,  562,  562,
      562,  548,  560,  560,  560,  560,  563,  563,  563,  564,
      564,  564,  564,  565,  565,  565,  567,  567,  567,  569,
      842,  569,  842,  669,  572,  569,  571,  571,  571,  571,
      572,  573,  573,  573,  575,  575,  575,  575,  577,  577,

      577,  577,  579,  579,  579,  580,  580,  580,  581,  581,
      581,  581,  582,  582,  582,  583,  587,  583,  582,  933,
      630,  583,  587,  933,  582,  582,  584,  584,  584,  584,
      585,  585,  585,  586,  593,  586,  585,  628,  616,  586,
      593,  614,  585,  585,  588,  588,  588,  588,  590,  590,
      590,  590,  592,  592,  592,  592,  594,  594,  594,  596,
      596,  596,  596,  598,  598,  598,  598,  600,  600,  600,
      601,  601,  601,  601,  602,  602,  602,  604,  604,  604,
      606,  606,  606,  609,  609,  609,  609,  611,  611,  611,
      615,  615,  615,  615,  617,  617,  617,  618,  618,  618,

      618,  619,  619,  619,  620,  620,  620,  620,  621,  622,
      621,  625,  625,  625,  621,  622,  623,  623,  623,  623,
      624,  627,  627,  627,  627,  610,  624,  629,  629,  629,
      629,  631,  631,  631,  633,  633,  633,  636,  636,  636,
      636,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  607,  665,  638,  638,  638,
      638,  639,  640,  639,  640,  641,  603,  639,  640,  668,
      643,  641,  642,  642,  642,  642,  643,  645,  645,  645,
      647,  647,  647,  647,  665,  638,  638,  638,  638,  650,
      650,  650,  650,  651,  653,  651,  599,  668,  597,  651,

      653,  654,  654,  654,  654,  655,  591,  655,  656,  578,
      656,  655,  638,  657,  656,  657,  658,  576,  658,  657,
      680,  670,  658,  659,  660,  659,  660,  655,  679,  659,
      660,  661,  561,  661,  662,  559,  662,  661,  658,  663,
      662,  663,  664,  551,  664,  663,  660,  680,  664,  670,
      672,  674,  672,  674,  659,  655,  679,  661,  662,  663,
      671,  673,  671,  673,  534,  662,  658,  675,  676,  675,
      676,  681,  683,  672,  660,  684,  683,  681,  674,  684,
      685,  659,  690,  673,  525,  661,  662,  663,  675,  685,
      686,  687,  662,  689,  688,  692,  671,  694,  676,  692,

      693,  672,  688,  691,  683,  681,  674,  684,  690,  695,
      697,  673,  686,  687,  689,  696,  675,  685,  697,  521,
      691,  696,  698,  671,  694,  676,  703,  692,  693,  700,
      688,  463,  695,  701,  696,  690,  702,  700,  704,  686,
      687,  689,  702,  708,  698,  832,  697,  691,  703,  696,
      707,  701,  705,  459,  704,  451,  705,  706,  707,  695,
      711,  696,  709,  706,  716,  700,  708,  712,  709,  710,
      702,  698,  709,  832,  714,  703,  711,  710,  701,  713,
      711,  704,  716,  712,  705,  443,  707,  713,  719,  718,
      724,  706,  441,  708,  714,  720,  709,  718,  721,  720,

      709,  723,  725,  711,  728,  710,  724,  711,  719,  716,
      712,  722,  726,  721,  725,  713,  727,  730,  726,  730,
      722,  714,  731,  730,  723,  718,  728,  720,  731,  830,
      722,  733,  722,  724,  726,  719,  435,  733,  430,  727,
      721,  737,  725,  734,  734,  734,  726,  737,  722,  738,
      734,  723,  735,  728,  735,  738,  830,  722,  735,  722,
      427,  726,  732,  732,  732,  732,  727,  833,  857,  732,
      736,  736,  736,  736,  739,  739,  739,  736,  844,  423,
      397,  739,  740,  740,  740,  740,  741,  741,  741,  740,
      742,  743,  742,  741,  833,  857,  742,  743,  744,  744,

      744,  744,  745,  394,  393,  744,  844,  749,  745,  746,
      746,  746,  747,  749,  747,  390,  746,  750,  747,  748,
      748,  748,  748,  750,  385,  845,  748,  751,  751,  751,
      752,  752,  752,  752,  751,  382,  850,  752,  753,  753,
      753,  754,  754,  754,  850,  753,  856,  754,  755,  755,
      755,  755,  756,  845,  756,  755,  758,  757,  756,  757,
      369,  856,  758,  757,  759,  759,  759,  759,  760,  364,
      760,  759,  850,  762,  760,  761,  761,  761,  761,  762,
      763,  363,  761,  764,  764,  764,  763,  765,  856,  765,
      764,  353,  767,  765,  766,  766,  766,  766,  767,  768,

      834,  766,  834,  851,  770,  768,  769,  769,  769,  769,
      770,  851,  289,  769,  771,  771,  771,  772,  772,  772,
      772,  771,  284,  834,  772,  773,  773,  773,  774,  774,
      774,  776,  773,  776,  777,  774,  778,  776,  283,  851,
      777,  279,  778,  779,  779,  779,  779,  780,  780,  780,
      779,  834,  275,  267,  780,  781,  781,  781,  781,  782,
      783,  782,  781,  264,  248,  782,  783,  784,  784,  784,
      784,  785,  247,  243,  784,  852,  789,  785,  786,  786,
      786,  787,  789,  787,  852,  786,  790,  787,  788,  788,
      788,  788,  790,  239,  235,  788,  791,  791,  791,  792,

      792,  792,  792,  791,  798,  800,  792,  793,  793,  793,
      798,  800,  852,  188,  793,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795, 1037,
      179,  795,  795,  795,  795,  796,  797,  796,  797,  162,
      858,  796,  797,  799,  799,  799,  799,  801,  801,  801,
      799,  802,  804,  802,  801,  157, 1037,  802,  804,  795,
      795,  795,  795,  803,  803,  803,  803,  805,  858,  839,
      803,  839,  139,  805,  806,  806,  806,  810,  810,  810,
      810,  806,  813,  812,  810,  812,  795,  136,  813,  812,
      814,  814,  814,  814,  815,  855,  125,  814, 1038,  821,

      815,  817,  817,  817,  818,  821,  818,  839,  817,  107,
      818,  819,  819,  819,  819,  822,  855,  822,  819,  105,
      846,  822,  823,  824,  823,  824, 1038,   98,  823,  824,
      825,  826,  825,  826,  839,  869,  825,  826,  827,  828,
      827,  828,  846,  855,  827,  828,  829,  837,  829,  837,
      869,  822,  829,  823,  835,  836,  835,  836,  838,  859,
      838,  865,  826,  847,  829,  848,  860,  865,  849,  846,
      825,  837,  849,  861,  864,  827,  828,  869,  822,  859,
      823,  835,  836,  872,  860,  847,  863,  848,  838,  826,
      863,  866,  829,  861,  864,  865,  867,  825,  872,  837,

      849,  870,  827,  828,  871,  866,  859,  886,  867,  835,
      836,  860,  847,  874,  848,  838,  876,  877,  863,  873,
      861,  864,  875,  870,  871,  872,  881,  873,  875,  880,
      886,  888,  866,  874,  876,  877,  867,  880,  884,  887,
      891,  892,  893,  881,  884,  892,  889,  896,  894,  896,
      870,  871,  897,  896,  888,  873,  875,  886,  897,  887,
      874,  876,  877,  894,  891,  880,  889,  895,  899,  893,
      881, 1047,  884,  892,  899,  898,  898,  898,  898,  895,
       94,  888,  898,   91,   73,   42,  887,  900,  900,  900,
      894,  891,  904,  889,  900,  901,  893,  901,  904, 1047,

      906,  901,  902,  902,  902,  902,  906,  895, 1039,  902,
      905,  905,  905,  905,  907,  907,  907,  905,  909,  909,
      909,  907, 1048, 1057, 1184,  909,  910,  910,  910,  910,
      911,  911,  911,  910, 1048, 1039,   37,  911,  912,  912,
      912,  912,  913,  913,  913,  912,  914,  915,  914,  913,
     1057, 1184,  914,  915,  916,  916,  916,  916,  917, 1073,
     1053,  916, 1048,  922,  917,  918,  918,  918,  919,  922,
      919,   31,  918,  924,  919,  920,  920,  920,  920,  924,
     1053, 1073,  920,  923,  923,  923,  923,  925,  925,  925,
      923,  927,  927,  927,  925,   30,   29,   28,  927,  928,

      928,  928,  928,  929,  929,  929,  928, 1053, 1073,   27,
      929,  930,  930,  930,  930,  931,  931,  931,  930,  932,
       25,  932,  931,  935,  940,  932,  934,  934,  934,  935,
      940,   23,  934,  936,  936,  936,  936,  937,   19,  937,
      936,   18,   17,  937,  938,  938,  938,  938,  939,    6,
      939,  938,    0,    0,  939,  941,  941,  941,  941,  942,
      943,  942,  941,    0, 1069,  942,  943,  944,  944,  944,
      944,  945, 1064, 1069,  944,    0,  950,  945,  946,  946,
      946,  947,  950,  947, 1064,  946,  953,  947,  948,  948,
      948,  948,  953,    0,    0,  948,  951,  951,  951,  951,

      952, 1069,  952,  951,    0,  956,  952,  954,  954,  954,
      954,  956, 1064,    0,  954,  955,  955,  955,  955,  957,
      957,  957,  955,  958, 1051,    0,  957,    0,    0,  958,
      959,  959,  959,  961,  961,  961, 1045,  959, 1045,  969,
      961,  962,  962,  962,  962,  969,    0, 1051,  962,  963,
      963,  963,  963,  964,  964,  964,  963, 1169, 1045,    0,
      964,  965,  965,  965,  965,  966,  966,  966,  965,  967,
      967,  967,  966,  968, 1051,  968,  967, 1085,  971,  968,
      970,  970,  970,  970,  971, 1169, 1045,  970,  972,  972,
      972,  973,  973,  973,  973,  972, 1085,    0,  973,  974,

      974,  974,  975,  975,  975,  975,  974,  977,  976,  975,
      976,    0,    0,  977,  976,  978,  978,  978,  978,  979,
     1201, 1059,  978, 1085,  984,  979,  980,  980,  980,  981,
      984,  981,    0,  980,  986,  981,  982,  982,  982,  982,
      986, 1059, 1201,  982,  985,  985,  985,  985,  987,  987,
      987,  985,  989,  989,  989,  987,    0,    0, 1068,  989,
      990,  990,  990,  990,  991,  991,  991,  990, 1059, 1201,
     1068,  991,  992,  992,  992,  992,  993,  993,  993,  992,
        0, 1171,    0,  993,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994, 1068,    0,

      994,  994,  994,  994,  995,  996,  995,  996,  997, 1171,
      995,  996,    0,  999,  997,  998,  998,  998,  998,  999,
     1060,    0,  998,    0,    0, 1000, 1000, 1000,  994,  994,
      994,  994, 1000, 1001,    0, 1001, 1060, 1233, 1004, 1001,
     1002, 1002, 1002, 1002, 1004,    0,    0, 1002, 1006, 1005,
     1005, 1005, 1005,    0, 1006,  994, 1005, 1007, 1007, 1007,
     1009, 1009, 1009, 1060, 1007, 1233,    0, 1009, 1010, 1010,
     1010, 1010, 1011, 1011, 1011, 1010,    0,    0,    0, 1011,
     1012, 1012, 1012, 1012, 1013, 1014, 1013, 1012,    0,    0,
     1013, 1014, 1015, 1015, 1015, 1015, 1016,    0,    0, 1015,

     1080, 1021, 1016, 1017, 1017, 1017, 1018, 1021, 1018,    0,
     1017, 1023, 1018, 1019, 1019, 1019, 1019, 1023, 1080, 1062,
     1019, 1022, 1022, 1022, 1022, 1024, 1024, 1024, 1022, 1026,
     1026, 1026, 1024,    0, 1062, 1075, 1026, 1028, 1028, 1028,
     1028, 1030, 1049, 1030, 1028, 1080, 1031, 1030, 1031, 1032,
     1049, 1032, 1031,    0, 1033, 1032, 1033, 1040, 1075, 1040,
     1033, 1062, 1034, 1030, 1034, 1035, 1079, 1035, 1034,    0,
     1036, 1035, 1036, 1041,    0, 1041, 1036, 1042, 1049, 1042,
     1044, 1031, 1044, 1079, 1040, 1075,    0, 1035, 1050, 1033,
        0, 1030, 1050,    0, 1034, 1061, 1052, 1041, 1054, 1036,

     1052, 1042, 1054, 1061, 1065, 1063, 1070, 1067, 1031,    0,
     1079, 1065, 1040, 1063, 1070, 1035, 1033, 1066, 1044, 1081,
     1050, 1034, 1067, 1066, 1081, 1041, 1036, 1071, 1052, 1042,
     1054, 1061, 1072, 1074, 1071, 1078, 1072, 1084, 1082, 1065,
     1074, 1063, 1070, 1078, 1087, 1044, 1082, 1083, 1086, 1067,
        0, 1066, 1081, 1104, 1110, 1083, 1086, 1115, 1084, 1104,
     1110, 1087, 1071, 1115, 1072, 1090, 1090, 1090, 1074,    0,
        0, 1078, 1090,    0, 1082, 1088, 1088, 1088, 1088, 1094,
     1094, 1094, 1088, 1083, 1086, 1084, 1094, 1116, 1087, 1092,
     1092, 1092, 1092, 1116,    0,    0, 1092, 1096, 1096, 1096,

     1096, 1098, 1098, 1098, 1096, 1177, 1186, 1267, 1098, 1100,
     1100, 1100, 1100, 1102, 1102, 1102, 1100, 1106, 1106, 1106,
     1102, 1107, 1177, 1107, 1106, 1186, 1121, 1107, 1108, 1108,
     1108, 1108, 1121,    0, 1267, 1108, 1111, 1111, 1111, 1111,
     1112, 1181, 1112, 1111,    0, 1113, 1112, 1113, 1114, 1177,
     1114, 1113, 1186, 1118, 1114, 1118, 1185, 1181, 1234, 1118,
     1119, 1119, 1119, 1119, 1185,    0,    0, 1119, 1122, 1122,
     1122, 1122, 1174, 1205, 1174, 1122, 1123, 1123, 1123, 1123,
     1125, 1125, 1125, 1123, 1181,    0, 1234, 1125, 1127, 1127,
     1127, 1127, 1185, 1205, 1174, 1127, 1129, 1129, 1129, 1129,

     1131, 1131, 1131, 1129, 1133, 1133, 1133, 1131,    0,    0,
        0, 1133, 1135, 1135, 1135, 1135, 1137, 1137, 1137, 1135,
     1205,    0, 1174, 1137, 1139, 1139, 1139, 1139, 1141, 1141,
     1141, 1139,    0,    0,    0, 1141, 1143, 1143, 1143, 1143,
     1145, 1145, 1145, 1143, 1172,    0, 1172, 1145, 1147, 1147,
     1147, 1147, 1149, 1149, 1149, 1147,    0,    0,    0, 1149,
     1151, 1151, 1151, 1151, 1153, 1153, 1153, 1151, 1172,    0,
        0, 1153, 1155, 1155, 1155, 1155, 1157, 1157, 1157, 1155,
        0, 1183, 1268, 1157, 1159, 1159, 1159, 1159, 1161, 1161,
     1161, 1159, 1163, 1180, 1163, 1161, 1172, 1164, 1163, 1164,

     1165,    0, 1165, 1164, 1183, 1166, 1165, 1166, 1180, 1268,
     1163, 1166, 1167, 1168, 1167, 1168, 1194, 1197, 1167, 1168,
     1175, 1187, 1175, 1164, 1190, 1191, 1192, 1187, 1190, 1191,
     1192, 1183, 1195, 1198, 1194, 1180, 1195, 1200, 1163, 1203,
     1197, 1204, 1166, 1175, 1208, 1203, 1209, 1204,    0, 1198,
        0, 1164, 1208, 1212, 1209, 1187, 1190, 1191, 1192, 1212,
     1200, 1194, 1211,    0, 1195,    0, 1217, 1197, 1222, 1166,
     1211, 1175, 1217, 1203, 1222, 1204, 1198, 1213, 1213, 1213,
     1208, 1235, 1209, 1235, 1213, 1244,    0, 1200, 1215, 1215,
     1215, 1237, 1219, 1219, 1219, 1215, 1241, 1244, 1211, 1219,

     1220, 1220, 1220, 1220, 1235, 1238, 1240, 1220, 1228, 1228,
     1228, 1228, 1230, 1237, 1230, 1228, 1242, 1231, 1230, 1231,
     1232, 1240, 1232, 1231, 1241, 1244, 1232, 1238, 1243, 1245,
     1246, 1247, 1235, 1242, 1254, 1252, 1248, 1250, 1249, 1271,
     1237,    0, 1230, 1243, 1249, 1256, 1247, 1253, 1240, 1231,
     1252, 1245, 1246, 1248, 1238, 1232, 1254, 1250, 1255, 1253,
     1242, 1271, 1264, 1256, 1264, 1266, 1255, 1266, 1264, 1230,
     1243, 1266, 1249, 1247,    0,    0, 1231, 1252, 1245, 1246,
     1248, 1269, 1232, 1254, 1250, 1272, 1273, 1253, 1271, 1269,
     1256, 1260, 1260, 1260, 1255, 1262, 1262, 1262, 1260, 1265,

     1275, 1265, 1262, 1274, 1286, 1265, 1276, 1280, 1273, 1277,
     1281, 1274, 1272, 1277, 1276, 1280, 1282, 1269, 1281, 1283,
     1284, 1275, 1292, 1287, 1282, 1287, 1285, 1286, 1295, 1287,
     1265, 1290, 1284, 1285, 1304, 1273, 1283, 1301, 1294, 1274,
     1295, 1277, 1276, 1280, 1302, 1301, 1281, 1303, 1275, 1292,
     1305, 1290, 1282, 1306, 1286, 1312, 1304, 1265, 1307, 1313,
     1284, 1285, 1302, 1283, 1294, 1322, 1310, 1307, 1295, 1314,
     1303, 1317, 1312, 1301, 1320, 1317, 1318, 1305, 1290, 1313,
     1306, 1314, 1320, 1304, 1310, 1321, 1323,    0, 1324, 1302,
     1327, 1294, 1322, 1318, 1324, 1307, 1328, 1303, 1327, 1312,

     1329,    0, 1321, 1317, 1328, 1332, 1313, 1330, 1329, 1314,
     1320, 1310, 1334, 1323,    0, 1330,    0,    0,    0,    0,
     1318,    0, 1324,    0, 1328,    0, 1327,    0, 1329, 1321,
        0, 1328,    0, 1332,    0, 1329,    0,    0,    0,    0,
     1334,    0,    0, 1330, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1353, 1353, 1354,    0, 1354,
     1354, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1362, 1362, 1362, 1362, 1362,    0, 1362, 1363, 1363, 1363,

     1363,    0, 1363, 1363, 1364,    0, 1364, 1365,    0, 1365,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378, 1378, 1378,

     1378, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1384, 1384, 1384, 1384,
     1384, 1384, 1384, 1385, 1385, 1385, 1385, 1385,    0, 1385,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1410, 1410,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422, 1422, 1422,

     1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1436, 1436, 1436, 1436, 1436,

     1436, 1436, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1440, 1440, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451,

     1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1465, 1465, 1465, 1465, 1465, 1465, 1465,

     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471,
     1471, 1472, 1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1481,

     1481, 1481, 1481, 1481, 1481, 1481, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1495, 1495, 1495,

     1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505,
     1505, 1505, 1505, 1505, 1506, 1506, 1506, 1506, 1506, 1506,
     1506, 1507, 1507, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1510, 1510, 1510,

     1510, 1510, 1510, 1510, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1524, 1524, 1524, 1524, 1524,

     1524, 1524, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1530, 1530, 1530,
     1530, 1530, 1530, 1530, 1531, 1531, 1531, 1531, 1531, 1531,
     1531, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534,
     1534, 1534, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1536,
     1536, 1536, 1536, 1536, 1536, 1536, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1538, 1538, 1538, 1538, 1538, 1538, 1538,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1545, 1545, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1553, 1553, 1553, 1553, 1553, 1553, 1553,

     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1558, 1558,
        0, 1558, 1558, 1558, 1558, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1568, 1568,

     1568, 1568, 1568, 1568, 1568, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1574, 1574, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,

     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest, lexer_string;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;





//  following are keywords starting with c
#line 2309 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10
#define state_scanompfixed 11
#define state_scanompfree 12
#define state_incfilename 13
#define state_char 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 32 "lexer.l"


#line 2547 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1340 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5943 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 34 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 37 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 39 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 53 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 54 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 59 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 63 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 80 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 88 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 103 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 107 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 119 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 123 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 124 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK

/* to be used in '#include <file>' */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("INCFILENAME");Y;); lexer_string = yytext; 
                             BEGIN state_char; return INCFILENAME; }
	YY_BREAK


case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 133 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 134 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("ENDTEAM");Y);            return ENDTEAM;           }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("INCLUDE");Y;);           return INCLUDE;           }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("INCLUDE_CPP");Y;);       return INCLUDE_CPP;       }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("INCLUDE_COCO");Y);       return INCLUDE_COCO;      }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 96:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 219 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 220 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 221 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 222 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 223 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 224 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 225 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 226 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 227 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 228 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 229 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 230 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 231 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 232 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 113:
#line 237 "lexer.l"
case 114:
/* rule 114 can match eol */
#line 238 "lexer.l"
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 238 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 241 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 242 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 118:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 245 "lexer.l"
case 119:
YY_RULE_SETUP
#line 246 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 249 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 250 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 122:
YY_RULE_SETUP
#line 253 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 256 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 259 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 262 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 265 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 270 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 275 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 278 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 281 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 284 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 287 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 290 "lexer.l"
{ D(O("INCLUDE_CPP");Y;);
                                return INCLUDE_CPP;
		              }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 294 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 297 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 300 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 303 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 306 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 309 "lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 317 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 318 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 142:
YY_RULE_SETUP
#line 321 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       lexer_string = pline.get_value(std::string(yytext));
		       D(O("QSTRING");O(lexer_string);Y;);
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 143:
/* rule 143 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 346 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 352 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 359 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 366 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 373 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 375 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 376 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 378 "lexer.l"
ECHO;
	YY_BREAK
#line 3546 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_scanfixpre):
case YY_STATE_EOF(state_scanompfixed):
case YY_STATE_EOF(state_scanompfree):
case YY_STATE_EOF(state_incfilename):
case YY_STATE_EOF(state_char):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1340 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1340 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1339);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 378 "lexer.l"



void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case INCFILENAME:   BEGIN(state_incfilename);  break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}
std::string lexer_getstring()
{
   D(O("lexer_string");O(lexer_string););
   return lexer_string;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


