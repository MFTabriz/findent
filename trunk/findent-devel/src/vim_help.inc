  std::cout << "To enable findent for vim:" << std::endl;
  std::cout << "  find out in which directory the configuration files for vim are situated, " << std::endl;
  std::cout << "  here we assume it is in $HOME/.vim . Enter the following commands:" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "##############################################" << std::endl;
  std::cout << "vimroot=$HOME/.vim" << std::endl;
  std::cout << "mkdir -p $vimroot/plugin" << std::endl;
  std::cout << "findent --vim_findent > $vimroot/plugin/findent.vim" << std::endl;
  std::cout << "mkdir -p $vimroot/after/indent" << std::endl;
  std::cout << "findent --vim_fortran > $vimroot/after/indent/fortran.vim" << std::endl;
  std::cout << "##############################################" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "In ~/.vimrc include the following lines:" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"" << std::endl;
  std::cout << "filetype plugin indent on" << std::endl;
  std::cout << "syntax on" << std::endl;
  std::cout << "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "If you do not want syntax highlighting, you can switch it" << std::endl;
  std::cout << "off again with:" << std::endl;
  std::cout << "syntax off" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "In ~/.vimrc you can specify:" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "  let use_findent = 1   \" use findent (default)" << std::endl;
  std::cout << "  let use_findent = 0   \" do not use findent" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "  let findent = \"location-of-findent\" \" default: 'findent'" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "  let use_findent_indentexpr = 1  \" use findent for indentexpr" << std::endl;
  std::cout << "  let use_findent_indentexpr = 0  \" do not use findent for indentexpr" << std::endl;
  std::cout << "                                  \" see :help indentexpr" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "  let findent_flags = \"<flags>\"   \" specify flags for findent, e.g.:" << std::endl;
  std::cout << "     let findent_flags = \"-i4\"    " << std::endl;
  std::cout << "     default is \"-i\".&shiftwidth" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "  let findent_setcolumns = 1 \" for free format, width of window will" << std::endl;
  std::cout << "                             \" be forced to 132 columns" << std::endl;
  std::cout << "  let findent_setcolumns = 0 \" no forcing of window width" << std::endl;
  std::cout << "  default is 0" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "In findent.vim, the following mappings are defined" << std::endl;
  std::cout << "  (assuming your LocalLeader = \\):" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "   \\w  toggle: to determine the indent of the line being edited:" << std::endl;
  std::cout << "       use whole buffer (status line: wb)" << std::endl;
  std::cout << "       or use the last usable line" << std::endl;
  std::cout << "   \\f  set/change flags for findent" << std::endl;
  std::cout << "   \\c  comment current line" << std::endl;
  std::cout << "   \\=  indent whole buffer" << std::endl;
  std::cout << "" << std::endl;
  std::cout << " Furthermore, command '==' is redefined, such that is does what" << std::endl;
  std::cout << " one would expect." << std::endl;
  std::cout << "" << std::endl;
  std::cout << "In findent.vim the statusline is redefined. It shows the fortran format" << std::endl;
  std::cout << "(free or fixed) and wb (see \\w above)" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "In fortran.vim the format (free or fixed) of the edited file is" << std::endl;
  std::cout << "determined from the extension:" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "  fixed: .f   .for .fpp .ftn .fortran .f77 " << std::endl;
  std::cout << "  free:  .f90 .f95 .f03 .f08" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "  If another extension is used (and filetype is fortran, of course)," << std::endl;
  std::cout << "  the format is deducted by findent: if in the first 4000 lines" << std::endl;
  std::cout << "  a proof is found for free format, the format is assumed to be" << std::endl;
  std::cout << "  free, else the format is assumed to be fixed." << std::endl;
  std::cout << "" << std::endl;
