/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison interface for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

#ifndef YY_YY_PARSER_HPP_INCLUDED
# define YY_YY_PARSER_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    MODULE = 258,
    SUBFUN = 259,
    ENTRY = 260,
    SUBMODULE = 261,
    MODULESUBROUTINE = 262,
    MODULEFUNCTION = 263,
    END = 264,
    ENDSUBROUTINE = 265,
    ENDFUNCTION = 266,
    ENDPROGRAM = 267,
    ENDMODULE = 268,
    ENDSUBMODULE = 269,
    IF = 270,
    THEN = 271,
    ELSE = 272,
    ELSEIF = 273,
    ENDIF = 274,
    WHERE = 275,
    ENDWHERE = 276,
    FORALL = 277,
    ENDFORALL = 278,
    ELSEWHERE = 279,
    DO = 280,
    DOWHILE = 281,
    DOCONCURRENT = 282,
    ENDDO = 283,
    SELECTCASE = 284,
    SELECTTYPE = 285,
    ENDSELECT = 286,
    CASE = 287,
    CASEDEFAULT = 288,
    TYPEIS = 289,
    CLASSIS = 290,
    CLASSDEFAULT = 291,
    INTERFACE = 292,
    ABSTRACTINTERFACE = 293,
    ENDINTERFACE = 294,
    CONTAINS = 295,
    BLOCK = 296,
    ENDBLOCK = 297,
    BLOCKDATA = 298,
    ENDBLOCKDATA = 299,
    ASSOCIATE = 300,
    ENDASSOCIATE = 301,
    CRITICAL = 302,
    ENDCRITICAL = 303,
    ENUM = 304,
    ENDENUM = 305,
    ASSIGNMENT = 306,
    ASSIGN = 307,
    TO = 308,
    MODULEPROCEDURE = 309,
    PROCEDURE = 310,
    ENDPROCEDURE = 311,
    TIDENTIFIER = 312,
    BLANK = 313,
    FINDFORMAT = 314,
    FREE = 315,
    FIXED = 316,
    UNSURE = 317,
    PROBFREE = 318,
    IDENTIFIER = 319,
    SKIP = 320,
    SKIPALL = 321,
    SKIPNOOP = 322,
    KEYWORD = 323,
    ELEMENTAL = 324,
    IMPURE = 325,
    PURE = 326,
    RECURSIVE = 327,
    SUBROUTINE = 328,
    FUNCTION = 329,
    PROGRAM = 330,
    EOL = 331,
    NAMED_LABEL = 332,
    STLABEL = 333,
    TYPE = 334,
    ENDTYPE = 335,
    CLASS = 336,
    BASICTYPE = 337,
    TYPEC = 338,
    QSTRING = 339,
    HSTRING = 340,
    LR = 341,
    LRB = 342,
    DOTOPERATOR = 343,
    I_NUMBER = 344,
    UNCLASSIFIED = 345,
    ERROR = 346,
    LAST_TOKEN = 347
  };
#endif
/* Tokens.  */
#define MODULE 258
#define SUBFUN 259
#define ENTRY 260
#define SUBMODULE 261
#define MODULESUBROUTINE 262
#define MODULEFUNCTION 263
#define END 264
#define ENDSUBROUTINE 265
#define ENDFUNCTION 266
#define ENDPROGRAM 267
#define ENDMODULE 268
#define ENDSUBMODULE 269
#define IF 270
#define THEN 271
#define ELSE 272
#define ELSEIF 273
#define ENDIF 274
#define WHERE 275
#define ENDWHERE 276
#define FORALL 277
#define ENDFORALL 278
#define ELSEWHERE 279
#define DO 280
#define DOWHILE 281
#define DOCONCURRENT 282
#define ENDDO 283
#define SELECTCASE 284
#define SELECTTYPE 285
#define ENDSELECT 286
#define CASE 287
#define CASEDEFAULT 288
#define TYPEIS 289
#define CLASSIS 290
#define CLASSDEFAULT 291
#define INTERFACE 292
#define ABSTRACTINTERFACE 293
#define ENDINTERFACE 294
#define CONTAINS 295
#define BLOCK 296
#define ENDBLOCK 297
#define BLOCKDATA 298
#define ENDBLOCKDATA 299
#define ASSOCIATE 300
#define ENDASSOCIATE 301
#define CRITICAL 302
#define ENDCRITICAL 303
#define ENUM 304
#define ENDENUM 305
#define ASSIGNMENT 306
#define ASSIGN 307
#define TO 308
#define MODULEPROCEDURE 309
#define PROCEDURE 310
#define ENDPROCEDURE 311
#define TIDENTIFIER 312
#define BLANK 313
#define FINDFORMAT 314
#define FREE 315
#define FIXED 316
#define UNSURE 317
#define PROBFREE 318
#define IDENTIFIER 319
#define SKIP 320
#define SKIPALL 321
#define SKIPNOOP 322
#define KEYWORD 323
#define ELEMENTAL 324
#define IMPURE 325
#define PURE 326
#define RECURSIVE 327
#define SUBROUTINE 328
#define FUNCTION 329
#define PROGRAM 330
#define EOL 331
#define NAMED_LABEL 332
#define STLABEL 333
#define TYPE 334
#define ENDTYPE 335
#define CLASS 336
#define BASICTYPE 337
#define TYPEC 338
#define QSTRING 339
#define HSTRING 340
#define LR 341
#define LRB 342
#define DOTOPERATOR 343
#define I_NUMBER 344
#define UNCLASSIFIED 345
#define ERROR 346
#define LAST_TOKEN 347

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef int YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif


extern YYSTYPE yylval;

int yyparse (void);

#endif /* !YY_YY_PARSER_HPP_INCLUDED  */
