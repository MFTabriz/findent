#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 154
#define YY_END_OF_BUFFER 155
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[690] =
    {   0,
      155,  153,  154,  152,  154,  153,  154,  149,  153,  154,
      148,  153,  154,  153,  154,  150,  153,  154,  151,  152,
      154,   16,   17,  153,  154,  153,  154,  153,  154,  153,
      154,  153,  154,  153,  154,  153,  154,  153,  154,  153,
      154,  153,  154,  153,  154,  153,  154,  153,  154,  153,
      154,  153,  154,  153,  154,  153,  154,  153,  154,    4,
      154,    5,  154,    2,    4,  154,    3,    4,  154,    8,
      154,    9,  154,    6,    8,  154,    7,    8,  154,   15,
      154,   14,  154,   10,   15,  154,   12,   15,  154,   11,
       15,  154,   13,   15,  154,    1,  154,  154,  154,  114,

      154,  154,  114,  154,  154,  154,  154,  154,  154,  154,
      154,  145,  154,  145,  154,  144,  154,  145,  154,  145,
      154,  130,  145,  154,  145,  154,  145,  154,  119,  154,
      118,  154,  119,  154,  123,  154,  122,  154,  123,  154,
      123,  154,   18,  154,   20,  154,   19,  154,  146,  148,
       16,   17,   17,   16,   17,   36,   72,   91,  114,  102,
      114,  102,  114,  104,  114,  102,  106,  108,  109,  114,
      130,  137,  117,   18,  147,   37,   53,   96,   53,  102,
      104,  114,  102,  106,  108,  114,  102,  104,  102,  108,
      103,  114,  106,  108,  109,  114,  104,  106,  108,  114,

      106,  108,  114,  102,  109,  114,  102,  104,  109,  114,
      102,  106,  109,  114,  101,  102,  114,  131,  117,  117,
      121,  120,   27,   45,   69,   84,   85,   92,   93,  104,
      108,  102,  104,  106,  108,  114,  102,  114,  102,  104,
      114,  102,  106,  114,  102,  104,  108,  102,  102,  104,
      103,  104,  114,  103,  106,  108,  114,  109,  114,  104,
      109,  114,  106,  109,  114,  108,  104,  114,  104,  106,
      114,  114,  106,  114,  104,  102,  104,  106,  109,  114,
      101,  102,  104,  114,  101,  102,  106,  108,  114,  112,
      114,  138,  117,   24,   31,   52,   57,   68,   94,   97,

      104,  108,  102,  104,  106,  114,  103,  104,  106,  108,
      114,  103,  114,  103,  104,  114,  103,  106,  114,  104,
      106,  109,  114,  101,  102,  104,  106,  108,  114,  101,
      102,  114,  101,  102,  104,  114,  101,  102,  106,  114,
      104,  112,  114,  106,  108,  112,  114,  111,  114,  134,
      133,  115,  117,  115,   23,   46,   70,   73,   78,   95,
      103,  104,  106,  114,  101,  102,  104,  106,  114,  104,
      106,  108,  112,  114,  112,  114,  104,  112,  114,  106,
      112,  114,  104,  111,  114,  106,  108,  111,  114,  132,
      140,  116,  116,  117,  115,  117,  115,   32,   33,   40,

       54,   65,   66,   74,   75,   77,   83,   98,  102,  108,
      114,  102,  104,  108,  114,  108,  114,  104,  108,  114,
      113,  114,  105,  108,  114,  103,  108,  114,  103,  104,
      108,  114,  101,  102,  108,  114,  101,  102,  104,  108,
      114,  108,  112,  114,  104,  108,  112,  114,  108,  111,
      114,  104,  108,  111,  114,  111,  114,  104,  111,  114,
      139,   34,   35,   41,   49,   67,   71,   99,  102,  107,
      108,  114,  102,  104,  107,  108,  114,  102,  107,  114,
      102,  104,  107,  114,  107,  108,  114,  104,  107,  108,
      114,  107,  114,  104,  107,  114,  104,  113,  114,  107,

      108,  110,  113,  114,  105,  114,  105,  104,  105,  114,
      107,  108,  113,  114,  103,  107,  108,  114,  103,  104,
      107,  108,  114,  103,  107,  114,  107,  109,  114,  104,
      107,  109,  114,  103,  104,  107,  114,  102,  107,  109,
      114,  102,  104,  107,  109,  114,  101,  102,  107,  108,
      114,  101,  102,  104,  107,  108,  114,  101,  102,  107,
      114,  101,  102,  104,  107,  114,  107,  108,  112,  114,
      104,  107,  108,  112,  114,  107,  112,  114,  104,  107,
      112,  114,  107,  108,  111,  114,  104,  107,  108,  111,
      114,  107,  111,  114,  104,  107,  111,  114,16519,16520,

      141,   22,   25,   28,   44,   47,   55,   59,   62,   76,
       82,   86,   89,  104,  107,  108,  113,  114,  110,  113,
      114,  104,  110,  113,  114,  107,  110,  113,  114,  104,
      105,  105,  113,  114,  104,  113,  114,  107,  113,  114,
    16519,16520,16526,16527,   30,   61,   87,   88,   90,  100,
      104,  107,  113,  114,  104,  107,  110,  113,  114,16526,
    16527,   26,   51,   56, 8327, 8328,   29,   38,   48,   50,
       58,   60,   64,  128,  129,   39,   42,   63, 8335, 8334,
       81,   43,   79,   80,  124,  125,   21,  126,  127
    } ;

static const flex_int16_t yy_accept[1369] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    6,    8,   11,   14,   16,
       19,   22,   26,   28,   30,   32,   34,   36,   38,   40,
       42,   44,   46,   48,   50,   52,   54,   56,   58,   60,
       62,   64,   67,   70,   72,   74,   77,   80,   82,   84,
       87,   90,   93,   96,   98,   99,  100,  102,  103,  105,
      106,  107,  108,  109,  110,  111,  112,  114,  116,  118,
      120,  122,  125,  127,  129,  131,  133,  135,  137,  139,

      141,  143,  145,  147,  149,  150,  150,  151,  151,  151,
      153,  154,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  157,  157,  157,  157,  157,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  159,  159,  159,
      159,  159,  159,  159,  160,  160,  162,  162,  162,  162,
      163,  163,  163,  163,  164,  164,  164,  164,  164,  164,
      164,  166,  166,  166,  166,  166,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  172,  172,  172,  172,  172,  172,  172,  173,
      174,  174,  174,  174,  175,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  177,  177,  177,  177,  177,
      177,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  179,
      179,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      183,  183,  183,  183,  187,  187,  187,  187,  189,  189,
      189,  189,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  193,  193,  193,  193,  193,  197,
      197,  197,  197,  197,  197,  197,  201,  201,  201,  201,
      204,  204,  204,  204,  207,  207,  207,  207,  207,  207,
      207,  211,  211,  211,  215,  215,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  219,  219,  219,  219,  219,  219,
      220,  221,  221,  222,  223,  223,  223,  223,  223,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  227,  228,  228,  228,
      228,  228,  229,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  231,  231,  231,
      232,  232,  232,  237,  237,  239,  242,  242,  245,  245,

      245,  248,  249,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  254,  254,
      254,  254,  258,  258,  258,  260,  260,  263,  263,  263,
      266,  266,  267,  269,  269,  272,  273,  273,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  276,  276,  281,
      281,  281,  281,  281,  285,  285,  285,  285,  290,  290,
      290,  290,  290,  290,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  293,  293,

      294,  294,  294,  294,  294,  295,  295,  295,  295,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  297,  297,  297,  297,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  300,  300,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  303,  303,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      312,  312,  314,  317,  317,  320,  320,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  330,  330,  333,
      337,  337,  341,  341,  341,  341,  341,  341,  341,  344,
      344,  344,  344,  348,  348,  348,  348,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  351,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  354,  355,  355,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  358,  358,
      359,  359,  359,  359,  359,  360,  360,  360,  360,  360,
      360,  360,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  375,  377,  380,  380,  383,  383,  383,  383,
      383,  386,  386,  386,  386,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  391,  391,  391,  391,
      392,  392,  392,  392,  392,  393,  395,  397,  398,  398,
      398,  398,  398,  398,  398,  398,  399,  400,  400,  400,
      400,  400,  400,  400,  400,  401,  401,  401,  401,  401,
      401,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  403,  404,  404,  404,  405,  406,  406,  407,  407,
      407,  407,  407,  408,  408,  408,  408,  408,  408,  408,

      409,  409,  409,  409,  409,  409,  409,  409,  412,  412,
      412,  412,  412,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  418,  418,  418,  418,
      418,  421,  421,  421,  421,  421,  421,  421,  423,  423,
      423,  423,  423,  423,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  437,  437,
      437,  437,  437,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  445,  445,
      445,  445,  445,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  452,  452,  452,  452,  452,
      456,  456,  458,  458,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  463,  464,
      464,  465,  465,  465,  465,  465,  465,  465,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  467,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  469,  469,  473,  473,  478,  478,  481,  481,

      485,  485,  488,  488,  492,  492,  494,  494,  497,  497,
      500,  500,  500,  500,  505,  505,  505,  507,  507,  508,
      508,  508,  511,  511,  511,  515,  515,  515,  515,  519,
      519,  524,  524,  527,  527,  530,  530,  534,  534,  538,
      538,  542,  542,  547,  547,  552,  552,  558,  558,  562,
      562,  567,  567,  571,  571,  576,  576,  579,  579,  583,
      583,  587,  587,  592,  592,  595,  595,  599,  599,  599,
      599,  599,  599,  599,  599,  601,  601,  601,  602,  602,
      602,  602,  603,  604,  604,  604,  605,  605,  605,  605,
      605,  605,  606,  607,  607,  607,  607,  608,  608,  608,

      609,  609,  609,  610,  610,  610,  611,  611,  611,  611,
      612,  613,  613,  613,  614,  614,  614,  614,  614,  619,
      619,  622,  622,  626,  626,  626,  630,  630,  632,  632,
      633,  635,  638,  638,  641,  641,  641,  641,  641,  643,
      643,  643,  643,  643,  645,  645,  645,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  647,
      647,  647,  647,  647,  647,  648,  649,  650,  651,  651,
      655,  655,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  662,  662,  662,  662,  663,  663,  663,  663,
      663,  663,  663,  663,  664,  665,  665,  665,  665,  665,

      665,  665,  665,  665,  665,  665,  666,  666,  667,  667,
      667,  667,  667,  668,  668,  669,  669,  669,  670,  671,
      672,  673,  674,  674,  674,  674,  674,  675,  676,  676,
      676,  676,  677,  678,  678,  679,  679,  679,  679,  679,
      679,  679,  680,  680,  681,  681,  681,  682,  682,  682,
      682,  682,  682,  683,  684,  684,  684,  684,  684,  685,
      685,  686,  686,  687,  688,  689,  690,  690
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,    1,   15,   16,    1,    1,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       33,   40,   41,   42,   43,   44,   45,   46,   47,   33,
       48,    1,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   33,   61,   62,   63,   64,
       65,   66,   33,   67,   68,   69,   70,   71,   72,   73,
       74,   33,    1,   75,    1,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    3,    4,
        1,    1,    1,    1,    1,    1,    5,    5,    6,    1,
        1,    7,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    8,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1608] =
    {   0,
        0,   75,  150,  225,  298, 3582,    0,   71,   21,   23,
       22,   24,   97,   98,   54,   55,  128,  174, 3570, 3569,
     3558,  368,   27,  254, 3557,  257, 3538,   35, 3518, 3517,
     3503, 3489, 3477, 6340, 6340,   42, 6340,   25, 3429, 6340,
     6340,   36,  155,   85,  365,  110,  232,  244,  299,  159,
      234,  245,   86,  276,  361,  279,  247,  369,  355, 6340,
     6340, 6340, 6340, 6340, 6340, 6340, 6340, 6340, 6340, 6340,
     6340, 6340, 6340, 6340, 6340, 3442, 6340,   59,  103,  435,
       44,  112,  202,  510,  287,  584, 6340,  183, 6340,  250,
      188,  289,  340, 3420, 6340, 6340, 3404, 6340, 6340,  211,

     3403,    0, 6340, 6340, 6340,  285,   35, 3391,    0, 3385,
        0,  175,  360,  393,  425,  440,   92,  357,  441,  297,
      520,  451,  526,  246,  445, 3360,  517,  522,  329,  446,
      519,  515,  443,  531,  447,  521, 3359,  532,  524,  551,
      578,  582, 3358, 6340,  127,  204,  118,  411,  483,  245,
      131,  215,  484,  397,  658,  465,  493,  624,  733,  496,
     3337,  600,  680,  606,  684, 3340,  534,  693,  620,  808,
      722,  706,  829,  833,  710,  837,  633,  769,  776,  358,
      762,  833, 3300,  844,  664,  731,  848,  442,  847,  637,
      648, 3291,  689,    0, 6340,  826,  852,  705,  746,  861,

      845,  843,  866,  868,  866,  535,  553,  847,  743,  895,
      933,  896,  880,  523,  900,  903,  742,  899,  910,  913,
      965,  911,  914,  928,  912,  973,  960,  925, 3246,  963,
      577,  958,  707,  711,  789,  466,  719, 1012,  786, 3241,
     1008, 1017, 1029, 3231,  797, 1039,  931, 3202, 1004,   58,
     1043, 3189, 3189, 1047, 1025, 1051, 1061, 1082, 1086, 1136,
     1048, 1091, 1094,  557, 1095, 1110, 1097, 1114, 3175, 1118,
     1158, 3164, 1123, 1119, 1162, 6340, 1167, 1170, 1185, 3154,
     1120, 1189, 1171, 3151, 1193, 1202, 1211, 3071, 3012, 1198,
     6340, 1215, 1224, 2998, 1227,  695, 1199, 1236, 1246, 1267,

     1268, 1271, 1277, 1281, 1295, 1280, 1299, 1303, 1313, 1321,
      739, 1247,  587, 6340,  771,  884, 1315, 1342, 1330,  700,
     1218,  837, 6340, 6340, 1019, 1318, 1331, 1163, 1274, 1323,
     1309, 1332, 1148, 1345, 1320, 1068,  843, 1341, 1339, 1367,
     1365, 1370, 1349, 1372, 1369, 1373, 1376, 1401, 1389, 1384,
     1391, 1400, 1404, 1393, 1351, 2972, 1410, 1395, 1414, 1416,
     1443, 1422, 1428, 1446, 1442, 2970, 2936, 1448, 1431, 1449,
     1456, 2935, 1465, 1461, 1476, 1472, 1493, 1489, 1503, 1508,
     1520, 1524, 1533, 1523, 1537, 1541, 2926, 1240, 1550, 2917,
     1546, 1555, 6340, 1558, 2916, 6340, 1567, 2906, 2889, 1571,

     6340, 2886, 6340, 1573, 1576, 1585, 1581, 1590, 1593, 1602,
     1598, 1611, 1621, 1642, 1646, 1696, 1650, 1599, 1662, 1658,
     1671, 1607, 1675, 1608, 1680, 1684, 1717, 2870, 1719, 1721,
     1730, 2866, 1727, 1745, 2826, 1733, 6340, 1749, 1758, 2782,
     1578, 6340, 6340, 1754, 6340, 2770, 1770, 2768, 1773, 1767,
     1782, 1778, 1787, 1791, 1800, 2758, 6340, 1796, 6340, 1804,
     1805, 1814, 1810, 2734, 1819, 1822, 1831, 2727, 1827, 1840,
     1850, 1871, 1872,  713, 1828, 1881, 1884, 1885, 1899, 1900,
     1903, 1909, 1912, 1913, 1929, 1923, 1932, 1076, 1235, 1492,
     1598, 1073, 1711, 1934, 1945, 1952, 1962, 6340, 1961, 1976,

     1546, 1943, 1860, 1709, 1955, 1902, 1973, 1971, 1984, 1981,
     1807, 1986, 1582, 1707, 1995, 1989, 1908, 1983, 1999, 1723,
     1965, 1966, 2003, 2710, 2005, 2011, 2004, 2699, 2008, 2015,
     2017, 2019, 2027, 2034, 2040, 2038, 2690, 2041, 2042, 2043,
     2045, 2064, 2066, 2065, 2068, 2046, 2069, 2050, 2071, 2078,
     2079, 6340, 2085, 2689, 2097, 2088, 1941, 1837, 2106, 2109,
     1689,  961, 2126, 2686, 2132, 2683, 2139, 2142, 2158, 2154,
     6340, 2162, 6340, 2164, 2144, 2168, 2165, 2174, 1129, 2177,
     2674, 2181, 2654, 2185, 2188, 2191, 2194, 2197, 2211, 2214,
     2198, 2217, 2231, 1195, 2235, 2652, 2239, 2218, 2243, 1228,

     2246, 2632, 2250, 2618, 2254, 2257, 2261, 2615, 2264, 6340,
     2267, 2611, 6340, 2270, 2598, 2274, 6340, 1594, 2598, 2277,
     2523, 2281, 2284, 2288, 2291, 2220, 2219, 2295, 2298, 2300,
     1654, 2307, 2465, 2311, 2449, 2303, 6340, 2315, 2410, 6340,
     2318, 2404, 2323, 2344, 2345, 2348, 2357, 2353, 2387, 2362,
     1843, 2365, 2388, 2354, 2373, 2376,  940, 2377, 2380, 2385,
     2386, 2389, 2397, 2398, 2401, 2407, 2413, 2416, 2417, 1840,
     6340, 6340, 1863, 1619, 2377, 2428, 2432, 2436, 2442, 2447,
     2443, 1876, 2134, 2405, 2334, 2437, 2456, 2429, 2395, 2453,
     2457, 2446, 2409, 2447, 2473, 2453, 2419, 2474, 2464, 2481,

     2479, 2333, 2487, 2485, 2493, 2491, 2505, 2475, 2509, 2501,
     2497, 2512, 2517, 2513, 2515, 2527, 2535, 2322, 2520, 2321,
     2533, 2537, 2540, 2546, 2543, 2550, 2552, 2567, 2568, 2555,
     2571, 2207, 2560, 2572, 2602, 2614, 2626, 2616, 2640, 2629,
     2643, 2646, 2648, 2657, 2660, 2669, 2671, 2665, 2680, 2677,
     2689, 2691, 2700, 2685, 2697, 2709, 2712, 2721, 2723, 2732,
     2735, 2736, 2740, 2749, 2752, 2761, 2746, 2757, 2766, 2769,
     2778, 2774, 2775, 2787, 2783, 2792, 2796, 2801, 2805, 6340,
     2807, 2810, 2811, 2820, 2824, 2833, 2836, 2830, 2845, 2841,
     2850, 2853, 2862, 2858, 2859, 2871, 2874, 2883, 6340, 2893,

     2914, 2915, 2879, 2924, 2880, 2928, 2930, 2943, 2946, 2947,
     2956, 6340, 2205, 6340, 2959, 2204, 2962, 2967, 2971, 2968,
     2196, 2980, 2982, 2991, 2200, 2976, 2994, 2995, 3003, 3004,
     3007, 3013, 3017, 3016, 2569, 6340, 2611, 2683, 2650, 3026,
     3029, 3033, 3037, 3041, 6340, 2146, 2593, 6340, 2679, 2969,
     2983, 3005, 3023, 3036, 2800, 2120, 2096, 2869, 2797, 2775,
     2641, 3027, 3015, 3029, 2095, 3030, 3051, 3047, 3059, 2920,
     2048, 3046, 3055, 3066, 3069, 3079, 3076, 3083, 3081, 3084,
     2024, 2013, 3086, 3091, 1957, 1954, 3104, 1933, 3093, 3094,
     3096, 3098, 1921, 3106, 3102, 3110, 3113, 3108, 3125,  985,

     3142, 3157, 3168, 3159, 3183, 3185, 3194, 1906, 3173, 3198,
     3179, 3203, 6340, 3207, 3216, 3212, 3225, 3221, 3229, 3230,
     3239, 3235, 3244, 3247, 3256, 1902, 3252, 3265, 3253, 3269,
     6340, 3274, 3278, 3283, 3287, 3292, 3295, 1315, 3303, 3300,
     3312, 3315, 3324, 3327, 3301, 3336, 3339, 3309, 3348, 3321,
     3352, 3354, 3363, 1844, 3333, 3367, 3371, 3372, 3381, 3385,
     3389, 3394, 3390, 3399, 6340, 3403, 3412, 3416, 3421, 3425,
     3430, 3434, 3436, 3439, 3448, 3444, 3453, 3457, 3462, 3466,
     3470, 3471, 3480, 3476, 3485, 3488, 3497, 1823, 3493, 3506,
     3494, 3510, 6340, 3515, 3519, 3524, 3528, 3533, 3543, 3564,

     3565, 3568, 3577, 3573, 3586, 3592, 3596, 1807, 3574, 3605,
     3601, 3610, 6340, 3619, 3622, 3631, 3634, 3637, 3640, 3649,
     3645, 3654, 3657, 3666, 1806, 3662, 3675, 3663, 3679, 6340,
     3684, 1774, 3688, 6340, 3692, 3696, 3700, 3704, 3708, 3712,
     3716, 3122, 2702, 3195, 3721, 3725, 3726, 6340, 3731, 3730,
     3717, 3656, 3719, 3290, 3723, 3234, 3737, 1746, 1706, 3281,
     6340, 3475, 3567, 3731, 3741, 3739, 3720, 3689, 3743, 3744,
     3767, 3122, 3765, 3769, 3746, 3771, 3773, 3772, 1686, 1676,
     3783, 3785, 3788, 3791, 3789, 3790, 3793, 3775, 3801, 3786,
     3800, 6340, 3828, 1649, 3852, 6340, 3863, 1615, 3867, 6340,

     3876, 1580, 3872, 6340, 3885, 1562, 3881, 6340, 3721, 1556,
     3890, 3893, 3902, 1540, 3833, 3906, 3910, 3914, 3918, 3848,
     3849, 1528, 3922, 3931, 1511, 3919, 3935, 3944, 1507, 3940,
     6340, 3953, 1488, 3957, 1474, 3962, 6340, 3966, 6340, 3975,
     1464, 3971, 6340, 3984, 1450, 3980, 6340, 3993, 1411, 3989,
     6340, 4002, 1391, 3998, 6340, 4011, 1361, 4007, 6340, 4020,
     1349, 4016, 6340, 4029, 1306, 4025, 6340, 4033, 4037, 4041,
     4045, 4049, 4053, 2813, 4058, 2894, 4063, 6340, 4064, 4068,
     4034, 1291, 1270, 4042, 4054, 1256, 3829, 3438, 4055, 4056,
     4060, 1244, 1226, 3878, 4057, 4075, 1204, 4063, 4081, 1160,

     4065, 4074, 1159, 4070, 4061, 1126, 4097, 4099, 4102, 1051,
     1041, 4110, 4115, 1018, 4117, 4107, 4129, 4144, 6340, 4153,
     1024, 4149, 6340, 4158, 4175, 1021, 4155, 1022,  977,  921,
      868, 6340, 4179,  839, 4183, 4187, 4191, 3015, 4196,  795,
      765, 3303, 4201, 4202, 4122, 4153,  767, 4180, 3352, 4190,
     4188, 4198, 4168, 4192, 4193, 4199, 4195, 4201,  756, 4205,
     4212, 4214, 4219, 4224,  753,  700,  648,  638, 4267, 6340,
     4276, 6340, 4271, 4282, 4285, 3573,  650, 4294,  610, 3949,
     4180, 4297,    0,    0, 4254,  594, 4265, 4202, 4272, 4274,
     4275, 4292, 4285,  580,  542, 4293, 4294, 4296, 4298, 4299,

     4306, 4286, 4335,  472, 4351, 6340, 4361, 6340,  461,  423,
      408, 4304,  391, 4297,  374, 4323, 4328,  358,  312,  286,
      265,  262, 4339, 4313, 4349, 4351, 4333, 4334, 4373, 4378,
     3806, 6340,  251, 4365,  202, 4367, 4366, 4355,  194,  186,
     4405, 6340, 4410, 6340, 4386, 4379,  172, 4398, 4399, 4359,
     4363, 4403,  130,  119, 4404, 4398, 4408, 4420,   88, 3588,
     6340, 4396, 6340,   46, 6340, 6340, 6340, 4476, 4484, 4492,
     4500, 4508, 4516, 4524, 4532, 4540, 4548, 4556, 4564, 4572,
     4576, 4580, 4586, 4594, 4602, 4610, 4618, 4626, 4634, 4642,
     4650, 4656, 4659, 4664, 4672, 4680, 4688, 4696, 4704, 4712,

     4720, 4728, 4736, 4744, 4752, 4760, 4768, 4776, 4784, 4792,
     4800, 4808, 4816, 4824, 4832, 4840, 4848, 4856, 4864, 4872,
     4880, 4888, 4896, 4904, 4912, 4920, 4928, 4936, 4944, 4952,
     4960, 4968, 4976, 4984, 4992, 5000, 5008, 5012, 5018, 5026,
     5034, 5042, 5050, 5058, 5066, 5074, 5082, 5090, 5098, 5106,
     5114, 5122, 5130, 5138, 5146, 5154, 5162, 5170, 5178, 5186,
     5194, 5202, 5210, 5218, 5226, 5234, 5242, 5250, 5254, 5260,
     5268, 5276, 5284, 5292, 5300, 5308, 5316, 5324, 5332, 5340,
     5348, 5356, 5364, 5372, 5380, 5388, 5396, 5404, 5412, 5420,
     5428, 5436, 5444, 5452, 5460, 5468, 5476, 5484, 5492, 5500,

     5503, 5509, 5517, 5525, 5533, 5541, 5549, 5557, 5565, 5573,
     5581, 5589, 5597, 5605, 5613, 5621, 5629, 5637, 5645, 5653,
     5661, 5669, 5677, 5685, 5693, 5701, 5709, 5717, 5725, 5733,
     5741, 5749, 5757, 5765, 5773, 5777, 5783, 5791, 5799, 5807,
     5815, 5823, 5831, 5839, 5847, 5855, 5863, 5871, 5879, 5887,
     5895, 5903, 5911, 5919, 5927, 5935, 5943, 5951, 5959, 5967,
     5975, 5983, 5991, 5999, 6007, 6015, 6023, 6031, 6039, 6047,
     6055, 6063, 6071, 6075, 6081, 6089, 6097, 6105, 6113, 6121,
     6129, 6137, 6145, 6153, 6161, 6169, 6177, 6185, 6193, 6201,
     6209, 6217, 6225, 6233, 6241, 6249, 6257, 6265, 6273, 6281,

     6289, 6297, 6301, 6307, 6315, 6323, 6331
    } ;

static const flex_int16_t yy_def[1608] =
    {   0,
     1368, 1368, 1369, 1369,    2,    5,    5,    5, 1370, 1370,
     1371, 1371, 1372, 1372, 1372, 1372, 1372, 1372, 1373, 1373,
     1374, 1375, 1376, 1376, 1377, 1377, 1378, 1378, 1379, 1379,
     1380, 1380, 1367, 1367, 1367, 1367, 1367, 1367, 1381, 1367,
     1367, 1382, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1383, 1367, 1384, 1385, 1386,
     1387, 1388, 1389, 1386, 1384, 1388, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1390, 1367, 1367, 1367, 1367, 1367, 1381, 1391, 1392,
     1393, 1382, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1383, 1367, 1394, 1395, 1396, 1397, 1385, 1395,
     1398, 1399, 1400, 1395, 1401, 1402, 1403, 1404, 1401, 1402,
     1405, 1406, 1407, 1408, 1408, 1409, 1410, 1408, 1411, 1412,
     1400, 1400, 1400, 1400, 1400, 1400, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1413, 1367, 1381, 1381, 1381, 1381, 1381,

     1381, 1381, 1381, 1381, 1367, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
      211, 1381, 1414, 1415, 1416, 1395, 1417, 1409, 1415, 1405,
     1418, 1416, 1416, 1409, 1418, 1416, 1398, 1405, 1419, 1399,
     1399, 1409, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1423,
     1421, 1426, 1424, 1395, 1427, 1428, 1425, 1425, 1409, 1429,
     1425, 1405, 1367, 1426, 1426, 1367, 1426, 1422, 1422, 1409,
     1426, 1422, 1430, 1409, 1431, 1430, 1430, 1409, 1432, 1431,
     1367, 1431, 1430, 1409, 1433, 1395, 1434, 1435, 1436, 1437,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1367, 1367, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1439, 1440, 1441, 1440,
     1442, 1441, 1441, 1442, 1441, 1443, 1405, 1432, 1409, 1409,
     1442, 1442, 1367, 1442, 1409, 1367, 1441, 1409, 1444, 1444,

     1367, 1409, 1367, 1445, 1446, 1447, 1446, 1448, 1447, 1447,
     1448, 1447, 1449, 1450, 1451, 1449, 1450, 1452, 1453, 1451,
     1451, 1454, 1451, 1448, 1448, 1448, 1452, 1405, 1455, 1453,
     1453, 1409, 1455, 1453, 1409, 1454, 1367, 1454, 1451, 1409,
     1367, 1367, 1367, 1448, 1367, 1409, 1447, 1409, 1456, 1457,
     1456, 1457, 1457, 1456, 1456, 1432, 1367, 1457, 1367, 1458,
     1459, 1460, 1459, 1405, 1461, 1460, 1460, 1409, 1461, 1460,
     1462, 1463, 1463, 1464, 1465, 1466, 1467, 1467, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1367, 1367, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1367, 1469, 1469, 1469, 1469, 1470, 1471, 1472, 1471,
     1473, 1472, 1472, 1473, 1472, 1473, 1473, 1473, 1472, 1432,
     1367, 1473, 1367, 1474, 1475, 1476, 1475, 1477, 1476, 1476,
     1477, 1476, 1477, 1477, 1477, 1476, 1474, 1478, 1479, 1474,
     1478, 1480, 1481, 1479, 1479, 1482, 1479, 1480, 1483, 1481,

     1481, 1483, 1481, 1482, 1482, 1479, 1477, 1483, 1483, 1367,
     1483, 1409, 1367, 1481, 1409, 1482, 1367, 1484, 1485, 1484,
     1485, 1485, 1484, 1485, 1484, 1486, 1487, 1488, 1487, 1489,
     1488, 1488, 1489, 1488, 1489, 1489, 1367, 1489, 1409, 1367,
     1488, 1409, 1490, 1491, 1491, 1492, 1493, 1492, 1494, 1495,
     1493, 1493, 1409, 1495, 1493, 1496, 1497, 1498, 1499, 1474,
     1496, 1496, 1474, 1474, 1474, 1474, 1474, 1474, 1496, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1500, 1367, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1367, 1367, 1501, 1501, 1501,

     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1502, 1503, 1504, 1503, 1505, 1504,
     1504, 1505, 1505, 1505, 1504, 1505, 1506, 1507, 1508, 1507,
     1509, 1508, 1508, 1509, 1509, 1509, 1508, 1509, 1510, 1511,
     1510, 1512, 1513, 1514, 1515, 1515, 1516, 1513, 1517, 1514,
     1514, 1517, 1516, 1515, 1517, 1517, 1514, 1516, 1517, 1367,
     1518, 1519, 1519, 1518, 1519, 1518, 1520, 1521, 1522, 1521,
     1523, 1522, 1522, 1523, 1523, 1523, 1522, 1523, 1367, 1524,

     1525, 1525, 1526, 1527, 1526, 1528, 1527, 1527, 1528, 1528,
     1528, 1367, 1529, 1367, 1527, 1529, 1530, 1531, 1532, 1531,
     1533, 1534, 1532, 1532, 1529, 1534, 1535, 1535, 1530, 1535,
     1535, 1535, 1535, 1535, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1367,
     1367, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536,

     1537, 1538, 1539, 1538, 1540, 1539, 1539, 1529, 1540, 1539,
     1540, 1540, 1367, 1540, 1539, 1540, 1539, 1540, 1535, 1541,
     1542, 1541, 1543, 1542, 1542, 1529, 1543, 1542, 1543, 1543,
     1367, 1543, 1542, 1543, 1542, 1543, 1544, 1545, 1544, 1546,
     1547, 1548, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1553,
     1555, 1554, 1554, 1529, 1555, 1554, 1556, 1557, 1556, 1556,
     1557, 1557, 1555, 1555, 1367, 1555, 1554, 1556, 1555, 1554,
     1557, 1555, 1558, 1559, 1558, 1559, 1559, 1558, 1559, 1558,
     1560, 1561, 1562, 1561, 1563, 1562, 1562, 1529, 1563, 1562,
     1563, 1563, 1367, 1563, 1562, 1563, 1562, 1563, 1564, 1565,

     1565, 1566, 1567, 1566, 1568, 1567, 1567, 1529, 1568, 1567,
     1568, 1568, 1367, 1568, 1567, 1568, 1567, 1569, 1570, 1571,
     1570, 1572, 1571, 1571, 1529, 1572, 1571, 1572, 1572, 1367,
     1572, 1529, 1571, 1367, 1573, 1573, 1569, 1573, 1573, 1573,
     1573, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1367,
     1367, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1367, 1575, 1529, 1576, 1367, 1575, 1529, 1576, 1367,

     1577, 1529, 1578, 1367, 1577, 1529, 1578, 1367, 1579, 1580,
     1581, 1582, 1582, 1529, 1583, 1582, 1584, 1584, 1584, 1585,
     1586, 1587, 1588, 1588, 1529, 1581, 1588, 1589, 1529, 1590,
     1367, 1589, 1529, 1591, 1529, 1592, 1367, 1590, 1367, 1593,
     1529, 1594, 1367, 1595, 1529, 1596, 1367, 1595, 1529, 1596,
     1367, 1597, 1529, 1598, 1367, 1597, 1529, 1598, 1367, 1599,
     1529, 1600, 1367, 1599, 1529, 1600, 1367, 1601, 1601, 1602,
     1601, 1602, 1602, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1367, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1581, 1581, 1367, 1581,
     1529, 1583, 1367, 1583, 1582, 1529, 1585, 1587, 1587, 1587,
     1529, 1367, 1588, 1529, 1601, 1601, 1601, 1367, 1367, 1604,
     1605, 1367, 1367, 1367, 1603, 1603, 1603, 1603, 1367, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1581, 1367,
     1583, 1367, 1602, 1601, 1602, 1367, 1604, 1604, 1605, 1605,
     1367, 1367, 1606, 1607, 1603, 1603, 1603, 1367, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,

     1603, 1603, 1602, 1367, 1604, 1367, 1605, 1367, 1367, 1606,
     1607, 1603, 1603, 1367, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1367, 1367, 1606, 1607,
     1603, 1367, 1603, 1603, 1603, 1603, 1603, 1603, 1367, 1367,
     1606, 1367, 1607, 1367, 1603, 1603, 1603, 1603, 1603, 1367,
     1367, 1603, 1603, 1603, 1603, 1367, 1367, 1603, 1603, 1367,
     1367, 1367, 1367, 1603, 1367, 1367,    0, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367
    } ;

static const flex_int16_t yy_nxt[6416] =
    {   0,
       34,   34,   35,   36,   34,   34,   34,   34,   34,   34,
       34,   37,   34,   34,   34,   34,   38,   38,   34,   34,
       34,   34,   34,   61,   65,   61,   65,   58,   88,   89,
       88,   90,   62,   63,   62,   63,  100,   99,  100,  101,
       59,  107,  107,  110,  111,  105,  161,   40,   34,   34,
       34,  107,  107,  162,  109,   58,   69,   69,  106,  106,
      402,  146,  253,  147,  109,   70,   70,   59,  148,   66,
       67,   66,   67,   41,   34,   34,   34,   41,   36,   34,
       34,   34,   34,   34,   34,   34,   37,   34,   34,   34,
       34,   38,   38,   34,   34,   34,   34,   34,   58,   69,

       69,   72,   72,  109,  109,  150,  109,  151,   70,   70,
      109,   59,  152,  133,  154,  200,  156,   71,   71,  115,
      240,  163,   40,   34,   34,   34,   58,  241,  109,  146,
       69,  234,   73,  248,   73,   73,  235,  109,   59,   70,
      249,  133,   73,  200,   72,   72,  115,  121,  109,   34,
       34,   34,   35,   36,   34,   34,   34,   34,   34,   34,
       34,   37,   34,   34,   34,   34,   38,   38,   34,   34,
       34,   34,   34,  109,  121,   72,   69,  109,   73,  113,
       73,   73,  110,  111,  177,   70,  177,  178,   73,  181,
      109,  181,  178,  109,  182,  114,  129,   40,   34,   34,

       34, 1351,   73,  165,  166,  165,  167,  113,  237, 1350,
      183,  168,  191,  238,  191,  192,  251,  252,  251,  253,
      109,   72,  114,  129,   34,   34,   34,   41,   36,   34,
       34,   34,   34,   34,   34,   34,   37,   34,   34,   34,
       34,   38,   38,   34,   34,   34,   34,   34,   73,  237,
      109,  179,  109,  179,  238,   91,   89,   91,   90,   96,
       92,   97,  109,  109,  109,  109,  122,   93,  123,  109,
       97,  130,   40,   34,   34,   34,   94,  140,  180,   93,
      109,  124,   97,  109,  131,  214,  125,  132,  105,  146,
      184,  147,  184,  122,  109,  123,  148,  109,  130,   34,

       35,  106,  106,  134,  109,  140,  180,   93,  124,  169,
       97,  131,  214,  125,  132,  109,  185,  109,  135,  139,
      186,   43,   44,   45,   46,   47,   48,  126,  204,   49,
      109,  134,   50,   51,  127,  128,   52,   53,   54,   55,
       56,  187,   57,  187,  185,  135,  139,  109,  186,   43,
       44,   45,   46,   47,   48,  126,  204,   49,  219,   50,
       51,  127,  128,   52,   53,   54,   55,   56,  188,   57,
       79,   80,   81,  109,   82,  109,  109,   83,  109,  109,
      201,   82,  142,  109,   84,   84,  219,  109,  116,  311,
       85,  136,  109,   86,   82,  117,  188,  135,  137,  118,

      196,  237,  119,  122,  120,  141,  238,  138,  201,  109,
      142,  109,  243,  244,  243,  245,  116,  311, 1330,  136,
      246,   86,   82,  117,  135,  137,  118,  196, 1329,  119,
      122,  120,  141,  197,  138,  153,  153,  154,  155,  156,
      153,  153,  153,  109,  158,  153,  153,  153,  153,  153,
      153,  159,  159,  153,  153,  153,  153,  153,  109,  109,
      197,  109,  198,  109,  109,  109,  223,  161,  224,  109,
      237,  226,  220,  316,  262,  238,  202,  203,  209, 1328,
      199,  215,  153,  153,  153,  150,  154,  151,  255,  198,
     1327,  210,  152,  256,  223,  264,  224,  265,  161,  226,

      220,  316,  266,  202,  203,  262,  209,  199,  215,  153,
      153,  153,  154,  159,  156,  153,  153,  153,  210,  163,
      153,  153,  153,  153,  153,  153,  159,  159,  153,  153,
      153,  153,  153,  109,  205,  109,  291,  109,  109,  109,
      109,  109,  109,  292,  109,  206,  357,  217,  227,  109,
      109,  229,  211,  109,  222,  216,  221,  153,  153,  153,
      109,  237,  207,  218,  208,  225,  238,  212,  213,  109,
      228,  109,  338,  206,  357,  217,  227,  339,  230,  229,
      211,  222,  216,  221,  153,  170,  154,  170,  156,  207,
      218,  208,  225,  163,  212,  213,  109,  228,  109,  338,

      109,  275,  276,  275,  231,  339,  230,  171,  284,  277,
      285,  232,  109,  491,  172,  286,  225,  375,  173,  212,
      213,  174,  296,  175,  297,  268,  269,  268,  270,  298,
      176, 1280,  231,  271,  177,  171,  177,  178,  320,  232,
      321,  491,  172,  225,  375,  173,  212,  213,  174,  191,
      175,  191,  192,  322,  322, 1278,  109,  176,  254,  254,
      154,  257,  255,  254,  254,  254,  109,  259,  254,  254,
      254,  254,  254,  254,  260,  260,  254,  254,  254,  254,
      254,  279,  280,  279,  281,  287,  166,  287,  285,  282,
      323,  324,  323,  286,  293,  294,  293,  285,  312,  237,

      313,  320,  286,  320,  238,  254,  254,  254,  154,  146,
      255,  378,  154,  240,  255,  256,  379,  237,  109,  256,
      381,  387,  238,  109,  154,  312,  255,  313,  388,  303,
      328,  256,  254,  254,  254,  154,  260,  255,  254,  254,
      254,  309,  256,  254,  254,  254,  254,  254,  254,  260,
      260,  254,  254,  254,  254,  254,  301,  303,  328,  314,
      109,  109,  302,  181,  109,  181,  178,  315,  182,  309,
      179,  109,  179,  329,  109,  488,  360,  179,  341,  179,
      254,  254,  254,  301,  183,  109, 1280,  314,  240,  302,
      383,  244,  383,  384,  315,  381,  492,  180,  385,  396,

     1278,  329,  488,  360,  180,  341,  394,  254,  254,  299,
      154,  299,  255,  254,  254,  254,  254,  256,  254,  254,
      254,  254,  254,  254,  492,  180,  254,  254,  254,  254,
      254,  154,  180,  255,  184,  154,  184,  255,  256,  154,
      501,  255,  256,  289,  109,  184,  256,  184,  317,  187,
      317,  187,  304,  501,  501,  254,  254,  254,  254,  306,
      185,  109,  310,  109,  186,  109,  305,  325,  307,  308,
      109,  185,  289,  514,  318,  186,  188,  340,  319,  109,
      304,  333,  254,  326,  109,  332,  109,  306,  185,  327,
      310,  336,  186,  305,  325,  307,  308,  330,  109,  185,

      331,  514,  318,  186,  188,  340,  319,  334,  333,  335,
      337,  326,  332,  109,  109,  356,  327,  109,  109,  336,
      493,  109,  342, 1230,  330,  358,  361,  331,  109,  109,
      109,  109,  109,  248,  334,  355,  335,  337,  366,  369,
      249,  362,  356,  109,  237,  359,  109,  493,  367,  238,
      342,  109,  373,  358,  361,  363,  343,  344,  345,  346,
      347,  348,  355,  395,  349,  742,  366,  369,  350,  362,
      368,  351,  359,  352,  353,  367,  109,  354,  109, 1230,
      373,  109,  363,  109,  343,  344,  345,  346,  347,  348,
      364,  109,  349,  376,  365,  350,  372,  368,  351, 1092,

      352,  353,  374,  109,  354,  400,  401,  400,  370,  392,
      393,  392,  371,  389,  390,  389,  289,  394,  364,  395,
      376,  384,  365,  372, 1230,  289,  385,  161,  289,  374,
      383,  244,  383,  384,  408,  370,  109,  109,  385,  371,
      397,  398,  397,  384,  251,  252,  251,  253,  385,  154,
      161,  405,  410,  280,  410,  411,  406,  408,  502,  109,
      412,  404,  404,  154,  413,  405,  404,  404,  404,  109,
      415,  404,  404,  404,  404,  404,  404,  416,  416,  404,
      404,  404,  404,  404,  264,  502,  418,  421,  269,  421,
      422,  419,  425,  276,  425,  423,  264,  428,  418,  435,

      426,  422,  670,  419,  429,  513,  423,  674,  404,  404,
      404,  431,  432,  431,  433,  421,  269,  421,  422,  434,
      437,  443,  443,  423,  441,  442,  441,  438,  426,  426,
      670,  446,  513,  754,  674,  404,  404,  404,  154,  416,
      405,  404,  404,  404,  109,  406,  404,  404,  404,  404,
      404,  404,  416,  416,  404,  404,  404,  404,  404,  439,
      440,  439,  422,  425,  276,  425,  109,  423,  444,  445,
      444,  426,  446,  284,  411,  450,  426,  109,  109,  412,
      451,  109,  510,  404,  404,  404,  410,  280,  410,  411,
      447,  448,  447,  411,  412,  291,  505,  435,  412,  767,

      291,  464,  453,  454,  294,  454,  450,  453,  465,  510,
      404,  451,  455,  166,  455,  450,  458,  459,  458,  320,
      451,  500,  109,  505,  453,  454,  294,  454,  450,  296,
      612,  461,  772,  451,  501,  501,  462,  467,  468,  467,
      469,  570,  571,  570,  109,  470,  404,  471,  154,  471,
      405,  404,  404,  404,  404,  406,  404,  404,  404,  404,
      404,  404,  109,  671,  404,  404,  404,  404,  404,  474,
      154,  475,  405,  154,  109,  405,  476,  406,  489,  154,
      406,  405,  154,  154,  405,  405,  406,  490,  109,  406,
      406,  671,  109,  404,  404,  404,  404,  154,  478,  405,

      506,  154,  477,  405,  406,  154,  489,  405,  406,  109,
      289,  482,  406,  479,  490,  154,  317,  405,  317,  237,
      404,  480,  406,  154,  238,  405,  478,  109,  506,  477,
      406,  497,  508,  497,  483,  481,  109,  484,  109,  482,
      479,  109,  318,  494,  485,  494,  319,  503,  480,  109,
      109,  512,  507,  289,  486,  487,  504,  109,  498,  109,
      508,  483,  481,  109,  484,  289,  499,  109,  511,  109,
      318,  485,  509,  516,  319,  503,  495,  515,  496,  512,
      507,  486,  487,  109,  504,  109,  498,  109,  109,  521,
      109,  109,  518,  499,  109,  289,  511,  537,  517,  509,

      516,  519,  109,  495,  515,  496,  522,  109,  523,  109,
      524,  109,  525,  109,  520,  289,  521,  528,  109,  109,
      518,  530,  109,  536,  537,  529,  517,  532,  109,  519,
      531,  534,  109,  522,  109,  523,  539,  524,  526,  525,
      109,  520,  533,  527,  538,  528,  109,  544,  530,  109,
      535,  536,  529,  540,  289,  532,  549,  531,  541,  534,
      109,  109,  545,  539,  109,  526,  109,  109,  289,  533,
      527,  538,  542,  546,  109,  544,  552,  535,  289,  109,
      540,  547,  543,  109,  549,  541,  550,  548,  554,  545,
      109,  240,  289,  551,  109,  146,  553,  558,  561,  556,

      542,  546,  559,  555,  563,  244,  563,  564,  547,  543,
      240,  289,  565,  550,  548,  289,  554,  561,  533,  672,
      551,  567,  393,  567,  553,  396,  395,  556,  564,  568,
     1230,  555,  568,  565,  563,  244,  563,  564,  569,  398,
      569,  564,  565,  387,  289,  533,  565,  672,  396,  683,
      388,  389,  390,  389,  289,  568,  567,  393,  567,  572,
      573,  572,  683,  683,  568,  273,  289,  568,  569,  398,
      569,  564,  400,  401,  400,  154,  565,  575,  161,  441,
      442,  441,  576,  161,  289,  578,  580,  280,  580,  581,
      578,  584,  276,  584,  582,  446,  284,  581,  782,  585,

      443,  428,  582,  580,  280,  580,  581,  585,  599,  437,
      443,  582,  586,  448,  586,  581,  605,  585,  696,  289,
      582,  574,  574,  154,  587,  575,  574,  574,  574,  673,
      589,  574,  574,  574,  574,  574,  574,  590,  590,  574,
      574,  574,  574,  574,  264,  696,  592,  595,  269,  595,
      596,  593,  264,  289,  592,  597,  639,  673,  794,  593,
      435,  837,  596,  601,  432,  601,  602,  597,  574,  574,
      574,  603,  595,  269,  595,  596,  606,  440,  606,  596,
      597,  584,  276,  584,  597,  607,  445,  607,  837,  585,
      744,  393,  744,  585,  109,  574,  574,  574,  154,  590,

      575,  574,  574,  574,  109,  576,  574,  574,  574,  574,
      574,  574,  590,  590,  574,  574,  574,  574,  574,  428,
      609,  610,  609,  612,  109,  602,  599,  109,  611,  613,
      603,  601,  432,  601,  602,  437,  611,  675,  697,  603,
      686,  109,  605,  574,  574,  574,  614,  615,  614,  602,
      616,  617,  616,  703,  603,  607,  445,  607,  605,  606,
      440,  606,  596,  585,  109,  675,  697,  597,  686,  291,
      574,  586,  448,  586,  581,  284,  622,  619,  289,  582,
      291,  703,  620,  623,  294,  623,  619,  622,  624,  459,
      624,  620,  623,  294,  623,  619,  622,  624,  459,  624,

      620,  625,  166,  625,  619,  622,  296,  464,  627,  620,
      289,  289,  464,  628,  630,  632,  468,  632,  633,  630,
      636,  637,  636,  634,  639,  109,  633,  289,  638,  640,
      649,  634,  632,  468,  632,  633,  638,  650,  694,  240,
      634,  641,  642,  641,  633,  813,  739,  809,  289,  634,
      574,  643,  154,  643,  575,  574,  574,  574,  574,  576,
      574,  574,  574,  574,  574,  574,  694,  835,  574,  574,
      574,  574,  574,  474,  474,  646,  646,  846,  109,  847,
      647,  647,  652,  653,  652,  654,  657,  657,  658,  658,
      655,  836,  848,  659,  659,  835,  685,  574,  574,  574,

      574,  154,  154,  575,  575,  154,  289,  575,  576,  576,
      289,  154,  576,  575,  154,  154,  575,  575,  576,  836,
      109,  576,  576,  685,  574,  154,  109,  575,  660,  688,
      662,  154,  576,  575,  154,  494,  575,  494,  576,  109,
      661,  576,  700,  146,  663,  736,  676,  665,  676,  664,
      737,  109,  666,  678,  668,  678,  660,  688,  662,  669,
      667,  109,  680,  497,  680,  497,  684,  661,  495,  700,
      496,  663,  109,  109,  665,  109,  664,  320,  679,  682,
      666,  687,  668,  109,  109,  677,  681,  669,  667,  109,
      498,  109,  683,  683,  684,  495,  690,  496,  499,  109,

      689,  109,  109,  705,  109,  704,  679,  109,  693,  687,
      691,  695,  677,  109,  681,  692,  699,  109,  498,  701,
      698,  109,  109,  109,  690,  499,  109,  702,  689,  109,
      705,  109,  704,  109,  706,  109,  693,  109,  691,  695,
      709,  711,  109,  692,  699,  109,  701,  707,  698,  710,
      708,  714,  109,  713,  712,  702,  109,  715,  109,  109,
      109,  109,  706,  109,  109,  717,  109,  709,  109,  711,
      720,  721,  726,  719,  707,  718,  710,  708,  716,  714,
      713,  712,  109,  109,  109,  715,  109,  109,  724,  109,
      728,  722,  727,  717,  723,  725,  109,  109,  720,  721,

      726,  719,  718,  109,  730,  716,  109,  741,  244,  741,
      742,  240,  729,  109,  109,  109,  724,  728,  739,  722,
      727,  731,  723,  725,  734,  732,  733,  741,  244,  741,
      742,  713,  730,  745,  398,  745,  742,  848,  109,  729,
      744,  393,  744,  746,  573,  746,  161,  320,  731,  320,
      848,  734,  732,  751,  733,  570,  571,  570,  713,  745,
      398,  745,  742,  746,  573,  746,  154,  161,  748,  753,
      280,  753,  754,  749,  751,  756,  276,  756,  753,  280,
      753,  754,  757,  448,  757,  754,  756,  276,  756,  758,
      445,  758,  757,  448,  757,  754,  154,  759,  748,  264,

      264,  763,  763,  760,  289,  273,  764,  764,  289,  289,
      761,  761,  766,  269,  766,  767,  154,  761,  748,  428,
      428,  464,  296,  749,  788,  109,  769,  769,  791,  789,
      761,  761,  771,  432,  771,  772,  766,  269,  766,  767,
      774,  440,  774,  767,  776,  610,  776,  771,  432,  771,
      772,  777,  615,  777,  772,  778,  617,  778,  774,  440,
      774,  767,  758,  445,  758,  776,  610,  776,  779,  780,
      779,  777,  615,  777,  772,  778,  617,  778,  784,  294,
      784,  782,  785,  459,  785,  784,  294,  784,  782,  785,
      459,  785,  786,  166,  786,  782,  793,  468,  793,  794,

      464,  796,  637,  796,  796,  637,  796,  791,  793,  468,
      793,  794,  797,  642,  797,  794,  798,  799,  798,  797,
      642,  797,  794,  747,  800,  154,  800,  748,  747,  747,
      747,  747,  749,  747,  747,  747,  747,  747,  747,  109,
      109,  747,  747,  747,  747,  747,  474,  474,  803,  803,
      649,  109,  109,  804,  804,  649,  814,  806,  808,  653,
      808,  809,  806,  811,  812,  811,  808,  653,  808,  809,
      747,  747,  747,  747,  815,  816,  815,  809,  657,  821,
      818,  824,  825,  824,  826,  819,  822,  154,  657,  748,
      818,  657,  289,  818,  749,  819,  273,  747,  819,  154,

      154,  748,  748,  154,  838,  748,  749,  749,  289,  154,
      749,  748,  827,  109,  289,  154,  749,  748,  154,  657,
      748,  818,  749,  109,  828,  749,  819,  109,  830,  676,
      849,  676,  838,  839,  829,  839,  853,  678,  831,  678,
      827,  834,  832,  841,  843,  841,  843,  109,  680,  833,
      680,  640,  828,  861,  857,  109,  830,  852,  849,  840,
      850,  829,  679,  853,  109,  109,  831,  640,  677,  834,
      832,  109,  681,  842,  109,  109,  833,  844,  860,  851,
      861,  857,  109,  858,  855,  852,  856,  840,  850,  863,
      679,  109,  109,  109,  854,  677,  859,  109,  872,  109,

      681,  842,  864,  109,  844,  109,  860,  851,  865,  109,
      858,  109,  855,  856,  867,  109,  862,  863,  869,  109,
      866,  854,  868,  109,  859,  291,  872,  109,  874,  864,
      109,  109,  870,  109,  873,  109,  865,  876,  109,  875,
      871,  877,  867,  862,  878,  109,  869,  866,  879,  868,
      881,  109,  880,  109,  882,  109,  874,  884,  109,  870,
      885,  109,  873,  887,  109,  876,  875,  871,  109,  877,
      109,  889,  878,  109,  883,  879,  886,  881,  109,  880,
      888,  890,  882,  891,  884,  109,  109,  893,  885,  109,
      109,  887,  892,  895,  320,  899,  320,  897,  894,  889,

      291,  883,  289,  886,  146, 1042,  902,  888,  890,  896,
      891,  903,  898,  900,  893,  289,  240,  613,  240,  892,
      437,  895,  899,  905,  897,  905,  894,  907,  908,  907,
      909,  395, 1042,  909,  613,  910,  896, 1043,  910,  898,
      900,  912,  913,  912,  915,  244,  915,  909,  396,  914,
      396,  839,  910,  839,  437,  914,  443,  914,  916,  393,
      916,  917,  398,  917,  909, 1043,  914,  161, 1061,  910,
      918,  573,  918,  154,  923,  920,  443,  840,  914,  161,
      921,  925,  926,  925,  927,  396,  923,  443,  396,  928,
      930,  931,  930,  446,  932,  927, 1061,  109,  932,  443,

      928,  933,  280,  933,  927,  840,  932,  109,  109,  928,
      934,  276,  934,  935,  448,  935,  927,  109,  932, 1044,
     1051,  928,  936,  445,  936,  938,  939,  940,  109, 1175,
      932,  289,  941,  943,  944,  943,  945,  938,  264,  940,
      948,  928,  428,  273,  946,  949, 1044, 1051,  437,  951,
      953,  954,  953,  955,  435,  962,  958, 1175,  956,  428,
      457,  959,  960,  269,  960,  958,  951,  964,  965,  964,
      959,  612,  289,  955,  289,  966,  613,  437,  956,  967,
      432,  967,  955,  966,  962,  613,  289,  956,  968,  440,
      968,  958,  966,  969,  610,  969,  959,  970,  615,  970,

      955,  966,  971,  617,  971,  956,  972,  780,  972,  284,
      962,  974,  291,  291,  966,  109,  975, 1060,  109,  977,
      977,  978,  294,  978,  974,  979,  459,  979, 1057,  975,
      289, 1059,  464,  977,  980,  166,  980,  974,  296,  985,
      982, 1238,  975,  464, 1060,  983,  987,  988,  987,  989,
      985,  992,  993,  992,  990,  639, 1057,  989, 1059,  994,
      640,  640,  990,  995,  468,  995,  989,  994,  994, 1238,
      289,  990,  996,  637,  996,  997,  642,  997,  989,  273,
      994,  649,  649,  990,  998,  799,  998,  109, 1005, 1005,
      289,  403,  994,  919,  999,  154,  999,  920,  919,  919,

      919,  919,  921,  919,  919,  919,  919,  919,  919, 1058,
      289,  919,  919,  919,  919,  919,  474,  474, 1002, 1002,
      289,  289, 1242, 1003, 1003, 1007, 1008, 1007, 1009, 1012,
     1013, 1012,  813, 1010, 1009,  273, 1058, 1014,  109, 1010,
      919,  919,  919,  919, 1015,  653, 1015, 1009,  814,  814,
     1242, 1069, 1010,  109,  109, 1014, 1014, 1016,  812, 1016,
     1017,  816, 1017, 1009,  657, 1014, 1019,  919, 1010,  821,
      821, 1020, 1024, 1025, 1024, 1026, 1022, 1022, 1034, 1069,
     1027, 1029, 1030, 1029, 1032, 1031, 1026,  109,  109, 1031,
      109, 1027, 1033,  825, 1033, 1026,  154,  154,  920,  920,

     1027,  109,  289,  921,  921,  657,  154, 1019,  920,  154,
     1052,  920, 1020,  921,  457,  154,  921,  920,  154,  154,
      920,  920,  921,  109, 1053,  921,  921, 1045, 1054, 1045,
      841, 1036,  841,  109, 1047, 1035, 1047, 1052,  843, 1041,
      843,  109, 1049, 1038, 1049,  109, 1276,  109,  109, 1037,
     1055, 1053, 1063, 1065,  109, 1039, 1054, 1046, 1036, 1040,
      842, 1048, 1035, 1056,  109,  109, 1062, 1041, 1064,  109,
     1038,  844, 1067,  109, 1276,  289, 1037,  109, 1055, 1063,
     1070, 1065, 1039, 1050,  109, 1046, 1040,  109,  842, 1048,
     1066, 1056, 1068, 1062,  109, 1064, 1071,  109,  844,  109,

     1067,  109,  109, 1073,  109, 1072, 1074, 1070, 1076,  109,
     1050,  109,  109, 1079,  109, 1075,  109, 1066, 1077, 1068,
      109, 1078,  109, 1071,  109, 1087,  109, 1080,  109, 1081,
     1073,  109, 1072, 1083, 1074, 1082, 1076, 1085, 1084, 1090,
      109, 1079, 1075,  109,  146, 1077,  902, 1089, 1078, 1086,
     1199,  903, 1091, 1087, 1080,  289, 1088, 1081,  289,  240,
     1083,  240, 1082, 1174, 1085, 1084,  905, 1090,  905, 1093,
     1094, 1093,  909,  273, 1089,  396, 1086,  910, 1199,  289,
     1091,  396,  914, 1088, 1095, 1096, 1095,  395,  914,  909,
     1174,  403,  914,  289,  910,  907,  908,  907,  909, 1097,

     1098, 1097,  909,  910,  912,  913,  912,  910, 1099, 1100,
     1099,  273,  914,  916,  393,  916,  914,  915,  244,  915,
      909,  914,  918,  573,  918,  910,  917,  398,  917,  909,
      914,  154,  161,  920,  910,  289, 1176,  161,  921,  923,
     1101, 1102, 1101,  927,  923, 1103, 1104, 1103,  928,  446,
      273,  927,  109,  932,  443,  443,  928,  925,  926,  925,
      927,  932,  932, 1176,  109,  928, 1105, 1106, 1105,  927,
      930,  931,  930, 1186,  928, 1107, 1108, 1107,  932,  933,
      280,  933,  927,  932,  934,  276,  934,  928,  935,  448,
      935,  927,  932,  936,  445,  936,  928,  938,  193,  940,

     1186,  932, 1110, 1122,  946,  938,  939,  940,  109, 1111,
      932,  428,  941, 1113, 1114, 1113, 1115, 1117,  951,  945,
     1188, 1116,  189,  428,  928,  943,  944,  943,  945, 1119,
      951, 1120, 1184,  928, 1281,  613,  288, 1124, 1125, 1124,
     1126,  264,  966,  948,  289, 1127,  273, 1188,  949, 1128,
     1129, 1128,  955, 1130, 1131, 1130,  612,  956,  955, 1184,
      144,  966, 1281,  956,  953,  954,  953,  955, 1132, 1133,
     1132,  955,  956,  435,  437,  958,  956,  109,  109, 1288,
      959,  962, 1134, 1135, 1134,  958,  960,  269,  960,  958,
      959,  437,  613,  111,  959, 1136, 1137, 1136,  962,  966,

      964,  965,  964,  962, 1138, 1139, 1138, 1288,  966,  109,
      193,  190,  966,  967,  432,  967,  955,  968,  440,  968,
      958,  956,  969,  610,  969,  959,  970,  615,  970,  955,
      966,  971,  617,  971,  956,  972,  780,  972,  284,  962,
      974,  291,  189,  966,  144,  975,  291,  109,  977, 1140,
     1141, 1140,  974,  977, 1142, 1143, 1142,  975,  978,  294,
      978,  974,  977,  979,  459,  979,  975,  980,  166,  980,
      974,  977,  296,  464,  982,  975, 1367, 1249,  464,  983,
      985, 1144, 1145, 1144,  989,  985, 1146, 1147, 1146,  990,
      639,  104,  989,  109,  994,  640,  640,  990,  987,  988,

      987,  989,  994,  994, 1249,  104,  990, 1148, 1149, 1148,
      989,  992,  993,  992, 1189,  990, 1150, 1151, 1150,  994,
      995,  468,  995,  989,  994,  996,  637,  996,  990,  997,
      642,  997,  989,  994,  998,  799,  998,  990,   75,   75,
       99, 1189,  994,  919,  999,  154,  999,  920,  919,  919,
      919,  919,  921,  919,  919,  919,  919,  919,  919,   96,
       77,  919,  919,  919,  919,  919,  474,  474, 1002, 1002,
      649,   75,   75, 1003, 1003,  649,  814, 1005, 1152, 1153,
     1152, 1009, 1005, 1014,   41,  109, 1010, 1154, 1155, 1154,
      919,  919,  919,  919,  813, 1014, 1009, 1007, 1008, 1007,

     1009, 1010, 1190,  814, 1367, 1010, 1156, 1157, 1156, 1009,
     1014, 1012, 1013, 1012, 1010, 1367, 1365,  919, 1304, 1014,
     1158, 1159, 1158, 1015,  653, 1015, 1009, 1367, 1014, 1190,
     1367, 1010, 1016,  812, 1016, 1017,  816, 1017, 1009,  657,
     1014, 1019,  821, 1010, 1365, 1304, 1020,  821, 1367, 1022,
     1160, 1161, 1160, 1026, 1022, 1162, 1163, 1162, 1027, 1032,
     1367, 1026, 1367, 1031, 1034, 1034, 1027, 1024, 1025, 1024,
     1026, 1031, 1031, 1367,  109, 1027, 1164, 1165, 1164, 1026,
     1029, 1030, 1029, 1182, 1027, 1166, 1167, 1166, 1031, 1033,
      825, 1033, 1026, 1031,  154, 1367,  920, 1027,  154, 1367,

      920,  921,  657, 1367, 1019,  921,  154,  109,  920, 1020,
      154, 1182,  920,  921,  154, 1195,  920,  921,  154, 1168,
      920,  921, 1045, 1110, 1045,  921, 1177, 1047, 1177, 1047,
     1111, 1179, 1049, 1179, 1049,  109, 1169,  109,  109, 1172,
     1367,  109, 1183, 1195, 1170, 1171, 1185, 1168, 1181,  109,
     1173, 1194, 1046, 1178, 1048,  109, 1180,  109, 1191,  109,
     1187,  109,  109, 1169,  109, 1367, 1193, 1172, 1196, 1202,
     1183, 1170, 1171, 1050, 1185, 1192, 1181, 1173, 1197, 1194,
     1046, 1178, 1048,  109, 1180,  109, 1191,  109, 1187,  109,
      109,  109, 1200,  109, 1193, 1201, 1196, 1202, 1198, 1204,

     1050,  109, 1192,  109,  109, 1197,  109,  109,  109,  109,
     1206,  109, 1203, 1213, 1205, 1209, 1210, 1211,  109,  109,
     1200, 1207, 1215, 1201,  109, 1208, 1198, 1204, 1214, 1093,
     1094, 1093,  909, 1212, 1345, 1223, 1216,  910, 1206, 1203,
     1213, 1205, 1224, 1209, 1210, 1211, 1367,  109, 1207, 1215,
     1228, 1122, 1208, 1095, 1096, 1095, 1214,  456,  932, 1367,
     1212,  914, 1345, 1216, 1097, 1098, 1097,  909, 1099, 1100,
     1099, 1248,  910, 1103, 1104, 1103,  914, 1101, 1102, 1101,
      927,  932, 1107, 1108, 1107,  928, 1105, 1106, 1105,  927,
      932, 1218, 1219, 1218,  928, 1221,  109, 1115, 1248, 1220,

     1367, 1253, 1116, 1113, 1114, 1113, 1115, 1225, 1226, 1225,
     1115, 1116, 1119, 1367, 1120, 1116, 1119, 1367, 1120,  288,
     1119, 1232, 1120,  288, 1231, 1367, 1126,  288, 1220, 1253,
     1367, 1127, 1124, 1125, 1124, 1126, 1233, 1234, 1233, 1126,
     1127, 1130, 1131, 1130, 1127, 1128, 1129, 1128,  955,  966,
     1307, 1308, 1307,  956, 1132, 1133, 1132,  955, 1134, 1135,
     1134,  958,  956, 1136, 1137, 1136,  959, 1138, 1139, 1138,
     1280,  962, 1142, 1143, 1142,  966, 1140, 1141, 1140,  974,
      977, 1146, 1147, 1146,  975, 1144, 1145, 1144,  989,  994,
     1150, 1151, 1150,  990, 1148, 1149, 1148,  989,  994, 1154,

     1155, 1154,  990, 1152, 1153, 1152, 1009, 1014, 1158, 1159,
     1158, 1010, 1156, 1157, 1156, 1009, 1014, 1162, 1163, 1162,
     1010, 1160, 1161, 1160, 1026, 1031, 1166, 1167, 1166, 1027,
     1164, 1165, 1164, 1026, 1031,  154, 1367,  920, 1027,  154,
     1367,  920,  921,  657, 1367, 1019,  921,  154, 1367,  920,
     1020,  657,  109, 1019,  921,  657, 1235, 1019, 1020, 1239,
      109, 1239, 1020, 1240, 1177, 1179, 1177, 1179, 1236, 1243,
     1245, 1243,  109,  109,  109,  109, 1246, 1241,  109,  109,
     1254,  109, 1250,  109, 1235, 1252, 1367, 1237,  109, 1247,
     1180, 1178,  109,  109, 1251, 1244, 1236, 1245, 1255,  109,

     1256, 1367, 1261, 1246, 1257, 1367, 1367, 1258, 1254, 1259,
     1250, 1367, 1260, 1252, 1237,  109, 1247,  109, 1180, 1178,
      109, 1251, 1262, 1244, 1263,  109, 1255, 1256,  109, 1261,
     1367, 1232, 1257,  109, 1258,  109, 1259, 1265, 1220, 1260,
      109, 1264, 1266, 1367, 1267, 1218, 1219, 1218, 1268, 1367,
     1262, 1223, 1263, 1220, 1269, 1270, 1269, 1228, 1224, 1271,
     1272, 1271, 1220, 1285,  456, 1265, 1367, 1224, 1264, 1367,
     1266,  109, 1267, 1367, 1367, 1268, 1225, 1226, 1225, 1115,
     1233, 1234, 1233, 1126, 1116,  154,  109,  920, 1127,  154,
     1285,  920,  921,  154, 1286,  920,  921, 1239,  109, 1239,

      921, 1240, 1243, 1282, 1243, 1282,  109, 1283,  109, 1292,
      109,  109, 1284,  109, 1287, 1241,  109,  109, 1273,  109,
     1296, 1286, 1290,  109, 1274, 1309, 1289, 1294, 1244, 1291,
      109, 1275,  109, 1293, 1367, 1295, 1292,  109, 1314, 1298,
     1297, 1287,  109, 1299, 1367, 1273, 1301, 1367, 1296, 1290,
     1367, 1274, 1309, 1289, 1294, 1300, 1244, 1291, 1275, 1367,
     1293, 1302, 1295, 1367, 1367, 1314, 1298, 1297, 1269, 1270,
     1269, 1299,  109,  657, 1301, 1019, 1220, 1271, 1272, 1271,
     1020, 1312, 1300,  109,  154, 1224,  920,  657, 1302, 1019,
      109,  921,  109,  109, 1020, 1305, 1306, 1305, 1282, 1278,

     1282, 1316, 1283,  109,  109, 1367, 1313, 1284, 1319, 1312,
      109,  109,  109, 1315,  109, 1317,  109,  109, 1303, 1318,
     1320, 1321,  109, 1322,  109, 1367, 1367, 1367, 1326, 1316,
     1324,  109, 1325, 1313, 1323, 1367, 1319,  657, 1332, 1019,
     1315,  109, 1317, 1331, 1020, 1303,  109, 1318, 1320, 1321,
     1336, 1322, 1305, 1306, 1305, 1326, 1278,  109, 1324, 1334,
     1325, 1323, 1307, 1308, 1307, 1332, 1335,  109, 1333,  109,
     1331, 1339, 1340,  109, 1341, 1342, 1341, 1336, 1329, 1343,
     1344, 1343, 1280,  109,  109,  109, 1349, 1334, 1330, 1367,
     1367, 1337, 1338, 1367, 1335, 1333, 1356,  109, 1339, 1340,

     1357, 1367, 1346, 1347,  109, 1348, 1341, 1342, 1341, 1352,
     1329, 1343, 1344, 1343, 1349, 1353,  109,  109, 1337, 1338,
     1330,  109,  109, 1356, 1366, 1354, 1360, 1357, 1358, 1346,
     1347, 1359, 1348, 1367, 1361, 1355, 1362, 1352,  109, 1367,
     1367, 1367, 1353, 1367, 1363, 1367, 1367, 1364, 1367, 1367,
     1367, 1367, 1366, 1354, 1360, 1367, 1358, 1367, 1367, 1359,
     1367, 1361, 1355, 1367, 1362, 1367, 1367, 1367, 1367, 1367,
     1367, 1363, 1367, 1367, 1367, 1364,   39,   39,   39,   39,
       39,   39,   39,   39,   42,   42,   42,   42,   42,   42,
       42,   42,   60,   60,   60,   60,   60,   60,   60,   60,

       64,   64,   64,   64,   64,   64,   64,   64,   68,   68,
       68,   68,   68,   68,   68,   68,   74,   74,   74,   74,
       74,   74,   74,   74,   76,   76,   76,   76,   76,   76,
       76,   76,   78,   78,   78,   78,   78,   78,   78,   78,
       87,   87,   87,   87,   87,   87,   87,   87,   95,   95,
       95,   95,   95,   95,   95,   95,   98,   98,   98,   98,
       98,   98,   98,   98,  102,  102,  102,  102,  102,  102,
      102,  102,  103,  103,  103,  103,  103,  103,  103,  103,
      108,  108,  112, 1367,  112,  112,  143,  143,  143,  143,
      143,  143,  143,  143,  145,  145,  145,  145,  145,  145,

      145,  145,  149,  149,  149,  149,  149,  149,  149,  149,
      157,  157,  157,  157,  157,  157,  157,  157,  160,  160,
      160,  160,  160,  160,  160,  160,  153,  153,  153,  153,
      153,  153,  153,  153,  164,  164,  164,  164,  164,  164,
      164,  164,  194,  194,  194,  194,  194,  194, 1367,  194,
      195,  195,  195,  195,  195, 1367,  195,  195,  110, 1367,
      110,  111, 1367,  111,  233,  233,  233,  233,  233,  233,
      233,  233,  236,  236,  236,  236,  236,  236,  236,  236,
      239,  239,  239,  239,  239,  239,  239,  239,  242,  242,
      242,  242,  242,  242,  242,  242,  247,  247,  247,  247,

      247,  247,  247,  247,  250,  250,  250,  250,  250,  250,
      250,  250,  254,  254,  254,  254,  254,  254,  254,  254,
      258,  258,  258,  258,  258,  258,  258,  258,  261,  261,
      261,  261,  261,  261,  261,  261,  263,  263,  263,  263,
      263,  263,  263,  263,  267,  267,  267,  267,  267,  267,
      267,  267,  272,  272,  272,  272,  272,  272,  272,  272,
      274,  274,  274,  274,  274,  274,  274,  274,  278,  278,
      278,  278,  278,  278,  278,  278,  283,  283,  283,  283,
      283,  283,  283,  283,  288,  288,  288,  288,  288,  288,
      288,  288,  290,  290,  290,  290,  290,  290,  290,  290,

      295,  295,  295,  295,  295,  295,  295,  295,  300,  300,
      300,  300,  300,  300,  300,  300,  194,  194,  194,  194,
      194,  194, 1367,  194,  377,  377,  377,  377,  377,  377,
      377,  377,  380,  380,  380,  380,  380,  380,  380,  380,
      382,  382,  382,  382,  382,  382,  382,  382,  386,  386,
      386,  386,  386,  386,  386,  386,  391,  391,  391,  391,
      391,  391,  391,  391,  399,  399,  399,  399,  399,  399,
      399,  399,  404,  404,  404,  404,  404,  404,  404,  404,
      407,  407,  407,  407,  407,  407,  407,  407,  409,  409,
      409,  409,  409,  409,  409,  409,  414,  414,  414,  414,

      414,  414,  414,  414,  417,  417,  417,  417,  417,  417,
      417,  417,  420,  420,  420,  420,  420,  420,  420,  420,
      424,  424,  424,  424,  424,  424,  424,  424,  427,  427,
      427,  427,  427,  427,  427,  427,  430,  430,  430,  430,
      430,  430,  430,  430,  436,  436,  436,  436,  436,  436,
      436,  436,  449,  449,  449,  449,  449,  449,  449,  449,
      452,  452,  452,  452,  452,  452,  452,  452,  456,  456,
      456,  456,  456,  456,  456,  456,  460,  460,  460,  460,
      460,  460,  460,  460,  463,  463,  463,  463,  463,  463,
      463,  463,  466,  466,  466,  466,  466,  466,  466,  466,

      472,  472,  472,  472,  472,  472,  472,  472,  473,  473,
      473,  473,  473,  473,  473,  473,  108,  108,  557,  557,
      557,  557,  557,  557,  557,  557,  560,  560,  560,  560,
      560,  560,  560,  560,  562,  562,  562,  562,  562,  562,
      562,  562,  566,  566,  566,  566,  566,  566,  566,  566,
      386,  386,  386,  386,  386,  386,  386,  386,  399,  399,
      399,  399,  399,  399,  399,  399,  574,  574,  574,  574,
      574,  574,  574,  574,  577,  577,  577,  577,  577,  577,
      577,  577,  579,  579,  579,  579,  579,  579,  579,  579,
      583,  583,  583,  583,  583,  583,  583,  583,  588,  588,

      588,  588,  588,  588,  588,  588,  591,  591,  591,  591,
      591,  591,  591,  591,  594,  594,  594,  594,  594,  594,
      594,  594,  598,  598,  598,  598,  598,  598,  598,  598,
      600,  600,  600,  600,  600,  600,  600,  600,  604,  604,
      604,  604,  604,  604,  604,  604,  608,  608,  608,  608,
      608,  608,  608,  608,  618,  618,  618,  618,  618,  618,
      618,  618,  621,  621,  621,  621,  621,  621,  621,  621,
      626,  626,  626,  626,  626,  626,  626,  626,  629,  629,
      629,  629,  629,  629,  629,  629,  631,  631,  631,  631,
      631,  631,  631,  631,  635,  635,  635,  635,  635,  635,

      635,  635,  644,  644,  644,  644,  644,  644,  644,  644,
      645,  645,  645,  645,  645,  645,  645,  645,  236,  236,
      236,  236,  236,  236,  236,  236,  648,  648,  648,  648,
      648,  648,  648,  648,  651,  651,  651,  651,  651,  651,
      651,  651,  656,  656,  656,  656,  656,  656,  656,  656,
      574,  574,  574,  574,  574,  574,  574,  574,  108,  108,
      735,  735,  735,  735,  735,  735,  735,  735,  738,  738,
      738,  738,  738,  738,  738,  738,  740,  740,  740,  740,
      740,  740,  740,  740,  743,  743,  743,  743,  743,  743,
      743,  743,  747,  747,  747,  747,  747,  747,  747,  747,

      750,  750,  750,  750,  750,  750,  750,  750,  752,  752,
      752,  752,  752,  752,  752,  752,  755,  755,  755,  755,
      755,  755,  755,  755,  762,  762,  762,  762,  762,  762,
      762,  762,  765,  765,  765,  765,  765,  765,  765,  765,
      768,  768,  768,  768,  768,  768,  768,  768,  770,  770,
      770,  770,  770,  770,  770,  770,  773,  773,  773,  773,
      773,  773,  773,  773,  775,  775,  775,  775,  775,  775,
      775,  775,  781,  781,  781,  781,  781,  781,  781,  781,
      783,  783,  783,  783,  783,  783,  783,  783,  787,  787,
      787,  787,  787,  787,  787,  787,  790,  790,  790,  790,

      790,  790,  790,  790,  792,  792,  792,  792,  792,  792,
      792,  792,  795,  795,  795,  795,  795,  795,  795,  795,
      801,  801,  801,  801,  801,  801,  801,  801,  802,  802,
      802,  802,  802,  802,  802,  802,  805,  805,  805,  805,
      805,  805,  805,  805,  807,  807,  807,  807,  807,  807,
      807,  807,  272,  272,  272,  272,  272,  272,  272,  272,
      810,  810,  810,  810,  810,  810,  810,  810,  817,  817,
      817,  817,  817,  817,  817,  817,  236,  236,  236,  236,
      236,  236,  236,  236,  820,  820,  820,  820,  820,  820,
      820,  820,  823,  823,  823,  823,  823,  823,  823,  823,

      845,  845,  845,  845,  845,  845,  845,  108,  108,  901,
      901,  901,  901,  901,  901,  901,  901,  904,  904,  904,
      904,  904,  904,  904,  904,  906,  906,  906,  906,  906,
      906,  906,  906,  911,  911,  911,  911,  911,  911,  911,
      911,  919,  919,  919,  919,  919,  919,  919,  919,  922,
      922,  922,  922,  922,  922,  922,  922,  924,  924,  924,
      924,  924,  924,  924,  924,  929,  929,  929,  929,  929,
      929,  929,  929,  937,  937,  937,  937,  937,  937,  937,
      937,  942,  942,  942,  942,  942,  942,  942,  942,  947,
      947,  947,  947,  947,  947,  947,  947,  950,  950,  950,

      950,  950,  950,  950,  950,  952,  952,  952,  952,  952,
      952,  952,  952,  957,  957,  957,  957,  957,  957,  957,
      957,  961,  961,  961,  961,  961,  961,  961,  961,  963,
      963,  963,  963,  963,  963,  963,  963,  973,  973,  973,
      973,  973,  973,  973,  973,  976,  976,  976,  976,  976,
      976,  976,  976,  981,  981,  981,  981,  981,  981,  981,
      981,  984,  984,  984,  984,  984,  984,  984,  984,  986,
      986,  986,  986,  986,  986,  986,  986,  991,  991,  991,
      991,  991,  991,  991,  991, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011,  288,  288,  288,  288,  288,
      288,  288,  288, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  272,  272,  272,
      272,  272,  272,  272,  272, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028,  919,  919,  919,  919,  919,  919,  919,
      919,  108,  108,  901,  901,  901,  901,  901,  901,  901,
      901,  904,  904,  904,  904,  904,  904,  904,  904,  906,

      906,  906,  906,  906,  906,  906,  906,  911,  911,  911,
      911,  911,  911,  911,  911,  922,  922,  922,  922,  922,
      922,  922,  922,  924,  924,  924,  924,  924,  924,  924,
      924,  929,  929,  929,  929,  929,  929,  929,  929,  937,
      937,  937,  937,  937,  937,  937,  937,  236,  236,  236,
      236,  236,  236,  236,  236, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112,  942,  942,  942,  942,  942,  942,  942,  942, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1121, 1121, 1121,
     1121, 1121, 1121, 1121, 1121, 1123, 1123, 1123, 1123, 1123,

     1123, 1123, 1123,  947,  947,  947,  947,  947,  947,  947,
      947,  950,  950,  950,  950,  950,  950,  950,  950,  952,
      952,  952,  952,  952,  952,  952,  952,  963,  963,  963,
      963,  963,  963,  963,  963,  957,  957,  957,  957,  957,
      957,  957,  957,  961,  961,  961,  961,  961,  961,  961,
      961,  973,  973,  973,  973,  973,  973,  973,  973,  976,
      976,  976,  976,  976,  976,  976,  976,  981,  981,  981,
      981,  981,  981,  981,  981,  984,  984,  984,  984,  984,
      984,  984,  984,  986,  986,  986,  986,  986,  986,  986,
      986,  991,  991,  991,  991,  991,  991,  991,  991, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028,  919,  919,  919,  919,  919,  919,  919,  919,  108,
      108,  906,  906,  906,  906,  906,  906,  906,  906,  911,
      911,  911,  911,  911,  911,  911,  911,  924,  924,  924,

      924,  924,  924,  924,  924,  929,  929,  929,  929,  929,
      929,  929,  929, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109,  272,  272,  272,  272,  272,  272,  272,  272, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1229, 1229, 1229,
     1367, 1229, 1229, 1229, 1229, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123,  952,  952,  952,  952,  952,  952,  952,

      952,  963,  963,  963,  963,  963,  963,  963,  963,  957,
      957,  957,  957,  957,  957,  957,  957,  961,  961,  961,
      961,  961,  961,  961,  961,  973,  973,  973,  973,  973,
      973,  973,  973,  976,  976,  976,  976,  976,  976,  976,
      976,  986,  986,  986,  986,  986,  986,  986,  986,  991,
      991,  991,  991,  991,  991,  991,  991, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,  919,
      919,  919,  919,  919,  919,  919,  919, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018,  108,  108, 1277, 1367, 1277,
     1277, 1277, 1277, 1277, 1277, 1279, 1367, 1279, 1279, 1279,
     1279, 1279, 1279, 1310, 1367, 1310, 1310, 1310, 1310, 1310,
     1310, 1311, 1367, 1311, 1311, 1311, 1311, 1311, 1311,   33,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367
    } ;

static const flex_int16_t yy_chk[6416] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,   11,   10,   12,    7,   23,   23,
       23,   23,    9,    9,   10,   10,   28,   28,   28,   28,
        7,   38,   38,   42,   42,   36,   81,    1,    1,    1,
        1,  107,  107,   81,   42,    7,   15,   16,   36,   36,
      250,   78,  250,   78, 1364,   15,   16,    7,   78,   11,
       11,   12,   12,    8,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    8,   13,

       14,   15,   16,   44,   53,   79, 1359,   79,   13,   14,
      117,    8,   79,   53,   82,  117,   82,   13,   14,   44,
      147,   82,    2,    2,    2,    2,    8,  147,   46,  145,
       17,  145,   17,  151,   17,   17,  145, 1354,    8,   17,
      151,   53,   17,  117,   13,   14,   44,   46, 1353,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   43,   46,   17,   18,   50,   18,   43,
       18,   18,  112,  112,   88,   18,   88,   88,   18,   91,
     1347,   91,   91,  112,   91,   43,   50,    3,    3,    3,

        3, 1340,   17,   83,   83,   83,   83,   43,  146, 1339,
       91,   83,  100,  146,  100,  100,  152,  152,  152,  152,
     1335,   18,   43,   50,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,   18,  150,
       47,   90,   51,   90,  150,   24,   24,   24,   24,   26,
       24,   26,   48,   52,  124,   57,   47,   24,   47, 1333,
       26,   51,    4,    4,    4,    4,   24,   57,   90,   24,
     1322,   48,   26, 1321,   52,  124,   48,   52,  106,   85,
       92,   85,   92,   47,   54,   47,   85,   56,   51,    4,

        5,  106,  106,   54, 1320,   57,   90,   24,   48,   85,
       26,   52,  124,   48,   52,  120,   92,   49,   54,   56,
       92,    5,    5,    5,    5,    5,    5,   49,  120,    5,
     1319,   54,    5,    5,   49,   49,    5,    5,    5,    5,
        5,   93,    5,   93,   92,   54,   56,  129,   92,    5,
        5,    5,    5,    5,    5,   49,  120,    5,  129,    5,
        5,   49,   49,    5,    5,    5,    5,    5,   93,    5,
       22,   22,   22,   59,   22,  118, 1318,   22,  113,   55,
      118,   22,   59,   45,   22,   22,  129,   58,   45,  180,
       22,   55, 1315,   22,   22,   45,   93,   59,   55,   45,

      113,  154,   45,   58,   45,   58,  154,   55,  118, 1313,
       59,  114,  148,  148,  148,  148,   45,  180, 1311,   55,
      148,   22,   22,   45,   59,   55,   45,  113, 1310,   45,
       58,   45,   58,  114,   55,   80,   80,   80,   80,   80,
       80,   80,   80,  115,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,  116,  119,
      114,  133,  115,  125,  130,  135,  133,  156,  133,  122,
      236,  135,  130,  188,  156,  236,  119,  119,  122, 1309,
      116,  125,   80,   80,   80,  149,  153,  149,  153,  115,
     1304,  122,  149,  153,  133,  157,  133,  157,  160,  135,

      130,  188,  157,  119,  119,  160,  122,  116,  125,   80,
       84,   84,   84,   84,   84,   84,   84,   84,  122,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,  132,  121,  127,  167,  131,  121,  136,
      128,  214,  139,  167,  123,  121,  214,  128,  136,  134,
      138,  139,  123,  206,  132,  127,  131,   84,   84,   84,
     1295,  264,  121,  128,  121,  134,  264,  123,  123,  140,
      138,  207,  206,  121,  214,  128,  136,  207,  140,  139,
      123,  132,  127,  131,   84,   86,   86,   86,   86,  121,
      128,  121,  134,   86,  123,  123,  141,  138, 1294,  206,

      142,  162,  162,  162,  141,  207,  140,   86,  164,  162,
      164,  142, 1286,  313,   86,  164,  142,  231,   86,  141,
      141,   86,  169,   86,  169,  158,  158,  158,  158,  169,
       86, 1279,  141,  158,  177,   86,  177,  177,  190,  142,
      190,  313,   86,  142,  231,   86,  141,  141,   86,  191,
       86,  191,  191,  190,  190, 1277, 1268,   86,  155,  155,
      155,  155,  155,  155,  155,  155, 1267,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  163,  163,  163,  163,  165,  165,  165,  165,  163,
      193,  193,  193,  165,  168,  168,  168,  168,  185,  296,

      185,  320,  168,  320,  296,  155,  155,  155,  172,  233,
      172,  233,  175,  234,  175,  172,  233,  474, 1266,  175,
      234,  237,  474,  198,  171,  185,  171,  185,  237,  172,
      198,  171,  155,  159,  159,  159,  159,  159,  159,  159,
      159,  175,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  171,  172,  198,  186,
      217,  209,  171,  181,  199,  181,  181,  186,  181,  175,
      178, 1265,  178,  199, 1259,  311,  217,  179,  209,  179,
      159,  159,  159,  171,  181, 1247, 1241,  186,  239,  171,
      235,  235,  235,  235,  186,  239,  315,  178,  235,  245,

     1240,  199,  311,  217,  179,  209,  245,  159,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  315,  178,  170,  170,  170,  170,
      170,  173,  179,  173,  182,  174,  182,  174,  173,  176,
      322,  176,  174, 1234,  196,  184,  176,  184,  189,  187,
      189,  187,  173,  322,  322,  170,  170,  170,  170,  174,
      182,  202,  176,  201,  182,  208,  173,  196,  174,  174,
      197,  184, 1231,  337,  189,  184,  187,  208,  189,  200,
      173,  202,  170,  197,  203,  201,  204,  174,  182,  197,
      176,  205,  182,  173,  196,  174,  174,  200,  213,  184,

      200,  337,  189,  184,  187,  208,  189,  203,  202,  204,
      205,  197,  201,  210,  212,  213,  197,  218,  215,  205,
      316,  216,  210, 1230,  200,  215,  218,  200,  219,  222,
      225,  220,  223,  247,  203,  212,  204,  205,  222,  225,
      247,  219,  213,  228,  657,  216,  224,  316,  223,  657,
      210,  211,  228,  215,  218,  220,  211,  211,  211,  211,
      211,  211,  212,  562,  211,  562,  222,  225,  211,  219,
      224,  211,  216,  211,  211,  223,  232,  211,  227, 1229,
      228,  230,  220,  221,  211,  211,  211,  211,  211,  211,
      221,  226,  211,  232,  221,  211,  227,  224,  211,  900,

      211,  211,  230,  900,  211,  249,  249,  249,  226,  241,
      241,  241,  226,  238,  238,  238,  238,  241,  221,  242,
      232,  242,  221,  227, 1228, 1226,  242,  255, 1221,  230,
      243,  243,  243,  243,  255,  226, 1214,  325,  243,  226,
      246,  246,  246,  246,  251,  251,  251,  251,  246,  254,
      261,  254,  256,  256,  256,  256,  254,  261,  325, 1211,
      256,  257,  257,  257,  257,  257,  257,  257,  257, 1210,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  258,  325,  258,  259,  259,  259,
      259,  258,  262,  262,  262,  259,  263,  265,  263,  267,

      262,  267,  488,  263,  265,  336,  267,  492,  257,  257,
      257,  266,  266,  266,  266,  268,  268,  268,  268,  266,
      270,  274,  281,  268,  273,  273,  273,  270,  274,  281,
      488,  579,  336,  579,  492,  257,  260,  260,  260,  260,
      260,  260,  260,  260, 1206,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  271,
      271,  271,  271,  275,  275,  275,  333,  271,  277,  277,
      277,  275,  278,  283,  278,  283,  277, 1203, 1200,  278,
      283,  328,  333,  260,  260,  260,  279,  279,  279,  279,
      282,  282,  282,  282,  279,  285,  328,  594,  282,  594,

      290,  297,  285,  286,  286,  286,  286,  290,  297,  333,
      260,  286,  287,  287,  287,  287,  292,  292,  292,  321,
      287,  321, 1197,  328,  292,  293,  293,  293,  293,  295,
      600,  295,  600,  293,  321,  321,  295,  298,  298,  298,
      298,  388,  388,  388, 1193,  298,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299, 1192,  489,  299,  299,  299,  299,  299,  300,
      301,  300,  301,  302, 1186,  302,  300,  301,  312,  303,
      302,  303,  306,  304,  306,  304,  303,  312, 1183,  306,
      304,  489,  329,  299,  299,  299,  299,  305,  302,  305,

      329,  307,  301,  307,  305,  308,  312,  308,  307, 1182,
     1165,  306,  308,  303,  312,  309,  317,  309,  317,  938,
      299,  304,  309,  310,  938,  310,  302,  331,  329,  301,
      310,  319,  331,  319,  307,  305,  326,  307,  335,  306,
      303,  330,  317,  318,  308,  318,  317,  326,  304,  327,
      332,  335,  330, 1161,  309,  310,  327,  339,  319,  338,
      331,  307,  305,  334,  307, 1157,  319,  343,  334,  355,
      317,  308,  332,  339,  317,  326,  318,  338,  318,  335,
      330,  309,  310,  341,  327,  340,  319,  345,  342,  343,
      344,  346,  341,  319,  347, 1153,  334,  355,  340,  332,

      339,  342,  350,  318,  338,  318,  344,  349,  345,  351,
      346,  354,  347,  358,  342, 1149,  343,  349,  352,  348,
      341,  350,  353,  354,  355,  349,  340,  352,  357,  342,
      351,  353,  359,  344,  360,  345,  358,  346,  348,  347,
      362,  342,  352,  348,  357,  349,  363,  362,  350,  369,
      353,  354,  349,  359, 1145,  352,  369,  351,  360,  353,
      365,  361,  363,  358,  364,  348,  368,  370, 1141,  352,
      348,  357,  361,  364,  371,  362,  373,  353, 1135,  374,
      359,  365,  361,  373,  369,  360,  370,  368,  374,  363,
      376,  378, 1133,  371,  375,  377,  373,  377,  378,  376,

      361,  364,  377,  375,  379,  379,  379,  379,  365,  361,
      380, 1129,  379,  370,  368, 1125,  374,  380,  375,  490,
      371,  381,  381,  381,  373,  384,  382,  376,  382,  381,
     1122,  375,  384,  382,  383,  383,  383,  383,  385,  385,
      385,  385,  383,  386, 1114,  375,  385,  490,  391,  501,
      386,  389,  389,  389,  389,  391,  392,  392,  392,  394,
      394,  394,  501,  501,  392, 1110, 1106,  394,  397,  397,
      397,  397,  400,  400,  400,  404,  397,  404,  405,  441,
      441,  441,  404,  407, 1102,  405,  406,  406,  406,  406,
      407,  408,  408,  408,  406,  409,  618,  409,  618,  408,

      411,  418,  409,  410,  410,  410,  410,  411,  418,  422,
      424,  410,  412,  412,  412,  412,  422,  424,  513, 1098,
      412,  413,  413,  413,  413,  413,  413,  413,  413,  491,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  414,  513,  414,  415,  415,  415,
      415,  414,  417, 1094,  417,  415,  631,  491,  631,  417,
      420,  674,  420,  419,  419,  419,  419,  420,  413,  413,
      413,  419,  421,  421,  421,  421,  423,  423,  423,  423,
      421,  425,  425,  425,  423,  426,  426,  426,  674,  425,
      561,  561,  561,  426, 1080,  413,  416,  416,  416,  416,

      416,  416,  416,  416, 1079,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  427,
      429,  429,  429,  430, 1059,  430,  427,  504,  429,  433,
      430,  431,  431,  431,  431,  436,  433,  493,  514,  431,
      504,  520,  436,  416,  416,  416,  434,  434,  434,  434,
      438,  438,  438,  520,  434,  444,  444,  444,  438,  439,
      439,  439,  439,  444, 1058,  493,  514,  439,  504,  450,
      416,  447,  447,  447,  447,  449,  450,  449, 1032,  447,
      452,  520,  449,  451,  451,  451,  451,  452,  453,  453,
      453,  451,  454,  454,  454,  454,  453,  458,  458,  458,

      454,  455,  455,  455,  455,  458,  460,  461,  460,  455,
     1025, 1008,  463,  460,  461,  462,  462,  462,  462,  463,
      465,  465,  465,  462,  466,  511,  466,  988,  465,  469,
      475,  466,  467,  467,  467,  467,  469,  475,  511,  558,
      467,  470,  470,  470,  470,  651,  558,  651,  954,  470,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  511,  670,  471,  471,
      471,  471,  471,  472,  473,  472,  473,  682,  503,  682,
      472,  473,  476,  476,  476,  476,  477,  478,  477,  478,
      476,  673,  682,  477,  478,  670,  503,  471,  471,  471,

      471,  479,  480,  479,  480,  481,  926,  481,  479,  480,
      908,  482,  481,  482,  483,  484,  483,  484,  482,  673,
      506,  483,  484,  503,  471,  486,  517,  486,  479,  506,
      481,  485,  486,  485,  487,  494,  487,  494,  485,  893,
      480,  487,  517,  557,  482,  557,  495,  484,  495,  483,
      557,  888,  485,  496,  486,  496,  479,  506,  481,  487,
      485,  502,  499,  497,  499,  497,  502,  480,  494,  517,
      494,  482,  886,  505,  484,  885,  483,  500,  496,  500,
      485,  505,  486,  521,  522,  495,  499,  487,  485,  508,
      497,  507,  500,  500,  502,  494,  508,  494,  497,  510,

      507,  518,  509,  522,  512,  521,  496,  516,  510,  505,
      509,  512,  495,  515,  499,  509,  516,  519,  497,  518,
      515,  523,  527,  525,  508,  497,  529,  519,  507,  526,
      522,  882,  521,  530,  523,  531,  510,  532,  509,  512,
      527,  530,  881,  509,  516,  533,  518,  525,  515,  529,
      526,  533,  534,  532,  531,  519,  536,  534,  535,  538,
      539,  540,  523,  541,  546,  536,  871,  527,  548,  530,
      540,  541,  546,  539,  525,  538,  529,  526,  535,  533,
      532,  531,  542,  544,  543,  534,  545,  547,  544,  549,
      548,  542,  547,  536,  543,  545,  550,  551,  540,  541,

      546,  539,  538,  553,  550,  535,  556,  559,  559,  559,
      559,  560,  549,  865,  857,  555,  544,  548,  560,  542,
      547,  551,  543,  545,  556,  553,  555,  563,  563,  563,
      563,  555,  550,  565,  565,  565,  565,  683,  856,  549,
      567,  567,  567,  568,  568,  568,  575,  846,  551,  846,
      683,  556,  553,  575,  555,  570,  570,  570,  555,  569,
      569,  569,  569,  572,  572,  572,  574,  577,  574,  576,
      576,  576,  576,  574,  577,  578,  578,  578,  580,  580,
      580,  580,  582,  582,  582,  582,  584,  584,  584,  585,
      585,  585,  586,  586,  586,  586,  587,  587,  587,  588,

      591,  588,  591,  587,  825,  821,  588,  591,  816,  813,
      587,  587,  589,  589,  589,  589,  590,  590,  590,  592,
      598,  627,  626,  590,  626,  732,  592,  598,  627,  626,
      590,  590,  593,  593,  593,  593,  595,  595,  595,  595,
      597,  597,  597,  597,  599,  599,  599,  601,  601,  601,
      601,  603,  603,  603,  603,  605,  605,  605,  606,  606,
      606,  606,  607,  607,  607,  609,  609,  609,  611,  611,
      611,  614,  614,  614,  614,  616,  616,  616,  620,  620,
      620,  620,  622,  622,  622,  623,  623,  623,  623,  624,
      624,  624,  625,  625,  625,  625,  628,  628,  628,  628,

      629,  630,  630,  630,  636,  636,  636,  629,  632,  632,
      632,  632,  634,  634,  634,  634,  638,  638,  638,  641,
      641,  641,  641,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  720,
      718,  643,  643,  643,  643,  643,  644,  645,  644,  645,
      646,  702,  685,  644,  645,  648,  654,  646,  647,  647,
      647,  647,  648,  650,  650,  650,  652,  652,  652,  652,
      643,  643,  643,  643,  655,  655,  655,  655,  656,  658,
      656,  659,  659,  659,  659,  656,  658,  660,  661,  660,
      661,  662,  653,  662,  660,  661,  649,  643,  662,  663,

      664,  663,  664,  665,  675,  665,  663,  664,  642,  666,
      665,  666,  660,  689,  639,  667,  666,  667,  668,  669,
      668,  669,  667,  684,  663,  668,  669,  693,  665,  676,
      684,  676,  675,  677,  664,  677,  689,  678,  666,  678,
      660,  668,  667,  679,  681,  679,  681,  688,  680,  667,
      680,  635,  663,  697,  693,  686,  665,  688,  684,  677,
      686,  664,  678,  689,  692,  694,  666,  633,  676,  668,
      667,  690,  680,  679,  687,  691,  667,  681,  696,  687,
      697,  693,  699,  694,  691,  688,  692,  677,  686,  699,
      678,  695,  698,  708,  690,  676,  695,  701,  708,  700,

      680,  679,  699,  704,  681,  703,  696,  687,  700,  706,
      694,  705,  691,  692,  703,  711,  698,  699,  705,  710,
      701,  690,  704,  707,  695,  621,  708,  709,  710,  699,
      712,  714,  706,  715,  709,  713,  700,  712,  719,  711,
      707,  712,  703,  698,  713,  716,  705,  701,  714,  704,
      715,  721,  714,  717,  716,  722,  710,  719,  723,  706,
      721,  725,  709,  723,  724,  712,  711,  707,  726,  712,
      727,  725,  713,  730,  717,  714,  722,  715,  733,  714,
      724,  725,  716,  725,  719,  728,  729,  727,  721,  731,
      734,  723,  726,  729,  847,  733,  847,  730,  728,  725,

      619,  717,  615,  722,  735,  835,  735,  724,  725,  729,
      725,  735,  731,  734,  727,  612,  736,  608,  738,  726,
      604,  729,  733,  736,  730,  738,  728,  737,  737,  737,
      737,  740,  835,  740,  602,  737,  729,  837,  740,  731,
      734,  739,  739,  739,  741,  741,  741,  741,  742,  739,
      743,  839,  741,  839,  596,  742,  583,  743,  744,  744,
      744,  745,  745,  745,  745,  837,  744,  748,  861,  745,
      746,  746,  746,  747,  748,  747,  581,  839,  746,  750,
      747,  749,  749,  749,  749,  566,  750,  754,  564,  749,
      751,  751,  751,  752,  754,  752,  861,  849,  751,  755,

      752,  753,  753,  753,  753,  839,  755,  554,  537,  753,
      756,  756,  756,  757,  757,  757,  757,  528,  756,  838,
      849,  757,  758,  758,  758,  759,  759,  759,  524, 1043,
      758,  468,  759,  760,  760,  760,  760,  761,  762,  761,
      762,  760,  763,  464,  761,  762,  838,  849,  767,  763,
      764,  764,  764,  764,  765,  767,  765, 1043,  764,  768,
      456,  765,  766,  766,  766,  766,  768,  769,  769,  769,
      766,  770,  448,  770,  446,  769,  772,  773,  770,  771,
      771,  771,  771,  772,  773,  775,  440,  771,  774,  774,
      774,  774,  775,  776,  776,  776,  774,  777,  777,  777,

      777,  776,  778,  778,  778,  777,  779,  779,  779,  781,
      778,  781,  782,  783,  779,  859,  781,  860,  855,  782,
      783,  784,  784,  784,  784,  785,  785,  785,  855,  784,
      435,  859,  788,  785,  786,  786,  786,  786,  787,  788,
      787, 1174,  786,  790,  860,  787,  789,  789,  789,  789,
      790,  791,  791,  791,  789,  792,  855,  792,  859,  791,
      794,  795,  792,  793,  793,  793,  793,  794,  795, 1174,
      432,  793,  796,  796,  796,  797,  797,  797,  797,  428,
      796,  803,  805,  797,  798,  798,  798,  858,  803,  805,
      402,  399,  798,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  858,
      398,  800,  800,  800,  800,  800,  801,  802,  801,  802,
      395,  390, 1176,  801,  802,  804,  804,  804,  804,  806,
      806,  806,  807,  804,  807,  387,  858,  806,  870,  807,
      800,  800,  800,  800,  808,  808,  808,  808,  809,  810,
     1176,  870,  808,  372,  367,  809,  810,  811,  811,  811,
      815,  815,  815,  815,  817,  811,  817,  800,  815,  818,
      820,  817,  819,  819,  819,  819,  818,  820,  826,  870,
      819,  822,  822,  822,  823,  826,  823,  850,  366,  822,
      356,  823,  824,  824,  824,  824,  827,  828,  827,  828,

      824,  851,  294,  827,  828,  829,  830,  829,  830,  831,
      850,  831,  829,  830,  289,  832,  831,  832,  834,  833,
      834,  833,  832,  852,  851,  834,  833,  840,  852,  840,
      841,  828,  841,  863,  842,  827,  842,  850,  843,  834,
      843,  853,  844,  831,  844,  862, 1238,  864,  866,  830,
      853,  851,  863,  866,  854,  832,  852,  840,  828,  833,
      841,  842,  827,  854,  872,  868,  862,  834,  864,  867,
      831,  843,  868,  873, 1238,  288,  830,  869,  853,  863,
      872,  866,  832,  844,  874,  840,  833,  875,  841,  842,
      867,  854,  869,  862,  877,  864,  873,  876,  843,  879,

      868,  878,  880,  875,  883,  874,  876,  872,  878,  884,
      844,  889,  890,  883,  891,  877,  892,  867,  879,  869,
      895,  880,  887,  873,  894,  895,  898,  884,  896,  887,
      875,  897,  874,  890,  876,  889,  878,  892,  891,  898,
     1072,  883,  877,  899,  901,  879,  901,  897,  880,  894,
     1072,  901,  899,  895,  884,  284,  896,  887,  280,  902,
      890,  904,  889, 1042,  892,  891,  902,  898,  904,  903,
      903,  903,  903,  272,  897,  909,  894,  903, 1072,  269,
      899,  911,  909,  896,  905,  905,  905,  906,  911,  906,
     1042,  253,  905,  252,  906,  907,  907,  907,  907,  910,

      910,  910,  910,  907,  912,  912,  912,  910,  914,  914,
      914,  248,  912,  916,  916,  916,  914,  915,  915,  915,
      915,  916,  918,  918,  918,  915,  917,  917,  917,  917,
      918,  919,  920,  919,  917,  244, 1044,  922,  919,  920,
      921,  921,  921,  921,  922,  923,  923,  923,  921,  924,
      240,  924, 1056,  923,  927,  929,  924,  925,  925,  925,
      925,  927,  929, 1044,  229,  925,  928,  928,  928,  928,
      930,  930,  930, 1056,  928,  932,  932,  932,  930,  933,
      933,  933,  933,  932,  934,  934,  934,  933,  935,  935,
      935,  935,  934,  936,  936,  936,  935,  937,  192,  937,

     1056,  936,  940,  945,  937,  939,  939,  939, 1054,  940,
      945,  948,  939,  941,  941,  941,  941,  942,  948,  942,
     1060,  941,  183,  950,  942,  943,  943,  943,  943,  944,
      950,  944, 1054,  943, 1242,  955,  944,  946,  946,  946,
      946,  947,  955,  947,  166,  946,  161, 1060,  947,  949,
      949,  949,  949,  951,  951,  951,  952,  949,  952, 1054,
      143,  951, 1242,  952,  953,  953,  953,  953,  956,  956,
      956,  956,  953,  957,  958,  957,  956,  137,  126, 1249,
      957,  958,  959,  959,  959,  959,  960,  960,  960,  960,
      959,  961,  963,  110,  960,  962,  962,  962,  961,  963,

      964,  964,  964,  962,  966,  966,  966, 1249,  964,  108,
      101,   97,  966,  967,  967,  967,  967,  968,  968,  968,
      968,  967,  969,  969,  969,  968,  970,  970,  970,  970,
      969,  971,  971,  971,  970,  972,  972,  972,  973,  971,
      973,  974,   94,  972,   76,  973,  976,   39,  974,  975,
      975,  975,  975,  976,  977,  977,  977,  975,  978,  978,
      978,  978,  977,  979,  979,  979,  978,  980,  980,  980,
      980,  979,  981,  982,  981,  980,   33, 1188,  984,  981,
      982,  983,  983,  983,  983,  984,  985,  985,  985,  983,
      986,   32,  986, 1062,  985,  989,  991,  986,  987,  987,

      987,  987,  989,  991, 1188,   31,  987,  990,  990,  990,
      990,  992,  992,  992, 1062,  990,  994,  994,  994,  992,
      995,  995,  995,  995,  994,  996,  996,  996,  995,  997,
      997,  997,  997,  996,  998,  998,  998,  997,   30,   29,
       27, 1062,  998,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999,  999,  999,  999,  999,  999,  999,   25,
       21,  999,  999,  999,  999,  999, 1000, 1001, 1000, 1001,
     1002,   20,   19, 1000, 1001, 1004, 1009, 1002, 1003, 1003,
     1003, 1003, 1004, 1009,    6, 1063, 1003, 1005, 1005, 1005,
      999,  999,  999,  999, 1006, 1005, 1006, 1007, 1007, 1007,

     1007, 1006, 1063, 1011,    0, 1007, 1010, 1010, 1010, 1010,
     1011, 1012, 1012, 1012, 1010,    0, 1360,  999, 1276, 1012,
     1014, 1014, 1014, 1015, 1015, 1015, 1015,    0, 1014, 1063,
        0, 1015, 1016, 1016, 1016, 1017, 1017, 1017, 1017, 1018,
     1016, 1018, 1019, 1017, 1360, 1276, 1018, 1021,    0, 1019,
     1020, 1020, 1020, 1020, 1021, 1022, 1022, 1022, 1020, 1023,
        0, 1023,    0, 1022, 1026, 1028, 1023, 1024, 1024, 1024,
     1024, 1026, 1028,    0, 1052, 1024, 1027, 1027, 1027, 1027,
     1029, 1029, 1029, 1052, 1027, 1031, 1031, 1031, 1029, 1033,
     1033, 1033, 1033, 1031, 1035,    0, 1035, 1033, 1036,    0,

     1036, 1035, 1037,    0, 1037, 1036, 1038, 1068, 1038, 1037,
     1039, 1052, 1039, 1038, 1040, 1068, 1040, 1039, 1041, 1035,
     1041, 1040, 1045, 1109, 1045, 1041, 1046, 1047, 1046, 1047,
     1109, 1050, 1049, 1050, 1049, 1051, 1036, 1053, 1067, 1040,
        0, 1055, 1053, 1068, 1038, 1039, 1055, 1035, 1051, 1064,
     1041, 1067, 1045, 1046, 1047, 1057, 1050, 1066, 1064, 1065,
     1057, 1069, 1070, 1036, 1075,    0, 1066, 1040, 1069, 1075,
     1053, 1038, 1039, 1049, 1055, 1065, 1051, 1041, 1070, 1067,
     1045, 1046, 1047, 1073, 1050, 1071, 1064, 1074, 1057, 1076,
     1078, 1077, 1073, 1088, 1066, 1074, 1069, 1075, 1071, 1077,

     1049, 1081, 1065, 1082, 1090, 1070, 1083, 1085, 1086, 1084,
     1081, 1087, 1076, 1088, 1078, 1084, 1085, 1086, 1091, 1089,
     1073, 1082, 1090, 1074, 1331, 1083, 1071, 1077, 1089, 1093,
     1093, 1093, 1093, 1087, 1331, 1115, 1091, 1093, 1081, 1076,
     1088, 1078, 1115, 1084, 1085, 1086,    0, 1187, 1082, 1090,
     1120, 1121, 1083, 1095, 1095, 1095, 1089, 1120, 1121,    0,
     1087, 1095, 1331, 1091, 1097, 1097, 1097, 1097, 1099, 1099,
     1099, 1187, 1097, 1103, 1103, 1103, 1099, 1101, 1101, 1101,
     1101, 1103, 1107, 1107, 1107, 1101, 1105, 1105, 1105, 1105,
     1107, 1111, 1111, 1111, 1105, 1112, 1194, 1112, 1187, 1111,

        0, 1194, 1112, 1113, 1113, 1113, 1113, 1116, 1116, 1116,
     1116, 1113, 1117,    0, 1117, 1116, 1118,    0, 1118, 1117,
     1119, 1126, 1119, 1118, 1123,    0, 1123, 1119, 1126, 1194,
        0, 1123, 1124, 1124, 1124, 1124, 1127, 1127, 1127, 1127,
     1124, 1130, 1130, 1130, 1127, 1128, 1128, 1128, 1128, 1130,
     1280, 1280, 1280, 1128, 1132, 1132, 1132, 1132, 1134, 1134,
     1134, 1134, 1132, 1136, 1136, 1136, 1134, 1138, 1138, 1138,
     1280, 1136, 1142, 1142, 1142, 1138, 1140, 1140, 1140, 1140,
     1142, 1146, 1146, 1146, 1140, 1144, 1144, 1144, 1144, 1146,
     1150, 1150, 1150, 1144, 1148, 1148, 1148, 1148, 1150, 1154,

     1154, 1154, 1148, 1152, 1152, 1152, 1152, 1154, 1158, 1158,
     1158, 1152, 1156, 1156, 1156, 1156, 1158, 1162, 1162, 1162,
     1156, 1160, 1160, 1160, 1160, 1162, 1166, 1166, 1166, 1160,
     1164, 1164, 1164, 1164, 1166, 1168,    0, 1168, 1164, 1169,
        0, 1169, 1168, 1170,    0, 1170, 1169, 1171,    0, 1171,
     1170, 1172, 1181, 1172, 1171, 1173, 1168, 1173, 1172, 1175,
     1184, 1175, 1173, 1175, 1177, 1179, 1177, 1179, 1169, 1180,
     1181, 1180, 1185, 1189, 1190, 1195, 1184, 1175, 1191, 1205,
     1195, 1198, 1189, 1201, 1168, 1191,    0, 1171, 1204, 1185,
     1179, 1177, 1202, 1196, 1190, 1180, 1169, 1181, 1196, 1199,

     1198,    0, 1205, 1184, 1199,    0,    0, 1201, 1195, 1202,
     1189,    0, 1204, 1191, 1171, 1207, 1185, 1208, 1179, 1177,
     1209, 1190, 1207, 1180, 1208, 1216, 1196, 1198, 1212, 1205,
        0, 1217, 1199, 1213, 1201, 1215, 1202, 1212, 1217, 1204,
     1245, 1209, 1213,    0, 1215, 1218, 1218, 1218, 1216,    0,
     1207, 1222, 1208, 1218, 1220, 1220, 1220, 1227, 1222, 1224,
     1224, 1224, 1220, 1245, 1227, 1212,    0, 1224, 1209,    0,
     1213, 1246, 1215,    0,    0, 1216, 1225, 1225, 1225, 1225,
     1233, 1233, 1233, 1233, 1225, 1235, 1253, 1235, 1233, 1236,
     1245, 1236, 1235, 1237, 1246, 1237, 1236, 1239, 1248, 1239,

     1237, 1239, 1243, 1244, 1243, 1244, 1251, 1244, 1250, 1253,
     1254, 1255, 1244, 1257, 1248, 1239, 1252, 1256, 1235, 1258,
     1257, 1246, 1251, 1260, 1236, 1281, 1250, 1255, 1243, 1252,
     1261, 1237, 1262, 1254,    0, 1256, 1253, 1263, 1288, 1260,
     1258, 1248, 1264, 1261,    0, 1235, 1263,    0, 1257, 1251,
        0, 1236, 1281, 1250, 1255, 1262, 1243, 1252, 1237,    0,
     1254, 1264, 1256,    0,    0, 1288, 1260, 1258, 1269, 1269,
     1269, 1261, 1285, 1273, 1263, 1273, 1269, 1271, 1271, 1271,
     1273, 1285, 1262, 1287, 1274, 1271, 1274, 1275, 1264, 1275,
     1289, 1274, 1290, 1291, 1275, 1278, 1278, 1278, 1282, 1278,

     1282, 1290, 1282, 1293, 1302,    0, 1287, 1282, 1293, 1285,
     1292, 1296, 1297, 1289, 1298, 1291, 1299, 1300, 1274, 1292,
     1296, 1297, 1312, 1298, 1301,    0,    0,    0, 1302, 1290,
     1300, 1324, 1301, 1287, 1299,    0, 1293, 1303, 1314, 1303,
     1289, 1316, 1291, 1312, 1303, 1274, 1317, 1292, 1296, 1297,
     1324, 1298, 1305, 1305, 1305, 1302, 1305, 1323, 1300, 1317,
     1301, 1299, 1307, 1307, 1307, 1314, 1323, 1325, 1316, 1326,
     1312, 1327, 1328, 1338, 1329, 1329, 1329, 1324, 1329, 1330,
     1330, 1330, 1307, 1334, 1337, 1336, 1338, 1317, 1330,    0,
        0, 1325, 1326,    0, 1323, 1316, 1350, 1346, 1327, 1328,

     1351,    0, 1334, 1336, 1345, 1337, 1341, 1341, 1341, 1345,
     1341, 1343, 1343, 1343, 1338, 1346, 1348, 1349, 1325, 1326,
     1343, 1352, 1355, 1350, 1362, 1348, 1356, 1351, 1352, 1334,
     1336, 1355, 1337,    0, 1356, 1349, 1357, 1345, 1358,    0,
        0,    0, 1346,    0, 1357,    0,    0, 1358,    0,    0,
        0,    0, 1362, 1348, 1356,    0, 1352,    0,    0, 1355,
        0, 1356, 1349,    0, 1357,    0,    0,    0,    0,    0,
        0, 1357,    0,    0,    0, 1358, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,

     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1374, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1381, 1381, 1382,    0, 1382, 1382, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1384, 1384, 1384, 1384, 1384, 1384,

     1384, 1384, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1390, 1390, 1390, 1390, 1390, 1390,    0, 1390,
     1391, 1391, 1391, 1391, 1391,    0, 1391, 1391, 1392,    0,
     1392, 1393,    0, 1393, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,

     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413,
     1413, 1413,    0, 1413, 1414, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423,

     1423, 1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,

     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1437, 1438, 1438, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1449, 1449,

     1449, 1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461, 1461,

     1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1469, 1469,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,

     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1477, 1477, 1477, 1477,
     1477, 1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1487, 1487, 1487, 1487,

     1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,

     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1501, 1501, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1508, 1508, 1508,
     1508, 1508, 1508, 1508, 1508, 1509, 1509, 1509, 1509, 1509,
     1509, 1509, 1509, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1513, 1513, 1513,

     1513, 1513, 1513, 1513, 1513, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1515, 1515, 1515, 1515, 1515, 1515, 1515,
     1515, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525, 1525, 1525,

     1525, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1530, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1532,
     1532, 1532, 1532, 1532, 1532, 1532, 1532, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534,
     1534, 1534, 1534, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1536, 1536, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
     1542, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1545, 1545, 1545,
     1545, 1545, 1545, 1545, 1545, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1550, 1550, 1550,
     1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551, 1551, 1551,

     1551, 1551, 1551, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1564,

     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1574,
     1574, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1577, 1577, 1577,

     1577, 1577, 1577, 1577, 1577, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1587, 1587, 1587,
        0, 1587, 1587, 1587, 1587, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1589, 1589, 1589, 1589, 1589, 1589, 1589,

     1589, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
     1594, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
     1599, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1601,
     1601, 1601, 1601, 1601, 1601, 1601, 1601, 1602, 1602, 1602,

     1602, 1602, 1602, 1602, 1602, 1603, 1603, 1604,    0, 1604,
     1604, 1604, 1604, 1604, 1604, 1605,    0, 1605, 1605, 1605,
     1605, 1605, 1605, 1606,    0, 1606, 1606, 1606, 1606, 1606,
     1606, 1607,    0, 1607, 1607, 1607, 1607, 1607, 1607, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest, lexer_string, lexer_lr;
std::string     lexer_include;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;

#line 2471 "lexer.cpp"

#line 32 "lexer.l"
  //  following are keywords starting with c
#line 2475 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_esope 3
#define state_lr 4
#define state_lrb 5
#define state_skip 6
#define state_skipall 7
#define state_skipnoop 8
#define state_error 9
#define state_findformat 10
#define state_scanfixpre 11
#define state_scanompfixed 12
#define state_scanompfree 13
#define state_incfilename 14
#define state_char 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 34 "lexer.l"


#line 2719 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1368 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6340 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 36 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 39 "lexer.l"
{ D(O("lrplus");O(lrlevel);Y;); 
                   lrlevel++;
		}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "lexer.l"
{ D(O("lrmin");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 57 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); 
                    lexer_lr += yytext;
		} 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 65 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 86 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 94 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		lexer_lr = "";
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 110 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 114 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK

/* to be used in '#include <file>' */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("INCFILENAME");Y;); lexer_string = yytext; 
                             BEGIN state_char; 
			     return INCFILENAME; }
	YY_BREAK


case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 141 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("ENDTEAM");Y);            return ENDTEAM;           }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("INCLUDE");Y;);           return INCLUDE;           }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 94:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 219 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 220 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 221 "lexer.l"
{ D(O("USE");Y);                return USE;               }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 222 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 98:
YY_RULE_SETUP
#line 226 "lexer.l"
{ D(O("SEGMENT");Y;);           return SEGMENT;           }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 227 "lexer.l"
{ D(O("SEGMENT,");Y;);          return SEGMENT;           }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 228 "lexer.l"
{ D(O("ENDSEGMENT");Y;);        return ENDSEGMENT;        }
	YY_BREAK


case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 232 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 233 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 234 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 235 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 236 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 237 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 238 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 239 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 240 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 241 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 242 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 243 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 244 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 245 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 115:
#line 250 "lexer.l"
case 116:
/* rule 116 can match eol */
#line 251 "lexer.l"
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 251 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 254 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 255 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 120:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 258 "lexer.l"
case 121:
YY_RULE_SETUP
#line 259 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 262 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 263 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 124:
YY_RULE_SETUP
#line 266 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 269 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 272 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 275 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 278 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 283 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 288 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 291 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 294 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 297 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 300 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 303 "lexer.l"
{ D(O("INCLUDE_CPP");Y;);
                                extract_include();
                                return INCLUDE_CPP;
		              }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 307 "lexer.l"
{ D(O("INCLUDE_CPP_STD");Y;);
                                extract_include();
                                return INCLUDE_CPP_STD;
		              }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 313 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 316 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 319 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 322 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 325 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 328 "lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                extract_include();
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 335 "lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                extract_include();
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 344 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 345 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 146:
YY_RULE_SETUP
#line 348 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       lexer_string = pline.get_value(std::string(yytext));
		       D(O("QSTRING");O(lexer_string);Y;);
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 147:
/* rule 147 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 373 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 379 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 386 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    lexer_lr = "";
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 394 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 401 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 403 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 404 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 406 "lexer.l"
ECHO;
	YY_BREAK
#line 3785 "lexer.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(state_identifier):
			case YY_STATE_EOF(state_keyword):
			case YY_STATE_EOF(state_esope):
			case YY_STATE_EOF(state_lr):
			case YY_STATE_EOF(state_lrb):
			case YY_STATE_EOF(state_skip):
			case YY_STATE_EOF(state_skipall):
			case YY_STATE_EOF(state_skipnoop):
			case YY_STATE_EOF(state_error):
			case YY_STATE_EOF(state_findformat):
			case YY_STATE_EOF(state_scanfixpre):
			case YY_STATE_EOF(state_scanompfixed):
			case YY_STATE_EOF(state_scanompfree):
			case YY_STATE_EOF(state_incfilename):
			case YY_STATE_EOF(state_char):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1368 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1368 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1367);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 406 "lexer.l"


void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case CHAR:          BEGIN(state_char);         break;
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case INCFILENAME:   BEGIN(state_incfilename);  break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case ESOPE:         BEGIN(state_esope);        break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}
std::string lexer_getstring()
{
   D(O("lexer_string");O(lexer_string););
   return lexer_string;
}
std::string lexer_getlr()
{
   D(O("lexer_lr");O(lexer_lr););
   return lexer_lr;
}
std::string lexer_getinclude()
{
   D(O("lexer_getinclude");O(lexer_include););
   return lexer_include;
}

void extract_include()
{
// removes first and last character of rest of input line
// example: 
// #include "file.inc"
// after scanning of '#include ', the string "file.inc",
// without quotes is put in lexer_include

   size_t l = input_string.length()-yyleng-1;
   lexer_include = input_string.substr(yyleng,l);
   if (lexer_include.size() > 1)
   {
      lexer_include.erase(lexer_include.end()-1);
      lexer_include.erase(lexer_include.begin());
   }
   D(O("lexer_include");O(lexer_include););
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


