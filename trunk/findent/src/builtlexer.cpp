#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1293] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  143,  141,  140,  141,
      137,  136,  141,  138,  139,   16,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
        4,    5,    2,    3,    8,    9,    6,    7,   15,   14,
       10,   12,   11,   13,    1,  142,  142,  106,  142,  106,
      142,  142,  142,  142,  142,  142,  142,  133,  133,  132,
      133,  133,  122,  133,  133,  111,  110,  111,  115,  114,
      115,  115,  134,    0,  136,    0,    0,   16,   17,   16,

        0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
        0,    0,    0,   69,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   87,    0,    0,    0,  106,    0,
       94,    0,    0,    0,   94,    0,    0,    0,  106,    0,
        0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  122,    0,    0,    0,
        0,    0,    0,  127,  109,    0,    0,    0,  135,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   34,    0,
        0,    0,    0,    0,   50,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   94,
        0,    0,    0,   94,    0,    0,    0,   94,    0,    0,
        0,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   95,    0,    0,    0,    0,   98,    0,
        0,    0,    0,    0,    0,   96,    0,    0,    0,   98,
        0,    0,    0,   94,    0,    0,    0,    0,    0,    0,
       94,    0,    0,   94,    0,   93,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  123,    0,    0,    0,    0,  109,  109,

        0,  113,  112,    0,    0,    0,    0,   24,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   66,    0,    0,    0,    0,    0,
        0,    0,    0,   80,   81,    0,    0,    0,    0,   88,
       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   96,    0,    0,  100,    0,    0,   94,    0,
       94,   94,    0,   94,    0,    0,   94,   94,   94,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   95,    0,    0,    0,   95,    0,    0,
      101,    0,   96,    0,    0,   98,    0,  100,   96,    0,
       96,  106,    0,   98,    0,    0,    0,    0,    0,    0,
        0,    0,   96,    0,   94,    0,    0,    0,    0,   93,
        0,    0,    0,   93,    0,    0,    0,    0,    0,  104,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  128,  109,    0,    0,    0,    0,   21,    0,
        0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   49,    0,    0,

        0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
       65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   90,    0,   92,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   96,    0,   94,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       95,    0,   95,   95,    0,   95,    0,   96,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   93,    0,   93,
       93,    0,   93,    0,    0,    0,    0,    0,    0,   96,
        0,    0,    0,   98,    0,    0,    0,  103,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  126,  125,    0,    0,    0,    0,    0,    0,  107,
      107,    0,   20,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   43,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   67,    0,   70,    0,    0,
        0,   74,    0,    0,    0,    0,    0,    0,   91,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   95,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   93,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   96,  104,   96,    0,
       98,    0,    0,    0,    0,   96,    0,    0,    0,   98,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      124,    0,    0,  130,    0,    0,  108,  108,  107,  107,
        0,    0,    0,    0,    0,    0,    0,   29,   30,    0,
        0,    0,    0,    0,    0,    0,   37,    0,    0,    0,
        0,    0,   51,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   62,   63,    0,    0,   71,    0,   73,    0,
        0,    0,    0,   79,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   94,    0,    0,    0,
        0,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  100,    0,    0,    0,    0,   96,
        0,    0,    0,    0,    0,    0,  105,    0,    0,    0,

        0,    0,   97,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   95,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,   93,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  100,    0,    0,    0,
        0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  100,    0,    0,    0,    0,   96,    0,
      103,    0,   96,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  129,    0,    0,    0,    0,
        0,    0,    0,   31,   32,    0,   38,    0,    0,    0,
        0,    0,    0,   46,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   64,   68,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   94,    0,   94,
        0,   94,    0,   94,    0,   99,    0,   96,    0,   99,
        0,   96,    0,   96,    0,    0,    0,   99,    0,    0,
       97,    0,   97,    0,    0,   96,    0,    0,   99,    0,
        0,    0,   95,    0,   95,    0,   95,    0,   99,    0,
       96,    0,   95,    0,   94,    0,   94,    0,   93,    0,

       93,    0,   93,    0,   93,    0,   99,    0,   96,    0,
       99,    0,   96,    0,   99,    0,   96,    0,   99,    0,
       96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      131,    0,   19,   22,    0,    0,   25,    0,    0,    0,
        0,    0,   41,   44,    0,    0,    0,   52,    0,    0,
       56,    0,    0,   59,    0,    0,   72,    0,    0,    0,
       78,   82,    0,    0,   85,    0,    0,    0,   96,    0,
      102,    0,   96,    0,    0,   99,    0,   96,    0,   97,
      105,   96,    0,   99,    0,    0,    0,    0,    0,    0,
        0,   27,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   58,    0,    0,    0,    0,    0,   83,
       84,   86,    0,   96,    0,   96,    0,    0,    0,    0,
        0,    0,   23,    0,    0,    0,    0,    0,    0,    0,
       48,   53,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   26,    0,   35,    0,    0,   45,   47,
       55,   57,   61,    0,    0,    0,    0,  120,  121,    0,
       36,   39,    0,   60,    0,    0,    0,    0,    0,    0,
        0,   77,    0,    0,    0,    0,    0,   40,   75,    0,
        0,    0,    0,   76,    0,  116,    0,  117,   18,  118,
      119,    0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,   14,    1,    1,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
       18,    1,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       29,   36,   37,   38,   39,   40,   41,   42,   43,   29,
       44,    1,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   29,   57,   58,   59,   60,
       61,   62,   29,   63,   64,   65,   66,   67,   68,   69,
       70,   29,    1,   71,    1,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    1,    4,    4,    5,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    6,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1
    } ;

static yyconst flex_uint16_t yy_base[1524] =
    {   0,
        0,   71,  142,  213,  282, 2884,   17,   19,   18,   20,
       22,   23,   47,   48,   91,  119, 2859, 2851, 2844,  348,
       32,  162, 2843,   90, 2833,   50, 2799, 5617, 5617,   27,
     5617,   23, 2781, 5617, 5617,   52,  216,   83,  383,  174,
      176,  222,  237,  177,  230,  232,   82,  227,  322,  155,
     5617, 5617, 5617, 5617, 5617, 5617, 5617, 5617, 5617, 5617,
     5617, 5617, 5617, 5617, 5617, 5617, 2780, 5617,  100,  118,
      446,  104,  128,  174,  517,  166,  587, 5617,  106, 5617,
      248,  270,  357,  290, 2747, 5617, 5617, 2751, 5617, 5617,
      134, 2750, 5617,  188,   33, 2724,    0, 2714,    0,  188,

      291,  305,  265,  331,  153,  261,  356,  362,  527,  369,
      449,  361,  341, 2704,  345,  358,  385,  403,  374,  450,
      420,  269,  355,  370, 2686,  454,  452, 2698, 5617,  197,
      236,  237,  425,  470,  258,  239,  478,  490,  307,  657,
      475,  493,  503,  728,  494, 2691,  539,  548,  551,  567,
     2687,  536,  576,  594,  799,  646,  595,  675,  816,  758,
      603,  582,  629,  695,  356,  622,  826, 2672,  827,  578,
      484,  696,  482,  832,  677,  615, 2674,  195, 5617,  508,
      734,  615,  550,  733,  688,  548,  689,  759,  572,  754,
      668,  669,  694,  670,  872,  805,  803,  671,  742,  820,

      774,  588,  825,  889,  849,  816,  846,  881,  882,  848,
      902,  854,  709,  555,  775,  316,  643,  753,  704, 2671,
      944,  778,  947, 2664,  829,  955,  849, 2641,  959,   65,
      963, 2626, 2594,  966,  926,  974,  983, 1000, 1008, 1054,
      929, 1012, 1015,  427,  971, 1028, 1031, 1039, 2583, 1016,
     1072, 2554, 1004, 1036, 1076, 5617, 1080, 1044, 1088, 2548,
     1043, 1099, 1102, 2547, 1085, 1110, 1118, 2538, 2529, 1107,
     5617, 1126, 1129, 2526, 1134,  550, 1115, 1142, 1151, 1168,
     1169, 1177, 1176, 1184, 1201, 1185, 1202, 1209, 1214, 1223,
      441, 1187,  524, 5617,  596, 1231, 1238, 1242,  126, 1273,

      966, 5617, 5617,  987, 1149, 1203,  823, 1125, 1232, 1182,
     1233, 1078, 1243,  899,  869,  917, 1239, 1109, 1245, 1261,
     1265, 1263, 1259, 1267, 1275, 1277, 1285, 1287, 1288, 1290,
     1311, 1291, 1312, 1299, 2506, 1294, 1306, 1321, 1328, 1338,
     1301, 1324, 1339, 2491, 2489, 1345, 1348, 1297, 1349, 2459,
     1362, 1361, 1384, 1236, 1392, 1365, 1402, 1411, 1419, 1377,
     1427, 1400, 2466, 1423, 1435, 2466, 1432, 1440, 5617, 1443,
     2462, 5617, 1451, 2457, 2416, 1455, 5617, 2361, 5617, 1458,
     1459, 1467, 1470, 1478, 1480, 1488, 1475, 1496, 1505, 1522,
     1530, 1576, 1533, 1485, 1543, 1550, 1558, 1493, 1566, 1534,

     1594, 1597, 1555, 2353, 1605, 1607, 1621, 2352, 1563, 1629,
     2338, 1602, 5617, 1633, 1641, 2275, 1462, 5617, 5617, 1649,
     5617, 2268, 1652, 2267, 1610, 1656, 1664, 1661, 1672, 1675,
     1683, 2265, 5617, 1687, 5617, 1690, 1691, 1699, 1702, 2248,
     1710, 1712, 1720, 2249, 1707, 1728, 1737, 1754, 1755,  780,
     1717, 1763, 1766, 1771, 1783, 1782, 1790, 1791, 1798, 1807,
     1808, 1815, 1824, 1452, 1488, 1502, 1500, 1506, 1837, 1413,
     1775, 1800, 5617, 1625, 1656, 1814, 1701, 1823, 1798, 1828,
     1830, 1756, 1838, 1850, 1855, 1813, 1002, 1546, 1856, 1860,
     1827, 1858, 1871, 1680, 1645, 1736, 1864, 2188, 1869, 1356,

     1870, 2153, 1852, 1876, 1881, 1883, 1884, 1890, 1887, 1892,
     2116, 1906, 1904, 1902, 1919, 1914, 1908, 1923, 1928, 1933,
     1929, 1896, 1935, 1931, 5617, 1940, 2080, 1960, 1959, 1980,
     1969, 1985,  440, 1996, 2075, 2003, 2071, 1988, 1992, 2007,
     2011, 5617, 2014, 5617, 1971, 2016, 2018, 2021, 2024, 1263,
     2029, 2068, 2033, 2057, 2037, 2040, 2043, 2046, 2049, 2061,
     2064, 2067, 2050, 2079, 2072, 2083, 2053, 2087, 2090, 2092,
     2095, 2099, 2000, 2103, 1999, 2107, 2110, 2114, 1970, 2117,
     5617, 2120, 1954, 5617, 2123, 1950, 2127, 5617, 2129, 1926,
     2133, 1857, 2137, 2140, 2144, 2147, 2150, 2151, 2159, 2162,

     2154, 2163, 2170, 1854, 2174, 1819, 2178, 5617, 2181, 1800,
     5617, 2184, 1784, 2189, 2206, 2207, 2210, 2218, 2215, 1743,
     2223, 2164, 2226, 1731, 1725, 2235, 2238,  818, 2239, 2247,
     2250, 2253, 2258, 2261, 2266, 2273, 2278, 2281, 2286, 2289,
     1738, 5617, 5617, 2004, 2180, 2275, 2299, 2242, 2314, 2307,
      857, 2283, 1710, 2197, 2300, 2271, 2293, 2302, 2304, 2310,
     2312, 2313, 2332, 2282, 1376, 2298, 2328, 2336, 2321, 1689,
     2344, 2338, 2354, 2327, 2352, 2362, 2372, 2374, 2358, 2383,
     2378, 2376, 2384, 2389, 2398, 1681, 2386, 1666, 2400, 2401,
     2397, 2415, 2390, 2406, 2414, 2431, 2427, 2408, 1646, 2455,

     2374, 2480, 2442, 2488, 2469, 2496, 2477, 2485, 2500, 2508,
     2512, 2515, 2516, 2524, 2527, 2535, 2537, 2545, 2532, 2542,
     2553, 2556, 2564, 2566, 2574, 2577, 2582, 2581, 2590, 2593,
     2601, 2598, 2605, 2609, 2612, 2620, 2617, 2624, 2632, 2629,
     2640, 2643, 2651, 2654, 5617, 2656, 2659, 2661, 2669, 2673,
     2681, 2684, 2685, 2693, 2696, 2704, 2706, 2714, 2701, 2711,
     2722, 2725, 2733, 5617, 2742, 2759, 2760, 2729, 2768, 2730,
     2772, 2775, 2788, 2776, 2791, 2799, 5617, 1644, 5617, 2802,
     1643, 2807, 2806, 2815, 2818, 1630, 2826, 2828, 2836, 1623,
     2823, 2839, 2846, 2847, 2854, 2855, 2862, 2863, 2871, 2394,

     5617, 2462, 2879, 2871, 2880, 2626, 5617, 2383, 2455, 5617,
     2602, 2805, 2852, 2872, 2557, 2861, 2547, 1601, 1600, 2470,
     2765, 2550, 2688, 2869, 2876, 2878, 1587, 2877, 2890, 2894,
     2892, 2797, 1567, 2881, 2883, 2907, 2916, 2921, 2918, 2929,
     2923, 2925, 1556, 1548, 2938, 2901, 1527, 2941, 1523, 2933,
     2935, 2939, 2947, 1513, 2948, 2949, 2950, 2951, 2968, 2997,
     2986, 3009, 2998, 3019, 3022, 3030, 1499, 3027, 3038, 3035,
     3046, 5617, 3049, 3057, 3061, 3069, 3073, 3076, 3077, 3085,
     3088, 3096, 3098, 3106, 1490, 3093, 3114, 3103, 3118, 5617,
     3122, 3130, 3134, 3142, 3146, 3149, 1017, 3156, 3153, 3164,

     3167, 3175, 3178, 3154, 3186, 3189, 3190, 3198, 3201, 3209,
     3211, 3219, 1481, 3206, 3227, 3230, 3216, 3238, 3246, 3235,
     3250, 3253, 3261, 5617, 3264, 3272, 3280, 3284, 3292, 3296,
     3300, 3303, 3269, 3311, 3308, 3319, 3322, 3330, 3333, 3338,
     3337, 3346, 3349, 3357, 3359, 3367, 1469, 3354, 3375, 3364,
     3379, 5617, 3383, 3391, 3395, 3403, 3407, 3416, 3433, 3434,
     3437, 3445, 3442, 3455, 3462, 3470, 1446, 3467, 3479, 3477,
     3487, 5617, 3490, 3498, 3502, 3510, 3513, 3514, 3522, 3525,
     3533, 3535, 3543, 1443, 3530, 3551, 3540, 3555, 5617, 3559,
     1428, 3567, 5617, 3570, 3575, 3578, 3583, 3590, 3593, 3598,

     2601, 2796, 3563, 3602, 3606, 5617, 3028, 3002, 2960, 3029,
     3449, 3244, 3557, 1395, 1383, 2924, 5617, 3293, 3436, 3573,
     3583, 3592, 3189, 3598, 3596, 3606, 3262, 3609, 3611, 3615,
     3613, 3075, 3619, 3336, 1382, 1240, 3626, 3635, 3623, 3637,
     3636, 3648, 3337, 3650, 3652, 3654, 3687, 1226, 3671, 5617,
     3704, 1211, 3713, 5617, 3716, 1203, 3724, 5617, 3727, 1187,
     3735, 5617, 3674, 1182, 3738, 3694, 3746, 1179, 3702, 3754,
     3757, 3762, 3765, 3743, 3766, 1180, 3773, 3781, 1145, 3770,
     3789, 3797, 1144, 3801, 5617, 3809, 1136, 3817, 1112, 3821,
     5617, 3825, 5617, 3833, 1101, 3837, 5617, 3845, 1091, 3849,

     5617, 3857, 1082, 3861, 5617, 3869, 1081, 3873, 5617, 3881,
     1046, 3885, 5617, 3893, 1033, 3897, 5617, 3905,  986, 3909,
     5617, 3912, 3917, 3920, 3925, 3928, 3933, 2742, 2950, 3937,
     5617, 3728,  956,  925, 3888, 3918,  885, 3778, 3078, 3763,
     3923, 3926,  870,  860, 3662, 3907, 3927,  852, 3747, 3932,
      840, 3939, 3934,  777, 3940, 3254,  765, 3937, 3946, 3780,
      758,  753, 3948, 3950,  748, 3964, 3980, 3995, 5617, 4005,
      755, 3983, 5617, 4008, 4016,  711, 3992,  712,  705,  687,
      642, 5617, 4024,  634, 4027, 4032, 4035, 2948, 3001, 3977,
     3986,  617, 4017, 3379, 4014, 4022, 4026, 4029, 4032, 4033,

     4028, 4035, 4041,  584, 4038, 4045, 4043, 4054, 4066,  565,
      494,  477, 4107, 5617, 4110, 5617, 4112, 4115, 4120, 3372,
     4021, 4078,  468, 4067, 4032, 4090, 4109, 4039, 4114, 4117,
      460,  408, 4118, 4119, 4122, 4123, 4124, 4127, 4128, 4144,
      388,  365, 4137,  349, 4119,  320, 4134, 4141,  319,  312,
      307,  294,  270, 4155, 4143, 4142, 4147, 4127, 4128, 4170,
     5617,  260, 4165,  238, 4169, 4174, 4188,  229,  166, 4176,
     4181,  103, 4194, 4189, 4154, 4158, 4203,  102,   44, 4204,
     4202, 4205, 4215,   39, 4192, 5617, 4206, 5617,    7, 5617,
     5617, 5617, 4267, 4273, 4279, 4285, 4291, 4297, 4303, 4309,

     4315, 4321, 4327, 4330, 4334, 4339, 4345, 4351, 4357, 4363,
     4369, 4375, 4381, 4386, 4389, 4393, 4399, 4405, 4411, 4417,
     4423, 4429, 4435, 4441, 4447, 4453, 4459, 4465, 4471, 4477,
     4483, 4489, 4495, 4501, 4507, 4513, 4519, 4525, 4531, 4537,
     4543, 4549, 4555, 4561, 4567, 4573, 4579, 4585, 4591, 4597,
     4603, 4609, 4615, 4621, 4627, 4633, 4639, 4645, 4648, 4653,
     4659, 4665, 4671, 4677, 4683, 4689, 4695, 4701, 4707, 4713,
     4719, 4725, 4731, 4737, 4743, 4749, 4755, 4761, 4767, 4773,
     4779, 4785, 4791, 4797, 4803, 4809, 4815, 4821, 4824, 4829,
     4835, 4841, 4847, 4853, 4859, 4865, 4871, 4877, 4883, 4889,

     4895, 4901, 4907, 4913, 4919, 4925, 4931, 4937, 4943, 4949,
     4955, 4961, 4967, 4973, 4979, 4985, 4991, 4997, 5003, 5009,
     5011, 5016, 5022, 5028, 5034, 5040, 5046, 5052, 5058, 5064,
     5070, 5076, 5082, 5088, 5094, 5100, 5106, 5112, 5118, 5124,
     5130, 5136, 5142, 5148, 5154, 5160, 5166, 5172, 5178, 5184,
     5190, 5196, 5202, 5208, 5214, 5217, 5222, 5228, 5234, 5240,
     5246, 5252, 5258, 5264, 5270, 5276, 5282, 5288, 5294, 5300,
     5306, 5312, 5318, 5324, 5330, 5336, 5342, 5348, 5354, 5360,
     5366, 5372, 5378, 5384, 5390, 5396, 5402, 5408, 5414, 5420,
     5426, 5432, 5438, 5441, 5446, 5452, 5458, 5464, 5470, 5476,

     5482, 5488, 5494, 5500, 5506, 5512, 5518, 5524, 5530, 5536,
     5542, 5548, 5554, 5560, 5566, 5572, 5578, 5584, 5590, 5596,
     5602, 5608, 5611
    } ;

static yyconst flex_int16_t yy_def[1524] =
    {   0,
     1293, 1293, 1294, 1294,    2,    5, 1295, 1295, 1296, 1296,
     1297, 1297, 1297, 1297, 1297, 1297, 1298, 1298, 1299, 1300,
     1301, 1301, 1302, 1302, 1303, 1303, 1292, 1292, 1292, 1292,
     1292, 1292, 1304, 1292, 1292, 1305, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1306, 1292, 1307, 1308,
     1309, 1310, 1311, 1312, 1309, 1307, 1311, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1304, 1313, 1314, 1315, 1305,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1306, 1292, 1316,
     1317, 1318, 1319, 1308, 1317, 1320, 1321, 1322, 1317, 1323,
     1324, 1325, 1326, 1323, 1324, 1327, 1328, 1329, 1330, 1330,
     1331, 1332, 1330, 1333, 1334, 1322, 1322, 1322, 1322, 1322,
     1322, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1292, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1335, 1336, 1337, 1317, 1338, 1331, 1336, 1327,
     1339, 1337, 1337, 1331, 1339, 1337, 1320, 1327, 1340, 1321,
     1321, 1331, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1344,
     1342, 1347, 1345, 1317, 1348, 1349, 1346, 1346, 1331, 1350,
     1346, 1327, 1292, 1347, 1347, 1292, 1347, 1343, 1343, 1331,
     1347, 1343, 1351, 1331, 1352, 1351, 1351, 1331, 1353, 1352,
     1292, 1352, 1351, 1331, 1354, 1317, 1355, 1356, 1357, 1358,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,

     1292, 1292, 1292, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1292, 1292, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1360, 1361, 1362, 1361, 1363, 1362, 1362, 1363,
     1362, 1364, 1327, 1353, 1331, 1331, 1363, 1363, 1292, 1363,
     1331, 1292, 1362, 1331, 1365, 1365, 1292, 1331, 1292, 1366,
     1367, 1368, 1367, 1369, 1368, 1368, 1369, 1368, 1370, 1371,
     1372, 1370, 1371, 1373, 1374, 1372, 1372, 1375, 1372, 1369,

     1369, 1369, 1373, 1327, 1376, 1374, 1374, 1331, 1376, 1374,
     1331, 1375, 1292, 1375, 1372, 1331, 1292, 1292, 1292, 1369,
     1292, 1331, 1368, 1331, 1377, 1378, 1377, 1378, 1378, 1377,
     1377, 1353, 1292, 1378, 1292, 1379, 1380, 1381, 1380, 1327,
     1382, 1381, 1381, 1331, 1382, 1381, 1383, 1384, 1384, 1385,
     1386, 1387, 1388, 1388, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1292, 1292, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,

     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1292, 1389, 1389, 1390, 1391, 1392,
     1391, 1393, 1392, 1392, 1393, 1392, 1393, 1393, 1393, 1392,
     1353, 1292, 1393, 1292, 1394, 1395, 1396, 1395, 1397, 1396,
     1396, 1397, 1396, 1397, 1397, 1397, 1396, 1394, 1398, 1399,
     1394, 1398, 1400, 1401, 1399, 1399, 1402, 1399, 1400, 1403,
     1401, 1401, 1403, 1401, 1402, 1402, 1399, 1397, 1403, 1403,
     1292, 1403, 1331, 1292, 1401, 1331, 1402, 1292, 1404, 1405,
     1404, 1405, 1405, 1404, 1405, 1404, 1406, 1407, 1408, 1407,

     1409, 1408, 1408, 1409, 1408, 1409, 1409, 1292, 1409, 1331,
     1292, 1408, 1331, 1410, 1411, 1411, 1412, 1413, 1412, 1414,
     1415, 1413, 1413, 1331, 1415, 1413, 1416, 1417, 1418, 1419,
     1394, 1416, 1416, 1394, 1394, 1394, 1394, 1394, 1394, 1416,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1420,
     1292, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1292, 1292, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422,

     1423, 1424, 1423, 1425, 1424, 1424, 1425, 1425, 1425, 1424,
     1425, 1426, 1427, 1428, 1427, 1429, 1428, 1428, 1429, 1429,
     1429, 1428, 1429, 1430, 1431, 1430, 1432, 1433, 1434, 1435,
     1435, 1436, 1433, 1437, 1434, 1434, 1437, 1436, 1435, 1437,
     1437, 1434, 1436, 1437, 1292, 1438, 1439, 1439, 1438, 1439,
     1438, 1440, 1441, 1442, 1441, 1443, 1442, 1442, 1443, 1443,
     1443, 1442, 1443, 1292, 1444, 1445, 1445, 1446, 1447, 1446,
     1448, 1447, 1447, 1448, 1448, 1448, 1292, 1449, 1292, 1447,
     1449, 1450, 1451, 1452, 1451, 1453, 1454, 1452, 1452, 1449,
     1454, 1455, 1455, 1450, 1455, 1455, 1455, 1455, 1455, 1292,

     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1292, 1292, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1457,
     1458, 1459, 1458, 1460, 1459, 1459, 1449, 1460, 1459, 1460,
     1460, 1292, 1460, 1459, 1460, 1459, 1460, 1455, 1461, 1462,
     1461, 1463, 1462, 1462, 1449, 1463, 1462, 1463, 1463, 1292,
     1463, 1462, 1463, 1462, 1463, 1464, 1465, 1464, 1466, 1467,

     1468, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1473, 1475,
     1474, 1474, 1449, 1475, 1474, 1476, 1477, 1476, 1476, 1477,
     1477, 1475, 1475, 1292, 1475, 1474, 1476, 1475, 1474, 1477,
     1475, 1478, 1479, 1478, 1479, 1479, 1478, 1479, 1478, 1480,
     1481, 1482, 1481, 1483, 1482, 1482, 1449, 1483, 1482, 1483,
     1483, 1292, 1483, 1482, 1483, 1482, 1483, 1484, 1485, 1485,
     1486, 1487, 1486, 1488, 1487, 1487, 1449, 1488, 1487, 1488,
     1488, 1292, 1488, 1487, 1488, 1487, 1489, 1490, 1491, 1490,
     1492, 1491, 1491, 1449, 1492, 1491, 1492, 1492, 1292, 1492,
     1449, 1491, 1292, 1493, 1493, 1489, 1493, 1493, 1493, 1493,

     1292, 1292, 1292, 1292, 1292, 1292, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1292, 1292, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1495, 1449, 1496, 1292,
     1495, 1449, 1496, 1292, 1497, 1449, 1498, 1292, 1497, 1449,
     1498, 1292, 1499, 1500, 1501, 1502, 1502, 1449, 1503, 1502,
     1504, 1504, 1504, 1505, 1506, 1507, 1508, 1508, 1449, 1501,
     1508, 1509, 1449, 1510, 1292, 1509, 1449, 1511, 1449, 1512,
     1292, 1510, 1292, 1513, 1449, 1514, 1292, 1515, 1449, 1516,

     1292, 1515, 1449, 1516, 1292, 1517, 1449, 1518, 1292, 1517,
     1449, 1518, 1292, 1519, 1449, 1520, 1292, 1519, 1449, 1520,
     1292, 1521, 1521, 1522, 1521, 1522, 1522, 1292, 1292, 1292,
     1292, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1292, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1501, 1501, 1292, 1501,
     1449, 1503, 1292, 1503, 1502, 1449, 1505, 1507, 1507, 1507,
     1449, 1292, 1508, 1449, 1521, 1521, 1521, 1292, 1292, 1523,
     1523, 1523, 1523, 1292, 1523, 1523, 1523, 1523, 1523, 1523,

     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1501, 1292, 1503, 1292, 1522, 1521, 1522, 1292,
     1292, 1523, 1523, 1523, 1292, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1522,
     1292, 1292, 1523, 1523, 1292, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1292, 1292, 1523,
     1292, 1523, 1523, 1523, 1523, 1523, 1523, 1292, 1292, 1523,
     1523, 1523, 1523, 1523, 1292, 1292, 1523, 1523, 1523, 1523,
     1292, 1292, 1523, 1523, 1292, 1292, 1292, 1292, 1523, 1292,
     1292,    0, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,

     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,

     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,

     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292
    } ;

static yyconst flex_uint16_t yy_nxt[5689] =
    {   0,
       28,   28,   29,   30,   28,   28,   28,   28,   28,   31,
       28,   28,   28,   28,   32,   32,   28,   28,   28,   52,
       56,   52,   56,   97,   60,   60,   53,   54,   53,   54,
       93,   61,   61,   79,   80,   79,   81,   95,   95,   62,
       62,   94,   94,   34,   28,   28,   28,   95,   95,   60,
       60,   91,   90,   91,   92,   97,   61,   61,   98,   99,
       97,   57,   58,   57,   58,   63,   63,  378,   97,  233,
       28,   28,   28,   35,   30,   28,   28,   28,   28,   28,
       31,   28,   28,   28,   28,   32,   32,   28,   28,   28,
       63,   63,   87,   60,   88,   64,   64,   64,   97,   97,

       61,   88,  131,   64,  132,  121,  146,  162,  133,  162,
      163,   88,  147,  103,   34,   28,   28,   28,   97,   97,
      135,   60,  136,   64,   64,   64,  137,  299,   61,  299,
      139,   64,  141,  121,   63,  176,  148,  176,  177,   88,
      103,   28,   28,   28,   29,   30,   28,   28,   28,   28,
       28,   31,   28,   28,   28,   28,   32,   32,   28,   28,
       28,   64,   63,   82,   80,   82,   81,   83,  131,   97,
      132,   97,  184,   84,  133,  150,  151,  150,  152, 1276,
       85,  127,  153,   84,  154,   34,   28,   28,   28,   64,
       97,   93,   97,   97,   98,   99,  302,  303,  302,  131,

      184,  214,   94,   94,   97,  215,  110,  109,  111,  127,
      117,   84,   28,   28,   28,   35,   30,   28,   28,   28,
       28,   28,   31,   28,   28,   28,   28,   32,   32,   28,
       28,   28,   97,  110,  109,  111,  101,  117,   97,  220,
      217,  228, 1275,   97,  218,  221,   97,  229,   97,  164,
      122,  164,  102,   97,   97,  112,   34,   28,   28,   28,
      113,  114,  217,  118,  101,  123,  218,  119,  115,  116,
      120,  166,  165,  166,  163,  167,   97,   97,  122,  102,
      185,   97,  112,   28,   29,   97,   97,  113,  168,  114,
      118,  172,  123,  172,  119,  115,  116,  120,  182,  208,

      165,   37,   38,   39,   40,   41,   42,   97,  185,   43,
       97,  217,   44,   45,  173,  218,   46,   47,   48,   49,
      217,   97,   50,   97,  218,  182,  208,  180,   97,   37,
       38,   39,   40,   41,   42,   97,   97,   43,   97,   44,
       45,  181,  173,   46,   47,   48,   49,   97,  124,   50,
       70,   71,   72,   73,  180,  125,   74,   97,  169,   73,
      169,   97,   75,   75,  126,   97,   76,  183,  181,   77,
       73,   97,   97,  199,   97,  209,  124,   97,   97,  200,
      170, 1259,  125,  291,  171,   97,   97,  186,  187,  188,
       97,  126,  193,  210,  183,  201,  198,   77,   73,   97,

      199,   97,  104,  209, 1258,  194,  200,  204,  170,  105,
      202,  291,  171,  106,  186,  187,  107,  188,  108,   97,
      193,  210,  201,  198,   97,  203,  223,  224,  223,  225,
      104,  217,  194,  226,  204,  218,   97,  105,  202,  206,
      106,  207,  371,  107,  707,  108,  138,  138,  139,  140,
      141,  138,  138,  203,  143,  138,  138,  138,  138,  138,
      144,  144,  138,  138,  138,   97,   97,  206,   97,  207,
       97,  195,  135,  464,  136,  212,   97,  146,  137,  231,
      232,  231,  233,  242,   97,  205,  196,  197,  211,  138,
      138,  138,  139,   97,  235,  244,  146,  245,  236,  195,

      464,  246,  242,  212,  248,  249,  248,  250,  294,  295,
       97,  251,  205,  196,  197,  211,  138,  138,  138,  139,
      144,  141,  138,  138,   97,  148,  138,  138,  138,  138,
      138,  144,  144,  138,  138,  138,  294,  295,  271,  189,
      255,  256,  255,   97,  272,  304,  467,  257,  190,  259,
      260,  259,  261,  264,  217,  265,  262,  220,  218,  266,
      138,  138,  138,  357,   97,  191,   97,  192,  267,  151,
      267,  265,  304,  308,  467,  266,  190,  273,  274,  273,
      265,   97,  312,  162,  266,  162,  163,  138,  155,  139,
      155,  141,  191,  315,  192,  148,  276,  139,  277,  235,

       97,  308,  278,  236,   97,  139,  156,  235,  292,  312,
      293,  236,  316,  157,  283,  340,  176,  158,  176,  177,
      159,  315,  160,  166,  290,  166,  163,  167,  468,  161,
      164,   97,  164,   97,  156,  292,  307,  293,  269,  316,
      168,  157,  283,  340,  158,  363,  269,  159,  139,  160,
      235,  364,  290,  165,  236,  468,  161,  234,  234,  139,
      237,  235,  234,  234,  307,  239,  234,  234,  234,  234,
      234,  240,  240,  234,  234,  234,  281,  139,  299,  235,
      300,  165,  282,  236,   97,   97,   97,   97,  318, 1180,
      336,  301,  301,  321,  284,  319,  164,  172,  164,  172,

      234,  234,  234,  281,   97,   97,  220, 1180,  285,  282,
       97,  131,  357,  354, 1180,  269,  318,  355,  336,  165,
      173,  321,  284,  319,  311,  320,  313,  234,  234,  234,
      139,  240,  235,  234,  234,  285,  236,  234,  234,  234,
      234,  234,  240,  240,  234,  234,  234,  165,  173,   97,
       97,  311,  320,  313,  365,  366,  365,  269,   97,  269,
      139,  305,  235,  337,   97,  309,  236,  306,  310,   97,
       97,  234,  234,  234,   97,   97,  359,  224,  359,  360,
      371,   97,  360,  361,  217,  289,  361,  317,  218,  305,
       97,  337,  309,   97,  306,  310,  314,  339,  234,  234,

      279,  139,  279,  235,  234,  234,  234,  236,  234,  234,
      234,  234,  234,  289,  317,  234,  234,  234,  139,   97,
      235,   97,  217,  314,  236,  339,  218,  169,  169,  169,
      169,  372,   97,  296,  335,  296,   97,  370,  286,   97,
      334,   97,  234,  234,  234,  234,  345,  287,  288,  170,
      170,  228,  479,  171,  171,  297,   97,  229,  338,  298,
      810,  335,   97,  341,   97,   97,  286,  334,   97,  234,
       97,  810,  344,  345,  287,  288,   97,  170,  170,  479,
      350,  171,  171,  297,  346,  338,   97,  298,   97,  352,
      341,  322,  323,  324,  325,  326,  327,   97,   97,  328,

      344,   97,  487,  329,  347,   97,  330,  350,  331,  332,
      342,  346,  333,  348,  343,   97,  352,  349,   97,  322,
      323,  324,  325,  326,  327,  351,  486,  328,  146,  487,
      329,  146,  347,  330,  384,  331,  332,  384,  342,  333,
      348,   97,  343,  488,  349,  368,  369,  368,  359,  224,
      359,  360,  370,  351,  486,  361,  373,  374,  373,  360,
      376,  377,  376,  361,  231,  232,  231,  233,  139,  475,
      381,  488,   97,  404,  382,  386,  260,  386,  387,  405,
      475,  475,  388,  380,  380,  139,  389,  381,  380,  380,
      269,  391,  380,  380,  380,  380,  380,  392,  392,  380,

      380,  380,  244,   97,  394,  417,  418,  417,  395,  397,
      249,  397,  398,  401,  256,  401,  399,  244,  413,  394,
      402,  217,  476,  395,  414,  218,  380,  380,  380,  407,
      408,  407,  409,  411,  664,  398,  410,  269,  419,  399,
      397,  249,  397,  398,  402,  419,  422,  399,  387,  476,
      269,  402,  388,  380,  380,  380,  139,  392,  381,  380,
      380,  664,  382,  380,  380,  380,  380,  380,  392,  392,
      380,  380,  380,  415,  416,  415,  398,  401,  256,  401,
      399,  420,  421,  420,  402,  269,  269,  271,  402,  386,
      260,  386,  387,  429,   97,  269,  388,  380,  380,  380,

      423,  424,  423,  387,  264,  269,  426,  388,  484,  271,
      427,  430,  274,  430,  426,  429,  269,  440,  427,  431,
      151,  431,  426,  441,  380,   97,  427,  434,  435,  434,
      430,  274,  430,  426,  429,  484,  276,  427,  437,  490,
      269,   97,  438,  443,  444,  443,  445,  480,  269,  269,
      446,  380,  447,  139,  447,  381,  380,  380,  380,  382,
      380,  380,  380,  380,  380,   97,  490,  380,  380,  380,
      450,  139,  451,  381,  477,  480,  452,  382,  139,  139,
      381,  381, 1180,  269,  382,  382,  139,  139,  381,  381,
      253,  269,  382,  382,  380,  380,  380,  380,   97,  453,

      454,  482,  477,  139,  139,  381,  381,  269,  455,  382,
      382,  139,  458,  381,  465,  269,  139,  382,  381,   97,
      456,  380,  382,  466,  478,  139,  453,  381,  454,  482,
      269,  382,  296,  459,  296,  455,  460,  457,  220,  469,
      458,  469,  465,  472,  532,  472,  461,  456,   97,   97,
      466,  462,  478,  463,  297,   97,   97,  481,  298,   97,
      459,   97,  485,  460,  457,  422,  473,  719,  470,  483,
      471,  489,  491,  461,  299,   97,  474,   97,  462,   97,
      463,   97,  297,   97,  492,  481,  298,  475,  475,  496,
      485,   97,  493,   97,  473,  470,  483,  471,  489,  495,

      491,   97,  497,   97,   97,  494,   97,   97,  498,  499,
       97,  502,  492,   97,  508,   97,  496,   97,  500,  503,
      493,  504,   97,  501,  512,  505,  495,   97,   97,  497,
      523,  518,  494,  509,  506,  498,  499,   97,  510,  502,
       97,  511,  508,  513,   97,  500,  503,  519,  504,  507,
      501,  512,  505,  515,   97,   97,  514,  523,  518,  517,
      509,   97,  506,  516,   97,   97,  510,  220,  511,  522,
      513,  525,   97,  532,  520,  519,  507,   97,   97,  372,
      521,  515,  524,  514,  527,  539,  131,  517,  529,  526,
      516,  676,  530,  534,  224,  534,  535,  522,   97,   97,

      536,  520,  363,  538,  369,  538,  823,  521,  364,  524,
      539,   97,  527,  371,  646,  535,  646,  526,  676,  536,
      534,  224,  534,  535,  541,  542,  541,  536,  540,  374,
      540,  535,  269,  823,  372,  536,  365,  366,  365,  269,
      539,  538,  369,  538,  543,  544,  543,  269,  539,  647,
      269,  539,  540,  374,  540,  535,  376,  377,  376,  536,
      139,  146,  546,  417,  418,  417,  547,  549,  551,  260,
      551,  552,  146,  269,  641,  553,  647,  419,  549,  555,
      256,  555,  422,  556,  552,  269,  556,  404,  553,  551,
      260,  551,  552,  570,  269,  413,  553,  557,  424,  557,

      552,  576,  641,  269,  553,  545,  545,  139,  558,  546,
      545,  545,  642,  560,  545,  545,  545,  545,  545,  561,
      561,  545,  545,  545,  244,  643,  563,  644,  645,   97,
      564,  566,  249,  566,  567,  244,  419,  563,  568,   97,
      642,  564,  556,   97,  572,  408,  572,  573,  545,  545,
      545,  574,  411,  643,  567,  644,  645,  404,  568,  566,
      249,  566,  567,  570,   97,  584,  568,  577,  416,  577,
      567,  582,   97,  665,  568,  545,  545,  545,  139,  561,
      546,  545,  545,   97,  547,  545,  545,  545,  545,  545,
      561,  561,  545,  545,  545,  555,  256,  555,  578,  421,

      578,  665,  556,   97,  413,  556,  580,  581,  580,  583,
      576,  573,  264,  582,  590,  574,   97,   97,  591,  545,
      545,  545,  572,  408,  572,  573,  299,  269,  650,  574,
      585,  586,  585,  573,  587,  588,  587,  574,  253,  651,
      651,  576,  577,  416,  577,  567,  545,  269,  269,  568,
      578,  421,  578,  557,  424,  557,  552,  556,  271,  651,
      553,   97,   97,  271,  593,  594,  274,  594,  590,  593,
      651,  651,  591,  595,  435,  595,  594,  274,  594,  590,
      593,  672,   97,  591,  596,  151,  596,  590,  595,  435,
      595,  591,  276,  440,  598,  593,   97,   97,  599,  601,

      603,  444,  603,  604,  440,   97,  671,  605,  672,  611,
      601,  607,  608,  607,  610,  609,  604,   97,  609,  620,
      605,  603,  444,  603,  604,  621,   97,  779,  605,  612,
      613,  612,  604,  653,  671,  269,  605,  545,  614,  139,
      614,  546,  545,  545,  545,  547,  545,  545,  545,  545,
      545,  253,   97,  545,  545,  545,  450,  450,  617,  617,
      653,  800,  618,  618,  623,  624,  623,  625,  628,  673,
      629,  626,   97,  628,  630,  629,  648,  658,  648,  630,
      545,  545,  545,  545,  139,  139,  546,  546,  269,  800,
      547,  547,  139,  139,  546,  546,  673,  649,  547,  547,

      139,  472,  546,  472,  269,  658,  547,  545,  631,  139,
      139,  546,  546,  633,   97,  547,  547,  139,  632,  546,
      655,  611,  634,  547,  473,  649,  139,  637,  546,   97,
       97,  635,  547,  652,  663,  638,  631,  636,  469,   97,
      469,  633,  639,   97,   97,  632,   97,  640,  655,  634,
      654,  656,  473,  657,   97,  637,  611,  668,  635,  271,
      659,  652,  663,  638,  636,  660,   97,  470,   97,  471,
      639,   97,   97,  661,   97,  640,   97,  666,  654,  656,
       97,  657,  662,  667,  668,   97,   97,   97,  659,  678,
      669,  674,   97,  660,  470,  670,  471,   97,  679,   97,

       97,  661,  677,   97,  682,  666,   97,  675,   97,  683,
      662,  667,   97,  681,  680,  685,  678,  669,   97,  674,
       97,  684,   97,  670,   97,  688,  679,  691,  271,  677,
       97,  687,  682,  696,  675,   97,  686,  683,  690,   97,
      681,  680,  689,  685,   97,   97,  692,   97,  684,   97,
      693,   97,  694,  688,  269,  691,   97,  697,  269,  687,
      696,  220,  131,  686,  701,  695,  690,  704,  702,  698,
      689,  220,  584,  139,  692,  713,  699,  704,  693,  714,
      694,  706,  224,  706,  707,  697,  709,  369,  709,  709,
      369,  709,  695,  711,  544,  711,  698,  706,  224,  706,

      707,  413,  584,  699,  710,  374,  710,  707,  710,  374,
      710,  707,  541,  542,  541,  711,  544,  711,  146,  718,
      260,  718,  719,  146,  716,  721,  256,  721,  801,  716,
      718,  260,  718,  719,  722,  424,  722,  719,  721,  256,
      721,  723,  421,  723,  722,  424,  722,  719,  139,  724,
      713,  244,  404,  728,  725,  413,  801,  729,  734,  419,
      726,  726,  731,  249,  731,  732,  139,  726,  713,  244,
      419,  728,  714,  372,  411,  729,  732,  372,  726,  726,
      736,  408,  736,  737,  731,  249,  731,  732,  739,  416,
      739,  732,  404,  741,  581,  741,   97,  583,  734,  737,

      736,  408,  736,  737,  742,  586,  742,  737,  743,  588,
      743,  739,  416,  739,  732,  723,  421,  723,  741,  581,
      741,  744,  745,  744,  742,  586,  742,  737,  743,  588,
      743,  264,   97,  747,  749,  274,  749,  747,  750,  435,
      750,  749,  274,  749,  747,  750,  435,  750,  751,  151,
      751,  747,  276,  440,  753,  761,  608,  761,  754,  756,
      758,  444,  758,  759,  440,  610,  778,  759,  774,   97,
      756,  758,  444,  758,  759,  762,  613,  762,  759,  761,
      608,  761,  763,  764,  763,  762,  613,  762,  759,  712,
      765,  139,  765,  713,  712,  712,  712,  714,  712,  712,

      712,  712,  712,  802,   97,  712,  712,  712,  450,  450,
      768,  768,  620,   97,  769,  769,  812,  620,  771,  773,
      624,  773,  774,  771,  776,  777,  776,  773,  624,  773,
      774,  802,  712,  712,  712,  712,  780,  781,  780,  774,
      628,  786,  783,  648,  812,  648,  784,  787,  789,  790,
      789,  791,  139,  269,  713,  628,  253,  783,  714,  712,
      628,  784,  783,  139,  649,  713,  784,  433,  139,  714,
      713,  269,  269,  792,  714,  139,  646,  713,  646,  269,
      139,  714,  713,  139,  793,  713,  714,   97,  139,  714,
      713,  628,  649,  783,  714,  814,  795,  784,  794,   97,

      803,  792,  803,  822,  811,  796,  797,  799,  808,   97,
      809,  647,  793,  798,   97,  805,   97,  805,   97,  813,
       97,  810,  804,  814,  795,  794,   97,  817,   97,   97,
      815,  822,  811,  796,  797,  799,  824,   97,  647,  816,
      798,  806,  269,   97,   97,  820,  818,  813,   97,  825,
      804,  821,   97,  819,   97,  817,  269,  815,  828,  827,
       97,  253,  826,  824,  832,  269,  816,  829,   97,  806,
       97,  830,  820,  818,   97,  831,  220,  825,   97,  821,
      819,  834,  864,  833,  299,  828,  299,  827,   97,  826,
       97,  832,   97,  835,   97,  829,  837,  836,  830,   97,

       97,  840,   97,  831,  838,   97,   97,  841,  839,  834,
      833,  842,  844,   97,   97,  843,   97,   97,  379,  846,
      848,  835,   97,  837,   97,  836, 1001,  849,  853,  840,
       97,   97,  838,  845,  841,  847,  839,  854,  842,  850,
      844,  855,  843,   97,  220,  859,  846,   97,  848,  851,
      864,  852,  856, 1001,  849,  853,  299,  131,  299,  861,
      845,  269,  847,  862,  854,  858,  269,  850,  857,  855,
      269,  371,  859,  868,  253,   97,  851,  869,  852,  372,
      856,  866,  867,  866,  868,  873,   97,  372,  869,  871,
      872,  871,  858,  873, 1002,  857,  873,  874,  224,  874,

      868,  875,  369,  875,  869,   97, 1014,   97,  873,  876,
      374,  876,  868,  877,  544,  877,  869,  139,  146,  879,
      873, 1002,   97,  880,  882,  884,  885,  884,  886,  146,
      269,  433,  887, 1014,  419,  882,  889,  890,  889,  422,
      891,  886,  269,  891,  419,  887,  892,  260,  892,  886,
      891,  269,  269,  887,  893,  256,  893,  894,  424,  894,
      886,  891,  253,   97,  887,  895,  421,  895,  897,  898,
      899, 1013,  891,   97,  900,  902,  903,  902,  904,  897,
     1011,  899,  887,  404,  244,  905,  907,  269, 1016,  910,
      908,  912,  913,  912,  914,  411,  379,  917,  915, 1013,

      413,  918,  919,  249,  919,  917,  921,  404, 1011,  918,
      923,  924,  923,  910,  583, 1016,  914,  925,   97,  584,
      915,  926,  408,  926,  914,  925,  413, 1005,  915, 1005,
      269,  584,  921,  927,  416,  927,  917,  925, 1128, 1007,
      918,  928,  581,  928,  929,  586,  929,  914,  925,  253,
     1006,  915,  930,  588,  930,  931,  745,  931,  264,  921,
      933,  271,  925,  271,  934, 1128, 1007,  936,  269,  936,
      937,  274,  937,  933,  938,  435,  938,  934, 1006,  253,
      178,  936,  939,  151,  939,  933,  276,  440,  941,  934,
      174,  269,  942,  944,  946,  947,  946,  948,  440,  253,

      129,  949,   97,  611,  944,  951,  952,  951,  610,  953,
      948, 1017,  953,  611,  949,  954,  444,  954,  948,  953,
       97,   99,  949,  955,  608,  955,  956,  613,  956,  948,
      953,  620,  620,  949,  957,  764,  957,  964,  964, 1017,
       97,  953,  878,  958,  139,  958,  879,  878,  878,  878,
      880,  878,  878,  878,  878,  878,  178,  175,  878,  878,
      878,  450,  450,  961,  961,  174, 1188,  962,  962,  966,
      967,  966,  968,  971,  972,  971,  969,  778,  779,  968,
      973,   97,  129,  969,  973,  878,  878,  878,  878,  974,
      624,  974,  968,  779, 1188, 1015,  969,   97, 1292,  973,

      975,  777,  975,  976,  781,  976,  968,  973,  786,  628,
      969,  978,  878,   97,  981,  979,  983,  984,  983,  985,
      786,   97, 1015,  986, 1025,  993,  981,  988,  989,  988,
      991,  990,  985, 1129,  990,   90,  986,  992,  790,  992,
      985,  139, 1008,  879,  986,   87,   68,  880,  139,  628,
      879,  978, 1025,   66,  880,  979,  139,  139,  879,  879,
     1129,   66,  880,  880,  139,  139,  879,  879,   97, 1008,
      880,  880, 1003,  139, 1003,  879,  994,   97,  995,  880,
      803,  805,  803,  805, 1012,   97,   35,  997,   97, 1009,
     1000, 1010,   97,   97,   97,  996, 1021,   97, 1004,   97,

      998,  999,  804,  994, 1018,  995,   97,  806,   97, 1019,
       97, 1026, 1012, 1020,  997, 1023, 1009,   97, 1000, 1010,
     1027, 1024,  996,   97, 1021, 1022, 1004,  998,  999, 1292,
      804, 1018,   97, 1036,   97,  806, 1019,   97, 1026,   97,
     1020,   97, 1028, 1023, 1030,   97, 1029, 1027, 1024,   97,
     1032,   97, 1022, 1031,   97,   97, 1033,   97, 1034, 1139,
     1036, 1035, 1037,   97,   97,   97,   97,   97, 1043, 1028,
     1039, 1038, 1030, 1029, 1189, 1220,   97, 1040, 1032, 1134,
     1031, 1045, 1041, 1033,   97, 1034, 1139, 1042,  220, 1035,
     1037, 1292, 1044, 1292,  864, 1046, 1043, 1039, 1038,  131,

      220,  861, 1189, 1220, 1040,  862,  864, 1134, 1045, 1041,
     1047, 1048, 1047,  868, 1042, 1292, 1292,  869,   97, 1044,
     1049, 1050, 1049, 1046,  371, 1133,  868,  873, 1221,  372,
      869,  866,  867,  866,  868,  873, 1292,  372,  869, 1051,
     1052, 1051,  868,  873,   97,   97,  869,  871,  872,  871,
     1053, 1054, 1053, 1133,  873, 1132, 1221,  873,  874,  224,
      874,  868,  875,  369,  875,  869, 1292, 1135, 1292,  873,
      876,  374,  876,  868,  877,  544,  877,  869,  139,  146,
      879,  873, 1292, 1132,  880,  882, 1055, 1056, 1055,  886,
      146,   97, 1292,  887, 1135,  419,  882, 1057, 1058, 1057,

      422,  891,  886, 1292,  891,  419,  887,  884,  885,  884,
      886,  891, 1154, 1194,  887, 1059, 1060, 1059,  886,  889,
      890,  889,  887, 1061, 1062, 1061,  891, 1292, 1292, 1292,
      891,  892,  260,  892,  886,  893,  256,  893,  887, 1154,
     1194, 1292,  891,  894,  424,  894,  886,  895,  421,  895,
      887,  897, 1292,  899,  891, 1064, 1076,  905,  897,  898,
      899, 1065,  891, 1292,  900, 1067, 1068, 1067, 1069, 1071,
     1292,  904, 1070, 1292, 1292,  887,  902,  903,  902,  904,
     1073, 1292, 1074,  887, 1292, 1292,  268, 1078, 1079, 1078,
     1080,  244,  404,  907, 1081, 1292, 1292,  908,  910, 1082,

     1083, 1082,  914,  404, 1292,   97,  915, 1292,  584,  910,
     1084, 1085, 1084,  583,  925,  914, 1145,  925,  413,  915,
      912,  913,  912,  914,  921, 1292, 1292,  915, 1086, 1087,
     1086,  914,  411, 1292,  917,  915, 1292,  413,  918, 1088,
     1089, 1088,  917,  921, 1145, 1292,  918,  919,  249,  919,
      917, 1090, 1091, 1090,  918,  584, 1292, 1292,  921, 1292,
       97,  925,  923,  924,  923, 1092, 1093, 1092, 1292,  925,
       97,  271,  925,  926,  408,  926,  914,  936,   97, 1137,
      915,  927,  416,  927,  917,  928,  581,  928,  918, 1149,
     1292, 1206,  925,  929,  586,  929,  914,  930,  588,  930,

      915,  931,  745,  931,  921,  264, 1137,  933,  925,   97,
      271,  934, 1094, 1095, 1094,  933,  936, 1149, 1206,  934,
     1096, 1097, 1096,  937,  274,  937,  933,  936, 1140, 1292,
      934,  938,  435,  938,  939,  151,  939,  933,  936,  440,
      276,  934,  941, 1292, 1292,  944,  942, 1098, 1099, 1098,
      948,  440,   97,   97,  949, 1140,  611,  944, 1100, 1101,
     1100,  610,  953,  948, 1292,  953,  611,  949,  946,  947,
      946,  948,  953, 1163, 1156,  949, 1102, 1103, 1102,  948,
      951,  952,  951,  949, 1104, 1105, 1104,  953, 1292, 1292,
     1292,  953,  954,  444,  954,  948,  955,  608,  955,  949,

     1163, 1156, 1225,  953,  956,  613,  956,  948,  957,  764,
      957,  949, 1292, 1241, 1292,  953,  878,  958,  139,  958,
      879,  878,  878,  878,  880,  878,  878,  878,  878,  878,
     1225, 1292,  878,  878,  878,  450,  450,  961,  961,  620,
     1241,  962,  962, 1292,  620,  964, 1106, 1107, 1106,  968,
      964, 1292,   97,  969, 1292, 1292, 1108, 1109, 1108,  878,
      878,  878,  878,  973,  778,   97,  968, 1141, 1136,  779,
      969,  966,  967,  966,  968,  973, 1292, 1292,  969,  779,
     1110, 1111, 1110,  968, 1292,  973,  878,  969,  971,  972,
      971, 1112, 1113, 1112, 1141,  973, 1136, 1292,  973,  974,

      624,  974,  968,  975,  777,  975,  969, 1292, 1292, 1292,
      973,  976,  781,  976,  968,  628,  786,  978,  969, 1292,
     1292,  979,  981, 1114, 1115, 1114,  985,  786, 1292, 1292,
      986, 1292,  993,  981, 1116, 1117, 1116,  991,  990,  985,
     1292,  990,  993,  986,  983,  984,  983,  985,  990, 1292,
     1292,  986, 1118, 1119, 1118,  985,  988,  989,  988,  986,
     1120, 1121, 1120,  990, 1003, 1292, 1003,  990,  992,  790,
      992,  985,  139,   97,  879,  986, 1138,  139,  880,  879,
      628, 1292,  978,  880, 1292,  139,  979,  879, 1292,   97,
     1004,  880,  139, 1122,  879,  139, 1142,  879,  880,   97,

      139,  880,  879, 1130, 1138, 1130,  880, 1005,   97, 1005,
     1292, 1123,   97, 1143,   97, 1144, 1126, 1147, 1004, 1124,
     1146, 1122,   97, 1125, 1142,   97, 1131,   97, 1127,   97,
     1006,   97, 1153, 1150, 1151,   97, 1148, 1152, 1123,   97,
     1143, 1155,   97, 1144, 1126, 1147, 1124, 1292, 1146, 1157,
     1125,   97,   97,   97, 1131, 1127, 1159, 1160, 1006, 1161,
     1153, 1150, 1151, 1148,   97, 1152,   97, 1158,   97, 1155,
       97, 1162, 1049, 1050, 1049, 1165, 1064, 1157,   97,  873,
     1292, 1198, 1065, 1159, 1164, 1160, 1166, 1161, 1047, 1048,
     1047,  868, 1292, 1292, 1158,  869, 1171, 1292, 1069, 1162,

     1292, 1292, 1070, 1165, 1173, 1051, 1052, 1051,  868, 1198,
     1174, 1164,  869, 1166, 1053, 1054, 1053, 1055, 1056, 1055,
      886,  873, 1292, 1292,  887, 1057, 1058, 1057, 1059, 1060,
     1059,  886,  891, 1292, 1292,  887, 1061, 1062, 1061, 1168,
     1169, 1168, 1292,  891,   97, 1178, 1170, 1067, 1068, 1067,
     1069,  432, 1292, 1292, 1070, 1175, 1176, 1175, 1069, 1073,
     1190, 1074, 1070,   97, 1073,  268, 1074, 1073, 1076, 1074,
      268, 1292, 1182,  268,  891, 1181, 1292, 1080, 1170,   97,
     1201, 1081, 1078, 1079, 1078, 1080, 1195, 1190, 1292, 1081,
     1183, 1184, 1183, 1080,   97, 1292,   97, 1081, 1082, 1083,

     1082,  914, 1084, 1085, 1084,  915, 1292, 1201, 1292,  925,
     1086, 1087, 1086,  914, 1195, 1209, 1193,  915, 1088, 1089,
     1088,  917, 1090, 1091, 1090,  918, 1092, 1093, 1092,  921,
     1292, 1292, 1292,  925, 1094, 1095, 1094,  933, 1096, 1097,
     1096,  934, 1209, 1193, 1292,  936, 1098, 1099, 1098,  948,
     1100, 1101, 1100,  949, 1292, 1292, 1292,  953, 1102, 1103,
     1102,  948, 1104, 1105, 1104,  949, 1292, 1292, 1292,  953,
     1106, 1107, 1106,  968, 1108, 1109, 1108,  969, 1292, 1292,
     1292,  973, 1110, 1111, 1110,  968, 1112, 1113, 1112,  969,
     1292, 1292, 1292,  973, 1114, 1115, 1114,  985, 1116, 1117,

     1116,  986, 1292, 1292,   97,  990, 1118, 1119, 1118,  985,
     1120, 1121, 1120,  986,  139, 1292,  879,  990, 1191,  139,
      880,  879,  628,   97,  978,  880, 1199,  139,  979,  879,
      628, 1185,  978,  880,   97,  628,  979,  978, 1130,   97,
     1130,  979,   97,   97, 1186, 1191, 1200, 1197,   97, 1192,
       97, 1202, 1292,   97, 1199,   97,   97, 1196, 1207, 1185,
     1292, 1131,   97, 1187,   97, 1204,   97, 1208, 1292, 1292,
     1292, 1210, 1186, 1211, 1200, 1197, 1192, 1203, 1205, 1202,
       97, 1292, 1182, 1292, 1196, 1173, 1207, 1212, 1170, 1131,
     1187, 1174, 1204,   97, 1178, 1208, 1168, 1169, 1168, 1210,

      432, 1211,   97, 1170, 1203, 1205, 1213, 1214, 1213, 1215,
     1216, 1215, 1292, 1170, 1222, 1212, 1174, 1175, 1176, 1175,
     1069, 1292, 1292, 1223, 1070, 1183, 1184, 1183, 1080,  139,
       97,  879, 1081,   97,  139,  880,  879,  139,   97,  879,
      880, 1222,   97,  880,   97,   97, 1226, 1224,   97,   97,
     1223,   97, 1227, 1228,   97,   97, 1233,   97, 1217,   97,
     1232,   97, 1242, 1231, 1245, 1218, 1229, 1292, 1235, 1230,
       97, 1219, 1236, 1226, 1224, 1248, 1234, 1238, 1292, 1227,
     1237, 1228,   97,   97, 1233, 1217, 1292, 1232, 1292, 1242,
     1231, 1245, 1218, 1229,   97, 1235, 1230, 1292, 1219, 1239,

     1236, 1243, 1248, 1234, 1244, 1238,   97, 1237, 1213, 1214,
     1213, 1215, 1216, 1215,  628, 1170,  978,  139, 1174,  879,
      979, 1292,  628,  880,  978,   97, 1239, 1246,  979, 1243,
       97, 1244, 1247,   97,   97,   97, 1250, 1249,   97,   97,
       97, 1251, 1252,   97,   97, 1253,  628, 1240,  978, 1256,
       97, 1255,  979,   97, 1246, 1254, 1261,   97,   97,   97,
     1247, 1268, 1269,   97, 1250, 1249, 1257, 1292, 1263, 1251,
     1252,   97, 1260, 1253, 1240, 1262, 1265, 1256, 1264, 1255,
     1266,   97, 1254, 1261, 1267,   97,   97, 1281, 1268, 1269,
       97, 1282,   97, 1257, 1270, 1277, 1263,   97, 1271, 1260,

     1292, 1272, 1262, 1265,   97,   97, 1264, 1266, 1292, 1273,
       97, 1267, 1292, 1278, 1281, 1274, 1290, 1279, 1282,   97,
       97, 1280, 1270, 1277, 1283, 1271, 1285, 1284, 1272, 1287,
     1291,   97, 1292, 1292, 1286, 1292, 1273, 1288, 1289, 1292,
     1278, 1292, 1292, 1274, 1290, 1279, 1292, 1292, 1280, 1292,
     1292, 1292, 1283, 1292, 1285, 1284, 1292, 1287, 1291, 1292,
     1292, 1286, 1292, 1292, 1288, 1292, 1289,   33,   33,   33,
       33,   33,   33,   36,   36,   36,   36,   36,   36,   51,
       51,   51,   51,   51,   51,   55,   55,   55,   55,   55,
       55,   59,   59,   59,   59,   59,   59,   65,   65,   65,

       65,   65,   65,   67,   67,   67,   67,   67,   67,   69,
       69,   69,   69,   69,   69,   78,   78,   78,   78,   78,
       78,   86,   86,   86,   86,   86,   86,   89,   89,   89,
       89,   89,   89,   96,   96,  100, 1292,  100,  100,  128,
      128,  128,  128,  128,  128,  130,  130,  130,  130,  130,
      130,  134,  134,  134,  134,  134,  134,  142,  142,  142,
      142,  142,  142,  145,  145,  145,  145,  145,  145,  138,
      138,  138,  138,  138,  138,  149,  149,  149,  149,  149,
      149,  179,  179,  179,  179, 1292,  179,   98, 1292,   98,
       99, 1292,   99,  213,  213,  213,  213,  213,  213,  216,

      216,  216,  216,  216,  216,  219,  219,  219,  219,  219,
      219,  222,  222,  222,  222,  222,  222,  227,  227,  227,
      227,  227,  227,  230,  230,  230,  230,  230,  230,  234,
      234,  234,  234,  234,  234,  238,  238,  238,  238,  238,
      238,  241,  241,  241,  241,  241,  241,  243,  243,  243,
      243,  243,  243,  247,  247,  247,  247,  247,  247,  252,
      252,  252,  252,  252,  252,  254,  254,  254,  254,  254,
      254,  258,  258,  258,  258,  258,  258,  263,  263,  263,
      263,  263,  263,  268,  268,  268,  268,  268,  268,  270,
      270,  270,  270,  270,  270,  275,  275,  275,  275,  275,

      275,  280,  280,  280,  280,  280,  280,  353,  353,  353,
      353,  353,  353,  356,  356,  356,  356,  356,  356,  358,
      358,  358,  358,  358,  358,  362,  362,  362,  362,  362,
      362,  367,  367,  367,  367,  367,  367,  375,  375,  375,
      375,  375,  375,  380,  380,  380,  380,  380,  380,  383,
      383,  383,  383,  383,  383,  385,  385,  385,  385,  385,
      385,  390,  390,  390,  390,  390,  390,  393,  393,  393,
      393,  393,  393,  396,  396,  396,  396,  396,  396,  400,
      400,  400,  400,  400,  400,  403,  403,  403,  403,  403,
      403,  406,  406,  406,  406,  406,  406,  412,  412,  412,

      412,  412,  412,  425,  425,  425,  425,  425,  425,  428,
      428,  428,  428,  428,  428,  432,  432,  432,  432,  432,
      432,  436,  436,  436,  436,  436,  436,  439,  439,  439,
      439,  439,  439,  442,  442,  442,  442,  442,  442,  448,
      448,  448,  448,  448,  448,  449,  449,  449,  449,  449,
      449,   96,   96,  528,  528,  528,  528,  528,  528,  531,
      531,  531,  531,  531,  531,  533,  533,  533,  533,  533,
      533,  537,  537,  537,  537,  537,  537,  362,  362,  362,
      362,  362,  362,  375,  375,  375,  375,  375,  375,  545,
      545,  545,  545,  545,  545,  548,  548,  548,  548,  548,

      548,  550,  550,  550,  550,  550,  550,  554,  554,  554,
      554,  554,  554,  559,  559,  559,  559,  559,  559,  562,
      562,  562,  562,  562,  562,  565,  565,  565,  565,  565,
      565,  569,  569,  569,  569,  569,  569,  571,  571,  571,
      571,  571,  571,  575,  575,  575,  575,  575,  575,  579,
      579,  579,  579,  579,  579,  589,  589,  589,  589,  589,
      589,  592,  592,  592,  592,  592,  592,  597,  597,  597,
      597,  597,  597,  600,  600,  600,  600,  600,  600,  602,
      602,  602,  602,  602,  602,  606,  606,  606,  606,  606,
      606,  615,  615,  615,  615,  615,  615,  616,  616,  616,

      616,  616,  616,  216,  216,  216,  216,  216,  216,  619,
      619,  619,  619,  619,  619,  622,  622,  622,  622,  622,
      622,  627,  627,  627,  627,  627,  627,   96,   96,  700,
      700,  700,  700,  700,  700,  703,  703,  703,  703,  703,
      703,  705,  705,  705,  705,  705,  705,  708,  708,  708,
      708,  708,  708,  712,  712,  712,  712,  712,  712,  715,
      715,  715,  715,  715,  715,  717,  717,  717,  717,  717,
      717,  720,  720,  720,  720,  720,  720,  727,  727,  727,
      727,  727,  727,  730,  730,  730,  730,  730,  730,  733,
      733,  733,  733,  733,  733,  735,  735,  735,  735,  735,

      735,  738,  738,  738,  738,  738,  738,  740,  740,  740,
      740,  740,  740,  746,  746,  746,  746,  746,  746,  748,
      748,  748,  748,  748,  748,  752,  752,  752,  752,  752,
      752,  755,  755,  755,  755,  755,  755,  757,  757,  757,
      757,  757,  757,  760,  760,  760,  760,  760,  760,  766,
      766,  766,  766,  766,  766,  767,  767,  767,  767,  767,
      767,  770,  770,  770,  770,  770,  770,  772,  772,  772,
      772,  772,  772,  252,  252,  252,  252,  252,  252,  775,
      775,  775,  775,  775,  775,  782,  782,  782,  782,  782,
      782,  216,  216,  216,  216,  216,  216,  785,  785,  785,

      785,  785,  785,  788,  788,  788,  788,  788,  788,  807,
      807,  807,  807,  807,   96,   96,  860,  860,  860,  860,
      860,  860,  863,  863,  863,  863,  863,  863,  865,  865,
      865,  865,  865,  865,  870,  870,  870,  870,  870,  870,
      878,  878,  878,  878,  878,  878,  881,  881,  881,  881,
      881,  881,  883,  883,  883,  883,  883,  883,  888,  888,
      888,  888,  888,  888,  896,  896,  896,  896,  896,  896,
      901,  901,  901,  901,  901,  901,  906,  906,  906,  906,
      906,  906,  909,  909,  909,  909,  909,  909,  911,  911,
      911,  911,  911,  911,  916,  916,  916,  916,  916,  916,

      920,  920,  920,  920,  920,  920,  922,  922,  922,  922,
      922,  922,  932,  932,  932,  932,  932,  932,  935,  935,
      935,  935,  935,  935,  940,  940,  940,  940,  940,  940,
      943,  943,  943,  943,  943,  943,  945,  945,  945,  945,
      945,  945,  950,  950,  950,  950,  950,  950,  959,  959,
      959,  959,  959,  959,  960,  960,  960,  960,  960,  960,
      963,  963,  963,  963,  963,  963,  965,  965,  965,  965,
      965,  965,  970,  970,  970,  970,  970,  970,  268,  268,
      268,  268,  268,  268,  977,  977,  977,  977,  977,  977,
      980,  980,  980,  980,  980,  980,  982,  982,  982,  982,

      982,  982,  252,  252,  252,  252,  252,  252,  987,  987,
      987,  987,  987,  987,  878,  878,  878,  878,  878,  878,
       96,   96,  860,  860,  860,  860,  860,  860,  863,  863,
      863,  863,  863,  863,  865,  865,  865,  865,  865,  865,
      870,  870,  870,  870,  870,  870,  881,  881,  881,  881,
      881,  881,  883,  883,  883,  883,  883,  883,  888,  888,
      888,  888,  888,  888,  896,  896,  896,  896,  896,  896,
      216,  216,  216,  216,  216,  216, 1063, 1063, 1063, 1063,
     1063, 1063, 1066, 1066, 1066, 1066, 1066, 1066,  901,  901,
      901,  901,  901,  901, 1072, 1072, 1072, 1072, 1072, 1072,

     1075, 1075, 1075, 1075, 1075, 1075, 1077, 1077, 1077, 1077,
     1077, 1077,  906,  906,  906,  906,  906,  906,  909,  909,
      909,  909,  909,  909,  911,  911,  911,  911,  911,  911,
      922,  922,  922,  922,  922,  922,  916,  916,  916,  916,
      916,  916,  920,  920,  920,  920,  920,  920,  932,  932,
      932,  932,  932,  932,  935,  935,  935,  935,  935,  935,
      940,  940,  940,  940,  940,  940,  943,  943,  943,  943,
      943,  943,  945,  945,  945,  945,  945,  945,  950,  950,
      950,  950,  950,  950,  959,  959,  959,  959,  959,  959,
      960,  960,  960,  960,  960,  960,  963,  963,  963,  963,

      963,  963,  965,  965,  965,  965,  965,  965,  970,  970,
      970,  970,  970,  970,  977,  977,  977,  977,  977,  977,
      980,  980,  980,  980,  980,  980,  982,  982,  982,  982,
      982,  982,  987,  987,  987,  987,  987,  987,  878,  878,
      878,  878,  878,  878,   96,   96,  865,  865,  865,  865,
      865,  865,  870,  870,  870,  870,  870,  870,  883,  883,
      883,  883,  883,  883,  888,  888,  888,  888,  888,  888,
     1063, 1063, 1063, 1063, 1063, 1063,  252,  252,  252,  252,
      252,  252, 1167, 1167, 1167, 1167, 1167, 1167, 1066, 1066,
     1066, 1066, 1066, 1066, 1172, 1172, 1172, 1172, 1172, 1172,

     1072, 1072, 1072, 1072, 1072, 1072, 1177, 1177, 1177, 1177,
     1177, 1177, 1075, 1075, 1075, 1075, 1075, 1075, 1179, 1179,
     1292, 1179, 1179, 1179, 1077, 1077, 1077, 1077, 1077, 1077,
      911,  911,  911,  911,  911,  911,  922,  922,  922,  922,
      922,  922,  916,  916,  916,  916,  916,  916,  920,  920,
      920,  920,  920,  920,  932,  932,  932,  932,  932,  932,
      935,  935,  935,  935,  935,  935,  945,  945,  945,  945,
      945,  945,  950,  950,  950,  950,  950,  950,  965,  965,
      965,  965,  965,  965,  970,  970,  970,  970,  970,  970,
      982,  982,  982,  982,  982,  982,  987,  987,  987,  987,

      987,  987,  878,  878,  878,  878,  878,  878,  977,  977,
      977,  977,  977,  977,   96,   96,   27, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292
    } ;

static yyconst flex_int16_t yy_chk[5689] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    7,
        9,    8,   10, 1289,   11,   12,    7,    7,    8,    8,
       30,   11,   12,   21,   21,   21,   21,   32,   32,   11,
       12,   30,   30,    1,    1,    1,    1,   95,   95,   13,
       14,   26,   26,   26,   26, 1284,   13,   14,   36,   36,
     1279,    9,    9,   10,   10,   11,   12,  230,   36,  230,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       13,   14,   24,   15,   24,   15,   15,   15,   47,   38,

       15,   24,   69,   15,   69,   47,   72,   79,   69,   79,
       79,   24,   72,   38,    2,    2,    2,    2, 1278, 1272,
       70,   16,   70,   16,   16,   16,   70,  299,   16,  299,
       73,   16,   73,   47,   15,   91,   73,   91,   91,   24,
       38,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,   15,   16,   22,   22,   22,   22,   22,   76,  105,
       76,   50,  105,   22,   76,   74,   74,   74,   74, 1269,
       22,   50,   74,   22,   76,    3,    3,    3,    3,   16,
       40,   94,   41,   44,  100,  100,  178,  178,  178,  130,

      105,  130,   94,   94,  100,  130,   41,   40,   41,   50,
       44,   22,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,   37,   41,   40,   41,   37,   44,   42,  132,
      131,  136, 1268,   48,  131,  132,   45,  136,   46,   81,
       48,   81,   37,   43, 1264,   42,    4,    4,    4,    4,
       42,   43,  135,   45,   37,   48,  135,   46,   43,   43,
       46,   82,   81,   82,   82,   82, 1262,  106,   48,   37,
      106,  103,   42,    4,    5,  122, 1253,   42,   82,   43,
       45,   84,   48,   84,   46,   43,   43,   46,  103,  122,

       81,    5,    5,    5,    5,    5,    5,  101,  106,    5,
     1252,  139,    5,    5,   84,  139,    5,    5,    5,    5,
      216,  102,    5, 1251,  216,  103,  122,  101, 1250,    5,
        5,    5,    5,    5,    5, 1249, 1246,    5,   49,    5,
        5,  102,   84,    5,    5,    5,    5,  104,   49,    5,
       20,   20,   20,   20,  101,   49,   20,  113,   83,   20,
       83,  115,   20,   20,   49, 1244,   20,  104,  102,   20,
       20,  123,  107,  113,  116,  123,   49,  112,  108,  115,
       83, 1242,   49,  165,   83,  110,  124,  107,  107,  108,
      119,   49,  110,  124,  104,  116,  112,   20,   20,   39,

      113,  117,   39,  123, 1241,  110,  115,  119,   83,   39,
      117,  165,   83,   39,  107,  107,   39,  108,   39,  118,
      110,  124,  116,  112, 1232,  118,  133,  133,  133,  133,
       39,  244,  110,  133,  119,  244,  121,   39,  117,  121,
       39,  121,  533,   39,  533,   39,   71,   71,   71,   71,
       71,   71,   71,  118,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  111,  120,  121,  127,  121,
      126,  111,  134,  291,  134,  127, 1231,  141,  134,  137,
      137,  137,  137,  141, 1223,  120,  111,  111,  126,   71,
       71,   71,  138, 1212,  138,  142,  145,  142,  138,  111,

      291,  142,  145,  127,  143,  143,  143,  143,  171,  173,
     1211,  143,  120,  111,  111,  126,   71,   75,   75,   75,
       75,   75,   75,   75,  180,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,  171,  173,  152,  109,
      147,  147,  147,  109,  152,  180,  293,  147,  109,  148,
      148,  148,  148,  149,  276,  149,  148,  214,  276,  149,
       75,   75,   75,  214,  186,  109,  183,  109,  150,  150,
      150,  150,  180,  183,  293,  150,  109,  153,  153,  153,
      153, 1210,  186,  162,  153,  162,  162,   75,   77,   77,
       77,   77,  109,  189,  109,   77,  154,  157,  154,  157,

     1204,  183,  154,  157,  202,  161,   77,  161,  170,  186,
      170,  161,  189,   77,  157,  202,  176,   77,  176,  176,
       77,  189,   77,  166,  161,  166,  166,  166,  295,   77,
      163,  182,  163, 1192,   77,  170,  182,  170, 1184,  189,
      166,   77,  157,  202,   77,  217, 1181,   77,  156,   77,
      156,  217,  161,  163,  156,  295,   77,  140,  140,  140,
      140,  140,  140,  140,  182,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  156,  158,  175,  158,
      175,  163,  156,  158,  191,  192,  194,  198,  191, 1180,
      198,  175,  175,  194,  158,  192,  164,  172,  164,  172,

      140,  140,  140,  156,  185,  187,  219, 1179,  158,  156,
      193,  213,  219,  213, 1178, 1176,  191,  213,  198,  164,
      172,  194,  158,  192,  185,  193,  187,  140,  144,  144,
      144,  144,  144,  144,  144,  158,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  164,  172,  184,
      181,  185,  193,  187,  218,  218,  218,  218,  199, 1171,
      160,  181,  160,  199, 1165,  184,  160,  181,  184, 1162,
      190,  144,  144,  144, 1161,  188,  215,  215,  215,  215,
      222, 1157,  222,  215,  450,  160,  222,  190,  450,  181,
      201,  199,  184, 1154,  181,  184,  188,  201,  144,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  160,  190,  155,  155,  155,  159,  197,
      159,  196,  628,  188,  159,  201,  628,  167,  169,  167,
      169,  225,  206,  174,  197,  174,  200,  225,  159,  307,
      196,  203,  155,  155,  155,  155,  206,  159,  159,  167,
      169,  227,  307,  167,  169,  174, 1151,  227,  200,  174,
      651,  197,  207,  203,  210,  205,  159,  196, 1148,  155,
      212,  651,  205,  206,  159,  159, 1144,  167,  169,  307,
      210,  167,  169,  174,  207,  200, 1143,  174,  195,  212,
      203,  195,  195,  195,  195,  195,  195,  208,  209,  195,

      205, 1137,  315,  195,  208,  204,  195,  210,  195,  195,
      204,  207,  195,  209,  204,  314,  212,  209,  211,  195,
      195,  195,  195,  195,  195,  211,  314,  195,  235,  315,
      195,  241,  208,  195,  235,  195,  195,  241,  204,  195,
      209, 1134,  204,  316,  209,  221,  221,  221,  223,  223,
      223,  223,  221,  211,  314,  223,  226,  226,  226,  226,
      229,  229,  229,  226,  231,  231,  231,  231,  234,  301,
      234,  316, 1133,  245,  234,  236,  236,  236,  236,  245,
      301,  301,  236,  237,  237,  237,  237,  237,  237,  237,
     1119,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  238,  304,  238,  253,  253,  253,  238,  239,
      239,  239,  239,  242,  242,  242,  239,  243,  250,  243,
      242,  897,  304,  243,  250,  897,  237,  237,  237,  246,
      246,  246,  246,  247,  487,  247,  246, 1115,  254,  247,
      248,  248,  248,  248,  254,  261,  258,  248,  258,  304,
     1111,  261,  258,  237,  240,  240,  240,  240,  240,  240,
      240,  487,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  251,  251,  251,  251,  255,  255,  255,
      251,  257,  257,  257,  255, 1107, 1103,  265,  257,  259,
      259,  259,  259,  265,  312, 1099,  259,  240,  240,  240,

      262,  262,  262,  262,  263, 1095,  263,  262,  312,  270,
      263,  266,  266,  266,  266,  270, 1089,  277,  266,  267,
      267,  267,  267,  277,  240,  318,  267,  272,  272,  272,
      273,  273,  273,  273,  272,  312,  275,  273,  275,  318,
     1087,  308,  275,  278,  278,  278,  278,  308, 1083, 1079,
      278,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  305,  318,  279,  279,  279,
      280,  281,  280,  281,  305,  308,  280,  281,  283,  282,
      283,  282, 1076, 1068,  283,  282,  284,  286,  284,  286,
     1064, 1060,  284,  286,  279,  279,  279,  279,  310,  281,

      282,  310,  305,  285,  287,  285,  287, 1056,  283,  285,
      287,  288,  286,  288,  292, 1052,  289,  288,  289,  306,
      284,  279,  289,  292,  306,  290,  281,  290,  282,  310,
     1048,  290,  296,  287,  296,  283,  287,  285,  354,  297,
      286,  297,  292,  298,  354,  298,  288,  284,  309,  311,
      292,  289,  306,  290,  296,  317, 1036,  309,  296,  313,
      287,  319,  313,  287,  285,  550,  298,  550,  297,  311,
      297,  317,  319,  288,  300,  323,  300,  320,  289,  322,
      290,  321,  296,  324,  320,  309,  296,  300,  300,  323,
      313,  325,  321,  326,  298,  297,  311,  297,  317,  322,

      319,  327,  324,  328,  329,  321,  330,  332,  325,  326,
      336,  328,  320,  348,  332,  334,  323,  341,  327,  328,
      321,  329,  337,  327,  336,  330,  322,  331,  333,  324,
      348,  341,  321,  332,  331,  325,  326,  338,  333,  328,
      342,  334,  332,  337,  339,  327,  328,  342,  329,  331,
      327,  336,  330,  339,  340,  343,  338,  348,  341,  340,
      332,  346,  331,  339,  347,  349,  333,  356,  334,  347,
      337,  351,  500,  356,  343,  342,  331,  352,  351,  360,
      346,  339,  349,  338,  352,  360,  353,  340,  353,  351,
      339,  500,  353,  355,  355,  355,  355,  347, 1035, 1015,

      355,  343,  362,  357,  357,  357,  665,  346,  362,  349,
      357, 1014,  352,  358,  470,  358,  470,  351,  500,  358,
      359,  359,  359,  359,  364,  364,  364,  359,  361,  361,
      361,  361,  991,  665,  367,  361,  365,  365,  365,  365,
      367,  368,  368,  368,  370,  370,  370,  984,  368,  470,
      967,  370,  373,  373,  373,  373,  376,  376,  376,  373,
      380,  381,  380,  417,  417,  417,  380,  381,  382,  382,
      382,  382,  383,  947,  464,  382,  470,  387,  383,  384,
      384,  384,  385,  387,  385,  913,  384,  394,  385,  386,
      386,  386,  386,  394,  885,  398,  386,  388,  388,  388,

      388,  398,  464,  867,  388,  389,  389,  389,  389,  389,
      389,  389,  465,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  390,  466,  390,  467,  468,  854,
      390,  391,  391,  391,  391,  393,  400,  393,  391,  849,
      465,  393,  400,  847,  395,  395,  395,  395,  389,  389,
      389,  395,  396,  466,  396,  467,  468,  403,  396,  397,
      397,  397,  397,  403,  844,  409,  397,  399,  399,  399,
      399,  409,  843,  488,  399,  389,  392,  392,  392,  392,
      392,  392,  392,  833,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  401,  401,  401,  402,  402,

      402,  488,  401,  827,  412,  402,  405,  405,  405,  406,
      412,  406,  425,  405,  425,  406,  819,  818,  425,  392,
      392,  392,  407,  407,  407,  407,  474,  790,  474,  407,
      410,  410,  410,  410,  414,  414,  414,  410,  786,  474,
      474,  414,  415,  415,  415,  415,  392,  781,  778,  415,
      420,  420,  420,  423,  423,  423,  423,  420,  426,  475,
      423,  495,  699,  428,  426,  427,  427,  427,  427,  428,
      475,  475,  427,  429,  429,  429,  430,  430,  430,  430,
      429,  495,  688,  430,  431,  431,  431,  431,  434,  434,
      434,  431,  436,  437,  436,  434,  494,  686,  436,  437,

      438,  438,  438,  438,  439,  670,  494,  438,  495,  445,
      439,  441,  441,  441,  442,  445,  442,  477,  441,  451,
      442,  443,  443,  443,  443,  451,  653,  625,  443,  446,
      446,  446,  446,  477,  494,  624,  446,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  620,  496,  447,  447,  447,  448,  449,  448,  449,
      477,  641,  448,  449,  452,  452,  452,  452,  453,  496,
      453,  452,  482,  454,  453,  454,  471,  482,  471,  454,
      447,  447,  447,  447,  456,  455,  456,  455,  613,  641,
      456,  455,  457,  458,  457,  458,  496,  471,  457,  458,

      459,  472,  459,  472,  610,  482,  459,  447,  455,  460,
      461,  460,  461,  457,  479,  460,  461,  462,  456,  462,
      479,  606,  458,  462,  472,  471,  463,  461,  463,  486,
      476,  459,  463,  476,  486,  461,  455,  460,  469,  478,
      469,  457,  462,  491,  480,  456,  481,  463,  479,  458,
      478,  480,  472,  481,  483,  461,  604,  491,  459,  592,
      483,  476,  486,  461,  460,  483,  484,  469,  503,  469,
      462,  485,  489,  484,  492,  463,  490,  489,  478,  480,
      497,  481,  485,  490,  491,  499,  501,  493,  483,  503,
      492,  497,  504,  483,  469,  493,  469,  505,  504,  506,

      507,  484,  501,  509,  507,  489,  508,  499,  510,  508,
      485,  490,  522,  506,  505,  510,  503,  492,  514,  497,
      513,  509,  512,  493,  517,  514,  504,  517,  590,  501,
      516,  513,  507,  522,  499,  515,  512,  508,  516,  518,
      506,  505,  515,  510,  519,  521,  518,  524,  509,  520,
      519,  523,  520,  514,  586,  517,  526,  523,  583,  513,
      522,  529,  528,  512,  528,  521,  516,  529,  528,  524,
      515,  531,  579,  545,  518,  545,  526,  531,  519,  545,
      520,  530,  530,  530,  530,  523,  532,  532,  532,  538,
      538,  538,  521,  539,  539,  539,  524,  534,  534,  534,

      534,  575,  573,  526,  536,  536,  536,  536,  540,  540,
      540,  540,  541,  541,  541,  543,  543,  543,  546,  547,
      547,  547,  547,  548,  546,  549,  549,  549,  644,  548,
      551,  551,  551,  551,  553,  553,  553,  553,  555,  555,
      555,  556,  556,  556,  557,  557,  557,  557,  558,  558,
      558,  559,  563,  559,  558,  567,  644,  559,  563,  554,
      558,  558,  560,  560,  560,  560,  561,  561,  561,  562,
      552,  562,  561,  537,  565,  562,  565,  535,  561,  561,
      564,  564,  564,  564,  566,  566,  566,  566,  568,  568,
      568,  568,  569,  570,  570,  570,  527,  571,  569,  571,

      572,  572,  572,  572,  574,  574,  574,  574,  576,  576,
      576,  577,  577,  577,  577,  578,  578,  578,  580,  580,
      580,  582,  582,  582,  585,  585,  585,  585,  587,  587,
      587,  589,  511,  589,  591,  591,  591,  591,  593,  593,
      593,  594,  594,  594,  594,  595,  595,  595,  596,  596,
      596,  596,  597,  598,  597,  601,  601,  601,  597,  598,
      599,  599,  599,  599,  600,  602,  622,  602,  622,  502,
      600,  603,  603,  603,  603,  605,  605,  605,  605,  607,
      607,  607,  609,  609,  609,  612,  612,  612,  612,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  645,  498,  614,  614,  614,  615,  616,
      615,  616,  617,  654,  615,  616,  654,  619,  617,  618,
      618,  618,  618,  619,  621,  621,  621,  623,  623,  623,
      623,  645,  614,  614,  614,  614,  626,  626,  626,  626,
      627,  629,  627,  648,  654,  648,  627,  629,  630,  630,
      630,  630,  631,  444,  631,  632,  440,  632,  631,  614,
      633,  632,  633,  634,  648,  634,  633,  432,  635,  634,
      635,  424,  422,  631,  635,  636,  646,  636,  646,  416,
      637,  636,  637,  638,  634,  638,  637,  656,  639,  638,
      639,  640,  648,  640,  639,  656,  636,  640,  635,  652,

      647,  631,  647,  664,  652,  637,  638,  639,  650,  657,
      650,  646,  634,  638,  666,  649,  655,  649,  658,  655,
      659,  650,  647,  656,  636,  635,  660,  659,  661,  662,
      657,  664,  652,  637,  638,  639,  666,  669,  646,  658,
      638,  649,  411,  674,  667,  662,  660,  655,  663,  667,
      647,  663,  668,  661,  672,  659,  408,  657,  669,  668,
      671,  404,  667,  666,  674,  378,  658,  671,  675,  649,
      673,  672,  662,  660,  679,  673,  701,  667,  676,  663,
      661,  676,  701,  675,  808,  669,  808,  668,  677,  667,
      678,  674,  682,  677,  681,  671,  679,  678,  672,  680,

      683,  681,  687,  673,  680,  684,  693,  682,  680,  676,
      675,  682,  684,  691,  685,  683,  689,  690,  375,  687,
      690,  677,  694,  679,  698,  678,  800,  691,  693,  681,
      695,  692,  680,  685,  682,  689,  680,  694,  682,  692,
      684,  695,  683,  697,  703,  698,  687,  696,  690,  692,
      703,  692,  696,  800,  691,  693,  809,  700,  809,  700,
      685,  374,  689,  700,  694,  697,  371,  692,  696,  695,
      366,  705,  698,  705,  363,  350,  692,  705,  692,  707,
      696,  702,  702,  702,  702,  707,  820,  708,  702,  704,
      704,  704,  697,  708,  802,  696,  704,  706,  706,  706,

      706,  709,  709,  709,  706,  345,  820,  344,  709,  710,
      710,  710,  710,  711,  711,  711,  710,  712,  713,  712,
      711,  802,  335,  712,  713,  714,  714,  714,  714,  715,
      274,  269,  714,  820,  719,  715,  716,  716,  716,  717,
      719,  717,  268,  716,  720,  717,  718,  718,  718,  718,
      720,  264,  260,  718,  721,  721,  721,  722,  722,  722,
      722,  721,  252,  817,  722,  723,  723,  723,  724,  724,
      724,  817,  723,  815,  724,  725,  725,  725,  725,  726,
      815,  726,  725,  728,  727,  726,  727,  249,  822,  728,
      727,  729,  729,  729,  729,  730,  233,  730,  729,  817,

      732,  730,  731,  731,  731,  731,  732,  733,  815,  731,
      734,  734,  734,  733,  735,  822,  735,  734,  811,  737,
      735,  736,  736,  736,  736,  737,  738,  806,  736,  806,
      232,  740,  738,  739,  739,  739,  739,  740, 1001,  811,
      739,  741,  741,  741,  742,  742,  742,  742,  741,  228,
      806,  742,  743,  743,  743,  744,  744,  744,  746,  743,
      746,  747,  744,  748,  746, 1001,  811,  747,  224,  748,
      749,  749,  749,  749,  750,  750,  750,  749,  806,  220,
      177,  750,  751,  751,  751,  751,  752,  753,  752,  751,
      168,  151,  752,  753,  754,  754,  754,  754,  755,  146,

      128,  754,  125,  759,  755,  756,  756,  756,  757,  759,
      757,  823,  756,  760,  757,  758,  758,  758,  758,  760,
      114,   98,  758,  761,  761,  761,  762,  762,  762,  762,
      761,  768,  770,  762,  763,  763,  763,  768,  770,  823,
       96,  763,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,   92,   88,  765,  765,
      765,  766,  767,  766,  767,   85, 1128,  766,  767,  769,
      769,  769,  769,  771,  771,  771,  769,  772,  774,  772,
      771,  821,   67,  772,  774,  765,  765,  765,  765,  773,
      773,  773,  773,  775, 1128,  821,  773,   33,   27,  775,

      776,  776,  776,  780,  780,  780,  780,  776,  783,  782,
      780,  782,  765,  832,  783,  782,  784,  784,  784,  784,
      785,  812,  821,  784,  832,  791,  785,  787,  787,  787,
      788,  791,  788, 1002,  787,   25,  788,  789,  789,  789,
      789,  792,  812,  792,  789,   23,   19,  792,  793,  794,
      793,  794,  832,   18,  793,  794,  795,  796,  795,  796,
     1002,   17,  795,  796,  797,  798,  797,  798,  813,  812,
      797,  798,  804,  799,  804,  799,  792,  816,  793,  799,
      803,  805,  803,  805,  816,  824,    6,  796,  814,  813,
      799,  814,  825,  828,  826,  795,  828,  834,  804,  835,

      797,  798,  803,  792,  824,  793,  829,  805,  831,  825,
      830,  834,  816,  826,  796,  830,  813,  846,  799,  814,
      835,  831,  795,  836,  828,  829,  804,  797,  798,    0,
      803,  824,  837,  846,  839,  805,  825,  838,  834,  841,
      826,  842,  836,  830,  838,  840,  837,  835,  831,  850,
      840,  851,  829,  839,  845,  852,  841,  848,  842, 1016,
      846,  845,  848,  853,  855,  856,  857,  858,  856,  836,
      851,  850,  838,  837, 1129, 1188, 1009,  852,  840, 1009,
      839,  858,  853,  841,  859,  842, 1016,  855,  861,  845,
      848,    0,  857,    0,  861,  859,  856,  851,  850,  860,

      863,  860, 1129, 1188,  852,  860,  863, 1009,  858,  853,
      862,  862,  862,  862,  855,    0,    0,  862, 1008,  857,
      864,  864,  864,  859,  865, 1008,  865,  864, 1189,  868,
      865,  866,  866,  866,  866,  868,    0,  870,  866,  869,
      869,  869,  869,  870, 1007, 1010,  869,  871,  871,  871,
      873,  873,  873, 1008,  871, 1007, 1189,  873,  874,  874,
      874,  874,  875,  875,  875,  874,    0, 1010,    0,  875,
      876,  876,  876,  876,  877,  877,  877,  876,  878,  879,
      878,  877,    0, 1007,  878,  879,  880,  880,  880,  880,
      881, 1032,    0,  880, 1010,  886,  881,  882,  882,  882,

      883,  886,  883,    0,  882,  888,  883,  884,  884,  884,
      884,  888, 1032, 1139,  884,  887,  887,  887,  887,  889,
      889,  889,  887,  891,  891,  891,  889,    0,    0,    0,
      891,  892,  892,  892,  892,  893,  893,  893,  892, 1032,
     1139,    0,  893,  894,  894,  894,  894,  895,  895,  895,
      894,  896,    0,  896,  895,  899,  904,  896,  898,  898,
      898,  899,  904,    0,  898,  900,  900,  900,  900,  901,
        0,  901,  900,    0,    0,  901,  902,  902,  902,  902,
      903,    0,  903,  902,    0,    0,  903,  905,  905,  905,
      905,  906,  907,  906,  905,    0,    0,  906,  907,  908,

      908,  908,  908,  909,    0, 1023,  908,    0,  914,  909,
      910,  910,  910,  911,  914,  911, 1023,  910,  917,  911,
      912,  912,  912,  912,  917,    0,    0,  912,  915,  915,
      915,  915,  916,    0,  916,  915,    0,  920,  916,  918,
      918,  918,  918,  920, 1023,    0,  918,  919,  919,  919,
      919,  921,  921,  921,  919,  922,    0,    0,  921,    0,
     1012,  922,  923,  923,  923,  925,  925,  925,    0,  923,
     1156,  933,  925,  926,  926,  926,  926,  933, 1027, 1012,
      926,  927,  927,  927,  927,  928,  928,  928,  927, 1027,
        0, 1156,  928,  929,  929,  929,  929,  930,  930,  930,

      929,  931,  931,  931,  930,  932, 1012,  932,  931, 1018,
      935,  932,  934,  934,  934,  934,  935, 1027, 1156,  934,
      936,  936,  936,  937,  937,  937,  937,  936, 1018,    0,
      937,  938,  938,  938,  939,  939,  939,  939,  938,  941,
      940,  939,  940,    0,    0,  941,  940,  942,  942,  942,
      942,  943, 1034, 1043,  942, 1018,  948,  943,  944,  944,
      944,  945,  948,  945,    0,  944,  950,  945,  946,  946,
      946,  946,  950, 1043, 1034,  946,  949,  949,  949,  949,
      951,  951,  951,  949,  953,  953,  953,  951,    0,    0,
        0,  953,  954,  954,  954,  954,  955,  955,  955,  954,

     1043, 1034, 1194,  955,  956,  956,  956,  956,  957,  957,
      957,  956,    0, 1220,    0,  957,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
     1194,    0,  958,  958,  958,  959,  960,  959,  960,  961,
     1220,  959,  960,    0,  963,  961,  962,  962,  962,  962,
      963,    0, 1019,  962,    0,    0,  964,  964,  964,  958,
      958,  958,  958,  964,  965, 1011,  965, 1019, 1011,  968,
      965,  966,  966,  966,  966,  968,    0,    0,  966,  970,
      969,  969,  969,  969,    0,  970,  958,  969,  971,  971,
      971,  973,  973,  973, 1019,  971, 1011,    0,  973,  974,

      974,  974,  974,  975,  975,  975,  974,    0,    0,    0,
      975,  976,  976,  976,  976,  977,  978,  977,  976,    0,
        0,  977,  978,  979,  979,  979,  979,  980,    0,    0,
      979,    0,  985,  980,  981,  981,  981,  982,  985,  982,
        0,  981,  987,  982,  983,  983,  983,  983,  987,    0,
        0,  983,  986,  986,  986,  986,  988,  988,  988,  986,
      990,  990,  990,  988, 1003,    0, 1003,  990,  992,  992,
      992,  992,  994, 1013,  994,  992, 1013,  995,  994,  995,
      996,    0,  996,  995,    0,  997,  996,  997,    0, 1020,
     1003,  997,  998,  994,  998,  999, 1020,  999,  998, 1021,

     1000,  999, 1000, 1004, 1013, 1004, 1000, 1005, 1022, 1005,
        0,  995, 1025, 1021, 1024, 1022,  999, 1025, 1003,  997,
     1024,  994, 1026,  998, 1020, 1028, 1004, 1029, 1000, 1031,
     1005, 1030, 1031, 1028, 1029, 1033, 1026, 1030,  995, 1039,
     1021, 1033, 1037, 1022,  999, 1025,  997,    0, 1024, 1037,
      998, 1038, 1041, 1040, 1004, 1000, 1039, 1040, 1005, 1041,
     1031, 1028, 1029, 1026, 1042, 1030, 1044, 1038, 1045, 1033,
     1046, 1042, 1049, 1049, 1049, 1045, 1063, 1037, 1145, 1049,
        0, 1145, 1063, 1039, 1044, 1040, 1046, 1041, 1047, 1047,
     1047, 1047,    0,    0, 1038, 1047, 1066,    0, 1066, 1042,

        0,    0, 1066, 1045, 1069, 1051, 1051, 1051, 1051, 1145,
     1069, 1044, 1051, 1046, 1053, 1053, 1053, 1055, 1055, 1055,
     1055, 1053,    0,    0, 1055, 1057, 1057, 1057, 1059, 1059,
     1059, 1059, 1057,    0,    0, 1059, 1061, 1061, 1061, 1065,
     1065, 1065,    0, 1061, 1132, 1074, 1065, 1067, 1067, 1067,
     1067, 1074,    0,    0, 1067, 1070, 1070, 1070, 1070, 1071,
     1132, 1071, 1070, 1149, 1072, 1071, 1072, 1073, 1075, 1073,
     1072,    0, 1080, 1073, 1075, 1077,    0, 1077, 1080, 1140,
     1149, 1077, 1078, 1078, 1078, 1078, 1140, 1132,    0, 1078,
     1081, 1081, 1081, 1081, 1138,    0, 1160, 1081, 1082, 1082,

     1082, 1082, 1084, 1084, 1084, 1082,    0, 1149,    0, 1084,
     1086, 1086, 1086, 1086, 1140, 1160, 1138, 1086, 1088, 1088,
     1088, 1088, 1090, 1090, 1090, 1088, 1092, 1092, 1092, 1090,
        0,    0,    0, 1092, 1094, 1094, 1094, 1094, 1096, 1096,
     1096, 1094, 1160, 1138,    0, 1096, 1098, 1098, 1098, 1098,
     1100, 1100, 1100, 1098,    0,    0,    0, 1100, 1102, 1102,
     1102, 1102, 1104, 1104, 1104, 1102,    0,    0,    0, 1104,
     1106, 1106, 1106, 1106, 1108, 1108, 1108, 1106,    0,    0,
        0, 1108, 1110, 1110, 1110, 1110, 1112, 1112, 1112, 1110,
        0,    0,    0, 1112, 1114, 1114, 1114, 1114, 1116, 1116,

     1116, 1114,    0,    0, 1135, 1116, 1118, 1118, 1118, 1118,
     1120, 1120, 1120, 1118, 1122,    0, 1122, 1120, 1135, 1123,
     1122, 1123, 1124, 1146, 1124, 1123, 1146, 1125, 1124, 1125,
     1126, 1122, 1126, 1125, 1136, 1127, 1126, 1127, 1130, 1141,
     1130, 1127, 1142, 1147, 1123, 1135, 1147, 1142, 1150, 1136,
     1153, 1150,    0, 1158, 1146, 1152, 1155, 1141, 1158, 1122,
        0, 1130, 1159, 1125, 1163, 1153, 1164, 1159,    0,    0,
        0, 1163, 1123, 1164, 1147, 1142, 1136, 1152, 1155, 1150,
     1166,    0, 1167,    0, 1141, 1172, 1158, 1166, 1167, 1130,
     1125, 1172, 1153, 1190, 1177, 1159, 1168, 1168, 1168, 1163,

     1177, 1164, 1191, 1168, 1152, 1155, 1170, 1170, 1170, 1174,
     1174, 1174,    0, 1170, 1190, 1166, 1174, 1175, 1175, 1175,
     1175,    0,    0, 1191, 1175, 1183, 1183, 1183, 1183, 1185,
     1195, 1185, 1183, 1193, 1186, 1185, 1186, 1187, 1196, 1187,
     1186, 1190, 1197, 1187, 1201, 1198, 1195, 1193, 1199, 1200,
     1191, 1202, 1196, 1197, 1205, 1228, 1202, 1203, 1185, 1207,
     1201, 1206, 1221, 1200, 1225, 1186, 1198,    0, 1205, 1199,
     1208, 1187, 1206, 1195, 1193, 1228, 1203, 1208,    0, 1196,
     1207, 1197, 1209, 1224, 1202, 1185,    0, 1201,    0, 1221,
     1200, 1225, 1186, 1198, 1222, 1205, 1199,    0, 1187, 1209,

     1206, 1222, 1228, 1203, 1224, 1208, 1226, 1207, 1213, 1213,
     1213, 1215, 1215, 1215, 1217, 1213, 1217, 1218, 1215, 1218,
     1217,    0, 1219, 1218, 1219, 1227, 1209, 1226, 1219, 1222,
     1229, 1224, 1227, 1230, 1233, 1234, 1230, 1229, 1235, 1236,
     1237, 1233, 1234, 1238, 1239, 1235, 1240, 1218, 1240, 1238,
     1247, 1237, 1240, 1243, 1226, 1236, 1245, 1248, 1256, 1255,
     1227, 1258, 1259, 1257, 1230, 1229, 1239,    0, 1248, 1233,
     1234, 1254, 1243, 1235, 1218, 1247, 1255, 1238, 1254, 1237,
     1256, 1263, 1236, 1245, 1257, 1265, 1260, 1275, 1258, 1259,
     1266, 1276, 1270, 1239, 1260, 1270, 1248, 1271, 1263, 1243,

        0, 1265, 1247, 1255, 1267, 1274, 1254, 1256,    0, 1266,
     1273, 1257,    0, 1271, 1275, 1267, 1285, 1273, 1276, 1277,
     1280, 1274, 1260, 1270, 1277, 1263, 1281, 1280, 1265, 1282,
     1287, 1283,    0,    0, 1281,    0, 1266, 1282, 1283,    0,
     1271,    0,    0, 1267, 1285, 1273,    0,    0, 1274,    0,
        0,    0, 1277,    0, 1281, 1280,    0, 1282, 1287,    0,
        0, 1281,    0,    0, 1282,    0, 1283, 1293, 1293, 1293,
     1293, 1293, 1293, 1294, 1294, 1294, 1294, 1294, 1294, 1295,
     1295, 1295, 1295, 1295, 1295, 1296, 1296, 1296, 1296, 1296,
     1296, 1297, 1297, 1297, 1297, 1297, 1297, 1298, 1298, 1298,

     1298, 1298, 1298, 1299, 1299, 1299, 1299, 1299, 1299, 1300,
     1300, 1300, 1300, 1300, 1300, 1301, 1301, 1301, 1301, 1301,
     1301, 1302, 1302, 1302, 1302, 1302, 1302, 1303, 1303, 1303,
     1303, 1303, 1303, 1304, 1304, 1305,    0, 1305, 1305, 1306,
     1306, 1306, 1306, 1306, 1306, 1307, 1307, 1307, 1307, 1307,
     1307, 1308, 1308, 1308, 1308, 1308, 1308, 1309, 1309, 1309,
     1309, 1309, 1309, 1310, 1310, 1310, 1310, 1310, 1310, 1311,
     1311, 1311, 1311, 1311, 1311, 1312, 1312, 1312, 1312, 1312,
     1312, 1313, 1313, 1313, 1313,    0, 1313, 1314,    0, 1314,
     1315,    0, 1315, 1316, 1316, 1316, 1316, 1316, 1316, 1317,

     1317, 1317, 1317, 1317, 1317, 1318, 1318, 1318, 1318, 1318,
     1318, 1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320, 1320,
     1320, 1320, 1320, 1321, 1321, 1321, 1321, 1321, 1321, 1322,
     1322, 1322, 1322, 1322, 1322, 1323, 1323, 1323, 1323, 1323,
     1323, 1324, 1324, 1324, 1324, 1324, 1324, 1325, 1325, 1325,
     1325, 1325, 1325, 1326, 1326, 1326, 1326, 1326, 1326, 1327,
     1327, 1327, 1327, 1327, 1327, 1328, 1328, 1328, 1328, 1328,
     1328, 1329, 1329, 1329, 1329, 1329, 1329, 1330, 1330, 1330,
     1330, 1330, 1330, 1331, 1331, 1331, 1331, 1331, 1331, 1332,
     1332, 1332, 1332, 1332, 1332, 1333, 1333, 1333, 1333, 1333,

     1333, 1334, 1334, 1334, 1334, 1334, 1334, 1335, 1335, 1335,
     1335, 1335, 1335, 1336, 1336, 1336, 1336, 1336, 1336, 1337,
     1337, 1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338, 1338,
     1338, 1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340, 1340,
     1340, 1340, 1340, 1341, 1341, 1341, 1341, 1341, 1341, 1342,
     1342, 1342, 1342, 1342, 1342, 1343, 1343, 1343, 1343, 1343,
     1343, 1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345, 1345,
     1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346, 1346, 1347,
     1347, 1347, 1347, 1347, 1347, 1348, 1348, 1348, 1348, 1348,
     1348, 1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350, 1350,

     1350, 1350, 1350, 1351, 1351, 1351, 1351, 1351, 1351, 1352,
     1352, 1352, 1352, 1352, 1352, 1353, 1353, 1353, 1353, 1353,
     1353, 1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355,
     1355, 1355, 1355, 1356, 1356, 1356, 1356, 1356, 1356, 1357,
     1357, 1357, 1357, 1357, 1357, 1358, 1358, 1358, 1358, 1358,
     1358, 1359, 1359, 1360, 1360, 1360, 1360, 1360, 1360, 1361,
     1361, 1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362, 1362,
     1362, 1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364, 1364,
     1364, 1364, 1364, 1365, 1365, 1365, 1365, 1365, 1365, 1366,
     1366, 1366, 1366, 1366, 1366, 1367, 1367, 1367, 1367, 1367,

     1367, 1368, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369,
     1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370, 1371,
     1371, 1371, 1371, 1371, 1371, 1372, 1372, 1372, 1372, 1372,
     1372, 1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374, 1374,
     1374, 1374, 1374, 1375, 1375, 1375, 1375, 1375, 1375, 1376,
     1376, 1376, 1376, 1376, 1376, 1377, 1377, 1377, 1377, 1377,
     1377, 1378, 1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379,
     1379, 1379, 1379, 1380, 1380, 1380, 1380, 1380, 1380, 1381,
     1381, 1381, 1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382,
     1382, 1383, 1383, 1383, 1383, 1383, 1383, 1384, 1384, 1384,

     1384, 1384, 1384, 1385, 1385, 1385, 1385, 1385, 1385, 1386,
     1386, 1386, 1386, 1386, 1386, 1387, 1387, 1387, 1387, 1387,
     1387, 1388, 1388, 1388, 1388, 1388, 1388, 1389, 1389, 1390,
     1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391, 1391, 1391,
     1391, 1392, 1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393,
     1393, 1393, 1393, 1394, 1394, 1394, 1394, 1394, 1394, 1395,
     1395, 1395, 1395, 1395, 1395, 1396, 1396, 1396, 1396, 1396,
     1396, 1397, 1397, 1397, 1397, 1397, 1397, 1398, 1398, 1398,
     1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399, 1400,
     1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401, 1401, 1401,

     1401, 1402, 1402, 1402, 1402, 1402, 1402, 1403, 1403, 1403,
     1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404, 1405,
     1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406, 1406, 1406,
     1406, 1407, 1407, 1407, 1407, 1407, 1407, 1408, 1408, 1408,
     1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1409, 1410,
     1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411, 1411,
     1411, 1412, 1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413,
     1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414, 1414, 1415,
     1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416, 1416, 1416,
     1416, 1417, 1417, 1417, 1417, 1417, 1417, 1418, 1418, 1418,

     1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419, 1419, 1420,
     1420, 1420, 1420, 1420, 1421, 1421, 1422, 1422, 1422, 1422,
     1422, 1422, 1423, 1423, 1423, 1423, 1423, 1423, 1424, 1424,
     1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425, 1425,
     1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427, 1427, 1427,
     1427, 1427, 1428, 1428, 1428, 1428, 1428, 1428, 1429, 1429,
     1429, 1429, 1429, 1429, 1430, 1430, 1430, 1430, 1430, 1430,
     1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432, 1432, 1432,
     1432, 1432, 1433, 1433, 1433, 1433, 1433, 1433, 1434, 1434,
     1434, 1434, 1434, 1434, 1435, 1435, 1435, 1435, 1435, 1435,

     1436, 1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437, 1437,
     1437, 1437, 1438, 1438, 1438, 1438, 1438, 1438, 1439, 1439,
     1439, 1439, 1439, 1439, 1440, 1440, 1440, 1440, 1440, 1440,
     1441, 1441, 1441, 1441, 1441, 1441, 1442, 1442, 1442, 1442,
     1442, 1442, 1443, 1443, 1443, 1443, 1443, 1443, 1444, 1444,
     1444, 1444, 1444, 1444, 1445, 1445, 1445, 1445, 1445, 1445,
     1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447, 1447,
     1447, 1447, 1448, 1448, 1448, 1448, 1448, 1448, 1449, 1449,
     1449, 1449, 1449, 1449, 1450, 1450, 1450, 1450, 1450, 1450,
     1451, 1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452,

     1452, 1452, 1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454,
     1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455, 1455,
     1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457, 1458, 1458,
     1458, 1458, 1458, 1458, 1459, 1459, 1459, 1459, 1459, 1459,
     1460, 1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461,
     1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1463, 1463,
     1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464, 1464,
     1465, 1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466, 1466,
     1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1468, 1468,
     1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469, 1469,

     1470, 1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471,
     1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472, 1473, 1473,
     1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474, 1474,
     1475, 1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476, 1476,
     1476, 1476, 1477, 1477, 1477, 1477, 1477, 1477, 1478, 1478,
     1478, 1478, 1478, 1478, 1479, 1479, 1479, 1479, 1479, 1479,
     1480, 1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481, 1481,
     1481, 1481, 1482, 1482, 1482, 1482, 1482, 1482, 1483, 1483,
     1483, 1483, 1483, 1483, 1484, 1484, 1484, 1484, 1484, 1484,
     1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486,

     1486, 1486, 1487, 1487, 1487, 1487, 1487, 1487, 1488, 1488,
     1488, 1488, 1488, 1488, 1489, 1489, 1489, 1489, 1489, 1489,
     1490, 1490, 1490, 1490, 1490, 1490, 1491, 1491, 1491, 1491,
     1491, 1491, 1492, 1492, 1492, 1492, 1492, 1492, 1493, 1493,
     1493, 1493, 1493, 1493, 1494, 1494, 1495, 1495, 1495, 1495,
     1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496, 1497, 1497,
     1497, 1497, 1497, 1497, 1498, 1498, 1498, 1498, 1498, 1498,
     1499, 1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500, 1500,
     1500, 1500, 1501, 1501, 1501, 1501, 1501, 1501, 1502, 1502,
     1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503, 1503,

     1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505,
     1505, 1505, 1506, 1506, 1506, 1506, 1506, 1506, 1507, 1507,
        0, 1507, 1507, 1507, 1508, 1508, 1508, 1508, 1508, 1508,
     1509, 1509, 1509, 1509, 1509, 1509, 1510, 1510, 1510, 1510,
     1510, 1510, 1511, 1511, 1511, 1511, 1511, 1511, 1512, 1512,
     1512, 1512, 1512, 1512, 1513, 1513, 1513, 1513, 1513, 1513,
     1514, 1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515,
     1515, 1515, 1516, 1516, 1516, 1516, 1516, 1516, 1517, 1517,
     1517, 1517, 1517, 1517, 1518, 1518, 1518, 1518, 1518, 1518,
     1519, 1519, 1519, 1519, 1519, 1519, 1520, 1520, 1520, 1520,

     1520, 1520, 1521, 1521, 1521, 1521, 1521, 1521, 1522, 1522,
     1522, 1522, 1522, 1522, 1523, 1523, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;




//  following are keywords starting with c
#line 2220 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10
#define state_scanompfixed 11
#define state_scanompfree 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 31 "lexer.l"


#line 2456 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1293 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5617 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 33 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 52 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 53 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 58 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 79 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 87 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 102 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 103 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 106 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 118 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 122 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 123 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENDTEAM"):Y);            return ENDTEAM;           }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 90:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 107:
#line 223 "lexer.l"
case 108:
/* rule 108 can match eol */
#line 224 "lexer.l"
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 224 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 227 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 228 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 112:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 231 "lexer.l"
case 113:
YY_RULE_SETUP
#line 232 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 235 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 236 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 116:
YY_RULE_SETUP
#line 239 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 242 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 245 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 248 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 251 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 256 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 261 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 264 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 267 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 270 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 273 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 277 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 280 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 283 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 286 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 289 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 293 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 294 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 134:
YY_RULE_SETUP
#line 297 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 321 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 327 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 333 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 340 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 347 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 349 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 350 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 352 "lexer.l"
ECHO;
	YY_BREAK
#line 3400 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_scanfixpre):
case YY_STATE_EOF(state_scanompfixed):
case YY_STATE_EOF(state_scanompfree):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1293 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1293 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1292);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 352 "lexer.l"



void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


