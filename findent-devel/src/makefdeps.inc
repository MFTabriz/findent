  std::cout << "#!/bin/bash" << std::endl;
  std::cout << "# - makefdeps -" << std::endl;
  std::cout << "# Creates make-dependencies for fortran sources, based on" << std::endl;
  std::cout << "# analysis by findent of (sub)modules that are needed or created and" << std::endl;
  std::cout << "# include files. Include files are not further analyzed." << std::endl;
  std::cout << "# Dependencies will be like:" << std::endl;
  std::cout << "# prog.o: sub1.o sub2.o" << std::endl;
  std::cout << "# prog.o: file1.inc file2.inc" << std::endl;
  std::cout << "# Example:" << std::endl;
  std::cout << "# makefdeps *.f90 > deps" << std::endl;
  std::cout << "usage()" << std::endl;
  std::cout << "{" << std::endl;
  std::cout << "   echo \"usage:\"" << std::endl;
  std::cout << "   echo \"$0 [-s objectsuffix] fortansources ...\"" << std::endl;
  std::cout << "   echo \"objectsuffix: default '.o'\"" << std::endl;
  std::cout << "   echo \"depending on your make system, '.lo' can be the correct one\"" << std::endl;
  std::cout << "   exit 1" << std::endl;
  std::cout << "}" << std::endl;
  std::cout << "FINDENTPROG=${FINDENT:-findent}" << std::endl;
  std::cout << "p=$( getopt -o s: -- \"$@\" ) || usage" << std::endl;
  std::cout << "eval set -- \"$p\"" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "O='.o'" << std::endl;
  std::cout << "while [ \"$1\" != \"--\" ]; do" << std::endl;
  std::cout << "   case \"$1\" in" << std::endl;
  std::cout << "      '-s') shift; O=\"$1\" ;;" << std::endl;
  std::cout << "   esac" << std::endl;
  std::cout << "   shift" << std::endl;
  std::cout << "done" << std::endl;
  std::cout << "shift" << std::endl;
  std::cout << "" << std::endl;
  std::cout << "declare -A module use include" << std::endl;
  std::cout << "for i in $@ ; do" << std::endl;
  std::cout << "   j=${i%.*}$O" << std::endl;
  std::cout << "   while read a b ; do" << std::endl;
  std::cout << "      case $a in" << std::endl;
  std::cout << "	 use)" << std::endl;
  std::cout << "	    use[$j]=\"${use[$j]} $b\" ;;" << std::endl;
  std::cout << "	 mod|sub)" << std::endl;
  std::cout << "	    [ \"$b\" ] && module[$b]=$j ;;" << std::endl;
  std::cout << "	 inc|cpp|coc|std)" << std::endl;
  std::cout << "	    include[$j]=\"${include[$j]} $b\" ;;" << std::endl;
  std::cout << "      esac" << std::endl;
  std::cout << "   done < <( $FINDENTPROG --deps < $i )" << std::endl;
  std::cout << "done" << std::endl;
  std::cout << "for k in ${!use[@]}; do" << std::endl;
  std::cout << "   m=\"\"" << std::endl;
  std::cout << "   for l in ${use[$k]}; do" << std::endl;
  std::cout << "      m=\"$m ${module[$l]}\"" << std::endl;
  std::cout << "   done" << std::endl;
  std::cout << "   if [ -n \"${m// }\" ] ; then" << std::endl;
  std::cout << "      echo $k: $m" << std::endl;
  std::cout << "   fi" << std::endl;
  std::cout << "done" << std::endl;
  std::cout << "for k in ${!include[@]}; do" << std::endl;
  std::cout << "   echo $k: ${include[$k]}" << std::endl;
  std::cout << "done" << std::endl;
