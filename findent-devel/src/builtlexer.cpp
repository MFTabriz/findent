#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 117
#define YY_END_OF_BUFFER 118
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1192] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  118,  116,  115,  116,  112,  111,  116,  113,
      114,   16,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,    4,    5,    2,    3,
        8,    9,    6,    7,   15,   14,   10,   12,   11,   13,
        1,  117,  117,  104,  117,  104,  117,  117,  117,  117,
      117,  117,  117,  108,  108,  107,  108,  108,  109,    0,
      111,    0,    0,   16,   17,   16,    0,    0,    0,    0,
        0,    0,    0,    0,   32,    0,    0,    0,    0,   67,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       85,    0,    0,    0,  104,    0,   92,    0,    0,    0,
       92,    0,    0,    0,  104,    0,    0,    0,    0,    0,
        0,   94,    0,    0,    0,    0,   92,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  110,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   33,    0,    0,    0,    0,    0,   49,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   92,    0,    0,    0,   92,    0,    0,

        0,   92,    0,    0,    0,   92,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   93,    0,    0,
        0,    0,   96,    0,    0,    0,    0,    0,    0,   94,
        0,    0,    0,   96,    0,    0,    0,   92,    0,    0,
        0,    0,    0,    0,   92,    0,    0,   92,    0,   91,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   64,    0,    0,    0,    0,

        0,    0,    0,    0,   78,   79,    0,    0,    0,    0,
       86,   87,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   94,    0,    0,   98,    0,    0,   92,
        0,   92,   92,    0,   92,    0,    0,   92,   92,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   93,    0,    0,    0,   93,    0,
        0,   99,    0,   94,    0,    0,   96,    0,   98,   94,
        0,   94,  104,    0,   96,    0,    0,    0,    0,    0,
        0,    0,    0,   94,    0,   92,    0,    0,    0,    0,

       91,    0,    0,    0,   91,    0,    0,    0,    0,    0,
      102,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   21,    0,
        0,   27,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   48,    0,    0,    0,
       53,    0,    0,    0,    0,    0,    0,    0,   63,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   88,    0,   90,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   94,
        0,   92,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   93,    0,
       93,   93,    0,   93,    0,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   91,    0,   91,   91,    0,
       91,    0,    0,    0,    0,    0,    0,   94,    0,    0,
        0,   96,    0,    0,    0,  101,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       20,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   65,    0,   68,    0,    0,    0,   72,    0,    0,
        0,    0,    0,    0,   89,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   91,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   94,  102,   94,    0,   96,    0,    0,    0,
        0,   94,    0,    0,    0,   96,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   28,   29,    0,    0,    0,    0,    0,    0,
        0,   36,    0,    0,    0,    0,    0,   50,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   61,    0,    0,
       69,    0,   71,    0,    0,    0,    0,   77,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       92,    0,    0,    0,    0,   92,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   98,    0,
        0,    0,    0,   94,    0,    0,    0,    0,    0,    0,
      103,    0,    0,    0,    0,    0,   95,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   93,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       91,    0,    0,    0,    0,   91,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       98,    0,    0,    0,    0,   94,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
        0,    0,   94,    0,  101,    0,   94,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   30,   31,    0,   37,    0,    0,    0,    0,    0,
        0,   45,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   62,   66,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,    0,   92,    0,   92,
        0,   92,    0,   97,    0,   94,    0,   97,    0,   94,
        0,   94,    0,    0,    0,   97,    0,    0,   95,    0,
       95,    0,    0,   94,    0,    0,   97,    0,    0,    0,

       93,    0,   93,    0,   93,    0,   97,    0,   94,    0,
       93,    0,   92,    0,   92,    0,   91,    0,   91,    0,
       91,    0,   91,    0,   97,    0,   94,    0,   97,    0,
       94,    0,   97,    0,   94,    0,   97,    0,   94,    0,
        0,    0,    0,    0,    0,    0,    0,   19,   22,    0,
       25,    0,    0,    0,    0,    0,   40,   43,    0,    0,
        0,   51,    0,    0,   55,    0,    0,   58,    0,    0,
       70,    0,    0,    0,   76,   80,    0,    0,   83,    0,
        0,    0,   94,    0,  100,    0,   94,    0,    0,   97,
        0,   94,    0,   95,  103,   94,    0,   97,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,   81,   82,   84,    0,   94,    0,   94,    0,    0,
        0,    0,    0,   23,    0,    0,    0,    0,    0,    0,
        0,   47,   52,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   26,    0,   34,    0,    0,   44,
       46,   54,   56,   60,    0,    0,    0,    0,  105,  106,
        0,   35,   38,    0,   59,    0,    0,    0,    0,    0,
       75,    0,    0,    0,   39,   73,    0,    0,   74,   18,
        0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,    1,    1,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
       16,    1,   17,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       27,   34,   35,   36,   37,   38,   39,   40,   41,   27,
       42,    1,   43,    1,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   27,   54,   55,   56,   57,
       58,   59,   27,   60,   61,   62,   63,   64,   65,   66,
       67,   27,    1,   68,    1,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    4,    5,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_uint16_t yy_base[1416] =
    {   0,
        0,   68,  136,  204,  270, 2466,   15,   17,   16,   18,
       20,   21,   44,   45,   86,  113, 2457, 2448, 2446,  333,
       30,  154, 2448, 5006, 5006,   25, 5006, 2426, 2424, 5006,
     5006,   38,  207,   35,  367,   73,  168,  212,  146,  102,
      209,  217,   80,  213,  319,   42, 5006, 5006, 5006, 5006,
     5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006,
     5006, 5006, 2426, 5006,   95,   98,  427,  105,  159,  182,
      495,  228,  562, 5006,   36, 5006,  232,  236, 5006,   52,
     2414, 2412,    0, 2409,    0,  117,  246,  249,  237,  250,
      155,  242,  318,  248,  350,  306,  347,  264,  312, 2400,

      307,  342,   82,  150,  344,  357,  403,  391,  148,  430,
     2384,  331,  432, 2395, 5006,  402,  104,  112,  453,  456,
      183,  186,  469,  473,  234,  629,  299,  480,  511,  697,
      349, 2378,  484,  519,  522,  530, 2374,  370,  538,  541,
      765,  549,  550,  567,  574,  644,   47,  646,  655,  203,
      666,  335, 5006,  554,  504,  388,  445,  469,  558,  559,
      566,  590,  695,  434,  541,  399,  636,  639,  819,  622,
      664,  530,  640,  658,  668,  438,  716,  703,  707,  570,
      720,  710,  728,  662,  715,  729,  671,  391,  743,  604,
      603,  788,  672, 2369,  792,  746,  795, 2371,  802,  810,

      807, 2348,  310,  472,  818, 2340, 2333,  821,  822,  883,
      892,  841,  908,  960,  826,  912,  848,  653,  853,  920,
      868,  928, 2315,  867,  936, 2303,  682,  880,  940, 5006,
      944,  947,  976, 2306,  917,  984,  987, 2286,  948,  995,
     1003, 2277, 2268,  992, 5006, 1007, 1015, 2255, 1018,  658,
     1022, 1030, 1039, 1054, 1055, 1063, 1062, 1070, 1083, 1071,
     1084, 1093, 1108,  240,  730, 1080,  812, 1079,  846, 1085,
     1100,  771,  788, 1104, 1000,  770,  438, 1046,  939, 1106,
     1113, 1126, 1055, 1007, 1109, 1076, 1123, 1110, 1133, 1129,
     1124, 1145, 1135,  903, 1136, 2244, 1142, 1138, 1151, 1171,

     1173, 1160, 1177, 1183, 2209, 2197, 1189, 1181, 1192, 1195,
     2187, 1199, 1191, 1227, 1169, 1242, 1209, 1252, 1230, 1255,
     1239, 1263, 1260, 2174,  980, 1271, 2158, 1268, 1276, 5006,
     1279, 2111, 5006, 1287, 2095, 2088, 1291, 5006, 2056, 5006,
     1294, 1295, 1303, 1306, 1314, 1316, 1324, 1311, 1332, 1341,
     1356, 1364, 1409, 1367, 1321, 1376, 1383, 1391, 1329, 1399,
     1368, 1425, 1428, 1388, 2043, 1436, 1438, 1451, 2027, 1396,
     1459, 2026, 1433, 5006, 1463, 1471, 2010, 1298, 5006, 5006,
     1479, 5006, 2008, 1482, 1996, 1441, 1486, 1494, 1491, 1502,
     1505, 1513, 1995, 5006, 1517, 5006, 1520, 1521, 1529, 1532,

     1951, 1540, 1542, 1550, 1870, 1537, 1558, 1567, 1582, 1583,
      719, 1547, 1591, 1594, 1599, 1609, 1610, 1617, 1618, 1625,
     1634, 1637, 1646, 1263, 1265, 1345, 1402, 1475, 1610, 1623,
     1586, 1641, 1626, 1638, 1646, 1318, 1336, 1654, 1656, 1667,
     1533, 1566, 1487, 1642, 1666, 1673, 1859, 1669, 1668, 1677,
     1844, 1650, 1689, 1682, 1692, 1696, 1685, 1694, 1843, 1698,
     1704, 1714, 1716, 1702, 1705, 1724, 1720, 1730, 1734, 1718,
     1740, 1741, 5006, 1736, 1807, 1755, 1763, 1779, 1767, 1467,
      546, 1787, 1800, 1796, 1790, 1783, 1803, 1806, 1810, 5006,
     1813, 5006, 1815, 1793, 1823, 1820, 1828,  733, 1831, 1771,

     1835, 1759, 1839, 1842, 1845, 1848, 1851, 1861, 1864, 1867,
     1852, 1877, 1216, 1881, 1756, 1885, 1868, 1889, 1602, 1892,
     1682, 1896, 1633, 1900, 1903, 1907, 1626, 1910, 5006, 1913,
     1612, 5006, 1916, 1561, 1920, 5006, 1774, 1562, 1923, 1555,
     1927, 1930, 1934, 1937, 1940, 1941, 1949, 1952, 1944, 1816,
     1954, 1554, 1960, 1534, 1964, 5006, 1967, 1531, 5006, 1970,
     1522, 1975, 1990, 1991, 1994, 2002, 1999, 1504, 2007, 2009,
     2018, 1488, 1489, 2022, 2025, 1229, 2026, 2034, 2037, 2042,
     2045, 2050, 2053, 2060, 2061, 2068, 2069, 1745, 1967, 2029,
     1464, 2042, 2064, 2018, 2065, 2068, 2069, 2074, 2080, 2078,

     2077, 1569, 2083, 2088, 2084, 2090, 1463, 2107, 2104, 2119,
     2095, 2113, 2123, 2129, 2110, 2127, 2130, 2133, 2145, 2136,
     2138, 1443, 2146, 1442, 2150, 2152, 2158, 2173, 2156, 2159,
     2165, 2180, 2177, 2171, 1434, 2217, 2200, 2226, 2208, 2234,
     2236, 2244, 2241, 2248, 2252, 2260, 2264, 2267, 2249, 2275,
     2272, 2283, 2285, 2293, 2280, 2290, 2301, 2304, 2312, 2314,
     2322, 2325, 2330, 2329, 2338, 2341, 2349, 2346, 2353, 2357,
     2360, 2368, 2365, 2372, 2380, 2377, 2388, 2391, 2399, 2402,
     5006, 2404, 2407, 2409, 2417, 2421, 2429, 2432, 2433, 2441,
     2444, 2452, 2454, 2462, 2449, 2459, 2470, 2473, 2481, 5006,

     2490, 2505, 2506, 2477, 2514, 2478, 2518, 2521, 2533, 2522,
     2536, 2544, 5006, 1443, 5006, 2547, 1430, 2552, 2551, 2560,
     2563, 1398, 2571, 2573, 2581, 1401, 2568, 2584, 2589, 2592,
     2597, 2600, 2605, 2608, 2168, 2243, 2286, 2352, 2576, 2525,
     2601, 2314, 1383, 1372, 2564, 2552, 2559, 2172, 2605, 2589,
     2609, 1367, 2612, 2614, 2620, 2616, 2619, 1359, 2604, 2637,
     2621, 2631, 2634, 2646, 2651, 2647, 2660, 1349, 2662, 2663,
     1325, 2667, 1324, 2670, 2661, 2673, 2674, 1316, 2675, 2678,
     2676, 2686, 2701, 2719, 2694, 2742, 2716, 2728, 2747, 2755,
     1317, 2726, 2763, 2739, 2767, 5006, 2771, 2779, 2783, 2791,

     2795, 2798, 2746, 2806, 2803, 2814, 2816, 2824, 1305, 2811,
     2832, 2821, 2836, 5006, 2840, 2848, 2852, 2860, 2864, 2867,
     1232, 2874, 2871, 2882, 2885, 2893, 2896, 2872, 2904, 2907,
     2908, 2916, 2919, 2927, 2929, 2937, 1282, 2924, 2945, 2948,
     2934, 2956, 2964, 2953, 2968, 2971, 2979, 5006, 2982, 2990,
     2998, 3002, 3010, 3014, 3018, 3021, 2987, 3029, 3026, 3037,
     3040, 3048, 3051, 3056, 3055, 3064, 3067, 3075, 3077, 3085,
     1265, 3072, 3093, 3082, 3097, 5006, 3101, 3109, 3113, 3121,
     3125, 3134, 3149, 3150, 3153, 3161, 3158, 3170, 3166, 3178,
     1257, 3181, 3189, 3186, 3197, 5006, 3201, 3209, 3213, 3221,

     3224, 3225, 3233, 3236, 3244, 3246, 3254, 1224, 3241, 3262,
     3251, 3266, 5006, 3270, 1211, 3278, 5006, 3281, 3286, 3289,
     3294, 3297, 3302, 2664, 2676, 2972, 2930, 2787, 3056, 2929,
     3270, 1166, 1155, 2719, 5006, 3262, 3077, 3286, 3289, 3298,
     3021, 3306, 3294, 3308, 3302, 3310, 3317, 3319, 3330, 3047,
     3328, 3314, 1063, 1054, 3343, 3338, 3278, 3353, 3349, 3358,
     3217, 2856, 3359, 3347, 3380, 1033, 3384, 5006, 3407, 1032,
     3411, 5006, 3419, 1025, 3423, 5006, 3431, 1024, 3435, 5006,
     3387, 1005, 3439, 3397, 3447, 1008, 3388, 3455, 3458, 3463,
     3466, 3444, 3467,  988, 3474, 3482,  954, 3471, 3490, 3498,

      953, 3502, 5006, 3510,  931, 3518,  922, 3522, 5006, 3526,
     5006, 3534,  914, 3538, 5006, 3546,  886, 3550, 5006, 3558,
      885, 3562, 5006, 3570,  877, 3574, 5006, 3582,  874, 3586,
     5006, 3594,  855, 3598, 5006, 3606,  854, 3610, 5006, 3613,
     3618, 3621, 3626, 3629, 2518, 2739, 3388,  833,  832, 3503,
      803, 3519, 2788, 3440, 2867, 3605,  770,  726, 3463, 3618,
     3622,  718, 3458, 3626,  711, 3531, 3613,  650, 3627, 3632,
      606, 3630, 3631, 3638,  599,  596, 3495, 3633,  586, 3634,
     3479, 3671, 5006, 3683,  584, 3651, 5006, 3693, 3701,  581,
     3656,  558,  523,  515,  512, 5006, 3709,  475, 3712, 3717,

     2737, 2805, 3673, 3692, 3664, 2988, 3685, 3708, 3655, 3709,
     3710, 3712, 3716, 3642, 3714,  453, 3721, 3734, 3715, 3717,
     3723,  411,  401,  383, 3755, 5006, 3780, 5006, 3783, 3788,
     3091, 3120, 3746,  378, 3754, 3281, 3760, 3779, 3344, 3783,
     3784,  341,  279, 3785, 3788, 3789, 3793, 3791, 3764, 3794,
     3810,  268,  263, 3805,  251, 3294,  243, 3803, 3810,  215,
      178,  175,  167,  160, 3811, 3815, 3808, 3806, 5006, 5006,
     3812, 5006,  157, 3826,  120, 3833, 3836, 3840, 3831, 3841,
      115, 3837, 3846, 3859,  112,  107, 3860, 3863,   50,    7,
     5006, 3912, 3917, 3922, 3927, 3932, 3937, 3942, 3947, 3952,

     3954, 3958, 3963, 3968, 3973, 3978, 3983, 3988, 3993, 3998,
     4001, 4004, 4008, 4013, 4018, 4023, 4028, 4033, 4038, 4043,
     4048, 4053, 4058, 4063, 4068, 4073, 4078, 4083, 4088, 4093,
     4098, 4103, 4108, 4113, 4118, 4123, 4128, 4133, 4138, 4143,
     4148, 4153, 4158, 4163, 4168, 4173, 4178, 4183, 4188, 4193,
     4198, 4203, 4208, 4213, 4218, 4220, 4225, 4230, 4235, 4240,
     4245, 4250, 4255, 4260, 4265, 4270, 4275, 4280, 4285, 4290,
     4295, 4300, 4305, 4310, 4315, 4320, 4325, 4330, 4335, 4340,
     4345, 4350, 4355, 4360, 4362, 4367, 4372, 4377, 4382, 4387,
     4392, 4397, 4402, 4407, 4412, 4417, 4422, 4427, 4432, 4437,

     4442, 4447, 4452, 4457, 4462, 4467, 4472, 4477, 4482, 4487,
     4492, 4497, 4502, 4507, 4512, 4514, 4519, 4524, 4529, 4534,
     4539, 4544, 4549, 4554, 4559, 4564, 4569, 4574, 4579, 4584,
     4589, 4594, 4599, 4604, 4609, 4614, 4619, 4624, 4629, 4634,
     4639, 4644, 4649, 4654, 4659, 4664, 4669, 4674, 4679, 4681,
     4686, 4691, 4696, 4701, 4706, 4711, 4716, 4721, 4726, 4731,
     4736, 4741, 4746, 4751, 4756, 4761, 4766, 4771, 4776, 4781,
     4786, 4791, 4796, 4801, 4806, 4811, 4816, 4821, 4826, 4831,
     4836, 4841, 4846, 4851, 4856, 4861, 4866, 4868, 4873, 4878,
     4883, 4888, 4893, 4898, 4903, 4908, 4913, 4918, 4923, 4928,

     4933, 4938, 4943, 4948, 4953, 4958, 4963, 4968, 4973, 4978,
     4983, 4988, 4993, 4998, 5000
    } ;

static yyconst flex_int16_t yy_def[1416] =
    {   0,
     1192, 1192, 1193, 1193,    2,    5, 1194, 1194, 1195, 1195,
     1196, 1196, 1196, 1196, 1196, 1196, 1197, 1197, 1198, 1199,
     1200, 1200, 1191, 1191, 1191, 1191, 1191, 1191, 1201, 1191,
     1191, 1202, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1203, 1191, 1204, 1205, 1206, 1207, 1208, 1209,
     1206, 1204, 1208, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1201, 1210, 1211, 1212, 1202, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1203, 1191, 1213, 1214, 1215, 1216, 1205,
     1214, 1217, 1218, 1219, 1214, 1220, 1221, 1222, 1223, 1220,
     1221, 1224, 1225, 1226, 1227, 1227, 1228, 1229, 1227, 1230,
     1231, 1219, 1219, 1219, 1219, 1219, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1191, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1232, 1233, 1234, 1214,
     1235, 1228, 1233, 1224, 1236, 1234, 1234, 1228, 1236, 1234,

     1217, 1224, 1237, 1218, 1218, 1228, 1237, 1238, 1239, 1240,
     1241, 1242, 1243, 1241, 1239, 1244, 1242, 1214, 1245, 1246,
     1243, 1243, 1228, 1247, 1243, 1224, 1191, 1244, 1244, 1191,
     1244, 1240, 1240, 1228, 1244, 1240, 1248, 1228, 1249, 1248,
     1248, 1228, 1250, 1249, 1191, 1249, 1248, 1228, 1251, 1214,
     1252, 1253, 1254, 1255, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1191, 1191, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1191, 1191, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,

     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1257, 1258, 1259, 1258, 1260, 1259, 1259,
     1260, 1259, 1261, 1224, 1250, 1228, 1228, 1260, 1260, 1191,
     1260, 1228, 1191, 1259, 1228, 1237, 1237, 1191, 1228, 1191,
     1262, 1263, 1264, 1263, 1265, 1264, 1264, 1265, 1264, 1266,
     1267, 1268, 1266, 1267, 1269, 1270, 1268, 1268, 1271, 1268,
     1265, 1265, 1265, 1269, 1224, 1272, 1270, 1270, 1228, 1272,
     1270, 1228, 1271, 1191, 1271, 1268, 1228, 1191, 1191, 1191,
     1265, 1191, 1228, 1264, 1228, 1273, 1274, 1273, 1274, 1274,
     1273, 1273, 1250, 1191, 1274, 1191, 1275, 1276, 1277, 1276,

     1224, 1278, 1277, 1277, 1228, 1278, 1277, 1279, 1280, 1280,
     1281, 1282, 1283, 1284, 1284, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1191, 1191, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1191, 1191, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1191, 1285, 1285, 1286, 1287, 1288, 1287, 1289,
     1288, 1288, 1289, 1288, 1289, 1289, 1289, 1288, 1250, 1191,
     1289, 1191, 1290, 1291, 1292, 1291, 1293, 1292, 1292, 1293,

     1292, 1293, 1293, 1293, 1292, 1290, 1294, 1295, 1290, 1294,
     1296, 1297, 1295, 1295, 1298, 1295, 1296, 1299, 1297, 1297,
     1299, 1297, 1298, 1298, 1295, 1293, 1299, 1299, 1191, 1299,
     1228, 1191, 1297, 1228, 1298, 1191, 1300, 1301, 1300, 1301,
     1301, 1300, 1301, 1300, 1302, 1303, 1304, 1303, 1305, 1304,
     1304, 1305, 1304, 1305, 1305, 1191, 1305, 1228, 1191, 1304,
     1228, 1306, 1307, 1307, 1308, 1309, 1308, 1310, 1311, 1309,
     1309, 1228, 1311, 1309, 1312, 1313, 1314, 1315, 1312, 1312,
     1290, 1290, 1290, 1290, 1290, 1290, 1312, 1191, 1191, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,

     1191, 1191, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1317, 1318, 1319, 1318, 1320,
     1319, 1319, 1320, 1320, 1320, 1319, 1320, 1321, 1322, 1323,
     1322, 1324, 1323, 1323, 1324, 1324, 1324, 1323, 1324, 1325,
     1326, 1325, 1327, 1328, 1329, 1330, 1330, 1331, 1328, 1332,
     1329, 1329, 1332, 1331, 1330, 1332, 1332, 1329, 1331, 1332,
     1191, 1333, 1334, 1334, 1333, 1334, 1333, 1335, 1336, 1337,
     1336, 1338, 1337, 1337, 1338, 1338, 1338, 1337, 1338, 1191,

     1339, 1340, 1340, 1341, 1342, 1341, 1343, 1342, 1342, 1343,
     1343, 1343, 1191, 1344, 1191, 1342, 1344, 1345, 1346, 1347,
     1346, 1348, 1349, 1347, 1347, 1344, 1349, 1321, 1345, 1321,
     1321, 1321, 1321, 1321, 1191, 1191, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1191, 1191, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1351, 1352, 1353, 1352, 1354, 1353, 1353,
     1344, 1354, 1353, 1354, 1354, 1191, 1354, 1353, 1354, 1353,

     1354, 1321, 1355, 1356, 1355, 1357, 1356, 1356, 1344, 1357,
     1356, 1357, 1357, 1191, 1357, 1356, 1357, 1356, 1357, 1358,
     1359, 1358, 1360, 1361, 1362, 1362, 1363, 1364, 1365, 1366,
     1367, 1368, 1367, 1369, 1368, 1368, 1344, 1369, 1368, 1370,
     1371, 1370, 1370, 1371, 1371, 1369, 1369, 1191, 1369, 1368,
     1370, 1369, 1368, 1371, 1369, 1372, 1373, 1372, 1373, 1373,
     1372, 1373, 1372, 1374, 1375, 1376, 1375, 1377, 1376, 1376,
     1344, 1377, 1376, 1377, 1377, 1191, 1377, 1376, 1377, 1376,
     1377, 1378, 1379, 1379, 1380, 1381, 1380, 1382, 1381, 1381,
     1344, 1382, 1381, 1382, 1382, 1191, 1382, 1381, 1382, 1381,

     1383, 1384, 1385, 1384, 1386, 1385, 1385, 1344, 1386, 1385,
     1386, 1386, 1191, 1386, 1344, 1385, 1191, 1387, 1383, 1387,
     1387, 1387, 1387, 1191, 1191, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1191, 1191, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1389, 1344, 1390, 1191, 1389, 1344,
     1390, 1191, 1391, 1344, 1392, 1191, 1391, 1344, 1392, 1191,
     1393, 1394, 1395, 1396, 1396, 1344, 1397, 1396, 1398, 1398,
     1398, 1399, 1400, 1401, 1402, 1402, 1344, 1395, 1402, 1403,

     1344, 1404, 1191, 1403, 1344, 1405, 1344, 1406, 1191, 1404,
     1191, 1407, 1344, 1408, 1191, 1409, 1344, 1410, 1191, 1409,
     1344, 1410, 1191, 1411, 1344, 1412, 1191, 1411, 1344, 1412,
     1191, 1385, 1344, 1413, 1191, 1385, 1344, 1413, 1191, 1387,
     1414, 1387, 1414, 1414, 1191, 1191, 1415, 1415, 1415, 1415,
     1415, 1415, 1191, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1395, 1395, 1191, 1395, 1344, 1397, 1191, 1397, 1396, 1344,
     1399, 1401, 1401, 1401, 1344, 1191, 1402, 1344, 1387, 1387,

     1191, 1191, 1415, 1415, 1415, 1191, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1395, 1191, 1397, 1191, 1387, 1414,
     1191, 1191, 1415, 1415, 1415, 1191, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1414, 1191, 1191, 1415, 1415, 1191, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1191, 1191,
     1415, 1191, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
        0, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191
    } ;

static yyconst flex_uint16_t yy_nxt[5075] =
    {   0,
       24,   24,   25,   26,   24,   24,   24,   24,   24,   27,
       24,   24,   24,   28,   24,   24,   24,   48,   52,   48,
       52,   83,   56,   56,   49,   50,   49,   50,   79,   57,
       57,   75,   76,   75,   77,   58,   58,  147,   80,  147,
      148,   30,   24,   24,   84,   85,   56,   56,  147,   83,
      147,  148,   83,   57,   57,   79,   83,   53,   54,   53,
       54,   59,   59,   89,   83,   80,  113,   24,   24,   24,
       31,   26,   24,   24,   24,   24,   24,   27,   24,   24,
       24,   28,   24,   24,   24,   59,   59,   83,   56,   89,
       60,   60,   60,  113,   83,   57,   83,  117,   60,  118,

      121,  107,  122,  119,   95,  176,  123,  132,  191,   30,
       24,   24,  192,  133,  194,   56,   83,   60,   60,   60,
      195,   83,   57,   84,   85,   60,   83,   59,  107,   83,
       95,   83,  176,  103,   83,   24,   24,   24,   25,   26,
       24,   24,   24,   24,   24,   27,   24,   24,   24,   28,
       24,   24,   24,   60,   59,   75,   76,   75,   77,  103,
       83,  125,   83,  127,   83,   78,  183,  134,  100,   83,
      177,   83,  158,   78,   83,  101,  102,   30,   24,   24,
       60,   83,   83,  136,  137,  136,  138,  191,  202,   83,
      139,  192,   83,  183,  203,  100,   96,  177,   97,  158,

       78,  101,  102,   24,   24,   24,   31,   26,   24,   24,
       24,   24,   24,   27,   24,   24,   24,   28,   24,   24,
       24,   83,   96,   83,   97,   87,   83,   83,  264,   83,
      117,   83,  118,  149,  108,  149,  119,  151,  191,  151,
      104,   88,  192,   98,  140,   30,   24,   24,   99,  109,
      105,   83,   87,  106,  150,  264,   83,   83,  152,  159,
       83,  108,   83,   83,   83,   83,  104,   88,  156,   98,
      424,   24,   25,  162,   99,  109,  105, 1170,   83,  106,
      154,  150, 1169,  155,  157,  152,  159,   33,   34,   35,
       36,   37,   38,   83,  156,   39,  424,  172,   40,   41,

      162,  132,   42,   43,   44,   45,  154,  216,   46,  155,
      157,  337,  338,  337,   33,   34,   35,   36,   37,   38,
       83,   83,   39,  172,   40,   41,   83,  167,   42,   43,
       44,   45,   83,   83,   46,   66,   67,   68,   69,  174,
      168,   70,  173,  110,   69,   83,   71,  160,  161,   72,
      111,  132,   73,   69,  167,   83,   83,  216,   83,  112,
      265,   83,  163,  185,   83,  174,  168,  169,  173,  164,
      110,   83,  245,  160,  161,  178,  111,  175,  246,   73,
       69,   83,  170,  171,   90,  112,  165,  265,  166,  185,
      179,   91,   83,  194,  169,   92,  164,   83,   93,  318,

       94,  178,   83,  175,  117,   83,  188,  269,  170,  171,
      189,   90,  165,   83,  166,   83,  179,   83,   91,  182,
      180,   92,  181,  280,   93,   83,   94,  124,  124,  125,
      126,  127,  124,  124,  269,  129,  124,  124,  124,  124,
      130,  124,  124,  124,   83,  182,   83,  180,   83,  181,
      280,  184,   83,  186,  197,  198,  197,  199,  121,   83,
      122,  200,  437,  301,  123,  278,  270,   83,  124,  124,
      205,  206,  205,  207,  339,  125,  207,  209,  184,  243,
      186,  210,  218,   83,  219,  229,  230,  229,  220,  437,
      301,  278,  231,  270,  124,  124,  124,  125,  130,  127,

      124,  124,  271,  134,  124,  124,  124,  124,  130,  124,
      124,  124,  222,  223,  222,  224,  243, 1094,   83,  225,
      233,  234,  233,  235,  238, 1094,  239,  236,  271,  267,
      240,  241,  137,  241,  239,  268,  124,  124,  240,  247,
      248,  247,  239,  250,   83,  251,  240,  297,  332,  252,
      643,  125,  125,  209,  209,   83,  267,  210,  210,  279,
     1094,  268,  124,  141,  125,  141,  127,  257,   83,  125,
      134,  209,   83,   83,  297,  210,  125,  255,  209,  142,
       83,  258,  210,  256,   83,  243,  279,  259,  243,  266,
      143,  273,  272,  144,  257,  145,  260,  261,  306,  262,

       83,  274,  146,  255,   83,  324,  142,  258,  191,  256,
       83,  325,  192,   83,  259,  266,  143,  273,  272,  144,
       83,  145,  260,  261,  306,  275,  262,  274,  146,  208,
      208,  125,  211,  209,  208,  208,   83,  213,  208,  208,
      208,  208,  214,  208,  208,  208,  125,  149,  209,  149,
       83,  275,  210,   83,   83,  295,  149,  191,  149,  298,
      282,  192,  191,  263,   83,  281,  192,  151,  150,  151,
      208,  208,   83,  117,  194,  315,   83,  150,   83,  316,
      318,  295,   83,  378,  379,  378,  298,  282,  152,  300,
      263,  281,  311,  296,  299,  150,  208,  208,  208,  125,

      214,  209,  208,  208,  150,  210,  208,  208,  208,  208,
      214,  208,  208,  208,  276,  152,  300,   83,  311,  296,
      299,   83,  303,  191,   83,   83,  304,  192,  305,   83,
       83,  308,   83,  277,   83,  383,  312,  655,  208,  208,
       83,  276,   83,   83,  320,  198,  320,  321,  332,  303,
      321,  322,  302,  304,  322,  305,  307,  309,  308,  277,
      425,  310,  313,  312,  208,  208,  253,  125,  253,  209,
      208,  208,  208,  210,  208,  208,  208,  208,  302,  208,
      208,  208,  307,  309,   83,   83,  425,  310,  313,  326,
      327,  326,  243,  329,  330,  329,  320,  198,  320,  321,

      331,  436,   83,  322,  333,  432,  208,  208,  208,  202,
      331,  334,  335,  334,  321,  203,  433,   83,  322,  205,
      206,  205,  207,  125,  132,  342,   83,  436,  132,  343,
      345,  432,  208,   83,  345,  427,  283,  284,  285,  286,
      287,  288,  433,  218,  289,  355,   83,   83,  290,  356,
      218,  291,  355,  292,  293,  365,  356,  294,  243,  243,
       83,  366,  427,  283,  284,  285,  286,  287,  288,  374,
      372,  289,  359,  429,  290,  375,  360,  291,  243,  292,
      293,  243,  380,  294,  347,  234,  347,  348,  363,  243,
      243,  349,  341,  341,  125,  350,  342,  341,  341,  429,

      352,  341,  341,  341,  341,  353,  341,  341,  341,  358,
      223,  358,  359,  362,  230,  362,  360,   83,  243,  380,
      363,  368,  369,  368,  370,  363,  243,  458,  371,  358,
      223,  358,  359,  341,  341,  243,  360,  376,  377,  376,
      359,  362,  230,  362,  360,  381,  382,  381,  363,  383,
      245,  348,  363,   83,  458,  349,  390,  243,  243,  341,
      341,  341,  125,  353,  342,  341,  341,  439,  343,  341,
      341,  341,  341,  353,  341,  341,  341,  347,  234,  347,
      348,  489,  490,  489,  349,  384,  385,  384,  348,  238,
     1094,  387,  349,  439,  245,  388,  391,  248,  391,  387,

      390,  341,  341,  388,  392,  137,  392,  387,  395,  396,
      395,  388,  243,  227,   83,  390,  391,  248,  391,  387,
      250,   83,  398,  388,  401,  435,  399,  341,  243,  243,
      402,  404,  405,  404,  406,  445,  243,  243,  407,  341,
      408,  125,  408,  342,  341,  341,  341,  343,  341,  341,
      341,  341,  435,  341,  341,  341,  411,  125,  412,  342,
       83,  445,  413,  343,  125,  125,  342,  342,   83,   83,
      343,  343,  125,  125,  342,  342,  438,   83,  343,  343,
      341,  341,  341,  414,  415,  125,  125,  342,  342,  444,
       83,  343,  343,   83,   83,  125,  416,  342,  428,   83,

      419,  343,  438,  420,  417,  430,  341,  447,  418,  414,
      125,  415,  342,  426,   83,  444,  343,  431,   83,  421,
       83,  434,  416,   83,   83,  428,  419,   83,  422,  420,
      417,  440,  430,  447,  441,  418,  423,   83,   83,  426,
       83,  449,  446,   83,  431,  421,  450,   83,  434,   83,
       83,  442,   83,  448,  422,  451,   83,  454,  440,   83,
      453,  441,  423,  452,  443,   83,  455,  449,  446,   83,
      460,  194,  450,  461,   83,  457,  459,  480,  442,  448,
       83,  456,  451,  454,  462,   83,  453,   83,  466,  452,
      443,   83,  465,  455,  463,   83,  460,   83,  467,  461,

      470,  457,  459,   83,  464,   83,   83,  456,  473,   83,
      462,  194,  475,   83,  466,  243,  468,  480,  372,  465,
      668,  463,  469,  471,  474,  467,  472,  470,  243,  117,
      464,  477,  332,  191,  483,  478,  191,  192,  484,  475,
      192,  333,  468,  482,  198,  482,  483,  487,  469,  471,
      484,  474,  472,  486,  330,  486,  482,  198,  482,  483,
      487,  243,  324,  484,  488,  335,  488,  483,  325,  243,
      333,  484,  326,  327,  326,  243,  487,  486,  330,  486,
      491,  492,  491,  588,  487,  589,  243,  487,  488,  335,
      488,  483,  337,  338,  337,  484,  125,  132,  494,  378,

      379,  378,  495,  497,  499,  234,  499,  500,  132,  243,
      588,  501,  589,  380,  497,  503,  230,  503,  383,  504,
      500,  243,  504,  365,  501,  499,  234,  499,  500,  518,
       83,  374,  501,  505,  385,  505,  500,  524,   83,   83,
      501,  493,  493,  125,  506,  494,  493,  493,  601,  508,
      493,  493,  493,  493,  509,  493,  493,  493,  218,   83,
      511,  602,  590,   83,  512,  514,  223,  514,  515,  218,
      380,  511,  516,   83,  601,  512,  504,  520,  369,  520,
      521,   83,  493,  493,  522,  372,   83,  515,  602,  590,
      365,  516,  514,  223,  514,  515,  518,   83,  532,  516,

      525,  377,  525,  515,  530,  243,  227,  516,  493,  493,
      493,  125,  509,  494,  493,  493,   83,  495,  493,  493,
      493,  493,  509,  493,  493,  493,  503,  230,  503,  526,
      382,  526,  591,  504,  243,  374,  504,  528,  529,  528,
      531,  524,  521,  238,  530,  538,  522,  243,   83,  539,
      493,  493,  520,  369,  520,  521,   83,   83,  591,  522,
      533,  534,  533,  521,  535,  536,  535,  522,  645,  330,
      645,  524,  525,  377,  525,  515,  493,   83,   83,  516,
      526,  382,  526,  505,  385,  505,  500,  504,  245,   83,
      501,  715,  243,  245,  541,  542,  248,  542,  538,  541,

      592,   83,  539,  543,  396,  543,  542,  248,  542,  538,
      541,  608,  227,  539,  544,  137,  544,  538,  543,  396,
      543,  539,  250,  401,  546,  541,  243,  592,  547,  549,
      551,  405,  551,  552,  401,  243,  559,  553,  608,  559,
      549,  555,  556,  555,  558,  557,  552,   83,  557,  568,
      553,  551,  405,  551,  552,  569,  559,  245,  553,  560,
      561,  560,  552,  606,  245,  243,  553,  493,  562,  125,
      562,  494,  493,  493,  493,  495,  493,  493,  493,  493,
       83,  493,  493,  493,  411,  411,  565,  565,  607,  606,
      566,  566,  571,  572,  571,  573,  576,  748,  577,  574,

       83,  576,  578,  577,  531,  595,  673,  578,  493,  493,
      493,  125,  125,  494,  494,  607,  243,  495,  495,  125,
      125,  494,  494,  748,   83,  495,  495,  125,  532,  494,
      593,  580,  595,  495,  493,  374,  125,   83,  494,  125,
       83,  494,  495,  579,  594,  495,  581,  598,  125,  582,
      494,  584,   83,  583,  495,   83,   83,  593,  580,  585,
       83,  596,  586,  599,   83,  600,  597,  587,   83,  579,
       83,  594,  581,  603,  598,  582,  609,  604,  584,  583,
       83,   83,   83,   83,  532,  615,  585,   83,  596,  586,
      599,   83,  600,  597,  587,  605,   83,  610,  611,   83,

      603,  613,  609,   83,  604,  612,   83,  614,   83,  616,
       83,  615,   83,  617,  619,  621,   83,  620,   83,   83,
      618,  605,  627,  610,  626,  611,  622,  613,   83,  623,
       83,  612,   83,  614,   83,  624,  616,  625,   83,  617,
      629,  619,  621,  620,   83,  628,  618,  630,   83,  627,
       83,  626,  622,  632,   83,   83,  623,  117,  374,  637,
      633,  380,  624,  638,  625,  194,  735,  629,  631,  194,
      635,  640,  628,  380,  630,  640,  238,  634,  683,  632,
      642,  198,  642,  643,  645,  330,  645,  633,  642,  198,
      642,  643,  333,  735,  631,  132,  635,  646,  335,  646,

      643,  652,  333,  634,  647,  492,  647,  646,  335,  646,
      643,  489,  490,  489,  647,  492,  647,  125,  558,  649,
      695,   83,  132,  650,  654,  234,  654,  655,  652,  657,
      230,  657,  654,  234,  654,  655,  658,  385,  658,  655,
      657,  230,  657,  659,  382,  659,  658,  385,  658,  655,
      125,  660,  649,  218,  365,  664,  661,   83,   83,  665,
      670,  662,  667,  223,  667,  668,  125,  662,  649,  218,
      365,  664,  650,   83,  243,  665,  670,  662,  672,  369,
      672,  673,  667,  223,  667,  668,  675,  377,  675,  668,
      677,  529,  677,  672,  369,  672,  673,  678,  534,  678,

      673,  679,  536,  679,  675,  377,  675,  668,  659,  382,
      659,  677,  529,  677,  680,  681,  680,  678,  534,  678,
      673,  679,  536,  679,  685,  248,  685,  683,  686,  396,
      686,  685,  248,  685,  683,  686,  396,  686,  687,  137,
      687,  683,  250,  401,  689,  697,  556,  697,  690,  692,
      694,  405,  694,  695,  401,  694,  405,  694,  695,  227,
      692,  698,  561,  698,  695,  697,  556,  697,  699,  700,
      699,  698,  561,  698,  695,  648,  701,  125,  701,  649,
      648,  648,  648,  650,  648,  648,  648,  648,  736,  648,
      648,  648,  411,  411,  704,  704,  568,  394,  705,  705,

      243,  568,  707,  709,  572,  709,  710,  707,  712,  713,
      712,  714,  243,  710,  243,  736,  648,  648,  648,  709,
      572,  709,  710,  716,  717,  716,  710,  576,  722,  719,
      243,  243,   83,  720,  723,  725,  726,  725,  727,  576,
      740,  719,  648,   83,  576,  720,  719,  125,  737,  649,
      720,  227,  125,  650,  649,  125,   83,  649,  650,  738,
      243,  650,  125,  125,  649,  649,  728,  740,  650,  650,
      125,  576,  649,  719,  730,  737,  650,  720,   83,   83,
      729,  739,   83,   83,  732,  731,  738,  734,   83,  742,
      340,  733,   83,  728,   83,  746,  747,   83,   83,  243,

      741,  730,   83,  743,   83,  752,  729,  750,  739,   83,
      745,  732,  731,  744,  734,  243,  742,  733,   83,  749,
      751,   83,  746,  747,   83,  753,  741,   83,  754,  743,
      757,  761,  752,   83,  750,  755,  745,   83,  756,  744,
      759,   83,  758,   83,   83,  749,  751,   83,  760,  763,
       83,  753,   83,  764,  765,  754,  757,  768,  761,   83,
       83,  755,  243,  762,   83,  756,   83,  759,  758,  772,
       83,  769,   83,   83,  766,  760,  763,  770,  767,   83,
      764,  765,  227,  771,  768,   83,  773,   83,  778,  762,
      779,   83,  777,  935,   83,  774,  772,  769,  924,  780,

      766,   83,  194,  770,  767,  775,  783,  776,  788,  771,
      194,   83,  773,  782,  778,  781,  788,  779,  777,  117,
      935,  785,  774,   83,  924,  786,  780,  790,  791,  790,
      792,  775,  783,  776,  793,  795,  796,  795,  332,  782,
      792,  781,  797,  333,  793,  798,  198,  798,  792,  797,
      333,  132,  793,  799,  330,  799,  797,  806,   83,  243,
      797,  800,  335,  800,  792,  801,  492,  801,  793,  125,
      394,  803,  797,  925,  132,  804,  808,  809,  808,  810,
      806,  243,  380,  811,  813,  814,  813,  383,  815,  810,
      243,  815,  380,  811,  816,  234,  816,  810,  815,  925,

       83,  811,  817,  230,  817,  818,  385,  818,  810,  815,
      243,  227,  811,  819,  382,  819,  821,  822,  823,  243,
      815,  926,  824,  826,  827,  826,  828,  821,   83,  823,
      811,  365,  218,  829,  831,  340,  931,  834,  832,  836,
      837,  836,  838,  372,  243,  841,  839,  926,  374,  842,
      843,  223,  843,  841,  845,  365,  227,  842,  847,  848,
      847,  834,  531,  931,  838,  849,   83,  532,  839,  850,
      369,  850,  838,  849,  374,  243,  839,  227,  243,  532,
      845,  851,  377,  851,  841,  849,  227,  927,  842,  852,
      529,  852,  853,  534,  853,  838,  849,  115,   83,  839,

      854,  536,  854,  855,  681,  855,  238,  845,  857,  245,
      849,  245,  858,  927,   83,  860,   85,  860,  861,  248,
      861,  857,  862,  396,  862,  858,   83,   81,  115,  860,
      863,  137,  863,  857,  250,  401,  865,  858,   83,   81,
      866,  868,  870,  871,  870,  872,  401, 1191,   64,  873,
       62,  559,  868,  875,  876,  875,  558,  877,  872,   62,
      877,  559,  873,  878,  405,  878,  872,  877,   31, 1191,
      873,  879,  556,  879,  880,  561,  880,  872,  877,  568,
      568,  873,  881,  700,  881,  888,  888, 1191, 1191,  877,
      802,  882,  125,  882,  803,  802,  802,  802,  804,  802,

      802,  802,  802, 1191,  802,  802,  802,  411,  411,  885,
      885, 1191, 1191,  886,  886,  890,  891,  890,  892,  895,
      896,  895,  893,  714,  715,  892,  897, 1191, 1191,  893,
      897,  802,  802,  802,  898,  572,  898,  892,  715,   83,
     1101,  893,  929, 1191,  897,  899,  713,  899,  900,  717,
      900,  892,  897,  722,  576,  893,  902,  802, 1191,  905,
      903,  907,  908,  907,  909,  722,   83, 1101,  910,  929,
      917,  905,  912,  913,  912,  915,  914,  909,   83,  914,
      933,  910,  916,  726,  916,  909,  125, 1191,  803,  910,
       83,  576,  804,  902,  125,  934,  803,  903,  932,  125,

      804,  803,  125,   83,  803,  804,  933,  125,  804,  803,
      125,  928,  803,  804,  918,   83,  804, 1191,   83,   83,
      937,  934,  930,   83,  932,  923,   83,  920,   83,  939,
       83,  919,  944,   83,   83,   83,  921,  928,  936,  941,
      918,  922,  938,  942,  943,   83,  937,  940,   83,  930,
     1191,   83,  923,  920,  946,  948,  939,  919,  944,  947,
       83,   83,  921, 1191,  936,   83,  941,  922,  938,  942,
      950,  943,  945,  940,   83,   83,   83,   83,  951,  949,
      946,   83,  948,  953,   83,  947,  955,   83,   83,   83,
       83,  952,   83,  954,  957,  961,  194,  950,  945, 1045,

       83, 1191,  788, 1191,  951,  949,  956,  959, 1191,  958,
      953, 1046,  960,  955,  963,   83,  962,  952,  194,  954,
      957,  117,  961,  785,  788, 1045,  964,  786,  333,  967,
      968,  967,  956,  959,  797,  958,  797, 1046,  960, 1191,
      963,  333,  962,  965,  966,  965,  792,  797,  132,  332,
      793,  792, 1053,  964,  806,  793,  790,  791,  790,  792,
     1191, 1102, 1131,  793,  969,  970,  969,  792,  795,  796,
      795,  793,  971,  972,  971,  797, 1191, 1191, 1053,  797,
      798,  198,  798,  792,  799,  330,  799,  793, 1102, 1131,
     1191,  797,  800,  335,  800,  792,  801,  492,  801,  793,

      125,   83,  803,  797, 1049,  132,  804,  973,  974,  973,
      810,  806, 1191,  380,  811,  975,  976,  975,  383,  815,
      810, 1106,  815,  380,  811,  808,  809,  808,  810,  815,
     1132, 1049,  811,  977,  978,  977,  810,  813,  814,  813,
      811,  979,  980,  979,  815, 1191, 1191, 1106,  815,  816,
      234,  816,  810,  817,  230,  817,  811, 1132, 1191, 1191,
      815,  818,  385,  818,  810,  819,  382,  819,  811,  821,
       83,  823,  815,  982,  994,  829,  821,  822,  823,  983,
      815,   83,  824,  985,  986,  985,  987,  989, 1078,  828,
      988, 1191, 1191,  811,  826,  827,  826,  828,  991, 1108,

      992,  811, 1191, 1191,  242,  996,  997,  996,  998,  218,
      365,  831,  999, 1191, 1078,  832,  834, 1000, 1001, 1000,
      838,  365, 1191, 1191,  839, 1108,  532,  834, 1002, 1003,
     1002,  531,  849,  838, 1191,  849,  374,  839,  836,  837,
      836,  838,  845,   83,   83,  839, 1004, 1005, 1004,  838,
      372, 1048,  841,  839, 1191,  374,  842, 1006, 1007, 1006,
      841,  845, 1051, 1191,  842,  843,  223,  843,  841, 1008,
     1009, 1008,  842,  532, 1191, 1191,  845, 1191, 1048,  849,
      847,  848,  847, 1010, 1011, 1010,   83,  849, 1051,  245,
      849,  850,  369,  850,  838,  860, 1191, 1047,  839,  851,

      377,  851,  841,  852,  529,  852,  842, 1191, 1191, 1136,
      849,  853,  534,  853,  838,  854,  536,  854,  839,  855,
      681,  855,  845,  238, 1047,  857,  849, 1191,  245,  858,
     1012, 1013, 1012,  857,  860,   83, 1136,  858, 1014, 1015,
     1014,  861,  248,  861,  857,  860, 1059, 1191,  858,  862,
      396,  862,  863,  137,  863,  857,  860,  401,  250,  858,
      865,   83, 1191,  868,  866, 1016, 1017, 1016,  872,  401,
       83, 1191,  873, 1059,  559,  868, 1018, 1019, 1018,  558,
      877,  872, 1068,  877,  559,  873,  870,  871,  870,  872,
      877,   83, 1050,  873, 1020, 1021, 1020,  872,  875,  876,

      875,  873, 1022, 1023, 1022,  877, 1055, 1191, 1068,  877,
      878,  405,  878,  872,  879,  556,  879,  873, 1050, 1191,
     1191,  877,  880,  561,  880,  872,  881,  700,  881,  873,
     1152, 1191, 1055,  877,  802,  882,  125,  882,  803,  802,
      802,  802,  804,  802,  802,  802,  802, 1191,  802,  802,
      802,  411,  411,  885,  885,  568, 1152,  886,  886, 1153,
      568,  888, 1024, 1025, 1024,  892,  888, 1191,  714,  893,
      892, 1026, 1027, 1026,  893,  802,  802,  802,  897,  890,
      891,  890,  892,  715, 1191, 1153,  893, 1191,  715,  897,
     1028, 1029, 1028,  892,  897, 1191, 1191,  893,  895,  896,

      895,  802, 1030, 1031, 1030,  897, 1191, 1191, 1191,  897,
      898,  572,  898,  892,  899,  713,  899,  893, 1191, 1191,
     1191,  897,  900,  717,  900,  892,  576,  722,  902,  893,
     1191,   83,  903,  905, 1032, 1033, 1032,  909,  722, 1191,
     1191,  910, 1191,  917,  905, 1034, 1035, 1034,  915,  914,
      909, 1077,  914,  917,  910,  907,  908,  907,  909,  914,
     1191, 1191,  910, 1036, 1037, 1036,  909,  912,  913,  912,
      910, 1038, 1039, 1038,  914, 1191,   83, 1077,  914,  916,
      726,  916,  909,  125,   83,  803,  910, 1052,  576,  804,
      902,  125,   83,  803,  903, 1054,  125,  804,  803,  125,

       83,  803,  804,   83,  125,  804,  803, 1056,   83, 1073,
      804, 1156,   83, 1061, 1052, 1040,   83, 1057, 1043, 1058,
       83, 1054,   83, 1041,   83, 1042, 1060, 1063,   83, 1172,
     1044,   83, 1064,   83, 1056, 1073, 1062, 1156, 1065, 1066,
     1061, 1040,   83, 1057,   83, 1043, 1058, 1067, 1069, 1041,
     1070, 1042,   83, 1060, 1063, 1172, 1044,   83,   83, 1064,
     1191,   83, 1062,   83, 1071, 1065, 1066,   83, 1072, 1191,
     1075, 1074,   83,   83, 1067, 1069, 1070, 1080, 1159, 1076,
     1079,  965,  966,  965,  792,  967,  968,  967,  793,  982,
     1087, 1071,  797, 1191, 1072,  983, 1088, 1075, 1074, 1085,

     1191,  987,   83, 1080, 1159,  988, 1076, 1079,  969,  970,
      969,  792,  971,  972,  971,  793, 1191, 1191, 1103,  797,
      973,  974,  973,  810,  975,  976,  975,  811, 1191, 1191,
     1191,  815,  977,  978,  977,  810,  979,  980,  979,  811,
     1082, 1083, 1082,  815, 1103, 1191, 1092, 1084,  985,  986,
      985,  987,  393, 1191,   83,  988, 1089, 1090, 1089,  987,
      991, 1107,  992,  988, 1191,  991,  242,  992,  991,  994,
      992,  242,   83, 1096,  242,  815, 1095,   83,  998, 1084,
     1110, 1096,  999,  996,  997,  996,  998, 1084, 1107, 1113,
      999, 1097, 1098, 1097,  998, 1191, 1191, 1191,  999, 1000,

     1001, 1000,  838, 1002, 1003, 1002,  839, 1110, 1191,   83,
      849, 1004, 1005, 1004,  838, 1113, 1122,   83,  839, 1006,
     1007, 1006,  841, 1008, 1009, 1008,  842, 1010, 1011, 1010,
      845, 1104, 1191,   83,  849, 1012, 1013, 1012,  857, 1014,
     1015, 1014,  858, 1122, 1191,   83,  860, 1016, 1017, 1016,
      872, 1018, 1019, 1018,  873, 1105, 1191, 1104,  877, 1020,
     1021, 1020,  872, 1022, 1023, 1022,  873, 1115, 1191, 1191,
      877, 1024, 1025, 1024,  892, 1026, 1027, 1026,  893, 1191,
     1191, 1105,  897, 1028, 1029, 1028,  892, 1030, 1031, 1030,
      893, 1191, 1191, 1115,  897, 1032, 1033, 1032,  909, 1034,

     1035, 1034,  910, 1191, 1191, 1191,  914, 1036, 1037, 1036,
      909, 1038, 1039, 1038,  910,  125, 1191,  803,  914,   83,
      576,  804,  902,  125, 1109,  803,  903,   83,  576,  804,
      902,  576,   83,  902,  903, 1111,   83,  903, 1099, 1112,
       83,   83, 1116, 1114,   83,   83,   83,   83,   83, 1119,
     1120, 1109,   83, 1087, 1123, 1124,   83, 1100, 1092, 1088,
     1191, 1144, 1111, 1117,  393, 1099, 1112, 1118, 1116,   83,
     1114, 1121, 1082, 1083, 1082, 1191, 1119, 1120,   83, 1084,
     1139, 1123, 1124, 1100, 1125, 1126, 1125,   83, 1144, 1117,
     1191, 1084, 1135, 1118, 1127, 1128, 1127, 1121, 1191,   83,

     1191, 1088, 1089, 1090, 1089,  987,   83, 1139, 1133,  988,
     1097, 1098, 1097,  998,  125, 1137,  803,  999, 1135,  125,
      804,  803,   83,   83,   83,  804,   83, 1134,   83,   83,
       83,   83, 1191, 1191, 1133,   83, 1138,   83, 1149, 1191,
     1142, 1137, 1191, 1129, 1140, 1141, 1143, 1145,   83, 1146,
     1148, 1130, 1191, 1134, 1150, 1191, 1125, 1126, 1125, 1147,
       83, 1191, 1138, 1084, 1191, 1149, 1142, 1154,   83, 1129,
     1140, 1141, 1143, 1145,   83, 1146, 1148, 1130,   83, 1191,
     1150, 1127, 1128, 1127, 1167,  125, 1147,  803, 1088, 1155,
      576,  804,  902,   83, 1154, 1157,  903,   83,   83,   83,

     1158, 1161,   83,   83, 1160,   83, 1162,   83,   83, 1163,
     1164, 1167,  576, 1151,  902, 1155, 1166,   83,  903,   83,
       83, 1157,   83, 1165,   83,   83,   83, 1158, 1161,   83,
     1168, 1160, 1175, 1162, 1179, 1174, 1163, 1164, 1171, 1151,
       83, 1178, 1173, 1166, 1177,   83, 1176,   83, 1184, 1165,
       83,   83, 1191, 1191,   83,   83, 1168, 1180, 1186, 1175,
       83, 1179, 1174, 1181, 1171, 1183, 1191, 1178, 1173, 1182,
     1177, 1185, 1176,   83,   83, 1184, 1187,   83, 1188, 1191,
     1191, 1189, 1191, 1180, 1190, 1186, 1191, 1191, 1191, 1181,
     1191, 1191, 1183, 1191, 1191, 1182, 1191, 1185, 1191, 1191,

     1191, 1191, 1187, 1191, 1191, 1188, 1191, 1191, 1189, 1191,
     1191, 1190,   29,   29,   29,   29,   29,   32,   32,   32,
       32,   32,   47,   47,   47,   47,   47,   51,   51,   51,
       51,   51,   55,   55,   55,   55,   55,   61,   61,   61,
       61,   61,   63,   63,   63,   63,   63,   65,   65,   65,
       65,   65,   74,   74,   74,   74,   74,   82,   82,   86,
     1191,   86,   86,  114,  114,  114,  114,  114,  116,  116,
      116,  116,  116,  120,  120,  120,  120,  120,  128,  128,
      128,  128,  128,  131,  131,  131,  131,  131,  124,  124,
      124,  124,  124,  135,  135,  135,  135,  135,  153,  153,

      153,  153,   84, 1191,   84,   85, 1191,   85,  187,  187,
      187,  187,  187,  190,  190,  190,  190,  190,  193,  193,
      193,  193,  193,  196,  196,  196,  196,  196,  201,  201,
      201,  201,  201,  204,  204,  204,  204,  204,  208,  208,
      208,  208,  208,  212,  212,  212,  212,  212,  215,  215,
      215,  215,  215,  217,  217,  217,  217,  217,  221,  221,
      221,  221,  221,  226,  226,  226,  226,  226,  228,  228,
      228,  228,  228,  232,  232,  232,  232,  232,  237,  237,
      237,  237,  237,  242,  242,  242,  242,  242,  244,  244,
      244,  244,  244,  249,  249,  249,  249,  249,  254,  254,

      254,  254,  254,  314,  314,  314,  314,  314,  317,  317,
      317,  317,  317,  319,  319,  319,  319,  319,  323,  323,
      323,  323,  323,  328,  328,  328,  328,  328,  336,  336,
      336,  336,  336,  341,  341,  341,  341,  341,  344,  344,
      344,  344,  344,  346,  346,  346,  346,  346,  351,  351,
      351,  351,  351,  354,  354,  354,  354,  354,  357,  357,
      357,  357,  357,  361,  361,  361,  361,  361,  364,  364,
      364,  364,  364,  367,  367,  367,  367,  367,  373,  373,
      373,  373,  373,  386,  386,  386,  386,  386,  389,  389,
      389,  389,  389,  393,  393,  393,  393,  393,  397,  397,

      397,  397,  397,  400,  400,  400,  400,  400,  403,  403,
      403,  403,  403,  409,  409,  409,  409,  409,  410,  410,
      410,  410,  410,   82,   82,  476,  476,  476,  476,  476,
      479,  479,  479,  479,  479,  481,  481,  481,  481,  481,
      485,  485,  485,  485,  485,  323,  323,  323,  323,  323,
      493,  493,  493,  493,  493,  496,  496,  496,  496,  496,
      498,  498,  498,  498,  498,  502,  502,  502,  502,  502,
      507,  507,  507,  507,  507,  510,  510,  510,  510,  510,
      513,  513,  513,  513,  513,  517,  517,  517,  517,  517,
      519,  519,  519,  519,  519,  523,  523,  523,  523,  523,

      527,  527,  527,  527,  527,  537,  537,  537,  537,  537,
      540,  540,  540,  540,  540,  545,  545,  545,  545,  545,
      548,  548,  548,  548,  548,  550,  550,  550,  550,  550,
      554,  554,  554,  554,  554,  563,  563,  563,  563,  563,
      564,  564,  564,  564,  564,  190,  190,  190,  190,  190,
      567,  567,  567,  567,  567,  570,  570,  570,  570,  570,
      575,  575,  575,  575,  575,   82,   82,  636,  636,  636,
      636,  636,  639,  639,  639,  639,  639,  641,  641,  641,
      641,  641,  644,  644,  644,  644,  644,  648,  648,  648,
      648,  648,  651,  651,  651,  651,  651,  653,  653,  653,

      653,  653,  656,  656,  656,  656,  656,  663,  663,  663,
      663,  663,  666,  666,  666,  666,  666,  669,  669,  669,
      669,  669,  671,  671,  671,  671,  671,  674,  674,  674,
      674,  674,  676,  676,  676,  676,  676,  682,  682,  682,
      682,  682,  684,  684,  684,  684,  684,  688,  688,  688,
      688,  688,  691,  691,  691,  691,  691,  693,  693,  693,
      693,  693,  696,  696,  696,  696,  696,  702,  702,  702,
      702,  702,  703,  703,  703,  703,  703,  706,  706,  706,
      706,  706,  708,  708,  708,  708,  708,  226,  226,  226,
      226,  226,  711,  711,  711,  711,  711,  718,  718,  718,

      718,  718,  190,  190,  190,  190,  190,  721,  721,  721,
      721,  721,  724,  724,  724,  724,  724,   82,   82,  784,
      784,  784,  784,  784,  787,  787,  787,  787,  787,  789,
      789,  789,  789,  789,  794,  794,  794,  794,  794,  802,
      802,  802,  802,  802,  805,  805,  805,  805,  805,  807,
      807,  807,  807,  807,  812,  812,  812,  812,  812,  820,
      820,  820,  820,  820,  825,  825,  825,  825,  825,  830,
      830,  830,  830,  830,  833,  833,  833,  833,  833,  835,
      835,  835,  835,  835,  840,  840,  840,  840,  840,  844,
      844,  844,  844,  844,  846,  846,  846,  846,  846,  856,

      856,  856,  856,  856,  859,  859,  859,  859,  859,  864,
      864,  864,  864,  864,  867,  867,  867,  867,  867,  869,
      869,  869,  869,  869,  874,  874,  874,  874,  874,  883,
      883,  883,  883,  883,  884,  884,  884,  884,  884,  887,
      887,  887,  887,  887,  889,  889,  889,  889,  889,  894,
      894,  894,  894,  894,  242,  242,  242,  242,  242,  901,
      901,  901,  901,  901,  904,  904,  904,  904,  904,  906,
      906,  906,  906,  906,  226,  226,  226,  226,  226,  911,
      911,  911,  911,  911,   82,   82,  784,  784,  784,  784,
      784,  787,  787,  787,  787,  787,  789,  789,  789,  789,

      789,  794,  794,  794,  794,  794,  805,  805,  805,  805,
      805,  807,  807,  807,  807,  807,  812,  812,  812,  812,
      812,  820,  820,  820,  820,  820,  190,  190,  190,  190,
      190,  981,  981,  981,  981,  981,  984,  984,  984,  984,
      984,  825,  825,  825,  825,  825,  990,  990,  990,  990,
      990,  993,  993,  993,  993,  993,  995,  995,  995,  995,
      995,  830,  830,  830,  830,  830,  833,  833,  833,  833,
      833,  835,  835,  835,  835,  835,  846,  846,  846,  846,
      846,  840,  840,  840,  840,  840,  844,  844,  844,  844,
      844,  856,  856,  856,  856,  856,  859,  859,  859,  859,

      859,  864,  864,  864,  864,  864,  867,  867,  867,  867,
      867,  869,  869,  869,  869,  869,  874,  874,  874,  874,
      874,  883,  883,  883,  883,  883,  884,  884,  884,  884,
      884,  887,  887,  887,  887,  887,  889,  889,  889,  889,
      889,  894,  894,  894,  894,  894,  901,  901,  901,  901,
      901,  904,  904,  904,  904,  904,  906,  906,  906,  906,
      906,  911,  911,  911,  911,  911,  802,  802,  802,  802,
      802,   82,   82,  789,  789,  789,  789,  789,  794,  794,
      794,  794,  794,  807,  807,  807,  807,  807,  812,  812,
      812,  812,  812,  981,  981,  981,  981,  981,  226,  226,

      226,  226,  226, 1081, 1081, 1081, 1081, 1081,  984,  984,
      984,  984,  984, 1086, 1086, 1086, 1086, 1086,  990,  990,
      990,  990,  990, 1091, 1091, 1091, 1091, 1091,  993,  993,
      993,  993,  993, 1093, 1093, 1191, 1093, 1093,  995,  995,
      995,  995,  995,  835,  835,  835,  835,  835,  846,  846,
      846,  846,  846,  840,  840,  840,  840,  840,  844,  844,
      844,  844,  844,  856,  856,  856,  856,  856,  859,  859,
      859,  859,  859,  869,  869,  869,  869,  869,  874,  874,
      874,  874,  874,  889,  889,  889,  889,  889,  894,  894,
      894,  894,  894,  911,  911,  911,  911,  911,  901,  901,

      901,  901,  901,   82,   82,   23, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191
    } ;

static yyconst flex_int16_t yy_chk[5075] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    7,    9,    8,
       10, 1190,   11,   12,    7,    7,    8,    8,   26,   11,
       12,   21,   21,   21,   21,   11,   12,   75,   26,   75,
       75,    1,    1,    1,   32,   32,   13,   14,  147,   34,
      147,  147,   32,   13,   14,   80,   46,    9,    9,   10,
       10,   11,   12,   34, 1189,   80,   46,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   13,   14,   36,   15,   34,
       15,   15,   15,   46,   43,   15,  103,   65,   15,   65,

       66,   43,   66,   65,   36,  103,   66,   68,  117,    2,
        2,    2,  117,   68,  118,   16,   40,   16,   16,   16,
      118, 1186,   16,   86,   86,   16, 1185,   15,   43, 1181,
       36,   86,  103,   40, 1175,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   15,   16,   22,   22,   22,   22,   40,
       39,   69,  109,   69,  104,   22,  109,   69,   39,   91,
      104, 1173,   91,   22, 1164,   39,   39,    3,    3,    3,
       16, 1163,   37,   70,   70,   70,   70,  121,  122, 1162,
       70,  121, 1161,  109,  122,   39,   37,  104,   37,   91,

       22,   39,   39,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,   33,   37,   41,   37,   33,   38,   44,  150, 1160,
       72,   42,   72,   77,   44,   77,   72,   78,  125,   78,
       41,   33,  125,   38,   72,    4,    4,    4,   38,   44,
       42,   89,   33,   42,   77,  150,   92, 1157,   78,   92,
       87,   44,   94,   88,   90, 1155,   41,   33,   89,   38,
      264,    4,    5,   94,   38,   44,   42, 1153,   98,   42,
       87,   77, 1152,   88,   90,   78,   92,    5,    5,    5,
        5,    5,    5, 1143,   89,    5,  264,   98,    5,    5,

       94,  127,    5,    5,    5,    5,   87,  127,    5,   88,
       90,  203,  203,  203,    5,    5,    5,    5,    5,    5,
       96,  101,    5,   98,    5,    5,   99,   96,    5,    5,
        5,    5,   93,   45,    5,   20,   20,   20,   20,  101,
       96,   20,   99,   45,   20,  112,   20,   93,   93,   20,
       45,  131,   20,   20,   96, 1142,  102,  131,  105,   45,
      152,   97,   95,  112,   95,  101,   96,   97,   99,   95,
       45,  106,  138,   93,   93,  105,   45,  102,  138,   20,
       20,   35,   97,   97,   35,   45,   95,  152,   95,  112,
      106,   35, 1134,  188,   97,   35,   95, 1124,   35,  188,

       35,  105,  156,  102,  116,  108,  116,  156,   97,   97,
      116,   35,   95,  166,   95, 1123,  106,  107,   35,  108,
      107,   35,  107,  166,   35, 1122,   35,   67,   67,   67,
       67,   67,   67,   67,  156,   67,   67,   67,   67,   67,
       67,   67,   67,   67,  110,  108,  113,  107,  164,  107,
      166,  110,  176,  113,  119,  119,  119,  119,  120,  157,
      120,  119,  277,  176,  120,  164,  157, 1116,   67,   67,
      123,  123,  123,  123,  204,  124,  204,  124,  110, 1098,
      113,  124,  128,  158,  128,  133,  133,  133,  128,  277,
      176,  164,  133,  157,   67,   71,   71,   71,   71,   71,

       71,   71,  158,   71,   71,   71,   71,   71,   71,   71,
       71,   71,  129,  129,  129,  129, 1095, 1094,  155,  129,
      134,  134,  134,  134,  135, 1093,  135,  134,  158,  155,
      135,  136,  136,  136,  136,  155,   71,   71,  136,  139,
      139,  139,  139,  140,  172,  140,  139,  172,  481,  140,
      481,  142,  143,  142,  143,  165,  155,  142,  143,  165,
     1092,  155,   71,   73,   73,   73,   73,  143,  154,  144,
       73,  144,  159,  160,  172,  144,  145,  142,  145,   73,
      161,  143,  145,  142,  180, 1090,  165,  144, 1085,  154,
       73,  160,  159,   73,  143,   73,  144,  144,  180,  145,

     1079,  161,   73,  142,  162,  191,   73,  143,  190,  142,
     1076,  191,  190, 1075,  144,  154,   73,  160,  159,   73,
     1071,   73,  144,  144,  180,  162,  145,  161,   73,  126,
      126,  126,  126,  126,  126,  126,  170,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  146,  148,  146,  148,
      167,  162,  146,  168,  173,  170,  149,  218,  149,  173,
      168,  218,  250,  146, 1068,  167,  250,  151,  148,  151,
      126,  126,  174,  187,  193,  187,  184,  149,  171,  187,
      193,  170,  175,  227,  227,  227,  173,  168,  151,  175,
      146,  167,  184,  171,  174,  148,  126,  130,  130,  130,

      130,  130,  130,  130,  149,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  163,  151,  175,  178,  184,  171,
      174,  179,  178,  411,  182, 1065,  178,  411,  179,  185,
      177,  182, 1062,  163,  181,  498,  185,  498,  130,  130,
     1058,  163,  183,  186,  189,  189,  189,  189,  196,  178,
      196,  189,  177,  178,  196,  179,  181,  183,  182,  163,
      265,  183,  186,  185,  130,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  177,  141,
      141,  141,  181,  183, 1057,  272,  265,  183,  186,  192,
      192,  192,  192,  195,  195,  195,  197,  197,  197,  197,

      195,  276,  273,  197,  199,  272,  141,  141,  141,  201,
      199,  200,  200,  200,  200,  201,  273, 1051,  200,  205,
      205,  205,  205,  208,  209,  208,  267,  276,  215,  208,
      209,  272,  141,  169,  215,  267,  169,  169,  169,  169,
      169,  169,  273,  212,  169,  212, 1049, 1048,  169,  212,
      217,  169,  217,  169,  169,  219,  217,  169, 1037, 1033,
      269,  219,  267,  169,  169,  169,  169,  169,  169,  224,
      221,  169,  221,  269,  169,  224,  221,  169, 1029,  169,
      169, 1025,  228,  169,  210,  210,  210,  210,  228, 1021,
     1017,  210,  211,  211,  211,  211,  211,  211,  211,  269,

      211,  211,  211,  211,  211,  211,  211,  211,  211,  213,
      213,  213,  213,  216,  216,  216,  213,  294, 1013,  235,
      216,  220,  220,  220,  220,  235, 1007,  294,  220,  222,
      222,  222,  222,  211,  211, 1005,  222,  225,  225,  225,
      225,  229,  229,  229,  225,  231,  231,  231,  229,  232,
      239,  232,  231,  279,  294,  232,  239, 1001,  997,  211,
      214,  214,  214,  214,  214,  214,  214,  279,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  233,  233,  233,
      233,  325,  325,  325,  233,  236,  236,  236,  236,  237,
      994,  237,  236,  279,  244,  237,  240,  240,  240,  240,

      244,  214,  214,  240,  241,  241,  241,  241,  246,  246,
      246,  241,  986,  982,  275,  246,  247,  247,  247,  247,
      249,  284,  249,  247,  251,  275,  249,  214,  978,  974,
      251,  252,  252,  252,  252,  284,  970,  966,  252,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  275,  253,  253,  253,  254,  255,  254,  255,
      278,  284,  254,  255,  257,  256,  257,  256,  954,  283,
      257,  256,  258,  260,  258,  260,  278,  953,  258,  260,
      253,  253,  253,  255,  256,  259,  261,  259,  261,  283,
      286,  259,  261,  268,  266,  262,  257,  262,  268,  270,

      260,  262,  278,  260,  258,  270,  253,  286,  259,  255,
      263,  256,  263,  266,  271,  283,  263,  271,  274,  261,
      280,  274,  257,  285,  288,  268,  260,  281,  262,  260,
      258,  280,  270,  286,  281,  259,  263,  287,  291,  266,
      282,  288,  285,  290,  271,  261,  288,  289,  274,  293,
      295,  282,  298,  287,  262,  289,  297,  291,  280,  292,
      290,  281,  263,  289,  282,  299,  292,  288,  285,  933,
      297,  315,  288,  298,  302,  293,  295,  315,  282,  287,
      932,  292,  289,  291,  299,  300,  290,  301,  302,  289,
      282,  303,  301,  292,  300,  308,  297,  304,  303,  298,

      308,  293,  295,  307,  300,  313,  309,  292,  312,  310,
      299,  317,  313,  312,  302,  915,  304,  317,  513,  301,
      513,  300,  307,  309,  312,  303,  310,  308,  908,  314,
      300,  314,  319,  576,  319,  314,  821,  576,  319,  313,
      821,  321,  304,  316,  316,  316,  316,  321,  307,  309,
      316,  312,  310,  318,  318,  318,  320,  320,  320,  320,
      318,  891,  323,  320,  322,  322,  322,  322,  323,  871,
      328,  322,  326,  326,  326,  326,  328,  329,  329,  329,
      331,  331,  331,  424,  329,  425,  837,  331,  334,  334,
      334,  334,  337,  337,  337,  334,  341,  342,  341,  378,

      378,  378,  341,  342,  343,  343,  343,  343,  344,  809,
      424,  343,  425,  348,  344,  345,  345,  345,  346,  348,
      346,  791,  345,  355,  346,  347,  347,  347,  347,  355,
      778,  359,  347,  349,  349,  349,  349,  359,  773,  771,
      349,  350,  350,  350,  350,  350,  350,  350,  436,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  351,  426,
      351,  437,  426,  768,  351,  352,  352,  352,  352,  354,
      361,  354,  352,  758,  436,  354,  361,  356,  356,  356,
      356,  752,  350,  350,  356,  357,  744,  357,  437,  426,
      364,  357,  358,  358,  358,  358,  364,  743,  370,  358,

      360,  360,  360,  360,  370,  726,  722,  360,  350,  353,
      353,  353,  353,  353,  353,  353,  427,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  362,  362,  362,  363,
      363,  363,  427,  362,  717,  373,  363,  366,  366,  366,
      367,  373,  367,  386,  366,  386,  367,  714,  635,  386,
      353,  353,  368,  368,  368,  368,  624,  622,  427,  368,
      371,  371,  371,  371,  375,  375,  375,  371,  480,  480,
      480,  375,  376,  376,  376,  376,  353,  607,  591,  376,
      381,  381,  381,  384,  384,  384,  384,  381,  387,  428,
      384,  573,  572,  389,  387,  388,  388,  388,  388,  389,

      428,  443,  388,  390,  390,  390,  391,  391,  391,  391,
      390,  443,  568,  391,  392,  392,  392,  392,  395,  395,
      395,  392,  397,  398,  397,  395,  561,  428,  397,  398,
      399,  399,  399,  399,  400,  558,  554,  399,  443,  406,
      400,  402,  402,  402,  403,  406,  403,  441,  402,  412,
      403,  404,  404,  404,  404,  412,  552,  540,  404,  407,
      407,  407,  407,  441,  538,  534,  407,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      442,  408,  408,  408,  409,  410,  409,  410,  442,  441,
      409,  410,  413,  413,  413,  413,  414,  602,  414,  413,

      431,  415,  414,  415,  519,  431,  519,  415,  408,  408,
      408,  416,  417,  416,  417,  442,  531,  416,  417,  418,
      419,  418,  419,  602,  429,  418,  419,  420,  527,  420,
      429,  417,  431,  420,  408,  523,  421,  430,  421,  422,
      433,  422,  421,  416,  430,  422,  418,  433,  423,  419,
      423,  421,  434,  420,  423,  432,  444,  429,  417,  421,
      435,  432,  422,  434,  452,  435,  432,  423,  438,  416,
      439,  430,  418,  438,  433,  419,  444,  439,  421,  420,
      445,  440,  449,  448,  521,  452,  421,  446,  432,  422,
      434,  450,  435,  432,  423,  440,  454,  445,  446,  457,

      438,  449,  444,  453,  439,  448,  455,  450,  458,  453,
      456,  452,  460,  454,  456,  458,  464,  457,  461,  465,
      455,  440,  465,  445,  464,  446,  460,  449,  462,  461,
      463,  448,  470,  450,  467,  462,  453,  463,  466,  454,
      467,  456,  458,  457,  468,  466,  455,  468,  469,  465,
      474,  464,  460,  470,  471,  472,  461,  476,  515,  476,
      471,  502,  462,  476,  463,  477,  588,  467,  469,  479,
      474,  477,  466,  500,  468,  479,  537,  472,  537,  470,
      478,  478,  478,  478,  486,  486,  486,  471,  482,  482,
      482,  482,  485,  588,  469,  494,  474,  484,  484,  484,

      484,  494,  483,  472,  487,  487,  487,  488,  488,  488,
      488,  489,  489,  489,  491,  491,  491,  493,  550,  493,
      550,  475,  496,  493,  495,  495,  495,  495,  496,  497,
      497,  497,  499,  499,  499,  499,  501,  501,  501,  501,
      503,  503,  503,  504,  504,  504,  505,  505,  505,  505,
      506,  506,  506,  507,  511,  507,  506,  459,  451,  507,
      511,  506,  508,  508,  508,  508,  509,  509,  509,  510,
      517,  510,  509,  447,  405,  510,  517,  509,  512,  512,
      512,  512,  514,  514,  514,  514,  516,  516,  516,  516,
      518,  518,  518,  520,  520,  520,  520,  522,  522,  522,

      522,  524,  524,  524,  525,  525,  525,  525,  526,  526,
      526,  528,  528,  528,  530,  530,  530,  533,  533,  533,
      533,  535,  535,  535,  539,  539,  539,  539,  541,  541,
      541,  542,  542,  542,  542,  543,  543,  543,  544,  544,
      544,  544,  545,  546,  545,  549,  549,  549,  545,  546,
      547,  547,  547,  547,  548,  551,  551,  551,  551,  401,
      548,  553,  553,  553,  553,  555,  555,  555,  557,  557,
      557,  560,  560,  560,  560,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  589,  562,
      562,  562,  563,  564,  563,  564,  565,  393,  563,  564,

      385,  567,  565,  566,  566,  566,  566,  567,  569,  569,
      569,  570,  383,  570,  377,  589,  562,  562,  562,  571,
      571,  571,  571,  574,  574,  574,  574,  575,  577,  575,
      372,  369,  594,  575,  577,  578,  578,  578,  578,  579,
      594,  579,  562,  590,  580,  579,  580,  581,  590,  581,
      580,  365,  582,  581,  582,  583,  592,  583,  582,  592,
      339,  583,  584,  585,  584,  585,  581,  594,  584,  585,
      586,  587,  586,  587,  583,  590,  586,  587,  593,  595,
      582,  593,  596,  597,  585,  584,  592,  586,  598,  596,
      336,  585,  600,  581,  599,  600,  601,  603,  605,  335,

      595,  583,  604,  597,  606,  605,  582,  604,  593,  611,
      599,  585,  584,  598,  586,  332,  596,  585,  609,  603,
      604,  608,  600,  601,  615,  606,  595,  612,  608,  597,
      611,  615,  605,  610,  604,  609,  599,  613,  610,  598,
      613,  616,  612,  614,  617,  603,  604,  618,  614,  617,
      620,  606,  621,  617,  618,  608,  611,  620,  615,  619,
      623,  609,  327,  616,  625,  610,  626,  613,  612,  626,
      629,  621,  627,  630,  619,  614,  617,  623,  619,  631,
      617,  618,  324,  625,  620,  634,  627,  628,  630,  616,
      631,  633,  629,  748,  632,  628,  626,  621,  735,  632,

      619,  311,  637,  623,  619,  628,  634,  628,  637,  625,
      639,  306,  627,  633,  630,  632,  639,  631,  629,  636,
      748,  636,  628,  305,  735,  636,  632,  638,  638,  638,
      638,  628,  634,  628,  638,  640,  640,  640,  641,  633,
      641,  632,  640,  643,  641,  642,  642,  642,  642,  643,
      644,  649,  642,  645,  645,  645,  644,  649,  296,  248,
      645,  646,  646,  646,  646,  647,  647,  647,  646,  648,
      243,  648,  647,  736,  651,  648,  650,  650,  650,  650,
      651,  242,  655,  650,  652,  652,  652,  653,  655,  653,
      238,  652,  656,  653,  654,  654,  654,  654,  656,  736,

      737,  654,  657,  657,  657,  658,  658,  658,  658,  657,
      234,  226,  658,  659,  659,  659,  660,  660,  660,  223,
      659,  737,  660,  661,  661,  661,  661,  662,  742,  662,
      661,  664,  663,  662,  663,  207,  742,  664,  663,  665,
      665,  665,  665,  666,  206,  666,  665,  737,  668,  666,
      667,  667,  667,  667,  668,  669,  202,  667,  670,  670,
      670,  669,  671,  742,  671,  670,  738,  673,  671,  672,
      672,  672,  672,  673,  674,  198,  672,  194,  137,  676,
      674,  675,  675,  675,  675,  676,  132,  738,  675,  677,
      677,  677,  678,  678,  678,  678,  677,  114,  111,  678,

      679,  679,  679,  680,  680,  680,  682,  679,  682,  683,
      680,  684,  682,  738,  100,  683,   84,  684,  685,  685,
      685,  685,  686,  686,  686,  685,   82,   81,   63,  686,
      687,  687,  687,  687,  688,  689,  688,  687,   29,   28,
      688,  689,  690,  690,  690,  690,  691,   23,   19,  690,
       18,  695,  691,  692,  692,  692,  693,  695,  693,   17,
      692,  696,  693,  694,  694,  694,  694,  696,    6,    0,
      694,  697,  697,  697,  698,  698,  698,  698,  697,  704,
      706,  698,  699,  699,  699,  704,  706,    0,    0,  699,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,

      701,  701,  701,    0,  701,  701,  701,  702,  703,  702,
      703,    0,    0,  702,  703,  705,  705,  705,  705,  707,
      707,  707,  705,  708,  710,  708,  707,    0,    0,  708,
      710,  701,  701,  701,  709,  709,  709,  709,  711,  740,
     1045,  709,  740,    0,  711,  712,  712,  712,  716,  716,
      716,  716,  712,  719,  718,  716,  718,  701,    0,  719,
      718,  720,  720,  720,  720,  721,  746, 1045,  720,  740,
      727,  721,  723,  723,  723,  724,  727,  724,  745,  723,
      746,  724,  725,  725,  725,  725,  728,    0,  728,  725,
      739,  729,  728,  729,  730,  747,  730,  729,  745,  731,

      730,  731,  732,  750,  732,  731,  746,  733,  732,  733,
      734,  739,  734,  733,  728,  741,  734,    0,  759,  749,
      750,  747,  741,  751,  745,  734,  753,  731,  754,  753,
      756,  730,  759,  757,  755,  761,  732,  739,  749,  755,
      728,  733,  751,  756,  757,  762,  750,  754,  763,  741,
        0,  760,  734,  731,  761,  763,  753,  730,  759,  762,
      764,  766,  732,    0,  749,  765,  755,  733,  751,  756,
      765,  757,  760,  754,  767,  775,  769,  770,  766,  764,
      761,  772,  763,  769,  774,  762,  772,  776,  777,  779,
      781,  767,  780,  770,  775,  780,  785,  765,  760,  924,

      782,    0,  785,    0,  766,  764,  774,  777,    0,  776,
      769,  925,  779,  772,  782,  783,  781,  767,  787,  770,
      775,  784,  780,  784,  787,  924,  783,  784,  792,  788,
      788,  788,  774,  777,  792,  776,  788,  925,  779,    0,
      782,  794,  781,  786,  786,  786,  786,  794,  803,  789,
      786,  789,  934,  783,  803,  789,  790,  790,  790,  790,
        0, 1046, 1101,  790,  793,  793,  793,  793,  795,  795,
      795,  793,  797,  797,  797,  795,    0,    0,  934,  797,
      798,  798,  798,  798,  799,  799,  799,  798, 1046, 1101,
        0,  799,  800,  800,  800,  800,  801,  801,  801,  800,

      802,  928,  802,  801,  928,  805,  802,  804,  804,  804,
      804,  805,    0,  810,  804,  806,  806,  806,  807,  810,
      807, 1053,  806,  812,  807,  808,  808,  808,  808,  812,
     1102,  928,  808,  811,  811,  811,  811,  813,  813,  813,
      811,  815,  815,  815,  813,    0,    0, 1053,  815,  816,
      816,  816,  816,  817,  817,  817,  816, 1102,    0,    0,
      817,  818,  818,  818,  818,  819,  819,  819,  818,  820,
      962,  820,  819,  823,  828,  820,  822,  822,  822,  823,
      828, 1055,  822,  824,  824,  824,  824,  825,  962,  825,
      824,    0,    0,  825,  826,  826,  826,  826,  827, 1055,

      827,  826,    0,    0,  827,  829,  829,  829,  829,  830,
      831,  830,  829,    0,  962,  830,  831,  832,  832,  832,
      832,  833,    0,    0,  832, 1055,  838,  833,  834,  834,
      834,  835,  838,  835,    0,  834,  841,  835,  836,  836,
      836,  836,  841,  930,  927,  836,  839,  839,  839,  839,
      840,  927,  840,  839,    0,  844,  840,  842,  842,  842,
      842,  844,  930,    0,  842,  843,  843,  843,  843,  845,
      845,  845,  843,  846,    0,    0,  845,    0,  927,  846,
      847,  847,  847,  849,  849,  849,  926,  847,  930,  857,
      849,  850,  850,  850,  850,  857,    0,  926,  850,  851,

      851,  851,  851,  852,  852,  852,  851,    0,    0, 1106,
      852,  853,  853,  853,  853,  854,  854,  854,  853,  855,
      855,  855,  854,  856,  926,  856,  855,    0,  859,  856,
      858,  858,  858,  858,  859,  941, 1106,  858,  860,  860,
      860,  861,  861,  861,  861,  860,  941,    0,  861,  862,
      862,  862,  863,  863,  863,  863,  862,  865,  864,  863,
      864,  950,    0,  865,  864,  866,  866,  866,  866,  867,
      929,    0,  866,  941,  872,  867,  868,  868,  868,  869,
      872,  869,  950,  868,  874,  869,  870,  870,  870,  870,
      874,  937,  929,  870,  873,  873,  873,  873,  875,  875,

      875,  873,  877,  877,  877,  875,  937,    0,  950,  877,
      878,  878,  878,  878,  879,  879,  879,  878,  929,    0,
        0,  879,  880,  880,  880,  880,  881,  881,  881,  880,
     1131,    0,  937,  881,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,    0,  882,  882,
      882,  883,  884,  883,  884,  885, 1131,  883,  884, 1132,
      887,  885,  886,  886,  886,  886,  887,    0,  889,  886,
      889,  888,  888,  888,  889,  882,  882,  882,  888,  890,
      890,  890,  890,  892,    0, 1132,  890,    0,  894,  892,
      893,  893,  893,  893,  894,    0,    0,  893,  895,  895,

      895,  882,  897,  897,  897,  895,    0,    0,    0,  897,
      898,  898,  898,  898,  899,  899,  899,  898,    0,    0,
        0,  899,  900,  900,  900,  900,  901,  902,  901,  900,
        0,  961,  901,  902,  903,  903,  903,  903,  904,    0,
        0,  903,    0,  909,  904,  905,  905,  905,  906,  909,
      906,  961,  905,  911,  906,  907,  907,  907,  907,  911,
        0,    0,  907,  910,  910,  910,  910,  912,  912,  912,
      910,  914,  914,  914,  912,    0,  936,  961,  914,  916,
      916,  916,  916,  918,  931,  918,  916,  931,  919,  918,
      919,  920,  957,  920,  919,  936,  921,  920,  921,  922,

      938,  922,  921,  939,  923,  922,  923,  938,  943,  957,
      923, 1136,  940,  943,  931,  918,  945,  939,  922,  940,
      942,  936,  944,  920,  946,  921,  942,  945,  952, 1156,
      923,  947,  946,  948,  938,  957,  944, 1136,  947,  948,
      943,  918,  951,  939,  949,  922,  940,  949,  951,  920,
      952,  921,  956,  942,  945, 1156,  923,  955, 1139,  946,
        0,  964,  944,  959,  955,  947,  948,  958,  956,    0,
      959,  958,  960,  963,  949,  951,  952,  964, 1139,  960,
      963,  965,  965,  965,  965,  967,  967,  967,  965,  981,
      987,  955,  967,    0,  956,  981,  987,  959,  958,  984,

        0,  984, 1047,  964, 1139,  984,  960,  963,  969,  969,
      969,  969,  971,  971,  971,  969,    0,    0, 1047,  971,
      973,  973,  973,  973,  975,  975,  975,  973,    0,    0,
        0,  975,  977,  977,  977,  977,  979,  979,  979,  977,
      983,  983,  983,  979, 1047,    0,  992,  983,  985,  985,
      985,  985,  992,    0, 1054,  985,  988,  988,  988,  988,
      989, 1054,  989,  988,    0,  990,  989,  990,  991,  993,
      991,  990, 1063,  998,  991,  993,  995, 1059,  995,  998,
     1059, 1081,  995,  996,  996,  996,  996, 1081, 1054, 1063,
      996,  999,  999,  999,  999,    0,    0,    0,  999, 1000,

     1000, 1000, 1000, 1002, 1002, 1002, 1000, 1059,    0, 1077,
     1002, 1004, 1004, 1004, 1004, 1063, 1077, 1050, 1004, 1006,
     1006, 1006, 1006, 1008, 1008, 1008, 1006, 1010, 1010, 1010,
     1008, 1050,    0, 1052, 1010, 1012, 1012, 1012, 1012, 1014,
     1014, 1014, 1012, 1077,    0, 1066, 1014, 1016, 1016, 1016,
     1016, 1018, 1018, 1018, 1016, 1052,    0, 1050, 1018, 1020,
     1020, 1020, 1020, 1022, 1022, 1022, 1020, 1066,    0,    0,
     1022, 1024, 1024, 1024, 1024, 1026, 1026, 1026, 1024,    0,
        0, 1052, 1026, 1028, 1028, 1028, 1028, 1030, 1030, 1030,
     1028,    0,    0, 1066, 1030, 1032, 1032, 1032, 1032, 1034,

     1034, 1034, 1032,    0,    0,    0, 1034, 1036, 1036, 1036,
     1036, 1038, 1038, 1038, 1036, 1040,    0, 1040, 1038, 1056,
     1041, 1040, 1041, 1042, 1056, 1042, 1041, 1067, 1043, 1042,
     1043, 1044, 1060, 1044, 1043, 1060, 1061, 1044, 1040, 1061,
     1064, 1069, 1067, 1064, 1072, 1073, 1070, 1078, 1080, 1072,
     1073, 1056, 1074, 1086, 1078, 1080, 1114, 1042, 1091, 1086,
        0, 1114, 1060, 1069, 1091, 1040, 1061, 1070, 1067, 1109,
     1064, 1074, 1082, 1082, 1082,    0, 1072, 1073, 1105, 1082,
     1109, 1078, 1080, 1042, 1084, 1084, 1084, 1103, 1114, 1069,
        0, 1084, 1105, 1070, 1088, 1088, 1088, 1074,    0, 1107,

        0, 1088, 1089, 1089, 1089, 1089, 1104, 1109, 1103, 1089,
     1097, 1097, 1097, 1097, 1099, 1107, 1099, 1097, 1105, 1100,
     1099, 1100, 1108, 1110, 1111, 1100, 1112, 1104, 1115, 1119,
     1113, 1120,    0,    0, 1103, 1117, 1108, 1121, 1120,    0,
     1112, 1107,    0, 1099, 1110, 1111, 1113, 1115, 1118, 1117,
     1119, 1100,    0, 1104, 1121,    0, 1125, 1125, 1125, 1118,
     1133,    0, 1108, 1125,    0, 1120, 1112, 1133, 1135, 1099,
     1110, 1111, 1113, 1115, 1137, 1117, 1119, 1100, 1149,    0,
     1121, 1127, 1127, 1127, 1149, 1129, 1118, 1129, 1127, 1135,
     1130, 1129, 1130, 1138, 1133, 1137, 1130, 1140, 1141, 1144,

     1138, 1141, 1145, 1146, 1140, 1148, 1144, 1147, 1150, 1145,
     1146, 1149, 1151, 1129, 1151, 1135, 1148, 1158, 1151, 1154,
     1168, 1137, 1167, 1147, 1159, 1165, 1171, 1138, 1141, 1166,
     1150, 1140, 1165, 1144, 1171, 1159, 1145, 1146, 1154, 1129,
     1174, 1168, 1158, 1148, 1167, 1179, 1166, 1176, 1179, 1147,
     1177, 1182,    0,    0, 1178, 1180, 1150, 1174, 1182, 1165,
     1183, 1171, 1159, 1176, 1154, 1178,    0, 1168, 1158, 1177,
     1167, 1180, 1166, 1184, 1187, 1179, 1183, 1188, 1184,    0,
        0, 1187,    0, 1174, 1188, 1182,    0,    0,    0, 1176,
        0,    0, 1178,    0,    0, 1177,    0, 1180,    0,    0,

        0,    0, 1183,    0,    0, 1184,    0,    0, 1187,    0,
        0, 1188, 1192, 1192, 1192, 1192, 1192, 1193, 1193, 1193,
     1193, 1193, 1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195,
     1195, 1195, 1196, 1196, 1196, 1196, 1196, 1197, 1197, 1197,
     1197, 1197, 1198, 1198, 1198, 1198, 1198, 1199, 1199, 1199,
     1199, 1199, 1200, 1200, 1200, 1200, 1200, 1201, 1201, 1202,
        0, 1202, 1202, 1203, 1203, 1203, 1203, 1203, 1204, 1204,
     1204, 1204, 1204, 1205, 1205, 1205, 1205, 1205, 1206, 1206,
     1206, 1206, 1206, 1207, 1207, 1207, 1207, 1207, 1208, 1208,
     1208, 1208, 1208, 1209, 1209, 1209, 1209, 1209, 1210, 1210,

     1210, 1210, 1211,    0, 1211, 1212,    0, 1212, 1213, 1213,
     1213, 1213, 1213, 1214, 1214, 1214, 1214, 1214, 1215, 1215,
     1215, 1215, 1215, 1216, 1216, 1216, 1216, 1216, 1217, 1217,
     1217, 1217, 1217, 1218, 1218, 1218, 1218, 1218, 1219, 1219,
     1219, 1219, 1219, 1220, 1220, 1220, 1220, 1220, 1221, 1221,
     1221, 1221, 1221, 1222, 1222, 1222, 1222, 1222, 1223, 1223,
     1223, 1223, 1223, 1224, 1224, 1224, 1224, 1224, 1225, 1225,
     1225, 1225, 1225, 1226, 1226, 1226, 1226, 1226, 1227, 1227,
     1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228, 1229, 1229,
     1229, 1229, 1229, 1230, 1230, 1230, 1230, 1230, 1231, 1231,

     1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232, 1233, 1233,
     1233, 1233, 1233, 1234, 1234, 1234, 1234, 1234, 1235, 1235,
     1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236, 1237, 1237,
     1237, 1237, 1237, 1238, 1238, 1238, 1238, 1238, 1239, 1239,
     1239, 1239, 1239, 1240, 1240, 1240, 1240, 1240, 1241, 1241,
     1241, 1241, 1241, 1242, 1242, 1242, 1242, 1242, 1243, 1243,
     1243, 1243, 1243, 1244, 1244, 1244, 1244, 1244, 1245, 1245,
     1245, 1245, 1245, 1246, 1246, 1246, 1246, 1246, 1247, 1247,
     1247, 1247, 1247, 1248, 1248, 1248, 1248, 1248, 1249, 1249,
     1249, 1249, 1249, 1250, 1250, 1250, 1250, 1250, 1251, 1251,

     1251, 1251, 1251, 1252, 1252, 1252, 1252, 1252, 1253, 1253,
     1253, 1253, 1253, 1254, 1254, 1254, 1254, 1254, 1255, 1255,
     1255, 1255, 1255, 1256, 1256, 1257, 1257, 1257, 1257, 1257,
     1258, 1258, 1258, 1258, 1258, 1259, 1259, 1259, 1259, 1259,
     1260, 1260, 1260, 1260, 1260, 1261, 1261, 1261, 1261, 1261,
     1262, 1262, 1262, 1262, 1262, 1263, 1263, 1263, 1263, 1263,
     1264, 1264, 1264, 1264, 1264, 1265, 1265, 1265, 1265, 1265,
     1266, 1266, 1266, 1266, 1266, 1267, 1267, 1267, 1267, 1267,
     1268, 1268, 1268, 1268, 1268, 1269, 1269, 1269, 1269, 1269,
     1270, 1270, 1270, 1270, 1270, 1271, 1271, 1271, 1271, 1271,

     1272, 1272, 1272, 1272, 1272, 1273, 1273, 1273, 1273, 1273,
     1274, 1274, 1274, 1274, 1274, 1275, 1275, 1275, 1275, 1275,
     1276, 1276, 1276, 1276, 1276, 1277, 1277, 1277, 1277, 1277,
     1278, 1278, 1278, 1278, 1278, 1279, 1279, 1279, 1279, 1279,
     1280, 1280, 1280, 1280, 1280, 1281, 1281, 1281, 1281, 1281,
     1282, 1282, 1282, 1282, 1282, 1283, 1283, 1283, 1283, 1283,
     1284, 1284, 1284, 1284, 1284, 1285, 1285, 1286, 1286, 1286,
     1286, 1286, 1287, 1287, 1287, 1287, 1287, 1288, 1288, 1288,
     1288, 1288, 1289, 1289, 1289, 1289, 1289, 1290, 1290, 1290,
     1290, 1290, 1291, 1291, 1291, 1291, 1291, 1292, 1292, 1292,

     1292, 1292, 1293, 1293, 1293, 1293, 1293, 1294, 1294, 1294,
     1294, 1294, 1295, 1295, 1295, 1295, 1295, 1296, 1296, 1296,
     1296, 1296, 1297, 1297, 1297, 1297, 1297, 1298, 1298, 1298,
     1298, 1298, 1299, 1299, 1299, 1299, 1299, 1300, 1300, 1300,
     1300, 1300, 1301, 1301, 1301, 1301, 1301, 1302, 1302, 1302,
     1302, 1302, 1303, 1303, 1303, 1303, 1303, 1304, 1304, 1304,
     1304, 1304, 1305, 1305, 1305, 1305, 1305, 1306, 1306, 1306,
     1306, 1306, 1307, 1307, 1307, 1307, 1307, 1308, 1308, 1308,
     1308, 1308, 1309, 1309, 1309, 1309, 1309, 1310, 1310, 1310,
     1310, 1310, 1311, 1311, 1311, 1311, 1311, 1312, 1312, 1312,

     1312, 1312, 1313, 1313, 1313, 1313, 1313, 1314, 1314, 1314,
     1314, 1314, 1315, 1315, 1315, 1315, 1315, 1316, 1316, 1317,
     1317, 1317, 1317, 1317, 1318, 1318, 1318, 1318, 1318, 1319,
     1319, 1319, 1319, 1319, 1320, 1320, 1320, 1320, 1320, 1321,
     1321, 1321, 1321, 1321, 1322, 1322, 1322, 1322, 1322, 1323,
     1323, 1323, 1323, 1323, 1324, 1324, 1324, 1324, 1324, 1325,
     1325, 1325, 1325, 1325, 1326, 1326, 1326, 1326, 1326, 1327,
     1327, 1327, 1327, 1327, 1328, 1328, 1328, 1328, 1328, 1329,
     1329, 1329, 1329, 1329, 1330, 1330, 1330, 1330, 1330, 1331,
     1331, 1331, 1331, 1331, 1332, 1332, 1332, 1332, 1332, 1333,

     1333, 1333, 1333, 1333, 1334, 1334, 1334, 1334, 1334, 1335,
     1335, 1335, 1335, 1335, 1336, 1336, 1336, 1336, 1336, 1337,
     1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338, 1338, 1339,
     1339, 1339, 1339, 1339, 1340, 1340, 1340, 1340, 1340, 1341,
     1341, 1341, 1341, 1341, 1342, 1342, 1342, 1342, 1342, 1343,
     1343, 1343, 1343, 1343, 1344, 1344, 1344, 1344, 1344, 1345,
     1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346, 1347,
     1347, 1347, 1347, 1347, 1348, 1348, 1348, 1348, 1348, 1349,
     1349, 1349, 1349, 1349, 1350, 1350, 1351, 1351, 1351, 1351,
     1351, 1352, 1352, 1352, 1352, 1352, 1353, 1353, 1353, 1353,

     1353, 1354, 1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355,
     1355, 1356, 1356, 1356, 1356, 1356, 1357, 1357, 1357, 1357,
     1357, 1358, 1358, 1358, 1358, 1358, 1359, 1359, 1359, 1359,
     1359, 1360, 1360, 1360, 1360, 1360, 1361, 1361, 1361, 1361,
     1361, 1362, 1362, 1362, 1362, 1362, 1363, 1363, 1363, 1363,
     1363, 1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365, 1365,
     1365, 1366, 1366, 1366, 1366, 1366, 1367, 1367, 1367, 1367,
     1367, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369, 1369,
     1369, 1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371, 1371,
     1371, 1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373,

     1373, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375, 1375,
     1375, 1376, 1376, 1376, 1376, 1376, 1377, 1377, 1377, 1377,
     1377, 1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379, 1379,
     1379, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381, 1381,
     1381, 1382, 1382, 1382, 1382, 1382, 1383, 1383, 1383, 1383,
     1383, 1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385, 1385,
     1385, 1386, 1386, 1386, 1386, 1386, 1387, 1387, 1387, 1387,
     1387, 1388, 1388, 1389, 1389, 1389, 1389, 1389, 1390, 1390,
     1390, 1390, 1390, 1391, 1391, 1391, 1391, 1391, 1392, 1392,
     1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393, 1394, 1394,

     1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395, 1396, 1396,
     1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1398, 1398,
     1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1400, 1400,
     1400, 1400, 1400, 1401, 1401,    0, 1401, 1401, 1402, 1402,
     1402, 1402, 1402, 1403, 1403, 1403, 1403, 1403, 1404, 1404,
     1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405, 1406, 1406,
     1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1408, 1408,
     1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1410, 1410,
     1410, 1410, 1410, 1411, 1411, 1411, 1411, 1411, 1412, 1412,
     1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1414, 1414,

     1414, 1414, 1414, 1415, 1415, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
// $Id: lexer.l 288 2018-07-08 12:24:19Z willem_vermin $
#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include "parser.h"
#include "findent.h"
#include "debug.h"
#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
class line_prep pline;




//  following are keywords starting with c
#line 2048 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_findentfix 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 29 "lexer.l"


#line 2282 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1192 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5006 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 34 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 51 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 56 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 74 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 77 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 85 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 100 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 104 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 120 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 125 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 105:
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 223 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 229 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 230 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 109:
YY_RULE_SETUP
#line 233 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.type_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.type_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.type_dot_operator)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 110:
/* rule 110 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 257 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 263 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 269 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 276 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 283 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 285 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 286 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 288 "lexer.l"
ECHO;
	YY_BREAK
#line 3066 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_findentfix):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1192 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1192 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1191);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 288 "lexer.l"



void lexer_set(class line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(std::string s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:  BEGIN(state_identifier);   break;
      case SKIPALL:     BEGIN(state_skipall);      break;
      case SKIP:        BEGIN(state_skip);         break;
      case SKIPNOOP:    BEGIN(state_skipnoop);     break;
      case KEYWORD:     BEGIN(state_keyword);      break;
      case FINDFORMAT:  BEGIN(state_findformat);   break;
      case FINDENTFIX:  BEGIN(state_findentfix);   break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


