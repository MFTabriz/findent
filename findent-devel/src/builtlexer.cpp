#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1292] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  143,  141,  140,  141,
      137,  136,  141,  138,  139,   16,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
        4,    5,    2,    3,    8,    9,    6,    7,   15,   14,
       10,   12,   11,   13,    1,  142,  142,  106,  142,  106,
      142,  142,  142,  142,  142,  142,  142,  133,  133,  132,
      133,  133,  122,  133,  133,  111,  110,  111,  115,  114,
      115,  115,  134,    0,  136,    0,    0,   16,   17,   16,

        0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
        0,    0,    0,   69,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   87,    0,    0,    0,  106,    0,
       94,    0,    0,    0,   94,    0,    0,    0,  106,    0,
        0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  122,    0,    0,    0,
        0,    0,  127,  109,    0,    0,    0,  135,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   34,    0,    0,
        0,    0,    0,   50,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
        0,    0,   94,    0,    0,    0,   94,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   95,    0,    0,    0,    0,   98,    0,    0,
        0,    0,    0,    0,   96,    0,    0,    0,   98,    0,
        0,    0,   94,    0,    0,    0,    0,    0,    0,   94,
        0,    0,   94,    0,   93,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  123,    0,    0,    0,    0,  109,  109,    0,

      113,  112,    0,    0,    0,    0,   24,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   42,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   66,    0,    0,    0,    0,    0,    0,
        0,    0,   80,   81,    0,    0,    0,    0,   88,   89,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   96,    0,    0,  100,    0,    0,   94,    0,   94,
       94,    0,   94,    0,    0,   94,   94,   94,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   95,    0,    0,    0,   95,    0,    0,  101,
        0,   96,    0,    0,   98,    0,  100,   96,    0,   96,
      106,    0,   98,    0,    0,    0,    0,    0,    0,    0,
        0,   96,    0,   94,    0,    0,    0,    0,   93,    0,
        0,    0,   93,    0,    0,    0,    0,    0,  104,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  128,  109,    0,    0,    0,    0,   21,    0,    0,
        0,   28,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   49,    0,    0,    0,

       54,    0,    0,    0,    0,    0,    0,    0,    0,   65,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   90,    0,   92,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       96,    0,   94,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   95,
        0,   95,   95,    0,   95,    0,   96,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   93,    0,   93,   93,
        0,   93,    0,    0,    0,    0,    0,    0,   96,    0,
        0,    0,   98,    0,    0,    0,  103,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      126,  125,    0,    0,    0,    0,    0,    0,  107,  107,
        0,   20,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,    0,   70,    0,    0,    0,
       74,    0,    0,    0,    0,    0,    0,   91,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   95,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   93,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   96,  104,   96,    0,   98,
        0,    0,    0,    0,   96,    0,    0,    0,   98,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  124,

        0,    0,  130,    0,    0,  108,  108,  107,  107,    0,
        0,    0,    0,    0,    0,    0,   29,   30,    0,    0,
        0,    0,    0,    0,    0,   37,    0,    0,    0,    0,
        0,   51,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   62,   63,    0,    0,   71,    0,   73,    0,    0,
        0,    0,   79,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   94,    0,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  100,    0,    0,    0,    0,   96,    0,
        0,    0,    0,    0,    0,  105,    0,    0,    0,    0,

        0,   97,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   95,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   93,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  100,    0,    0,    0,    0,
       96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  100,    0,    0,    0,    0,   96,    0,  103,
        0,   96,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  129,    0,    0,    0,    0,    0,
        0,    0,   31,   32,    0,   38,    0,    0,    0,    0,
        0,    0,   46,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   64,   68,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   94,    0,   94,    0,
       94,    0,   94,    0,   99,    0,   96,    0,   99,    0,
       96,    0,   96,    0,    0,    0,   99,    0,    0,   97,
        0,   97,    0,    0,   96,    0,    0,   99,    0,    0,
        0,   95,    0,   95,    0,   95,    0,   99,    0,   96,
        0,   95,    0,   94,    0,   94,    0,   93,    0,   93,

        0,   93,    0,   93,    0,   99,    0,   96,    0,   99,
        0,   96,    0,   99,    0,   96,    0,   99,    0,   96,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  131,
        0,   19,   22,    0,    0,   25,    0,    0,    0,    0,
        0,   41,   44,    0,    0,    0,   52,    0,    0,   56,
        0,    0,   59,    0,    0,   72,    0,    0,    0,   78,
       82,    0,    0,   85,    0,    0,    0,   96,    0,  102,
        0,   96,    0,    0,   99,    0,   96,    0,   97,  105,
       96,    0,   99,    0,    0,    0,    0,    0,    0,    0,
       27,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   58,    0,    0,    0,    0,    0,   83,   84,
       86,    0,   96,    0,   96,    0,    0,    0,    0,    0,
        0,   23,    0,    0,    0,    0,    0,    0,    0,   48,
       53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   26,    0,   35,    0,    0,   45,   47,   55,
       57,   61,    0,    0,    0,    0,  120,  121,    0,   36,
       39,    0,   60,    0,    0,    0,    0,    0,    0,    0,
       77,    0,    0,    0,    0,    0,   40,   75,    0,    0,
        0,    0,   76,    0,  116,    0,  117,   18,  118,  119,
        0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,   14,    1,    1,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,    1,
       18,    1,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       29,   36,   37,   38,   39,   40,   41,   42,   43,   29,
       44,    1,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   29,   57,   58,   59,   60,
       61,   62,   29,   63,   64,   65,   66,   67,   68,   69,
       70,   29,    1,   71,    1,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    1,    4,    4,    5,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    6,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1
    } ;

static yyconst flex_uint16_t yy_base[1523] =
    {   0,
        0,   71,  142,  213,  282, 3099,   17,   19,   18,   20,
       22,   23,   47,   48,   91,  119, 3098, 3097, 3073,  348,
       32,  162, 3052,   90, 3038,   50, 3039, 5582, 5582,   27,
     5582,   23, 3009, 5582, 5582,   52,  216,   83,  383,  174,
      176,  222,  237,  177,  230,  232,   82,  227,  322,  155,
     5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582,
     5582, 5582, 5582, 5582, 5582, 5582, 2989, 5582,  100,  118,
      446,  104,  128,  174,  517,  166,  587, 5582,  106, 5582,
      248,  270,  334,  290, 2966, 5582, 5582, 2932, 5582, 5582,
      134, 2893, 5582,  188,   33, 2852,    0, 2860,    0,  188,

      291,  305,  265,  331,  153,  261,  342,  356,  374,  449,
      355,  344,  349, 2821,  408,  380,  362,  388,  420,  372,
      452,  269,  450,  451, 2813,  463,  459, 2820, 5582,  197,
      236,  237,  424,  427,  258,  239,  491,  479,  307,  657,
      476,  501,  535,  728,  505, 2813,  539,  547,  550,  562,
     2807,  506,  570,  573,  799,  646,  578,  675,  816,  596,
      597,  606,  591,  629,  348,  634,  585, 2756,  648,  452,
      695,  529,  826,  613,  683, 2767,  195, 5582,  648,  732,
      672,  560,  734,  688,  733,  758,  797,  811,  737,  537,
      577,  694,  738,  866,  805,  810,  673,  674,  798,  739,

      764,  814,  855,  841,  842,  846,  875,  903,  878,  889,
      821,  709,  594,  774,  316,  689,  782,  755, 2762,  940,
      756,  943, 2753,  823,  951,  831, 2733,  543,   65,  965,
     2729, 2730,  954,  857,  969,  978,  995, 1003, 1049,  893,
     1007, 1010,  376,  920, 1023, 1026, 1034, 2712,  923, 1067,
     2689,  566,  955, 1038, 5582, 1071, 1074, 1082, 2683, 1011,
     1094, 1097, 2674, 1079, 1105, 1113, 2672, 2673, 1102, 5582,
     1121, 1124, 2663, 1129,  507, 1110, 1137, 1146, 1163, 1164,
     1172, 1171, 1179, 1196, 1180, 1197, 1204, 1209, 1218,  667,
     1182,  885, 5582,  791, 1226, 1233, 1237,  126, 1268,  961,

     5582, 5582,  982,  907, 1198,  880, 1120, 1144, 1177,  984,
      986, 1238, 1217,  795,  975, 1234, 1073, 1240, 1263, 1260,
     1244, 1104, 1235, 1258, 1246, 1268, 1272, 1278, 1282, 1296,
     1297, 1283, 1287, 2650, 1286, 1305, 1306, 1310, 1309, 1316,
     1334, 1320, 2640, 2639, 1324, 1344, 1337, 1338, 2609, 1365,
     1360, 1376, 1386, 1398, 1387, 1402, 1405, 1413, 1388, 1421,
     1410, 2598,  713, 1429, 2573, 1426, 1434, 5582, 1437, 2550,
     5582, 1445, 2534, 2520, 1449, 5582, 2503, 5582, 1452, 1453,
     1461, 1464, 1472, 1474, 1482, 1469, 1490, 1499, 1516, 1524,
     1570, 1527, 1479, 1537, 1544, 1552, 1487, 1560, 1528, 1588,

     1591, 1549, 2496, 1599, 1601, 1615, 2477, 1557, 1623, 2457,
     1596, 5582, 1627, 1635, 2454, 1456, 5582, 5582, 1643, 5582,
     2415, 1646, 2408, 1604, 1650, 1658, 1655, 1666, 1669, 1677,
     2362, 5582, 1681, 5582, 1684, 1685, 1693, 1696, 2348, 1704,
     1706, 1714, 2340, 1701, 1722, 1731, 1748, 1749, 1235, 1711,
     1757, 1760, 1765, 1777, 1776, 1784, 1785, 1792, 1801, 1802,
     1809, 1818, 1301, 1325, 1368, 1441, 1484, 1831, 1837, 1769,
     1794, 5582, 1619, 1650, 1503, 1411, 1817, 1705, 1831, 1832,
     1750, 1829, 1843, 1826, 1844,  814, 1494, 1846, 1852, 1855,
     1854, 1730, 1674, 1639, 1858, 1860, 2308, 1812, 1862, 1864,

     2268, 1873, 1876, 1883, 1889, 1886, 1885, 1729, 1891, 2243,
     1892, 1893, 1905, 1913, 1901, 1911, 1915, 1917, 1925, 1919,
     1924, 1929, 1931, 5582, 1934, 2220, 1955, 1806, 1972, 1952,
     1982,  484, 1988, 2231, 1997, 2191, 1992, 2001, 2004, 2008,
     5582, 2011, 5582, 2013, 1960, 2021, 1963, 2017,  617, 2025,
     2182, 2029, 2139, 2033, 2036, 2039, 2042, 2045, 2057, 2060,
     2063, 1978, 2075,  622, 2079, 2071, 2083, 1979, 2087,  777,
     2090, 2068, 2094, 2067, 2098, 2101, 2105, 2053, 2108, 5582,
     2111, 2048, 5582, 2114, 2047, 2118, 5582, 1306, 2014, 2121,
     1976, 2125, 2128, 2132, 2135, 2138, 2046, 2146, 2064, 2142,

     1360, 2150, 1975, 2154, 1950, 2158, 5582, 2161, 1907, 5582,
     2164, 1833, 2169, 2186, 2187, 2190, 2198, 2195, 1819, 2203,
     1593, 2206, 1820, 1821, 2215, 2218, 1371, 2219, 2227, 2230,
     2233, 2238, 2241, 2246, 2253, 2258, 2261, 2266, 2269, 2160,
     5582, 5582, 2172, 2200, 2255, 2279, 2287, 2294, 2293,  419,
     2251, 1799, 2228, 2282, 2287, 2290, 2294, 2296, 2263, 2267,
     2300, 2306, 2268, 1195, 2307, 2312, 2318, 2320, 1782, 2327,
     2322, 2344, 2326, 2336, 2332, 2350, 2352, 2324, 2360, 2354,
     2367, 2364, 2381, 2371, 1767, 2358, 1713, 2372, 2392, 2370,
     2404, 2376, 2385, 2394, 2410, 2399, 2380, 1704, 2444, 2422,

     2467, 2434, 2452, 2474, 2482, 2443, 2455, 2486, 2494, 2498,
     2501, 2464, 2509, 2471, 2513, 2516, 2524, 2521, 2528, 2532,
     2540, 2544, 2547, 2555, 2558, 2563, 2529, 2571, 2574, 2582,
     2562, 2579, 2590, 2592, 2600, 2587, 2597, 2608, 2605, 2616,
     2619, 2627, 2630, 5582, 2632, 2635, 2637, 2645, 2649, 2657,
     2660, 2661, 2669, 2672, 2680, 2682, 2690, 2677, 2687, 2698,
     2701, 2709, 5582, 2718, 2735, 2736, 2705, 2744, 2706, 2748,
     2751, 2764, 2752, 2767, 2775, 5582, 1707, 5582, 2778, 1695,
     2783, 2782, 2791, 2794, 1683, 2802, 2804, 2812, 1672, 2799,
     2815, 2822, 2823, 2830, 2831, 2838, 2839, 2847, 2193, 5582,

     2391, 2855, 2847, 2856, 2861, 5582, 2490, 2641, 5582, 2781,
     2828, 2845, 2461, 2837, 2857, 2545, 1640, 1626, 2552, 2523,
     2397, 2603, 2680, 2854, 2856, 1625, 2870, 2877, 2879, 2742,
     2773, 1616, 2880, 2868, 2881, 2885, 2903, 2905, 2904, 2891,
     2911, 1605, 1595, 2906, 2914, 1594, 2915, 1561, 2907, 2917,
     2918, 2925, 1551, 2919, 2931, 2932, 2933, 2939, 2957, 2867,
     2994, 2960, 2974, 2984, 3002, 1562, 2991, 3010, 3007, 3018,
     5582, 3021, 3029, 3033, 3041, 3045, 3048, 3049, 3057, 3060,
     3068, 3070, 3078, 1554, 3065, 3086, 3075, 3090, 5582, 3094,
     3102, 3106, 3114, 3118, 3121, 1529, 3128, 3125, 3136, 3139,

     3147, 3150, 3126, 3158, 3161, 3162, 3170, 3173, 3181, 3183,
     3191, 1543, 3178, 3199, 3202, 3188, 3210, 3218, 3207, 3222,
     3225, 3233, 5582, 3236, 3244, 3252, 3256, 3264, 3268, 3272,
     3275, 3241, 3283, 3280, 3291, 3294, 3302, 3305, 3310, 3309,
     3318, 3321, 3329, 3331, 3339, 1519, 3326, 3347, 3336, 3351,
     5582, 3355, 3363, 3367, 3375, 3379, 3388, 3405, 3406, 3409,
     3417, 3414, 3427, 3434, 3442, 1493, 3439, 3451, 3449, 3459,
     5582, 3462, 3470, 3474, 3482, 3485, 3486, 3494, 3497, 3505,
     3507, 3515, 1484, 3502, 3523, 3512, 3527, 5582, 3531, 1475,
     3539, 5582, 3542, 3547, 3550, 3555, 3562, 3565, 3570, 2455,

     2577, 3535, 3574, 3578, 5582, 2953, 3545, 3421, 3001, 3529,
     2954, 3537, 1451, 1428, 2774, 5582, 2965, 3408, 3564, 3555,
     3566, 3161, 3570, 3583, 3578, 3234, 3581, 3590, 3587, 3595,
     2991, 3603, 3047, 1425, 1410, 3605, 3591, 3613, 3618, 3608,
     3620, 3048, 3311, 3624, 3623, 3659, 1404, 3675, 5582, 3683,
     1383, 3687, 5582, 3695, 1363, 3699, 5582, 3707, 1348, 3711,
     5582, 3643, 1256, 3715, 3650, 3723, 1206, 3662, 3731, 3734,
     3739, 3742, 3666, 3720, 1200, 3747, 3755, 1182, 3746, 3763,
     3771, 1181, 3775, 5582, 3783, 1174, 3791, 1173, 3795, 5582,
     3799, 5582, 3807, 1140, 3811, 5582, 3819, 1139, 3823, 5582,

     3831, 1131, 3835, 5582, 3843, 1107, 3847, 5582, 3855, 1096,
     3859, 5582, 3867, 1087, 3871, 5582, 3879, 1084, 3883, 5582,
     3886, 3891, 3894, 3899, 3902, 3907, 3238, 3322, 3911, 5582,
     3633, 1064, 1061, 3663, 3861, 1040, 3213, 3170, 3729, 3892,
     3900, 1029, 1017, 3721, 3881, 3901, 1016, 3897, 3908,  969,
     3656, 3907,  958, 3906, 3753,  934, 3913, 3920, 3754,  933,
      923, 3737, 3909,  904, 3924, 3937, 3965, 5582, 3975,  866,
     3948, 5582, 3978, 3986,  850, 3950,  833,  786,  766,  752,
     5582, 3994,  714, 3997, 4002, 4005, 3357, 3904, 3954, 3956,
      690, 3987, 3931, 3968, 3992, 3996, 3995, 3999, 4000, 4005,

     3998, 4008,  639, 4009, 4018, 4013, 4010, 4015,  629,  626,
      617, 4077, 5582, 4080, 5582, 4038, 4052, 4063, 4028, 4031,
     4070,  563, 4037, 4044, 4071, 4074, 4073, 4075, 4076,  543,
      490, 4089, 4090, 4091, 4078, 4088, 4100, 4086, 4125,  480,
      461, 4084,  405, 4080,  320, 4104, 4112,  319,  312,  307,
      294,  270, 4115, 4114, 4116, 4118, 4114, 4115, 4136, 5582,
      260, 4137,  238, 4141, 4142, 4152,  229,  166, 4140, 4146,
      103, 4148, 4153, 4130, 4132, 4168,  102,   44, 4170, 4159,
     4170, 4180,   39, 4156, 5582, 4171, 5582,    7, 5582, 5582,
     5582, 4232, 4238, 4244, 4250, 4256, 4262, 4268, 4274, 4280,

     4286, 4292, 4295, 4299, 4304, 4310, 4316, 4322, 4328, 4334,
     4340, 4346, 4351, 4354, 4358, 4364, 4370, 4376, 4382, 4388,
     4394, 4400, 4406, 4412, 4418, 4424, 4430, 4436, 4442, 4448,
     4454, 4460, 4466, 4472, 4478, 4484, 4490, 4496, 4502, 4508,
     4514, 4520, 4526, 4532, 4538, 4544, 4550, 4556, 4562, 4568,
     4574, 4580, 4586, 4592, 4598, 4604, 4610, 4613, 4618, 4624,
     4630, 4636, 4642, 4648, 4654, 4660, 4666, 4672, 4678, 4684,
     4690, 4696, 4702, 4708, 4714, 4720, 4726, 4732, 4738, 4744,
     4750, 4756, 4762, 4768, 4774, 4780, 4786, 4789, 4794, 4800,
     4806, 4812, 4818, 4824, 4830, 4836, 4842, 4848, 4854, 4860,

     4866, 4872, 4878, 4884, 4890, 4896, 4902, 4908, 4914, 4920,
     4926, 4932, 4938, 4944, 4950, 4956, 4962, 4968, 4974, 4976,
     4981, 4987, 4993, 4999, 5005, 5011, 5017, 5023, 5029, 5035,
     5041, 5047, 5053, 5059, 5065, 5071, 5077, 5083, 5089, 5095,
     5101, 5107, 5113, 5119, 5125, 5131, 5137, 5143, 5149, 5155,
     5161, 5167, 5173, 5179, 5182, 5187, 5193, 5199, 5205, 5211,
     5217, 5223, 5229, 5235, 5241, 5247, 5253, 5259, 5265, 5271,
     5277, 5283, 5289, 5295, 5301, 5307, 5313, 5319, 5325, 5331,
     5337, 5343, 5349, 5355, 5361, 5367, 5373, 5379, 5385, 5391,
     5397, 5403, 5406, 5411, 5417, 5423, 5429, 5435, 5441, 5447,

     5453, 5459, 5465, 5471, 5477, 5483, 5489, 5495, 5501, 5507,
     5513, 5519, 5525, 5531, 5537, 5543, 5549, 5555, 5561, 5567,
     5573, 5576
    } ;

static yyconst flex_int16_t yy_def[1523] =
    {   0,
     1292, 1292, 1293, 1293,    2,    5, 1294, 1294, 1295, 1295,
     1296, 1296, 1296, 1296, 1296, 1296, 1297, 1297, 1298, 1299,
     1300, 1300, 1301, 1301, 1302, 1302, 1291, 1291, 1291, 1291,
     1291, 1291, 1303, 1291, 1291, 1304, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1305, 1291, 1306, 1307,
     1308, 1309, 1310, 1311, 1308, 1306, 1310, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1303, 1312, 1313, 1314, 1304,

     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1305, 1291, 1315,
     1316, 1317, 1318, 1307, 1316, 1319, 1320, 1321, 1316, 1322,
     1323, 1324, 1325, 1322, 1323, 1326, 1327, 1328, 1329, 1329,
     1330, 1331, 1329, 1332, 1333, 1321, 1321, 1321, 1321, 1321,
     1321, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1291, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,

     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1334, 1335, 1336, 1316, 1337, 1330, 1335, 1326, 1338,
     1336, 1336, 1330, 1338, 1336, 1319, 1326, 1339, 1320, 1320,
     1330, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1343, 1341,
     1346, 1344, 1316, 1347, 1348, 1345, 1345, 1330, 1349, 1345,
     1326, 1291, 1346, 1346, 1291, 1346, 1342, 1342, 1330, 1346,
     1342, 1350, 1330, 1351, 1350, 1350, 1330, 1352, 1351, 1291,
     1351, 1350, 1330, 1353, 1316, 1354, 1355, 1356, 1357, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,

     1291, 1291, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1291, 1291, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1359, 1360, 1361, 1360, 1362, 1361, 1361, 1362, 1361,
     1363, 1326, 1352, 1330, 1330, 1362, 1362, 1291, 1362, 1330,
     1291, 1361, 1330, 1364, 1364, 1291, 1330, 1291, 1365, 1366,
     1367, 1366, 1368, 1367, 1367, 1368, 1367, 1369, 1370, 1371,
     1369, 1370, 1372, 1373, 1371, 1371, 1374, 1371, 1368, 1368,

     1368, 1372, 1326, 1375, 1373, 1373, 1330, 1375, 1373, 1330,
     1374, 1291, 1374, 1371, 1330, 1291, 1291, 1291, 1368, 1291,
     1330, 1367, 1330, 1376, 1377, 1376, 1377, 1377, 1376, 1376,
     1352, 1291, 1377, 1291, 1378, 1379, 1380, 1379, 1326, 1381,
     1380, 1380, 1330, 1381, 1380, 1382, 1383, 1383, 1384, 1385,
     1386, 1387, 1387, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1291, 1291, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,

     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1291, 1388, 1388, 1389, 1390, 1391, 1390,
     1392, 1391, 1391, 1392, 1391, 1392, 1392, 1392, 1391, 1352,
     1291, 1392, 1291, 1393, 1394, 1395, 1394, 1396, 1395, 1395,
     1396, 1395, 1396, 1396, 1396, 1395, 1393, 1397, 1398, 1393,
     1397, 1399, 1400, 1398, 1398, 1401, 1398, 1399, 1402, 1400,
     1400, 1402, 1400, 1401, 1401, 1398, 1396, 1402, 1402, 1291,
     1402, 1330, 1291, 1400, 1330, 1401, 1291, 1403, 1404, 1403,
     1404, 1404, 1403, 1404, 1403, 1405, 1406, 1407, 1406, 1408,

     1407, 1407, 1408, 1407, 1408, 1408, 1291, 1408, 1330, 1291,
     1407, 1330, 1409, 1410, 1410, 1411, 1412, 1411, 1413, 1414,
     1412, 1412, 1330, 1414, 1412, 1415, 1416, 1417, 1418, 1393,
     1415, 1415, 1393, 1393, 1393, 1393, 1393, 1393, 1415, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1419, 1291,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1291, 1291, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1421, 1422,

     1423, 1422, 1424, 1423, 1423, 1424, 1424, 1424, 1423, 1424,
     1425, 1426, 1427, 1426, 1428, 1427, 1427, 1428, 1428, 1428,
     1427, 1428, 1429, 1430, 1429, 1431, 1432, 1433, 1434, 1434,
     1435, 1432, 1436, 1433, 1433, 1436, 1435, 1434, 1436, 1436,
     1433, 1435, 1436, 1291, 1437, 1438, 1438, 1437, 1438, 1437,
     1439, 1440, 1441, 1440, 1442, 1441, 1441, 1442, 1442, 1442,
     1441, 1442, 1291, 1443, 1444, 1444, 1445, 1446, 1445, 1447,
     1446, 1446, 1447, 1447, 1447, 1291, 1448, 1291, 1446, 1448,
     1449, 1450, 1451, 1450, 1452, 1453, 1451, 1451, 1448, 1453,
     1454, 1454, 1449, 1454, 1454, 1454, 1454, 1454, 1291, 1291,

     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1291, 1291, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1456, 1457,
     1458, 1457, 1459, 1458, 1458, 1448, 1459, 1458, 1459, 1459,
     1291, 1459, 1458, 1459, 1458, 1459, 1454, 1460, 1461, 1460,
     1462, 1461, 1461, 1448, 1462, 1461, 1462, 1462, 1291, 1462,
     1461, 1462, 1461, 1462, 1463, 1464, 1463, 1465, 1466, 1467,

     1467, 1468, 1469, 1470, 1471, 1472, 1473, 1472, 1474, 1473,
     1473, 1448, 1474, 1473, 1475, 1476, 1475, 1475, 1476, 1476,
     1474, 1474, 1291, 1474, 1473, 1475, 1474, 1473, 1476, 1474,
     1477, 1478, 1477, 1478, 1478, 1477, 1478, 1477, 1479, 1480,
     1481, 1480, 1482, 1481, 1481, 1448, 1482, 1481, 1482, 1482,
     1291, 1482, 1481, 1482, 1481, 1482, 1483, 1484, 1484, 1485,
     1486, 1485, 1487, 1486, 1486, 1448, 1487, 1486, 1487, 1487,
     1291, 1487, 1486, 1487, 1486, 1488, 1489, 1490, 1489, 1491,
     1490, 1490, 1448, 1491, 1490, 1491, 1491, 1291, 1491, 1448,
     1490, 1291, 1492, 1492, 1488, 1492, 1492, 1492, 1492, 1291,

     1291, 1291, 1291, 1291, 1291, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1291, 1291, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1494, 1448, 1495, 1291, 1494,
     1448, 1495, 1291, 1496, 1448, 1497, 1291, 1496, 1448, 1497,
     1291, 1498, 1499, 1500, 1501, 1501, 1448, 1502, 1501, 1503,
     1503, 1503, 1504, 1505, 1506, 1507, 1507, 1448, 1500, 1507,
     1508, 1448, 1509, 1291, 1508, 1448, 1510, 1448, 1511, 1291,
     1509, 1291, 1512, 1448, 1513, 1291, 1514, 1448, 1515, 1291,

     1514, 1448, 1515, 1291, 1516, 1448, 1517, 1291, 1516, 1448,
     1517, 1291, 1518, 1448, 1519, 1291, 1518, 1448, 1519, 1291,
     1520, 1520, 1521, 1520, 1521, 1521, 1291, 1291, 1291, 1291,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1291, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1500, 1500, 1291, 1500, 1448,
     1502, 1291, 1502, 1501, 1448, 1504, 1506, 1506, 1506, 1448,
     1291, 1507, 1448, 1520, 1520, 1520, 1291, 1291, 1522, 1522,
     1522, 1522, 1291, 1522, 1522, 1522, 1522, 1522, 1522, 1522,

     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1500, 1291, 1502, 1291, 1521, 1520, 1521, 1291, 1291,
     1522, 1522, 1522, 1291, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1521, 1291,
     1291, 1522, 1522, 1291, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1291, 1291, 1522, 1291,
     1522, 1522, 1522, 1522, 1522, 1522, 1291, 1291, 1522, 1522,
     1522, 1522, 1522, 1291, 1291, 1522, 1522, 1522, 1522, 1291,
     1291, 1522, 1522, 1291, 1291, 1291, 1291, 1522, 1291, 1291,
        0, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,

     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,

     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,

     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291
    } ;

static yyconst flex_uint16_t yy_nxt[5654] =
    {   0,
       28,   28,   29,   30,   28,   28,   28,   28,   28,   31,
       28,   28,   28,   28,   32,   32,   28,   28,   28,   52,
       56,   52,   56,   97,   60,   60,   53,   54,   53,   54,
       93,   61,   61,   79,   80,   79,   81,   95,   95,   62,
       62,   94,   94,   34,   28,   28,   28,   95,   95,   60,
       60,   91,   90,   91,   92,   97,   61,   61,   98,   99,
       97,   57,   58,   57,   58,   63,   63,  377,   97,  232,
       28,   28,   28,   35,   30,   28,   28,   28,   28,   28,
       31,   28,   28,   28,   28,   32,   32,   28,   28,   28,
       63,   63,   87,   60,   88,   64,   64,   64,   97,   97,

       61,   88,  131,   64,  132,  121,  146,  162,  133,  162,
      163,   88,  147,  103,   34,   28,   28,   28,   97,   97,
      135,   60,  136,   64,   64,   64,  137,  298,   61,  298,
      139,   64,  141,  121,   63,  175,  148,  175,  176,   88,
      103,   28,   28,   28,   29,   30,   28,   28,   28,   28,
       28,   31,   28,   28,   28,   28,   32,   32,   28,   28,
       28,   64,   63,   82,   80,   82,   81,   83,  131,   97,
      132,   97,  183,   84,  133,  150,  151,  150,  152, 1275,
       85,  127,  153,   84,  154,   34,   28,   28,   28,   64,
       97,   93,   97,   97,   98,   99,  301,  302,  301,  131,

      183,  213,   94,   94,   97,  214,  110,  109,  111,  127,
      117,   84,   28,   28,   28,   35,   30,   28,   28,   28,
       28,   28,   31,   28,   28,   28,   28,   32,   32,   28,
       28,   28,   97,  110,  109,  111,  101,  117,   97,  219,
      216,  227, 1274,   97,  217,  220,   97,  228,   97,  164,
      122,  164,  102,   97,   97,  112,   34,   28,   28,   28,
      113,  114,  216,  118,  101,  123,  217,  119,  115,  116,
      120,  166,  165,  166,  163,  167,   97,   97,  122,  102,
      184,   97,  112,   28,   29,   97,   97,  113,  168,  114,
      118,  171,  123,  171,  119,  115,  116,  120,  181,  207,

      165,   37,   38,   39,   40,   41,   42,   97,  184,   43,
       97,  216,   44,   45,  172,  217,   46,   47,   48,   49,
      216,   97,   50,   97,  217,  181,  207,  179,   97,   37,
       38,   39,   40,   41,   42,   97,   97,   43,   97,   44,
       45,  180,  172,   46,   47,   48,   49,   97,  124,   50,
       70,   71,   72,   73,  179,  125,   74,  169,   97,   73,
       97,  170,   75,   75,  126,   97,   76,  182,  180,   77,
       73,   97,   97,  185,  186,  290,  124,  194,   97,  197,
      216,  198,  125,  187,  217,  169,  188,  201,   97,  170,
       97,  126,  195,  196,  182,  189,   97,   77,   73,   97,

      185,  186,  104,  290,   97,  194,  197,  204,  198,  105,
      202,  187,  190,  106,  191,  201,  107,  200,  108,  195,
      196,   97,  809,  189,   97,  222,  223,  222,  224,  135,
      104,  136,  225,  809,  204,  137,   97,  105,  202,  190,
      106,  191,  199,  107,  200,  108,  138,  138,  139,  140,
      141,  138,  138,  203,  143,  138,  138,  138,  138,  138,
      144,  144,  138,  138,  138,   97,   97,   97,   97,  199,
      208,  205,  192,  206,  209,   97,  293, 1258,  146,   97,
      203,  139,  211,  234,  241,  193,  370,  235,  706,  138,
      138,  138,  230,  231,  230,  232, 1257,  210,  208,  205,

      192,  206,  209,  243,  293,  244,   97,  146,  270,  245,
      211,  216,  193,  241,  271,  217,  138,  138,  138,  139,
      144,  141,  138,  138,  210,  148,  138,  138,  138,  138,
      138,  144,  144,  138,  138,  138,  247,  248,  247,  249,
      254,  255,  254,  250,  375,  376,  375,  256,  258,  259,
      258,  260,  263,   97,  264,  261,  294,  317,  265,   97,
      138,  138,  138,  266,  151,  266,  264,  416,  417,  416,
      265,  272,  273,  272,  264,  275,   97,  276,  265,   97,
      139,  277,  234,  307,  294,  317,  235,  138,  155,  139,
      155,  141,  164,   97,  164,  148,  219,  282,  139,  139,

      234,  234,  356,  318,  235,  235,  156,  162,  169,  162,
      163,  307,  170,  157,  298,  165,  299,  158,  289,  421,
      159,  718,  160,  288,  410,  282,  731,  300,  300,  161,
      164,  318,  164,   97,  156,  166,  169,  166,  163,  167,
      170,  157,   97,  165,  158,   97,  289,  159,  139,  160,
      234,  288,  168,  165,  235,   97,  161,  233,  233,  139,
      236,  234,  233,  233,   97,  238,  233,  233,  233,  233,
      233,  239,  239,  233,  233,  233,  280,  139,  291,  234,
      292,  165,  281,  235,  175,  303,  175,  176,   97,   97,
       97,  362,  335,  306,  283,  336,  171,  363,  171,  463,

      233,  233,  233,  280,   97,  291,   97,  292,  284,  281,
       97,  131,  303,  353,  540,  541,  540,  354,  268,  172,
      335,  306,  283,  336,  310,  319,  463,  233,  233,  233,
      139,  239,  234,  233,  233,  284,  235,  233,  233,  233,
      233,  233,  239,  239,  233,  233,  233,  172,   97,   97,
       97,  310,  319,   97,   97,   97,  268,  219,  370,  304,
      359,  320,  338,  356,  360,  305,  308,  311, 1179,  309,
      316,  233,  233,  233,   97,  358,  223,  358,  359,  582,
       97,  736,  360,  364,  365,  364,  268,  304, 1179,  320,
      338,  339,  305,  308,  311,  312,  309,  316,  233,  233,

      278,  139,  278,  234,  233,  233,  233,  235,  233,  233,
      233,  233,  233,   97,   97,  233,  233,  233,  139,  339,
      234,   97,  312,  467,  235,  371,   97,  295,  486,  295,
       97,  369,  314,  227,  313, 1179,  337,   97,  285,  228,
      333,  334,  233,  233,  233,  233,  663,  286,  287,  296,
      467,  315,  340,  297,  268,  486,  351,   97,   97,  146,
      314,  313,   97,  337,  343,  383,  285,  333,  334,  233,
      268,   97,  344,  663,  286,  287,  341,  296,  315,  340,
      342,  297,   97,  351,  345,  321,  322,  323,  324,  325,
      326,   97,  343,  327,   97,  146,   97,  328,  346,  344,

      329,  383,  330,  331,  341,   97,  332,  466,  342,  478,
      349,  345,  350,  321,  322,  323,  324,  325,  326,   97,
       97,  327,  403,   97,  328,  412,  346,  329,  404,  330,
      331,  413,  476,  332,  347,  466,  478,  349,  348,   97,
      350,  367,  368,  367,  358,  223,  358,  359,  369,   97,
       97,  360,  372,  373,  372,  359,  139,  418,  380,  360,
      476,  347,  381,  401,  474,  348,  230,  231,  230,  232,
      385,  259,  385,  386,   97,  474,  474,  387,  379,  379,
      139,  388,  380,  379,  379,   97,  390,  379,  379,  379,
      379,  379,  391,  391,  379,  379,  379,  243,   97,  393,

       97,  487,   97,  394,  396,  248,  396,  397,  400,  255,
      400,  398,  243,  418,  393,  401,  483,  475,  394,  401,
      482,  379,  379,  379,  406,  407,  406,  408,  410,  487,
      397,  409,   97,   97,  398,  396,  248,  396,  397,  400,
      255,  400,  398,  483,  475,   97,  401,  482,  379,  379,
      379,  139,  391,  380,  379,  379,   97,  381,  379,  379,
      379,  379,  379,  391,  391,  379,  379,  379,  414,  415,
      414,  397,  419,  420,  419,  398,  421,   97,  386,  401,
       97,  270,  387,  385,  259,  385,  386,  428,  268,   97,
      387,  268,  379,  379,  379,  422,  423,  422,  386,  263,

      268,  425,  387,  489,  270,  426,  429,  273,  429,  425,
      428,  268,  439,  426,  430,  151,  430,  425,  440,  379,
       97,  426,  433,  434,  433,  429,  273,  429,  425,  428,
      489,  275,  426,  436,  495,  268,   97,  437,  442,  443,
      442,  444,  479,  268,  268,  445,  379,  446,  139,  446,
      380,  379,  379,  379,  381,  379,  379,  379,  379,  379,
       97,  495,  379,  379,  379,  449,  139,  450,  380,  480,
      479,  451,  381,  139,  139,  380,  380,  268,  268,  381,
      381,  139,  139,  380,  380,  268,  268,  381,  381,  379,
      379,  379,  379,   97,  452,  453,  481,  480,  139,  139,

      380,  380, 1179,  454,  381,  381,  139,  457,  380,  464,
      268,  139,  381,  380,   97,  455,  379,  381,  465,  477,
      139,  452,  380,  453,  481,  822,  381,  295,  458,  295,
      454,  459,  456,   97,  468,  457,  468,  464,  471,  216,
      471,  460,  455,  217,  485,  465,  461,  477,  462,  296,
       97,   97,  822,  297,   97,  458,   97,  484,  459,  456,
       97,  472,   97,  469,  252,  470,  488,  490,  460,  298,
      496,  473,  485,  461,   97,  462,   97,  296,  498,   97,
      494,  297,  474,  474,   97,  484,  491,  492,   97,  472,
      469,  497,  470,  488,   97,  490,  501,  496,   97,   97,

      493,  499,   97,   97,  502,  498,  500,  494,  263,  509,
      746,  503,   97,   97,  491,  492,  511,  504,  497,  505,
      507,   97,   97,  640,  501,   97,   97,  493,  499,  510,
      516,  502,   97,  500,  506,  514,   97,  509,  503,  508,
       97,  513,  512,  511,  504,  515,  517,  505,  507,  641,
       97,  640,  268,   97,   97,  519,  510,  518,  516,  520,
       97,  506,  609,  514,  758,  521,  508,  268,  513,  512,
      522,  523,  515,  517,  524,  216,   97,  641,  131,  217,
      528,   97,  519,  526,  529,  518,  520,  268,  219,  219,
      371,  642,  525,  521,  531,  531,  538,  522,  523,  533,

      223,  533,  534,  537,  368,  537,  535,  370,  268,  534,
      538,  526,  362,  535,  533,  223,  533,  534,  363,  642,
      525,  535,  539,  373,  539,  534,   97,   97,  371,  535,
      364,  365,  364,  268,  538,  537,  368,  537,  542,  543,
      542,   97,  538,  652,   97,  538,  539,  373,  539,  534,
      375,  376,  375,  535,  139,  146,  545,  416,  417,  416,
      546,  548,  550,  259,  550,  551,  146,   97,  643,  552,
      652,  418,  548,  554,  255,  554,  421,  555,  551,  268,
      555,  403,  552,  550,  259,  550,  551,  569,  268,  412,
      552,  556,  423,  556,  551,  575,  643,  268,  552,  544,

      544,  139,  557,  545,  544,  544,  644,  559,  544,  544,
      544,  544,  544,  560,  560,  544,  544,  544,  243,   97,
      562,  664,  651,  268,  563,  565,  248,  565,  566,  243,
      418,  562,  567,  216,  644,  563,  555,  217,  571,  407,
      571,  572,  544,  544,  544,  573,  410,  268,  566,  664,
      651,  403,  567,  565,  248,  565,  566,  569,  268,  583,
      567,  576,  415,  576,  566,  581,  268,   97,  567,  544,
      544,  544,  139,  560,  545,  544,  544,   97,  546,  544,
      544,  544,  544,  544,  560,  560,  544,  544,  544,  554,
      255,  554,  577,  420,  577,  777,  555,  773,  412,  555,

      579,  580,  579,  582,  575,  572,  263,  581,  589,  573,
       97,   97,  590,  544,  544,  544,  571,  407,  571,  572,
      298,   97,  649,  573,  584,  585,  584,  572,  586,  587,
      586,  573,   97,  650,  650,  575,  576,  415,  576,  566,
      544,   97,   97,  567,  577,  420,  577,  556,  423,  556,
      551,  555,  270,  650,  552,   97,   97,  270,  592,  593,
      273,  593,  589,  592,  650,  650,  590,  594,  434,  594,
      593,  273,  593,  589,  592,  671,  268,  590,  595,  151,
      595,  589,  594,  434,  594,  590,  275,  439,  597,  592,
       97,  252,  598,  600,  602,  443,  602,  603,  439,  268,

      670,  604,  671,  610,  600,  606,  607,  606,  609,  608,
      603,  268,  608,  619,  604,  602,  443,  602,  603,  620,
       97,   97,  604,  611,  612,  611,  603,  654,  670,   97,
      604,  544,  613,  139,  613,  545,  544,  544,  544,  546,
      544,  544,  544,  544,  544,   97,   97,  544,  544,  544,
      449,  449,  616,  616,  669,  654,  617,  617,  622,  623,
      622,  624,  627,  683,  628,  625,   97,  627,  629,  628,
      647,  657,  647,  629,  544,  544,  544,  544,  139,  139,
      545,  545,  669,   97,  546,  546,  139,  139,  545,  545,
      683,  648,  546,  546,  139,  471,  545,  471,   97,  657,

      546,  544,  630,  139,  139,  545,  545,  632,  219,  546,
      546,  139,  631,  545,  703,   97,  633,  546,  472,  648,
      139,  636,  545,  778,  268,  634,  546,  252,   97,  637,
      630,  635,  468,   97,  468,  632,  638,  268,  645,  631,
      645,  639,   97,  633,  653,   97,  472,   97,   97,  636,
      674,  658,  634,  661,  655,  656,  659,  637,  635,   97,
       97,  469,   97,  470,  638,  662,  660,  665,   97,  639,
       97,   97,  653,  646,   97,  666,   97,  674,   97,  658,
       97,  661,  655,  656,  659,  667,  668,  673,  469,   97,
      470,  672,   97,  662,  660,  665,  676,  675,  678,   97,

      646,   97,   97,  666,  682,   97,  681,   97,   97,   97,
      677,  268,  667,  668,  684,  673,  679,   97,  672,  680,
      686,   97,  685,  676,  675,  689,  678,   97,  687,   97,
      690,   97,  682,   97,  681,   97,  688,  677,  691,  692,
       97,   97,  684,  679,  693,   97,  680,   97,  686,  685,
       97,  696,  610,  689,  219,  694,  687,  131,  690,  700,
      703,  695,  146,  701,  688,  146,  691,  692,  715,  697,
      698,  715,  693,  705,  223,  705,  706,  610,  270,  696,
      403,  403,  694,  708,  368,  708,  733,  733,  695,  705,
      223,  705,  706,  708,  368,  708,  697,  698,  709,  373,

      709,  706,  710,  543,  710,  709,  373,  709,  706,  540,
      541,  540,  710,  543,  710,  139,  270,  712,  720,  255,
      720,  713,  717,  259,  717,  718,  717,  259,  717,  718,
      721,  423,  721,  718,  720,  255,  720,  722,  420,  722,
      721,  423,  721,  718,  139,  723,  712,  243,  439,  727,
      724,  268,  268,  728,  755,  583,  725,  725,  730,  248,
      730,  731,  139,  725,  712,  243,  439,  727,  713,  412,
      583,  728,  755,  412,  725,  725,  735,  407,  735,  736,
      730,  248,  730,  731,  738,  415,  738,  731,  740,  580,
      740,  735,  407,  735,  736,  741,  585,  741,  736,  742,

      587,  742,  738,  415,  738,  731,  722,  420,  722,  740,
      580,  740,  743,  744,  743,  741,  585,  741,  736,  742,
      587,  742,  748,  273,  748,  746,  749,  434,  749,  748,
      273,  748,  746,  749,  434,  749,  750,  151,  750,  746,
      275,  418,  752,  760,  607,  760,  753,  757,  443,  757,
      758,  757,  443,  757,  758,  761,  612,  761,  758,  760,
      607,  760,  762,  763,  762,  761,  612,  761,  758,  711,
      764,  139,  764,  712,  711,  711,  711,  713,  711,  711,
      711,  711,  711,  799,  418,  711,  711,  711,  449,  449,
      767,  767,  619,  371,  768,  768,  800,  619,  770,  772,

      623,  772,  773,  770,  775,  776,  775,  772,  623,  772,
      773,  799,  711,  711,  711,  711,  779,  780,  779,  773,
      627,  785,  782,  801,  800, 1000,  783,  786,  788,  789,
      788,  790,  139,  371,  712,  627,   97,  782,  713,  711,
      627,  783,  782,  139,   97,  712,  783,  811,  139,  713,
      712,  801, 1000,  791,  713,  139,  645,  712,  645,   97,
      139,  713,  712,  139,  792,  712,  713,   97,  139,  713,
      712,  627,  810,  782,  713,  811,  794,  783,  793,   97,
      802,  791,  802,   97,   97,  795,  796,  798,  647,  821,
      647,  646,  792,  797,  807,  804,  808,  804,   97,  817,

      810,  812,  803,   97,  794,  793,   97,  809,  818,  648,
       97,  813,   97,  795,  796,  798,   97,  821,  646,  816,
      797,  805,   97,   97,   97,  820,  817,  814,   97,  812,
      803,  815,  819,  824,   97,  818,   97,  648,   97,  813,
       97,  826,   97,   97,  268,  823,  825,  816,   97,  805,
      828,  833,   97,  820,  814,  829,  252,  827,  815,  819,
       97,  824,  836,  831,  432,  830,   97,  832,   97,  826,
       97,  834,  823,  825,   97,  835,   97,  839,  828,  833,
       97,  837,  829,   97,  827,  838,   97,   97,   97,  836,
      831,  845,   97,  830,  832,  842,   97,   97,  840,  834,

      848,   97,  841,  835,  843,  839,  844,  846,   97,  837,
       97,  847,  268,  838,  852,   97,  853,  858,  845,  268,
       97,  854,  842, 1001,  219,  840,   97,  848,  849,  841,
      863,  855,  843,  844,  846, 1015,  219,  857,  850,  847,
      851,  852,  863,  853,  858,  371,  131,  856,  860,  854,
     1001,  872,  861,  870,  871,  870,  849,  371,  268,  855,
      872,  268, 1015,  872,  857,  850,  146,  851,  865,  866,
      865,  867,  881,  146,  856,  868,  370,   97,  867,  881,
     1009,  268,  868,  873,  223,  873,  867,  874,  368,  874,
      868,  298, 1127,  298,  872,  875,  373,  875,  867,  876,

      543,  876,  868,  139,  252,  878,  872,  268, 1009,  879,
      883,  884,  883,  885,  888,  889,  888,  886,  421, 1127,
      885,  890,  378,  418,  886,  891,  259,  891,  885,  890,
      418,  403,  886,  892,  255,  892,  890,  909,  268,   97,
      890,  893,  423,  893,  885,  894,  420,  894,  886,  896,
      897,  898,  890, 1014,  268,  899,  901,  902,  901,  903,
      896,   97,  898,  886,  412,  243,  904,  906,   97, 1012,
      920,  907,  911,  912,  911,  913,  410,  268,  916,  914,
     1014,  403,  917,  918,  248,  918,  916,  909, 1013,  583,
      917,  922,  923,  922,  582,  924,  913, 1012,  924,  412,

      914,  925,  407,  925,  913,  920,  252,  583,  914,  926,
      415,  926,  916,  924, 1128, 1013,  917,  927,  580,  927,
      928,  585,  928,  913,  924,   97, 1016,  914,  929,  587,
      929,  930,  744,  930,  263,  920,  932,  270,  924,  270,
      933, 1128,  298,  935,  298,  935,  936,  273,  936,  932,
      937,  434,  937,  933, 1016,   97,   97,  935,  938,  151,
      938,  932,  275,  439,  940,  933,   97,  268,  941,  943,
      945,  946,  945,  947,  439,  432,  268,  948,  268,  610,
      943,  950,  951,  950,  609,  952,  947,  268,  952,  610,
      948,  953,  443,  953,  947,  952,   97,  252,  948,  954,

      607,  954,  955,  612,  955,  947,  952,  619,  619,  948,
      956,  763,  956,  963,  963, 1017,  268,  952,  877,  957,
      139,  957,  878,  877,  877,  877,  879,  877,  877,  877,
      877,  877,  378,  268,  877,  877,  877,  449,  449,  960,
      960,  252, 1017,  961,  961,  965,  966,  965,  967,  970,
      971,  970,  968,  777,  778,  967,  972,  268,   97,  968,
      972,  877,  877,  877,  877,  973,  623,  973,  967,  778,
      252, 1023,  968,  177,  173,  972,  974,  776,  974,  975,
      780,  975,  967,  972,  785,  627,  968,  977,  877,   97,
      980,  978,  982,  983,  982,  984,  785,   97, 1023,  985,

     1024,  992,  980,  987,  988,  987,  990,  989,  984, 1138,
      989,  268,  985,  991,  789,  991,  984,  139, 1006,  878,
      985,  252,  129,  879,  139,  627,  878,  977, 1024,   97,
      879,  978,  139,  139,  878,  878, 1138,   97,  879,  879,
      139,  139,  878,  878,   97, 1006,  879,  879, 1002,  139,
     1002,  878,  993,   97,  994,  879,  802,  804,  802,  804,
     1010,   97, 1004,  996, 1004, 1007,  999,   99,   97,  219,
       97,  995,   97,   97, 1003,  863,  997,  998,  803,  993,
     1011,  994, 1008,  805,   97, 1005,   97, 1018, 1010, 1020,
      996, 1019, 1007,   97,  999,   97,   97,   97,  995,  177,

     1022,   97, 1003,  997,  998, 1026,  803,   97, 1011, 1008,
     1025,  805, 1021, 1005, 1018, 1028, 1027, 1020, 1019,   97,
       97,   97,   97,   97, 1032, 1031, 1029,   97, 1022, 1034,
       97,   97, 1026,   97,   97,   97, 1036, 1025,  174, 1021,
     1030,   97, 1028, 1027, 1033, 1037, 1035,   97,   97,   97,
     1042, 1032, 1038, 1031, 1029,   97, 1039, 1034, 1041,  131,
     1040,  860,  219, 1044, 1036,  861, 1045, 1030,  863,   97,
       97, 1033, 1037, 1035, 1043, 1048, 1049, 1048, 1042, 1038,
     1131,   97,  872, 1039,  173, 1041,  370, 1040,  867, 1136,
     1044,  129,  868,  371, 1045, 1046, 1047, 1046,  867,  872,

     1139, 1043,  868,  865,  866,  865,  867,   97, 1131,  371,
      868, 1050, 1051, 1050,  867,  872, 1136,   97,  868,  870,
      871,  870, 1052, 1053, 1052,   97,  872, 1139, 1153,  872,
      873,  223,  873,  867,  874,  368,  874,  868, 1291, 1134,
       90,  872,  875,  373,  875,  867,  876,  543,  876,  868,
      139,  146,  878,  872,   87, 1153,  879,  881, 1054, 1055,
     1054,  885,  146,   97,   97,  886, 1134,  418,  881, 1056,
     1057, 1056,  421,  890,  885,   68,  890,  418,  886,  883,
      884,  883,  885,  890, 1162, 1155,  886, 1058, 1059, 1058,
      885,  888,  889,  888,  886, 1060, 1061, 1060,  890,   66,

       66,   35,  890,  891,  259,  891,  885,  892,  255,  892,
      886, 1162, 1155, 1291,  890,  893,  423,  893,  885,  894,
      420,  894,  886,  896, 1291,  898,  890, 1063, 1075,  904,
      896,  897,  898, 1064,  890, 1291,  899, 1066, 1067, 1066,
     1068, 1070, 1291,  903, 1069, 1291, 1291,  886,  901,  902,
      901,  903, 1072, 1291, 1073,  886, 1291, 1291,  267, 1077,
     1078, 1077, 1079,  243,  403,  906, 1080, 1291, 1291,  907,
      909, 1081, 1082, 1081,  913,  403, 1291,   97,  914, 1291,
      583,  909, 1083, 1084, 1083,  582,  924,  913, 1144,  924,
      412,  914,  911,  912,  911,  913,  920, 1291, 1291,  914,

     1085, 1086, 1085,  913,  410, 1193,  916,  914, 1291,  412,
      917, 1087, 1088, 1087,  916,  920, 1144, 1291,  917,  918,
      248,  918,  916, 1089, 1090, 1089,  917,  583, 1291,   97,
      920, 1291, 1193,  924,  922,  923,  922, 1091, 1092, 1091,
     1291,  924, 1291,  270,  924,  925,  407,  925,  913,  935,
       97, 1192,  914,  926,  415,  926,  916,  927,  580,  927,
      917, 1148, 1187, 1291,  924,  928,  585,  928,  913,  929,
      587,  929,  914,  930,  744,  930,  920,  263, 1192,  932,
      924, 1291,  270,  933, 1093, 1094, 1093,  932,  935, 1148,
     1187,  933, 1095, 1096, 1095,  936,  273,  936,  932,  935,

     1291, 1291,  933,  937,  434,  937,  938,  151,  938,  932,
      935,  439,  275,  933,  940, 1291, 1291,  943,  941, 1097,
     1098, 1097,  947,  439, 1291, 1291,  948,   97,  610,  943,
     1099, 1100, 1099,  609,  952,  947, 1291,  952,  610,  948,
      945,  946,  945,  947,  952, 1163, 1188,  948, 1101, 1102,
     1101,  947,  950,  951,  950,  948, 1103, 1104, 1103,  952,
     1291, 1291, 1291,  952,  953,  443,  953,  947,  954,  607,
      954,  948, 1163, 1291, 1188,  952,  955,  612,  955,  947,
      956,  763,  956,  948, 1219, 1291, 1291,  952,  877,  957,
      139,  957,  878,  877,  877,  877,  879,  877,  877,  877,

      877,  877, 1291, 1291,  877,  877,  877,  449,  449,  960,
      960,  619, 1219,  961,  961, 1291,  619,  963, 1105, 1106,
     1105,  967,  963, 1291,   97,  968, 1291, 1291, 1107, 1108,
     1107,  877,  877,  877,  877,  972,  777,   97,  967, 1140,
     1133,  778,  968,  965,  966,  965,  967,  972, 1291, 1291,
      968,  778, 1109, 1110, 1109,  967, 1291,  972,  877,  968,
      970,  971,  970, 1111, 1112, 1111, 1140,  972, 1133, 1291,
      972,  973,  623,  973,  967,  974,  776,  974,  968, 1291,
     1291, 1291,  972,  975,  780,  975,  967,  627,  785,  977,
      968, 1291, 1291,  978,  980, 1113, 1114, 1113,  984,  785,

     1291, 1291,  985, 1291,  992,  980, 1115, 1116, 1115,  990,
      989,  984, 1291,  989,  992,  985,  982,  983,  982,  984,
      989, 1291, 1291,  985, 1117, 1118, 1117,  984,  987,  988,
      987,  985, 1119, 1120, 1119,  989, 1002, 1291, 1002,  989,
      991,  789,  991,  984,  139,   97,  878,  985, 1135,  139,
      879,  878,  627,   97,  977,  879, 1137,  139,  978,  878,
     1291,   97, 1003,  879,  139, 1121,  878,  139, 1132,  878,
      879,   97,  139,  879,  878, 1129, 1135, 1129,  879, 1004,
       97, 1004,   97, 1122, 1137, 1142,   97, 1141, 1125, 1143,
     1003, 1123, 1145, 1121,   97, 1124, 1132,   97, 1130,   97,

     1126, 1291, 1005,   97, 1146, 1149,   97,   97, 1147, 1151,
     1122,   97, 1142, 1150, 1152, 1141, 1125, 1143, 1123,   97,
     1145,   97, 1124, 1157,   97, 1154, 1130, 1126, 1156,   97,
     1005, 1160, 1146, 1149,   97, 1147,   97, 1151, 1159,   97,
       97, 1150, 1152, 1161, 1291, 1063, 1158, 1164, 1291,   97,
     1157, 1064, 1170, 1154, 1068, 1165, 1156, 1291, 1069, 1160,
     1046, 1047, 1046,  867, 1172, 1189, 1159,  868, 1177, 1291,
     1173, 1161,   97, 1158,  431, 1164, 1048, 1049, 1048,   97,
     1291, 1291, 1165,  872, 1050, 1051, 1050,  867, 1052, 1053,
     1052,  868, 1189, 1190, 1202,  872, 1054, 1055, 1054,  885,

     1056, 1057, 1056,  886, 1291, 1291, 1291,  890, 1058, 1059,
     1058,  885, 1060, 1061, 1060,  886, 1167, 1168, 1167,  890,
     1190, 1202, 1075, 1169, 1066, 1067, 1066, 1068,  890, 1291,
     1291, 1069, 1174, 1175, 1174, 1068, 1072,   97, 1073, 1069,
     1197, 1072,  267, 1073, 1072,   97, 1073,  267, 1181, 1180,
      267, 1079, 1194,   97, 1169, 1080, 1077, 1078, 1077, 1079,
     1209, 1291, 1291, 1080, 1182, 1183, 1182, 1079, 1197,   97,
       97, 1080, 1081, 1082, 1081,  913, 1083, 1084, 1083,  914,
     1194, 1291, 1291,  924, 1085, 1086, 1085,  913, 1209, 1208,
     1205,  914, 1087, 1088, 1087,  916, 1089, 1090, 1089,  917,

     1091, 1092, 1091,  920, 1291, 1291, 1291,  924, 1093, 1094,
     1093,  932, 1095, 1096, 1095,  933, 1208, 1205, 1291,  935,
     1097, 1098, 1097,  947, 1099, 1100, 1099,  948, 1291, 1291,
     1291,  952, 1101, 1102, 1101,  947, 1103, 1104, 1103,  948,
     1291, 1291, 1291,  952, 1105, 1106, 1105,  967, 1107, 1108,
     1107,  968, 1291, 1291, 1291,  972, 1109, 1110, 1109,  967,
     1111, 1112, 1111,  968, 1291, 1291, 1291,  972, 1113, 1114,
     1113,  984, 1115, 1116, 1115,  985, 1291,   97, 1291,  989,
     1117, 1118, 1117,  984, 1119, 1120, 1119,  985,  139, 1291,
      878,  989, 1191,  139,  879,  878,  627,   97,  977,  879,

     1198,  139,  978,  878,  627, 1184,  977,  879,   97,  627,
      978,  977, 1129,   97, 1129,  978,   97,   97, 1185, 1191,
     1199, 1196,   97,   97,   97,   97, 1195, 1201, 1198,   97,
     1200, 1220, 1210, 1184, 1206, 1130,   97, 1186, 1203, 1181,
       97, 1207, 1291, 1291, 1204, 1169, 1185, 1211, 1199, 1196,
     1172, 1291, 1177, 1195, 1224, 1201, 1173, 1200,  431, 1220,
     1210, 1291, 1206, 1130, 1186, 1203, 1167, 1168, 1167, 1207,
       97, 1204,   97, 1169, 1291, 1211, 1212, 1213, 1212, 1214,
     1215, 1214, 1224, 1169,   97, 1291, 1173, 1174, 1175, 1174,
     1068, 1221, 1291, 1222, 1069, 1182, 1183, 1182, 1079,  139,

     1225,  878, 1080,   97,  139,  879,  878,  139,   97,  878,
      879,   97,   97,  879,   97,   97,   97, 1223, 1221, 1232,
     1222,   97, 1226, 1227,   97,   97,   97, 1225, 1216,   97,
     1230,   97, 1228, 1237,   97, 1217, 1229, 1231, 1291, 1234,
      627, 1218,  977, 1233, 1223, 1235,  978, 1232, 1238, 1226,
     1236, 1227, 1291,   97,  139, 1216,  878, 1230, 1291, 1228,
      879, 1237, 1217, 1229, 1231,  627, 1234,  977, 1218, 1240,
     1233,  978, 1241, 1235, 1243, 1238, 1244, 1236, 1212, 1213,
     1212, 1214, 1215, 1214, 1239, 1169,   97,   97, 1173,   97,
       97,   97,   97, 1242,   97, 1249, 1240, 1246, 1248, 1241,

       97, 1243,   97, 1244,   97,   97,   97,   97, 1245, 1247,
     1253, 1239, 1250, 1251, 1252, 1254,   97, 1260, 1291, 1259,
       97, 1242, 1255, 1249, 1256, 1246, 1248,  627,   97,  977,
       97,   97,   97,  978,   97, 1245, 1247, 1253, 1263, 1262,
     1250, 1251, 1252, 1254, 1260, 1261, 1259, 1264, 1267, 1268,
     1255, 1256,   97,   97, 1265, 1266,   97,   97,   97, 1276,
     1269, 1291,   97, 1280,   97, 1281, 1263, 1262,   97,   97,
     1270, 1278, 1261, 1271, 1264, 1267, 1268, 1272, 1277, 1273,
     1289, 1265, 1266, 1284,   97, 1279,   97, 1276, 1269, 1282,
     1280, 1285, 1281, 1283, 1286, 1290,   97, 1270, 1291, 1278,

     1271, 1291, 1287, 1288, 1272, 1277, 1291, 1273, 1289, 1291,
     1291, 1284, 1279, 1291, 1291, 1291, 1291, 1282, 1285, 1291,
     1291, 1283, 1286, 1290, 1291, 1291, 1291, 1291, 1291, 1287,
     1291, 1288,   33,   33,   33,   33,   33,   33,   36,   36,
       36,   36,   36,   36,   51,   51,   51,   51,   51,   51,
       55,   55,   55,   55,   55,   55,   59,   59,   59,   59,
       59,   59,   65,   65,   65,   65,   65,   65,   67,   67,
       67,   67,   67,   67,   69,   69,   69,   69,   69,   69,
       78,   78,   78,   78,   78,   78,   86,   86,   86,   86,
       86,   86,   89,   89,   89,   89,   89,   89,   96,   96,

      100, 1291,  100,  100,  128,  128,  128,  128,  128,  128,
      130,  130,  130,  130,  130,  130,  134,  134,  134,  134,
      134,  134,  142,  142,  142,  142,  142,  142,  145,  145,
      145,  145,  145,  145,  138,  138,  138,  138,  138,  138,
      149,  149,  149,  149,  149,  149,  178,  178,  178,  178,
     1291,  178,   98, 1291,   98,   99, 1291,   99,  212,  212,
      212,  212,  212,  212,  215,  215,  215,  215,  215,  215,
      218,  218,  218,  218,  218,  218,  221,  221,  221,  221,
      221,  221,  226,  226,  226,  226,  226,  226,  229,  229,
      229,  229,  229,  229,  233,  233,  233,  233,  233,  233,

      237,  237,  237,  237,  237,  237,  240,  240,  240,  240,
      240,  240,  242,  242,  242,  242,  242,  242,  246,  246,
      246,  246,  246,  246,  251,  251,  251,  251,  251,  251,
      253,  253,  253,  253,  253,  253,  257,  257,  257,  257,
      257,  257,  262,  262,  262,  262,  262,  262,  267,  267,
      267,  267,  267,  267,  269,  269,  269,  269,  269,  269,
      274,  274,  274,  274,  274,  274,  279,  279,  279,  279,
      279,  279,  352,  352,  352,  352,  352,  352,  355,  355,
      355,  355,  355,  355,  357,  357,  357,  357,  357,  357,
      361,  361,  361,  361,  361,  361,  366,  366,  366,  366,

      366,  366,  374,  374,  374,  374,  374,  374,  379,  379,
      379,  379,  379,  379,  382,  382,  382,  382,  382,  382,
      384,  384,  384,  384,  384,  384,  389,  389,  389,  389,
      389,  389,  392,  392,  392,  392,  392,  392,  395,  395,
      395,  395,  395,  395,  399,  399,  399,  399,  399,  399,
      402,  402,  402,  402,  402,  402,  405,  405,  405,  405,
      405,  405,  411,  411,  411,  411,  411,  411,  424,  424,
      424,  424,  424,  424,  427,  427,  427,  427,  427,  427,
      431,  431,  431,  431,  431,  431,  435,  435,  435,  435,
      435,  435,  438,  438,  438,  438,  438,  438,  441,  441,

      441,  441,  441,  441,  447,  447,  447,  447,  447,  447,
      448,  448,  448,  448,  448,  448,   96,   96,  527,  527,
      527,  527,  527,  527,  530,  530,  530,  530,  530,  530,
      532,  532,  532,  532,  532,  532,  536,  536,  536,  536,
      536,  536,  361,  361,  361,  361,  361,  361,  374,  374,
      374,  374,  374,  374,  544,  544,  544,  544,  544,  544,
      547,  547,  547,  547,  547,  547,  549,  549,  549,  549,
      549,  549,  553,  553,  553,  553,  553,  553,  558,  558,
      558,  558,  558,  558,  561,  561,  561,  561,  561,  561,
      564,  564,  564,  564,  564,  564,  568,  568,  568,  568,

      568,  568,  570,  570,  570,  570,  570,  570,  574,  574,
      574,  574,  574,  574,  578,  578,  578,  578,  578,  578,
      588,  588,  588,  588,  588,  588,  591,  591,  591,  591,
      591,  591,  596,  596,  596,  596,  596,  596,  599,  599,
      599,  599,  599,  599,  601,  601,  601,  601,  601,  601,
      605,  605,  605,  605,  605,  605,  614,  614,  614,  614,
      614,  614,  615,  615,  615,  615,  615,  615,  215,  215,
      215,  215,  215,  215,  618,  618,  618,  618,  618,  618,
      621,  621,  621,  621,  621,  621,  626,  626,  626,  626,
      626,  626,   96,   96,  699,  699,  699,  699,  699,  699,

      702,  702,  702,  702,  702,  702,  704,  704,  704,  704,
      704,  704,  707,  707,  707,  707,  707,  707,  711,  711,
      711,  711,  711,  711,  714,  714,  714,  714,  714,  714,
      716,  716,  716,  716,  716,  716,  719,  719,  719,  719,
      719,  719,  726,  726,  726,  726,  726,  726,  729,  729,
      729,  729,  729,  729,  732,  732,  732,  732,  732,  732,
      734,  734,  734,  734,  734,  734,  737,  737,  737,  737,
      737,  737,  739,  739,  739,  739,  739,  739,  745,  745,
      745,  745,  745,  745,  747,  747,  747,  747,  747,  747,
      751,  751,  751,  751,  751,  751,  754,  754,  754,  754,

      754,  754,  756,  756,  756,  756,  756,  756,  759,  759,
      759,  759,  759,  759,  765,  765,  765,  765,  765,  765,
      766,  766,  766,  766,  766,  766,  769,  769,  769,  769,
      769,  769,  771,  771,  771,  771,  771,  771,  251,  251,
      251,  251,  251,  251,  774,  774,  774,  774,  774,  774,
      781,  781,  781,  781,  781,  781,  215,  215,  215,  215,
      215,  215,  784,  784,  784,  784,  784,  784,  787,  787,
      787,  787,  787,  787,  806,  806,  806,  806,  806,   96,
       96,  859,  859,  859,  859,  859,  859,  862,  862,  862,
      862,  862,  862,  864,  864,  864,  864,  864,  864,  869,

      869,  869,  869,  869,  869,  877,  877,  877,  877,  877,
      877,  880,  880,  880,  880,  880,  880,  882,  882,  882,
      882,  882,  882,  887,  887,  887,  887,  887,  887,  895,
      895,  895,  895,  895,  895,  900,  900,  900,  900,  900,
      900,  905,  905,  905,  905,  905,  905,  908,  908,  908,
      908,  908,  908,  910,  910,  910,  910,  910,  910,  915,
      915,  915,  915,  915,  915,  919,  919,  919,  919,  919,
      919,  921,  921,  921,  921,  921,  921,  931,  931,  931,
      931,  931,  931,  934,  934,  934,  934,  934,  934,  939,
      939,  939,  939,  939,  939,  942,  942,  942,  942,  942,

      942,  944,  944,  944,  944,  944,  944,  949,  949,  949,
      949,  949,  949,  958,  958,  958,  958,  958,  958,  959,
      959,  959,  959,  959,  959,  962,  962,  962,  962,  962,
      962,  964,  964,  964,  964,  964,  964,  969,  969,  969,
      969,  969,  969,  267,  267,  267,  267,  267,  267,  976,
      976,  976,  976,  976,  976,  979,  979,  979,  979,  979,
      979,  981,  981,  981,  981,  981,  981,  251,  251,  251,
      251,  251,  251,  986,  986,  986,  986,  986,  986,  877,
      877,  877,  877,  877,  877,   96,   96,  859,  859,  859,
      859,  859,  859,  862,  862,  862,  862,  862,  862,  864,

      864,  864,  864,  864,  864,  869,  869,  869,  869,  869,
      869,  880,  880,  880,  880,  880,  880,  882,  882,  882,
      882,  882,  882,  887,  887,  887,  887,  887,  887,  895,
      895,  895,  895,  895,  895,  215,  215,  215,  215,  215,
      215, 1062, 1062, 1062, 1062, 1062, 1062, 1065, 1065, 1065,
     1065, 1065, 1065,  900,  900,  900,  900,  900,  900, 1071,
     1071, 1071, 1071, 1071, 1071, 1074, 1074, 1074, 1074, 1074,
     1074, 1076, 1076, 1076, 1076, 1076, 1076,  905,  905,  905,
      905,  905,  905,  908,  908,  908,  908,  908,  908,  910,
      910,  910,  910,  910,  910,  921,  921,  921,  921,  921,

      921,  915,  915,  915,  915,  915,  915,  919,  919,  919,
      919,  919,  919,  931,  931,  931,  931,  931,  931,  934,
      934,  934,  934,  934,  934,  939,  939,  939,  939,  939,
      939,  942,  942,  942,  942,  942,  942,  944,  944,  944,
      944,  944,  944,  949,  949,  949,  949,  949,  949,  958,
      958,  958,  958,  958,  958,  959,  959,  959,  959,  959,
      959,  962,  962,  962,  962,  962,  962,  964,  964,  964,
      964,  964,  964,  969,  969,  969,  969,  969,  969,  976,
      976,  976,  976,  976,  976,  979,  979,  979,  979,  979,
      979,  981,  981,  981,  981,  981,  981,  986,  986,  986,

      986,  986,  986,  877,  877,  877,  877,  877,  877,   96,
       96,  864,  864,  864,  864,  864,  864,  869,  869,  869,
      869,  869,  869,  882,  882,  882,  882,  882,  882,  887,
      887,  887,  887,  887,  887, 1062, 1062, 1062, 1062, 1062,
     1062,  251,  251,  251,  251,  251,  251, 1166, 1166, 1166,
     1166, 1166, 1166, 1065, 1065, 1065, 1065, 1065, 1065, 1171,
     1171, 1171, 1171, 1171, 1171, 1071, 1071, 1071, 1071, 1071,
     1071, 1176, 1176, 1176, 1176, 1176, 1176, 1074, 1074, 1074,
     1074, 1074, 1074, 1178, 1178, 1291, 1178, 1178, 1178, 1076,
     1076, 1076, 1076, 1076, 1076,  910,  910,  910,  910,  910,

      910,  921,  921,  921,  921,  921,  921,  915,  915,  915,
      915,  915,  915,  919,  919,  919,  919,  919,  919,  931,
      931,  931,  931,  931,  931,  934,  934,  934,  934,  934,
      934,  944,  944,  944,  944,  944,  944,  949,  949,  949,
      949,  949,  949,  964,  964,  964,  964,  964,  964,  969,
      969,  969,  969,  969,  969,  981,  981,  981,  981,  981,
      981,  986,  986,  986,  986,  986,  986,  877,  877,  877,
      877,  877,  877,  976,  976,  976,  976,  976,  976,   96,
       96,   27, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,

     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291
    } ;

static yyconst flex_int16_t yy_chk[5654] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    7,
        9,    8,   10, 1288,   11,   12,    7,    7,    8,    8,
       30,   11,   12,   21,   21,   21,   21,   32,   32,   11,
       12,   30,   30,    1,    1,    1,    1,   95,   95,   13,
       14,   26,   26,   26,   26, 1283,   13,   14,   36,   36,
     1278,    9,    9,   10,   10,   11,   12,  229,   36,  229,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       13,   14,   24,   15,   24,   15,   15,   15,   47,   38,

       15,   24,   69,   15,   69,   47,   72,   79,   69,   79,
       79,   24,   72,   38,    2,    2,    2,    2, 1277, 1271,
       70,   16,   70,   16,   16,   16,   70,  298,   16,  298,
       73,   16,   73,   47,   15,   91,   73,   91,   91,   24,
       38,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,   15,   16,   22,   22,   22,   22,   22,   76,  105,
       76,   50,  105,   22,   76,   74,   74,   74,   74, 1268,
       22,   50,   74,   22,   76,    3,    3,    3,    3,   16,
       40,   94,   41,   44,  100,  100,  177,  177,  177,  130,

      105,  130,   94,   94,  100,  130,   41,   40,   41,   50,
       44,   22,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,   37,   41,   40,   41,   37,   44,   42,  132,
      131,  136, 1267,   48,  131,  132,   45,  136,   46,   81,
       48,   81,   37,   43, 1263,   42,    4,    4,    4,    4,
       42,   43,  135,   45,   37,   48,  135,   46,   43,   43,
       46,   82,   81,   82,   82,   82, 1261,  106,   48,   37,
      106,  103,   42,    4,    5,  122, 1252,   42,   82,   43,
       45,   84,   48,   84,   46,   43,   43,   46,  103,  122,

       81,    5,    5,    5,    5,    5,    5,  101,  106,    5,
     1251,  139,    5,    5,   84,  139,    5,    5,    5,    5,
      215,  102,    5, 1250,  215,  103,  122,  101, 1249,    5,
        5,    5,    5,    5,    5, 1248, 1245,    5,   49,    5,
        5,  102,   84,    5,    5,    5,    5,  104,   49,    5,
       20,   20,   20,   20,  101,   49,   20,   83,  107,   20,
      112,   83,   20,   20,   49,  113,   20,  104,  102,   20,
       20,  111,  108,  107,  107,  165,   49,  111,  117,  112,
      243,  113,   49,  108,  243,   83,  109,  117,  120,   83,
      109,   49,  111,  111,  104,  109,  116,   20,   20,   39,

      107,  107,   39,  165,  118,  111,  112,  120,  113,   39,
      118,  108,  109,   39,  109,  117,   39,  116,   39,  111,
      111, 1243,  650,  109,  115,  133,  133,  133,  133,  134,
       39,  134,  133,  650,  120,  134,  119,   39,  118,  109,
       39,  109,  115,   39,  116,   39,   71,   71,   71,   71,
       71,   71,   71,  119,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  110,  123,  124,  121,  115,
      123,  121,  110,  121,  124,  127,  170, 1241,  141,  126,
      119,  138,  127,  138,  141,  110,  532,  138,  532,   71,
       71,   71,  137,  137,  137,  137, 1240,  126,  123,  121,

      110,  121,  124,  142,  170,  142, 1231,  145,  152,  142,
      127,  275,  110,  145,  152,  275,   71,   75,   75,   75,
       75,   75,   75,   75,  126,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,  143,  143,  143,  143,
      147,  147,  147,  143,  228,  228,  228,  147,  148,  148,
      148,  148,  149,  190,  149,  148,  172,  190,  149, 1230,
       75,   75,   75,  150,  150,  150,  150,  252,  252,  252,
      150,  153,  153,  153,  153,  154,  182,  154,  153, 1222,
      157,  154,  157,  182,  172,  190,  157,   75,   77,   77,
       77,   77,  163,  191,  163,   77,  213,  157,  160,  161,

      160,  161,  213,  191,  160,  161,   77,  162,  167,  162,
      162,  182,  167,   77,  174,  163,  174,   77,  161,  549,
       77,  549,   77,  160,  564,  157,  564,  174,  174,   77,
      164,  191,  164, 1211,   77,  166,  167,  166,  166,  166,
      167,   77, 1210,  163,   77, 1209,  161,   77,  156,   77,
      156,  160,  166,  164,  156, 1203,   77,  140,  140,  140,
      140,  140,  140,  140,  179,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  156,  158,  169,  158,
      169,  164,  156,  158,  175,  179,  175,  175,  181,  197,
      198,  216,  197,  181,  158,  198,  171,  216,  171,  290,

      140,  140,  140,  156,  184,  169, 1191,  169,  158,  156,
      192,  212,  179,  212,  363,  363,  363,  212, 1183,  171,
      197,  181,  158,  198,  184,  192,  290,  140,  144,  144,
      144,  144,  144,  144,  144,  158,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  171,  180,  185,
      183,  184,  192,  189,  193,  200, 1180,  218,  221,  180,
      221,  193,  200,  218,  221,  180,  183,  185, 1179,  183,
      189,  144,  144,  144,  186,  214,  214,  214,  214,  570,
      201,  570,  214,  217,  217,  217,  217,  180, 1178,  193,
      200,  201,  180,  183,  185,  186,  183,  189,  144,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  187,  199,  155,  155,  155,  159,  201,
      159,  195,  186,  294,  159,  224,  196,  173,  314,  173,
      202,  224,  188,  226,  187, 1177,  199,  211,  159,  226,
      195,  196,  155,  155,  155,  155,  486,  159,  159,  173,
      294,  188,  202,  173, 1175,  314,  211,  204,  205,  234,
      188,  187,  206,  199,  204,  234,  159,  195,  196,  155,
     1170,  203,  205,  486,  159,  159,  203,  173,  188,  202,
      203,  173,  194,  211,  206,  194,  194,  194,  194,  194,
      194,  207,  204,  194,  209,  240,  306,  194,  207,  205,

      194,  240,  194,  194,  203,  210,  194,  292,  203,  306,
      209,  206,  210,  194,  194,  194,  194,  194,  194,  208,
     1164,  194,  244,  304,  194,  249,  207,  194,  244,  194,
      194,  249,  304,  194,  208,  292,  306,  209,  208, 1161,
      210,  220,  220,  220,  222,  222,  222,  222,  220, 1160,
     1156,  222,  225,  225,  225,  225,  233,  253,  233,  225,
      304,  208,  233,  253,  300,  208,  230,  230,  230,  230,
      235,  235,  235,  235, 1153,  300,  300,  235,  236,  236,
      236,  236,  236,  236,  236, 1150,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  237,  303,  237,

      310,  315,  311,  237,  238,  238,  238,  238,  241,  241,
      241,  238,  242,  260,  242,  241,  311,  303,  242,  260,
      310,  236,  236,  236,  245,  245,  245,  245,  246,  315,
      246,  245, 1147, 1143,  246,  247,  247,  247,  247,  254,
      254,  254,  247,  311,  303, 1142,  254,  310,  236,  239,
      239,  239,  239,  239,  239,  239, 1136,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  250,  250,
      250,  250,  256,  256,  256,  250,  257, 1133,  257,  256,
     1132,  264,  257,  258,  258,  258,  258,  264, 1118,  317,
      258, 1114,  239,  239,  239,  261,  261,  261,  261,  262,

     1110,  262,  261,  317,  269,  262,  265,  265,  265,  265,
      269, 1106,  276,  265,  266,  266,  266,  266,  276,  239,
      322,  266,  271,  271,  271,  272,  272,  272,  272,  271,
      317,  274,  272,  274,  322, 1102,  307,  274,  277,  277,
      277,  277,  307, 1098, 1094,  277,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      308,  322,  278,  278,  278,  279,  280,  279,  280,  308,
      307,  279,  280,  282,  281,  282,  281, 1088, 1086,  282,
      281,  283,  285,  283,  285, 1082, 1078,  283,  285,  278,
      278,  278,  278,  309,  280,  281,  309,  308,  284,  286,

      284,  286, 1075,  282,  284,  286,  287,  285,  287,  291,
     1067,  288,  287,  288,  305,  283,  278,  288,  291,  305,
      289,  280,  289,  281,  309,  664,  289,  295,  286,  295,
      282,  286,  284,  313,  296,  285,  296,  291,  297,  449,
      297,  287,  283,  449,  313,  291,  288,  305,  289,  295,
      316,  323,  664,  295,  312,  286,  318,  312,  286,  284,
      321,  297,  325,  296, 1063,  296,  316,  318,  287,  299,
      323,  299,  313,  288,  324,  289,  320,  295,  325,  319,
      321,  295,  299,  299,  326,  312,  319,  320,  327,  297,
      296,  324,  296,  316,  328,  318,  327,  323,  329,  332,

      320,  326,  335,  333,  327,  325,  326,  321,  588,  332,
      588,  328,  330,  331,  319,  320,  335,  329,  324,  330,
      331,  336,  337,  463,  327,  339,  338,  320,  326,  333,
      339,  327,  340,  326,  330,  338,  342,  332,  328,  331,
      345,  337,  336,  335,  329,  338,  340,  330,  331,  464,
      341,  463, 1059,  347,  348,  342,  333,  341,  339,  345,
      346,  330,  601,  338,  601,  346,  331, 1055,  337,  336,
      347,  348,  338,  340,  350,  627,  351,  464,  352,  627,
      352,  350,  342,  351,  352,  341,  345, 1051,  353,  355,
      359,  465,  350,  346,  353,  355,  359,  347,  348,  354,

      354,  354,  354,  356,  356,  356,  354,  357, 1047,  357,
      356,  351,  361,  357,  358,  358,  358,  358,  361,  465,
      350,  358,  360,  360,  360,  360, 1035,  476,  366,  360,
      364,  364,  364,  364,  366,  367,  367,  367,  369,  369,
      369, 1034,  367,  476, 1014,  369,  372,  372,  372,  372,
      375,  375,  375,  372,  379,  380,  379,  416,  416,  416,
      379,  380,  381,  381,  381,  381,  382, 1013,  466,  381,
      476,  386,  382,  383,  383,  383,  384,  386,  384,  990,
      383,  393,  384,  385,  385,  385,  385,  393,  983,  397,
      385,  387,  387,  387,  387,  397,  466,  966,  387,  388,

      388,  388,  388,  388,  388,  388,  467,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  389,  475,
      389,  487,  475,  946,  389,  390,  390,  390,  390,  392,
      399,  392,  390,  896,  467,  392,  399,  896,  394,  394,
      394,  394,  388,  388,  388,  394,  395,  912,  395,  487,
      475,  402,  395,  396,  396,  396,  396,  402,  884,  408,
      396,  398,  398,  398,  398,  408,  866,  853,  398,  388,
      391,  391,  391,  391,  391,  391,  391,  848,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  400,
      400,  400,  401,  401,  401,  621,  400,  621,  411,  401,

      404,  404,  404,  405,  411,  405,  424,  404,  424,  405,
      846,  843,  424,  391,  391,  391,  406,  406,  406,  406,
      473,  842,  473,  406,  409,  409,  409,  409,  413,  413,
      413,  409,  832,  473,  473,  413,  414,  414,  414,  414,
      391,  826,  818,  414,  419,  419,  419,  422,  422,  422,
      422,  419,  425,  474,  422,  494,  817,  427,  425,  426,
      426,  426,  426,  427,  474,  474,  426,  428,  428,  428,
      429,  429,  429,  429,  428,  494,  789,  429,  430,  430,
      430,  430,  433,  433,  433,  430,  435,  436,  435,  433,
      493,  785,  435,  436,  437,  437,  437,  437,  438,  780,

      493,  437,  494,  444,  438,  440,  440,  440,  441,  444,
      441,  777,  440,  450,  441,  442,  442,  442,  442,  450,
      698,  478,  442,  445,  445,  445,  445,  478,  493,  687,
      445,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  508,  492,  446,  446,  446,
      447,  448,  447,  448,  492,  478,  447,  448,  451,  451,
      451,  451,  452,  508,  452,  451,  481,  453,  452,  453,
      470,  481,  470,  453,  446,  446,  446,  446,  455,  454,
      455,  454,  492,  685,  455,  454,  456,  457,  456,  457,
      508,  470,  456,  457,  458,  471,  458,  471,  669,  481,

      458,  446,  454,  459,  460,  459,  460,  456,  528,  459,
      460,  461,  455,  461,  528,  652,  457,  461,  471,  470,
      462,  460,  462,  624,  623,  458,  462,  619,  498,  460,
      454,  459,  468,  477,  468,  456,  461,  612,  469,  455,
      469,  462,  484,  457,  477,  482,  471,  479,  480,  460,
      498,  482,  458,  484,  479,  480,  482,  460,  459,  483,
      485,  468,  488,  468,  461,  485,  483,  488,  489,  462,
      491,  490,  477,  469,  495,  489,  496,  498,  499,  482,
      500,  484,  479,  480,  482,  490,  491,  496,  468,  502,
      468,  495,  503,  485,  483,  488,  500,  499,  503,  504,

      469,  507,  506,  489,  507,  505,  506,  509,  511,  512,
      502,  609,  490,  491,  509,  496,  504,  515,  495,  505,
      512,  513,  511,  500,  499,  515,  503,  516,  513,  514,
      516,  517,  507,  518,  506,  520,  514,  502,  517,  518,
      521,  519,  509,  504,  519,  522,  505,  523,  512,  511,
      525,  522,  605,  515,  530,  520,  513,  527,  516,  527,
      530,  521,  545,  527,  514,  547,  517,  518,  545,  523,
      525,  547,  519,  529,  529,  529,  529,  603,  591,  522,
      562,  568,  520,  531,  531,  531,  562,  568,  521,  533,
      533,  533,  533,  537,  537,  537,  523,  525,  535,  535,

      535,  535,  538,  538,  538,  539,  539,  539,  539,  540,
      540,  540,  542,  542,  542,  544,  589,  544,  548,  548,
      548,  544,  546,  546,  546,  546,  550,  550,  550,  550,
      552,  552,  552,  552,  554,  554,  554,  555,  555,  555,
      556,  556,  556,  556,  557,  557,  557,  558,  597,  558,
      557,  585,  582,  558,  597,  578,  557,  557,  559,  559,
      559,  559,  560,  560,  560,  561,  599,  561,  560,  574,
      572,  561,  599,  566,  560,  560,  563,  563,  563,  563,
      565,  565,  565,  565,  567,  567,  567,  567,  569,  569,
      569,  571,  571,  571,  571,  573,  573,  573,  573,  575,

      575,  575,  576,  576,  576,  576,  577,  577,  577,  579,
      579,  579,  581,  581,  581,  584,  584,  584,  584,  586,
      586,  586,  590,  590,  590,  590,  592,  592,  592,  593,
      593,  593,  593,  594,  594,  594,  595,  595,  595,  595,
      596,  553,  596,  600,  600,  600,  596,  598,  598,  598,
      598,  602,  602,  602,  602,  604,  604,  604,  604,  606,
      606,  606,  608,  608,  608,  611,  611,  611,  611,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  640,  551,  613,  613,  613,  614,  615,
      614,  615,  616,  536,  614,  615,  643,  618,  616,  617,

      617,  617,  617,  618,  620,  620,  620,  622,  622,  622,
      622,  640,  613,  613,  613,  613,  625,  625,  625,  625,
      626,  628,  626,  644,  643,  799,  626,  628,  629,  629,
      629,  629,  630,  534,  630,  631,  526,  631,  630,  613,
      632,  631,  632,  633,  653,  633,  632,  653,  634,  633,
      634,  644,  799,  630,  634,  635,  645,  635,  645,  510,
      636,  635,  636,  637,  633,  637,  636,  651,  638,  637,
      638,  639,  651,  639,  638,  653,  635,  639,  634,  659,
      646,  630,  646,  660,  501,  636,  637,  638,  647,  663,
      647,  645,  633,  637,  649,  648,  649,  648,  654,  659,

      651,  654,  646,  655,  635,  634,  656,  649,  660,  647,
      657,  655,  658,  636,  637,  638,  661,  663,  645,  658,
      637,  648,  662,  665,  497,  662,  659,  656,  666,  654,
      646,  657,  661,  666,  667,  660,  668,  647,  671,  655,
      678,  667,  673,  670,  443,  665,  666,  658,  675,  648,
      670,  675,  674,  662,  656,  671,  439,  668,  657,  661,
      672,  666,  678,  673,  431,  672,  676,  674,  677,  667,
      680,  676,  665,  666,  686,  677,  679,  680,  670,  675,
      682,  679,  671,  681,  668,  679,  690,  684,  688,  678,
      673,  686,  692,  672,  674,  682,  697,  683,  681,  676,

      690,  693,  681,  677,  683,  680,  684,  688,  689,  679,
      694,  689,  423,  679,  692,  696,  693,  697,  686,  421,
      691,  694,  682,  801,  700,  681,  695,  690,  691,  681,
      700,  695,  683,  684,  688,  821,  702,  696,  691,  689,
      691,  692,  702,  693,  697,  706,  699,  695,  699,  694,
      801,  706,  699,  703,  703,  703,  691,  707,  415,  695,
      703,  410,  821,  707,  696,  691,  712,  691,  701,  701,
      701,  701,  712,  714,  695,  701,  704,  813,  704,  714,
      813,  407,  704,  705,  705,  705,  705,  708,  708,  708,
      705,  807, 1000,  807,  708,  709,  709,  709,  709,  710,

      710,  710,  709,  711,  403,  711,  710,  377,  813,  711,
      713,  713,  713,  713,  715,  715,  715,  713,  716, 1000,
      716,  715,  374,  718,  716,  717,  717,  717,  717,  718,
      719,  727,  717,  720,  720,  720,  719,  727,  373,  820,
      720,  721,  721,  721,  721,  722,  722,  722,  721,  723,
      723,  723,  722,  820,  370,  723,  724,  724,  724,  724,
      725,  816,  725,  724,  731,  726,  725,  726,  819,  816,
      731,  726,  728,  728,  728,  728,  729,  365,  729,  728,
      820,  732,  729,  730,  730,  730,  730,  732,  819,  736,
      730,  733,  733,  733,  734,  736,  734,  816,  733,  737,

      734,  735,  735,  735,  735,  737,  362,  739,  735,  738,
      738,  738,  738,  739, 1001,  819,  738,  740,  740,  740,
      741,  741,  741,  741,  740,  349,  822,  741,  742,  742,
      742,  743,  743,  743,  745,  742,  745,  746,  743,  747,
      745, 1001,  808,  746,  808,  747,  748,  748,  748,  748,
      749,  749,  749,  748,  822,  344,  343,  749,  750,  750,
      750,  750,  751,  752,  751,  750,  334,  273,  751,  752,
      753,  753,  753,  753,  754,  268,  267,  753,  263,  758,
      754,  755,  755,  755,  756,  758,  756,  259,  755,  759,
      756,  757,  757,  757,  757,  759,  823,  251,  757,  760,

      760,  760,  761,  761,  761,  761,  760,  767,  769,  761,
      762,  762,  762,  767,  769,  823,  248,  762,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  232,  231,  764,  764,  764,  765,  766,  765,
      766,  227,  823,  765,  766,  768,  768,  768,  768,  770,
      770,  770,  768,  771,  773,  771,  770,  223,  830,  771,
      773,  764,  764,  764,  764,  772,  772,  772,  772,  774,
      219,  830,  772,  176,  168,  774,  775,  775,  775,  779,
      779,  779,  779,  775,  782,  781,  779,  781,  764,  831,
      782,  781,  783,  783,  783,  783,  784,  810,  830,  783,

      831,  790,  784,  786,  786,  786,  787,  790,  787, 1015,
      786,  151,  787,  788,  788,  788,  788,  791,  810,  791,
      788,  146,  128,  791,  792,  793,  792,  793,  831,  125,
      792,  793,  794,  795,  794,  795, 1015,  114,  794,  795,
      796,  797,  796,  797,  811,  810,  796,  797,  803,  798,
      803,  798,  791,  814,  792,  798,  802,  804,  802,  804,
      814,  812,  805,  795,  805,  811,  798,   98,   96,  860,
      824,  794,  825,  815,  803,  860,  796,  797,  802,  791,
      815,  792,  812,  804,  834,  805,  827,  824,  814,  827,
      795,  825,  811,  828,  798,  829,  833,  835,  794,   92,

      829,  836,  803,  796,  797,  834,  802,  840,  815,  812,
      833,  804,  828,  805,  824,  836,  835,  827,  825,  837,
      839,  838,  844,  849,  840,  839,  837,  841,  829,  844,
      845,  847,  834,  850,  851,  854,  847,  833,   88,  828,
      838,  852,  836,  835,  841,  849,  845,  855,  856,  857,
      855,  840,  850,  839,  837,  858,  851,  844,  854,  859,
      852,  859,  862,  857,  847,  859,  858,  838,  862, 1006,
     1011,  841,  849,  845,  856,  863,  863,  863,  855,  850,
     1006, 1017,  863,  851,   85,  854,  864,  852,  864, 1011,
      857,   67,  864,  867,  858,  861,  861,  861,  861,  867,

     1017,  856,  861,  865,  865,  865,  865, 1031, 1006,  869,
      865,  868,  868,  868,  868,  869, 1011, 1009,  868,  870,
      870,  870,  872,  872,  872,   33,  870, 1017, 1031,  872,
      873,  873,  873,  873,  874,  874,  874,  873,   27, 1009,
       25,  874,  875,  875,  875,  875,  876,  876,  876,  875,
      877,  878,  877,  876,   23, 1031,  877,  878,  879,  879,
      879,  879,  880, 1033, 1042,  879, 1009,  885,  880,  881,
      881,  881,  882,  885,  882,   19,  881,  887,  882,  883,
      883,  883,  883,  887, 1042, 1033,  883,  886,  886,  886,
      886,  888,  888,  888,  886,  890,  890,  890,  888,   18,

       17,    6,  890,  891,  891,  891,  891,  892,  892,  892,
      891, 1042, 1033,    0,  892,  893,  893,  893,  893,  894,
      894,  894,  893,  895,    0,  895,  894,  898,  903,  895,
      897,  897,  897,  898,  903,    0,  897,  899,  899,  899,
      899,  900,    0,  900,  899,    0,    0,  900,  901,  901,
      901,  901,  902,    0,  902,  901,    0,    0,  902,  904,
      904,  904,  904,  905,  906,  905,  904,    0,    0,  905,
      906,  907,  907,  907,  907,  908,    0, 1022,  907,    0,
      913,  908,  909,  909,  909,  910,  913,  910, 1022,  909,
      916,  910,  911,  911,  911,  911,  916,    0,    0,  911,

      914,  914,  914,  914,  915, 1138,  915,  914,    0,  919,
      915,  917,  917,  917,  917,  919, 1022,    0,  917,  918,
      918,  918,  918,  920,  920,  920,  918,  921,    0, 1137,
      920,    0, 1138,  921,  922,  922,  922,  924,  924,  924,
        0,  922,    0,  932,  924,  925,  925,  925,  925,  932,
     1026, 1137,  925,  926,  926,  926,  926,  927,  927,  927,
      926, 1026, 1127,    0,  927,  928,  928,  928,  928,  929,
      929,  929,  928,  930,  930,  930,  929,  931, 1137,  931,
      930,    0,  934,  931,  933,  933,  933,  933,  934, 1026,
     1127,  933,  935,  935,  935,  936,  936,  936,  936,  935,

        0,    0,  936,  937,  937,  937,  938,  938,  938,  938,
      937,  940,  939,  938,  939,    0,    0,  940,  939,  941,
      941,  941,  941,  942,    0,    0,  941, 1043,  947,  942,
      943,  943,  943,  944,  947,  944,    0,  943,  949,  944,
      945,  945,  945,  945,  949, 1043, 1128,  945,  948,  948,
      948,  948,  950,  950,  950,  948,  952,  952,  952,  950,
        0,    0,    0,  952,  953,  953,  953,  953,  954,  954,
      954,  953, 1043,    0, 1128,  954,  955,  955,  955,  955,
      956,  956,  956,  955, 1187,    0,    0,  956,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,

      957,  957,    0,    0,  957,  957,  957,  958,  959,  958,
      959,  960, 1187,  958,  959,    0,  962,  960,  961,  961,
      961,  961,  962,    0, 1018,  961,    0,    0,  963,  963,
      963,  957,  957,  957,  957,  963,  964, 1008,  964, 1018,
     1008,  967,  964,  965,  965,  965,  965,  967,    0,    0,
      965,  969,  968,  968,  968,  968,    0,  969,  957,  968,
      970,  970,  970,  972,  972,  972, 1018,  970, 1008,    0,
      972,  973,  973,  973,  973,  974,  974,  974,  973,    0,
        0,    0,  974,  975,  975,  975,  975,  976,  977,  976,
      975,    0,    0,  976,  977,  978,  978,  978,  978,  979,

        0,    0,  978,    0,  984,  979,  980,  980,  980,  981,
      984,  981,    0,  980,  986,  981,  982,  982,  982,  982,
      986,    0,    0,  982,  985,  985,  985,  985,  987,  987,
      987,  985,  989,  989,  989,  987, 1002,    0, 1002,  989,
      991,  991,  991,  991,  993, 1010,  993,  991, 1010,  994,
      993,  994,  995, 1012,  995,  994, 1012,  996,  995,  996,
        0, 1007, 1002,  996,  997,  993,  997,  998, 1007,  998,
      997, 1020,  999,  998,  999, 1003, 1010, 1003,  999, 1004,
     1019, 1004, 1021,  994, 1012, 1020, 1023, 1019,  998, 1021,
     1002,  996, 1023,  993, 1025,  997, 1007, 1027, 1003, 1024,

      999,    0, 1004, 1029, 1024, 1027, 1028, 1037, 1025, 1029,
      994, 1030, 1020, 1028, 1030, 1019,  998, 1021,  996, 1032,
     1023, 1036,  997, 1037, 1040, 1032, 1003,  999, 1036, 1038,
     1004, 1040, 1024, 1027, 1039, 1025, 1041, 1029, 1039, 1045,
     1044, 1028, 1030, 1041,    0, 1062, 1038, 1044,    0, 1131,
     1037, 1062, 1065, 1032, 1065, 1045, 1036,    0, 1065, 1040,
     1046, 1046, 1046, 1046, 1068, 1131, 1039, 1046, 1073,    0,
     1068, 1041, 1151, 1038, 1073, 1044, 1048, 1048, 1048, 1134,
        0,    0, 1045, 1048, 1050, 1050, 1050, 1050, 1052, 1052,
     1052, 1050, 1131, 1134, 1151, 1052, 1054, 1054, 1054, 1054,

     1056, 1056, 1056, 1054,    0,    0,    0, 1056, 1058, 1058,
     1058, 1058, 1060, 1060, 1060, 1058, 1064, 1064, 1064, 1060,
     1134, 1151, 1074, 1064, 1066, 1066, 1066, 1066, 1074,    0,
        0, 1066, 1069, 1069, 1069, 1069, 1070, 1144, 1070, 1069,
     1144, 1071, 1070, 1071, 1072, 1139, 1072, 1071, 1079, 1076,
     1072, 1076, 1139, 1162, 1079, 1076, 1077, 1077, 1077, 1077,
     1162,    0,    0, 1077, 1080, 1080, 1080, 1080, 1144, 1155,
     1159, 1080, 1081, 1081, 1081, 1081, 1083, 1083, 1083, 1081,
     1139,    0,    0, 1083, 1085, 1085, 1085, 1085, 1162, 1159,
     1155, 1085, 1087, 1087, 1087, 1087, 1089, 1089, 1089, 1087,

     1091, 1091, 1091, 1089,    0,    0,    0, 1091, 1093, 1093,
     1093, 1093, 1095, 1095, 1095, 1093, 1159, 1155,    0, 1095,
     1097, 1097, 1097, 1097, 1099, 1099, 1099, 1097,    0,    0,
        0, 1099, 1101, 1101, 1101, 1101, 1103, 1103, 1103, 1101,
        0,    0,    0, 1103, 1105, 1105, 1105, 1105, 1107, 1107,
     1107, 1105,    0,    0,    0, 1107, 1109, 1109, 1109, 1109,
     1111, 1111, 1111, 1109,    0,    0,    0, 1111, 1113, 1113,
     1113, 1113, 1115, 1115, 1115, 1113,    0, 1135,    0, 1115,
     1117, 1117, 1117, 1117, 1119, 1119, 1119, 1117, 1121,    0,
     1121, 1119, 1135, 1122, 1121, 1122, 1123, 1145, 1123, 1122,

     1145, 1124, 1123, 1124, 1125, 1121, 1125, 1124, 1140, 1126,
     1125, 1126, 1129, 1148, 1129, 1126, 1141, 1146, 1122, 1135,
     1146, 1141, 1154, 1152, 1149, 1163, 1140, 1149, 1145, 1157,
     1148, 1188, 1163, 1121, 1157, 1129, 1158, 1124, 1152, 1166,
     1165, 1158,    0,    0, 1154, 1166, 1122, 1165, 1146, 1141,
     1171,    0, 1176, 1140, 1193, 1149, 1171, 1148, 1176, 1188,
     1163,    0, 1157, 1129, 1124, 1152, 1167, 1167, 1167, 1158,
     1189, 1154, 1190, 1167,    0, 1165, 1169, 1169, 1169, 1173,
     1173, 1173, 1193, 1169, 1194,    0, 1173, 1174, 1174, 1174,
     1174, 1189,    0, 1190, 1174, 1182, 1182, 1182, 1182, 1184,

     1194, 1184, 1182, 1192, 1185, 1184, 1185, 1186, 1195, 1186,
     1185, 1197, 1196, 1186, 1201, 1198, 1199, 1192, 1189, 1201,
     1190, 1200, 1195, 1196, 1202, 1204, 1207, 1194, 1184, 1206,
     1199, 1208, 1197, 1207, 1205, 1185, 1198, 1200,    0, 1204,
     1216, 1186, 1216, 1202, 1192, 1205, 1216, 1201, 1208, 1195,
     1206, 1196,    0, 1223, 1217, 1184, 1217, 1199,    0, 1197,
     1217, 1207, 1185, 1198, 1200, 1218, 1204, 1218, 1186, 1219,
     1202, 1218, 1220, 1205, 1223, 1208, 1224, 1206, 1212, 1212,
     1212, 1214, 1214, 1214, 1217, 1212, 1221, 1225, 1214, 1227,
     1226, 1228, 1229, 1221, 1235, 1229, 1219, 1226, 1228, 1220,

     1242, 1223, 1238, 1224, 1236, 1232, 1233, 1234, 1225, 1227,
     1235, 1217, 1232, 1233, 1234, 1236, 1237, 1244,    0, 1242,
     1246, 1221, 1237, 1229, 1238, 1226, 1228, 1239, 1247, 1239,
     1254, 1253, 1255, 1239, 1256, 1225, 1227, 1235, 1253, 1247,
     1232, 1233, 1234, 1236, 1244, 1246, 1242, 1254, 1257, 1258,
     1237, 1238, 1259, 1262, 1255, 1256, 1269, 1264, 1265, 1269,
     1259,    0, 1270, 1274, 1272, 1275, 1253, 1247, 1266, 1273,
     1262, 1272, 1246, 1264, 1254, 1257, 1258, 1265, 1270, 1266,
     1284, 1255, 1256, 1280, 1276, 1273, 1279, 1269, 1259, 1276,
     1274, 1280, 1275, 1279, 1281, 1286, 1282, 1262,    0, 1272,

     1264,    0, 1281, 1282, 1265, 1270,    0, 1266, 1284,    0,
        0, 1280, 1273,    0,    0,    0,    0, 1276, 1280,    0,
        0, 1279, 1281, 1286,    0,    0,    0,    0,    0, 1281,
        0, 1282, 1292, 1292, 1292, 1292, 1292, 1292, 1293, 1293,
     1293, 1293, 1293, 1293, 1294, 1294, 1294, 1294, 1294, 1294,
     1295, 1295, 1295, 1295, 1295, 1295, 1296, 1296, 1296, 1296,
     1296, 1296, 1297, 1297, 1297, 1297, 1297, 1297, 1298, 1298,
     1298, 1298, 1298, 1298, 1299, 1299, 1299, 1299, 1299, 1299,
     1300, 1300, 1300, 1300, 1300, 1300, 1301, 1301, 1301, 1301,
     1301, 1301, 1302, 1302, 1302, 1302, 1302, 1302, 1303, 1303,

     1304,    0, 1304, 1304, 1305, 1305, 1305, 1305, 1305, 1305,
     1306, 1306, 1306, 1306, 1306, 1306, 1307, 1307, 1307, 1307,
     1307, 1307, 1308, 1308, 1308, 1308, 1308, 1308, 1309, 1309,
     1309, 1309, 1309, 1309, 1310, 1310, 1310, 1310, 1310, 1310,
     1311, 1311, 1311, 1311, 1311, 1311, 1312, 1312, 1312, 1312,
        0, 1312, 1313,    0, 1313, 1314,    0, 1314, 1315, 1315,
     1315, 1315, 1315, 1315, 1316, 1316, 1316, 1316, 1316, 1316,
     1317, 1317, 1317, 1317, 1317, 1317, 1318, 1318, 1318, 1318,
     1318, 1318, 1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320,
     1320, 1320, 1320, 1320, 1321, 1321, 1321, 1321, 1321, 1321,

     1322, 1322, 1322, 1322, 1322, 1322, 1323, 1323, 1323, 1323,
     1323, 1323, 1324, 1324, 1324, 1324, 1324, 1324, 1325, 1325,
     1325, 1325, 1325, 1325, 1326, 1326, 1326, 1326, 1326, 1326,
     1327, 1327, 1327, 1327, 1327, 1327, 1328, 1328, 1328, 1328,
     1328, 1328, 1329, 1329, 1329, 1329, 1329, 1329, 1330, 1330,
     1330, 1330, 1330, 1330, 1331, 1331, 1331, 1331, 1331, 1331,
     1332, 1332, 1332, 1332, 1332, 1332, 1333, 1333, 1333, 1333,
     1333, 1333, 1334, 1334, 1334, 1334, 1334, 1334, 1335, 1335,
     1335, 1335, 1335, 1335, 1336, 1336, 1336, 1336, 1336, 1336,
     1337, 1337, 1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338,

     1338, 1338, 1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340,
     1340, 1340, 1340, 1340, 1341, 1341, 1341, 1341, 1341, 1341,
     1342, 1342, 1342, 1342, 1342, 1342, 1343, 1343, 1343, 1343,
     1343, 1343, 1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345,
     1345, 1345, 1345, 1345, 1346, 1346, 1346, 1346, 1346, 1346,
     1347, 1347, 1347, 1347, 1347, 1347, 1348, 1348, 1348, 1348,
     1348, 1348, 1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350,
     1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351, 1351, 1351,
     1352, 1352, 1352, 1352, 1352, 1352, 1353, 1353, 1353, 1353,
     1353, 1353, 1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355,

     1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356, 1356, 1356,
     1357, 1357, 1357, 1357, 1357, 1357, 1358, 1358, 1359, 1359,
     1359, 1359, 1359, 1359, 1360, 1360, 1360, 1360, 1360, 1360,
     1361, 1361, 1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362,
     1362, 1362, 1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364,
     1364, 1364, 1364, 1364, 1365, 1365, 1365, 1365, 1365, 1365,
     1366, 1366, 1366, 1366, 1366, 1366, 1367, 1367, 1367, 1367,
     1367, 1367, 1368, 1368, 1368, 1368, 1368, 1368, 1369, 1369,
     1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370, 1370,
     1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372, 1372, 1372,

     1372, 1372, 1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374,
     1374, 1374, 1374, 1374, 1375, 1375, 1375, 1375, 1375, 1375,
     1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377, 1377, 1377,
     1377, 1377, 1378, 1378, 1378, 1378, 1378, 1378, 1379, 1379,
     1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380, 1380, 1380,
     1381, 1381, 1381, 1381, 1381, 1381, 1382, 1382, 1382, 1382,
     1382, 1382, 1383, 1383, 1383, 1383, 1383, 1383, 1384, 1384,
     1384, 1384, 1384, 1384, 1385, 1385, 1385, 1385, 1385, 1385,
     1386, 1386, 1386, 1386, 1386, 1386, 1387, 1387, 1387, 1387,
     1387, 1387, 1388, 1388, 1389, 1389, 1389, 1389, 1389, 1389,

     1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391, 1391,
     1391, 1391, 1392, 1392, 1392, 1392, 1392, 1392, 1393, 1393,
     1393, 1393, 1393, 1393, 1394, 1394, 1394, 1394, 1394, 1394,
     1395, 1395, 1395, 1395, 1395, 1395, 1396, 1396, 1396, 1396,
     1396, 1396, 1397, 1397, 1397, 1397, 1397, 1397, 1398, 1398,
     1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399,
     1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401, 1401,
     1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402, 1403, 1403,
     1403, 1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404,
     1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406, 1406,

     1406, 1406, 1407, 1407, 1407, 1407, 1407, 1407, 1408, 1408,
     1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1409,
     1410, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411,
     1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412, 1413, 1413,
     1413, 1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414, 1414,
     1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416, 1416,
     1416, 1416, 1417, 1417, 1417, 1417, 1417, 1417, 1418, 1418,
     1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419, 1420,
     1420, 1421, 1421, 1421, 1421, 1421, 1421, 1422, 1422, 1422,
     1422, 1422, 1422, 1423, 1423, 1423, 1423, 1423, 1423, 1424,

     1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425,
     1425, 1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427, 1427,
     1427, 1427, 1427, 1428, 1428, 1428, 1428, 1428, 1428, 1429,
     1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430, 1430, 1430,
     1430, 1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432, 1432,
     1432, 1432, 1432, 1433, 1433, 1433, 1433, 1433, 1433, 1434,
     1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435, 1435, 1435,
     1435, 1436, 1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437,
     1437, 1437, 1437, 1438, 1438, 1438, 1438, 1438, 1438, 1439,
     1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440, 1440, 1440,

     1440, 1441, 1441, 1441, 1441, 1441, 1441, 1442, 1442, 1442,
     1442, 1442, 1442, 1443, 1443, 1443, 1443, 1443, 1443, 1444,
     1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445, 1445, 1445,
     1445, 1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447,
     1447, 1447, 1447, 1448, 1448, 1448, 1448, 1448, 1448, 1449,
     1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450, 1450, 1450,
     1450, 1451, 1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452,
     1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453, 1453, 1454,
     1454, 1454, 1454, 1454, 1454, 1455, 1455, 1456, 1456, 1456,
     1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457, 1458,

     1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459, 1459, 1459,
     1459, 1460, 1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461,
     1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1463,
     1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464,
     1464, 1465, 1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466,
     1466, 1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1468,
     1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469,
     1469, 1470, 1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471,
     1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472, 1473,
     1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474,

     1474, 1475, 1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476,
     1476, 1476, 1476, 1477, 1477, 1477, 1477, 1477, 1477, 1478,
     1478, 1478, 1478, 1478, 1478, 1479, 1479, 1479, 1479, 1479,
     1479, 1480, 1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481,
     1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482, 1482, 1483,
     1483, 1483, 1483, 1483, 1483, 1484, 1484, 1484, 1484, 1484,
     1484, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486,
     1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487, 1487, 1488,
     1488, 1488, 1488, 1488, 1488, 1489, 1489, 1489, 1489, 1489,
     1489, 1490, 1490, 1490, 1490, 1490, 1490, 1491, 1491, 1491,

     1491, 1491, 1491, 1492, 1492, 1492, 1492, 1492, 1492, 1493,
     1493, 1494, 1494, 1494, 1494, 1494, 1494, 1495, 1495, 1495,
     1495, 1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496, 1497,
     1497, 1497, 1497, 1497, 1497, 1498, 1498, 1498, 1498, 1498,
     1498, 1499, 1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500,
     1500, 1500, 1500, 1501, 1501, 1501, 1501, 1501, 1501, 1502,
     1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503,
     1503, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505,
     1505, 1505, 1505, 1506, 1506,    0, 1506, 1506, 1506, 1507,
     1507, 1507, 1507, 1507, 1507, 1508, 1508, 1508, 1508, 1508,

     1508, 1509, 1509, 1509, 1509, 1509, 1509, 1510, 1510, 1510,
     1510, 1510, 1510, 1511, 1511, 1511, 1511, 1511, 1511, 1512,
     1512, 1512, 1512, 1512, 1512, 1513, 1513, 1513, 1513, 1513,
     1513, 1514, 1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515,
     1515, 1515, 1515, 1516, 1516, 1516, 1516, 1516, 1516, 1517,
     1517, 1517, 1517, 1517, 1517, 1518, 1518, 1518, 1518, 1518,
     1518, 1519, 1519, 1519, 1519, 1519, 1519, 1520, 1520, 1520,
     1520, 1520, 1520, 1521, 1521, 1521, 1521, 1521, 1521, 1522,
     1522, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,

     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;




//  following are keywords starting with c
#line 2214 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10
#define state_scanompfixed 11
#define state_scanompfree 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 31 "lexer.l"


#line 2450 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1292 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5582 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 33 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 52 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 53 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 58 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 62 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 79 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 87 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 102 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 103 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 106 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 118 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 122 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 123 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENDTEAM"):Y);            return ENDTEAM;           }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 90:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 107:
#line 223 "lexer.l"
case 108:
/* rule 108 can match eol */
#line 224 "lexer.l"
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 224 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 227 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 228 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 112:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 231 "lexer.l"
case 113:
YY_RULE_SETUP
#line 232 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 235 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 236 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 116:
YY_RULE_SETUP
#line 239 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 242 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 245 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 248 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 251 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 256 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 261 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 264 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 267 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 270 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 273 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 277 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 280 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 283 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 286 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 289 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 293 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 294 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 134:
YY_RULE_SETUP
#line 297 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 321 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 327 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 333 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 340 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 347 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 349 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 350 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 352 "lexer.l"
ECHO;
	YY_BREAK
#line 3394 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
case YY_STATE_EOF(state_scanfixpre):
case YY_STATE_EOF(state_scanompfixed):
case YY_STATE_EOF(state_scanompfree):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1292 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1292 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1291);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 352 "lexer.l"



void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


