#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 155
#define YY_END_OF_BUFFER 156
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[693] =
    {   0,
      156,  154,  155,  153,  155,  154,  155,  150,  154,  155,
      149,  154,  155,  154,  155,  151,  154,  155,  152,  153,
      155,   16,   17,  154,  155,  154,  155,  154,  155,  154,
      155,  154,  155,  154,  155,  154,  155,  154,  155,  154,
      155,  154,  155,  154,  155,  154,  155,  154,  155,  154,
      155,  154,  155,  154,  155,  154,  155,  154,  155,  154,
      155,    4,  155,    5,  155,    2,    4,  155,    3,    4,
      155,    8,  155,    9,  155,    6,    8,  155,    7,    8,
      155,   15,  155,   14,  155,   10,   15,  155,   12,   15,
      155,   11,   15,  155,   13,   15,  155,    1,  155,  155,

      155,  115,  155,  155,  115,  155,  155,  155,  155,  155,
      155,  155,  155,  146,  155,  146,  155,  145,  155,  146,
      155,  146,  155,  131,  146,  155,  146,  155,  146,  155,
      120,  155,  119,  155,  120,  155,  124,  155,  123,  155,
      124,  155,  124,  155,   18,  155,   20,  155,   19,  155,
      147,  149,   16,   17,   17,   16,   17,   36,   72,   92,
      115,  103,  115,  103,  115,  105,  115,  103,  107,  109,
      110,  115,  131,  138,  118,   18,  148,   37,   48,   97,
       48,  103,  105,  115,  103,  107,  109,  115,  103,  105,
      103,  109,  104,  115,  107,  109,  110,  115,  105,  107,

      109,  115,  107,  109,  115,  103,  110,  115,  103,  105,
      110,  115,  103,  107,  110,  115,  102,  103,  115,  132,
      118,  118,  122,  121,   26,   45,   69,   84,   85,   93,
       94,  105,  109,  103,  105,  107,  109,  115,  103,  115,
      103,  105,  115,  103,  107,  115,  103,  105,  109,  103,
      103,  105,  104,  105,  115,  104,  107,  109,  115,  110,
      115,  105,  110,  115,  107,  110,  115,  109,  105,  115,
      105,  107,  115,  115,  107,  115,  105,  103,  105,  107,
      110,  115,  102,  103,  105,  115,  102,  103,  107,  109,
      115,  113,  115,  139,  118,   24,   30,   53,   57,   68,

       95,   98,  105,  109,  103,  105,  107,  115,  104,  105,
      107,  109,  115,  104,  115,  104,  105,  115,  104,  107,
      115,  105,  107,  110,  115,  102,  103,  105,  107,  109,
      115,  102,  103,  115,  102,  103,  105,  115,  102,  103,
      107,  115,  105,  113,  115,  107,  109,  113,  115,  112,
      115,  135,  134,  116,  118,  116,   23,   46,   70,   73,
       78,  104,  105,  107,  115,  102,  103,  105,  107,  115,
      105,  107,  109,  113,  115,  113,  115,  105,  113,  115,
      107,  113,  115,  105,  112,  115,  107,  109,  112,  115,
      133,  141,  117,  117,  118,  116,  118,  116,   33,   40,

       54,   65,   66,   74,   75,   77,   83,   96,   99,  103,
      109,  115,  103,  105,  109,  115,  109,  115,  105,  109,
      115,  114,  115,  106,  109,  115,  104,  109,  115,  104,
      105,  109,  115,  102,  103,  109,  115,  102,  103,  105,
      109,  115,  109,  113,  115,  105,  109,  113,  115,  109,
      112,  115,  105,  109,  112,  115,  112,  115,  105,  112,
      115,  140,   32,   34,   35,   41,   50,   67,   71,  100,
      103,  108,  109,  115,  103,  105,  108,  109,  115,  103,
      108,  115,  103,  105,  108,  115,  108,  109,  115,  105,
      108,  109,  115,  108,  115,  105,  108,  115,  105,  114,

      115,  108,  109,  111,  114,  115,  106,  115,  106,  105,
      106,  115,  108,  109,  114,  115,  104,  108,  109,  115,
      104,  105,  108,  109,  115,  104,  108,  115,  108,  110,
      115,  105,  108,  110,  115,  104,  105,  108,  115,  103,
      108,  110,  115,  103,  105,  108,  110,  115,  102,  103,
      108,  109,  115,  102,  103,  105,  108,  109,  115,  102,
      103,  108,  115,  102,  103,  105,  108,  115,  108,  109,
      113,  115,  105,  108,  109,  113,  115,  108,  113,  115,
      105,  108,  113,  115,  108,  109,  112,  115,  105,  108,
      109,  112,  115,  108,  112,  115,  105,  108,  112,  115,

    16520,16521,  142,   22,   25,   28,   44,   47,   55,   59,
       62,   76,   82,   86,   90,  105,  108,  109,  114,  115,
      111,  114,  115,  105,  111,  114,  115,  108,  111,  114,
      115,  105,  106,  106,  114,  115,  105,  114,  115,  108,
      114,  115,16520,16521,16527,16528,   29,   61,   88,   89,
       91,  101,  105,  108,  114,  115,  105,  108,  111,  114,
      115,16527,16528,   27,   52,   56, 8328, 8329,   31,   38,
       49,   51,   58,   60,   64,  129,  130,   39,   42,   63,
       87, 8336, 8335,   81,   43,   79,   80,  125,  126,   21,
      127,  128

    } ;

static const flex_int16_t yy_accept[1384] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    6,    8,   11,   14,   16,
       19,   22,   26,   28,   30,   32,   34,   36,   38,   40,
       42,   44,   46,   48,   50,   52,   54,   56,   58,   60,
       62,   64,   66,   69,   72,   74,   76,   79,   82,   84,
       86,   89,   92,   95,   98,  100,  101,  102,  104,  105,
      107,  108,  109,  110,  111,  112,  113,  114,  116,  118,
      120,  122,  124,  127,  129,  131,  133,  135,  137,  139,

      141,  143,  145,  147,  149,  151,  152,  152,  153,  153,
      153,  155,  156,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  159,  159,  159,  159,  159,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  161,
      161,  161,  161,  161,  161,  161,  162,  162,  164,  164,
      164,  164,  165,  165,  165,  165,  166,  166,  166,  166,
      166,  166,  166,  168,  168,  168,  168,  168,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  174,  174,  174,  174,  174,  174,
      174,  175,  176,  176,  176,  176,  177,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  179,  179,  179,
      179,  179,  179,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  181,  181,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  185,  185,  185,  185,  189,  189,  189,
      189,  191,  191,  191,  191,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  195,  195,  195,
      195,  195,  199,  199,  199,  199,  199,  199,  199,  203,
      203,  203,  203,  206,  206,  206,  206,  209,  209,  209,
      209,  209,  209,  209,  213,  213,  213,  217,  217,  220,

      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  221,  221,  221,
      221,  221,  221,  222,  223,  223,  224,  225,  225,  225,
      225,  225,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      229,  230,  230,  230,  230,  230,  231,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  233,  233,  233,  234,  234,  234,  239,  239,  241,

      244,  244,  247,  247,  247,  250,  251,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  256,  256,  256,  256,  260,  260,  260,  262,
      262,  265,  265,  265,  268,  268,  269,  271,  271,  274,
      275,  275,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  278,  278,  283,  283,  283,  283,  283,  287,  287,
      287,  287,  292,  292,  292,  292,  292,  292,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  295,  295,  296,  296,  296,  296,  296,  297,
      297,  297,  297,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  299,  299,
      299,  299,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  302,  302,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  305,  305,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  314,  314,  316,  319,  319,
      322,  322,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  332,  332,  335,  339,  339,  343,  343,  343,
      343,  343,  343,  343,  346,  346,  346,  346,  350,  350,
      350,  350,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  353,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  356,  357,  357,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,

      358,  358,  358,  358,  358,  358,  358,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  360,  360,  361,  361,  361,  361,  361,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  376,  378,
      381,  381,  384,  384,  384,  384,  384,  387,  387,  387,
      387,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  392,  392,  392,  392,  393,  393,  393,  393,
      393,  394,  396,  398,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  400,  400,  400,  400,  400,  400,  400,
      400,  401,  401,  401,  401,  401,  401,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  403,  404,  404,
      404,  405,  406,  406,  407,  407,  407,  407,  407,  407,

      408,  408,  408,  408,  408,  408,  409,  409,  410,  410,
      410,  410,  410,  410,  410,  410,  413,  413,  413,  413,
      413,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  419,  419,  419,  419,  419,  422,
      422,  422,  422,  422,  422,  422,  424,  424,  424,  424,
      424,  424,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  438,  438,  438,  438,

      438,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  446,  446,  446,  446,
      446,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  453,  453,  453,  453,  453,  457,  457,
      459,  459,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  464,  465,  466,  466,
      467,  467,  467,  467,  467,  467,  467,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  469,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,

      470,  470,  471,  471,  475,  475,  480,  480,  483,  483,
      487,  487,  490,  490,  494,  494,  496,  496,  499,  499,
      502,  502,  502,  502,  507,  507,  507,  509,  509,  510,
      510,  510,  513,  513,  513,  517,  517,  517,  517,  521,
      521,  526,  526,  529,  529,  532,  532,  536,  536,  540,
      540,  544,  544,  549,  549,  554,  554,  560,  560,  564,
      564,  569,  569,  573,  573,  578,  578,  581,  581,  585,
      585,  589,  589,  594,  594,  597,  597,  601,  601,  601,
      601,  601,  601,  601,  601,  603,  603,  603,  604,  604,
      604,  604,  605,  606,  606,  606,  607,  607,  607,  607,

      607,  607,  608,  609,  609,  609,  609,  610,  610,  610,
      611,  611,  611,  612,  612,  612,  613,  613,  613,  613,
      613,  614,  615,  615,  615,  616,  616,  616,  616,  616,
      621,  621,  624,  624,  628,  628,  628,  632,  632,  634,
      634,  635,  637,  640,  640,  643,  643,  643,  643,  643,
      645,  645,  645,  645,  645,  647,  647,  647,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      649,  649,  649,  649,  649,  649,  649,  650,  651,  652,
      653,  653,  657,  657,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  664,  664,  664,  664,  665,  665,

      665,  665,  665,  665,  665,  665,  666,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  668,
      668,  669,  669,  669,  669,  669,  670,  670,  671,  671,
      671,  672,  673,  674,  675,  676,  676,  676,  676,  676,
      676,  677,  678,  678,  678,  678,  679,  680,  680,  681,
      681,  681,  681,  682,  682,  682,  682,  683,  683,  684,
      684,  684,  685,  685,  685,  685,  685,  685,  686,  687,
      687,  687,  687,  687,  688,  688,  689,  689,  690,  691,
      692,  693,  693
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,    1,   15,   16,    1,    1,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       33,   40,   41,   42,   43,   44,   45,   46,   47,   33,
       48,    1,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   33,   61,   62,   63,   64,
       65,   66,   33,   67,   68,   69,   70,   71,   72,   73,
       74,   33,    1,   75,    1,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    3,    4,
        1,    1,    1,    1,    1,    1,    5,    5,    6,    1,
        1,    7,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    8,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1623] =
    {   0,
        0,   75,  150,  225,  298, 3637,    0,   71,   21,   23,
       22,   24,   97,   98,   54,   55,  128,  174, 3628, 3625,
     3614,  368,   27,  254, 3594,  257, 3582,   35, 3562, 3551,
     3569, 3550, 3552, 6378, 6378,   42, 6378,   25, 3532, 6378,
     6378,   36,  155,   85,  365,  110,  232,  244,  378,  159,
      234,  247,  246,   86,  236,  387,  274,  259,  284,  373,
     6378, 6378, 6378, 6378, 6378, 6378, 6378, 6378, 6378, 6378,
     6378, 6378, 6378, 6378, 6378, 6378, 3515, 6378,   59,  103,
      461,   44,  112,  202,  536,  326,  610, 6378,  183, 6378,
      379,  188,  561,  429, 3481, 6378, 6378, 3481, 6378, 6378,

      211, 3452,    0, 6378, 6378, 6378,  280,   35, 3438,    0,
     3446,    0,  175,  276,  291,  309,  358,   92,  369,  451,
      344,  552,  466,  549,  371,  383, 3405,  479,  554,  379,
      470,  391,  497,  493,  476,  547,  471,  473, 3404,  560,
      542,  575,  609,  597, 3419, 6378,  127,  204,  118,  446,
      503,  297,  131,  215,  516,  434,  684,  278,  578,  663,
      759,  377, 3396,  636,  706,  597,  710, 3386,  409,  719,
      632,  834,  748,  732,  855,  859,  736,  863,  455,  795,
      802,  467,  788,  573, 3367,  859,  612,  688,  868,  471,
      872,  726,  656, 3365,  678,    0, 6378,  809,  856,  700,

      699,  862,  871,  766,  861,  882,  599,  873,  769,  767,
      891,  912,  950,  894,  899,  918,  879,  917,  768,  924,
      472,  928,  394,  927,  937,  953,  930,  971,  989,  947,
      993, 3340,  977,  452,  931,  809,  653, 1028,  559,  728,
      745,  810, 3347, 1032, 1036, 1055, 3330,  815, 1059,  938,
     3301,  798,   58, 1068, 3272, 3260, 1040, 1037, 1072, 1082,
     1103, 1107, 1157, 1045, 1112, 1115,  953, 1116, 1131, 1118,
     1135, 3243, 1139, 1179, 3214, 1064, 1140, 1144, 6378, 1183,
     1185, 1194, 3209, 1141, 1198, 1206, 3196, 1207, 1210, 1219,
     3195, 3195, 1215, 6378, 1224, 1233, 3184, 1236,  954, 1230,

     1245, 1255, 1276, 1277, 1280, 1286, 1290, 1304, 1289, 1308,
     1312, 1322, 1330,  606, 1256,  928, 6378,  983,  960, 1324,
     1351, 1339,  248, 1344,  287, 6378, 6378, 1323, 1136, 1340,
     1211, 1283, 1348, 1358, 1088, 1338, 1374, 1351,  963,  992,
     1350, 1360, 1370, 1380, 1386, 1356, 1366, 1385, 1397, 1390,
     1400, 1404, 1401, 1402, 1421, 1425,  995, 1410, 3161, 1413,
     1418, 1415, 1428, 1448, 1454, 1455, 1457, 1464, 1460, 3159,
     3157, 1467, 1475, 1466, 1474, 3139, 1477, 1486, 1497, 1491,
     1508, 1241, 1541, 1453, 1546, 1518, 1555, 1492, 1559, 1523,
     3063, 1076, 1568, 3057, 1565, 1574, 6378, 1577, 3018, 6378,

     1586, 3006, 2996, 1250, 6378, 2992, 6378, 1589, 1583, 1598,
     1594, 1603, 1606, 1615, 1611, 1624, 1634, 1655, 1659, 1709,
     1663, 1612, 1675, 1671, 1684, 1620, 1688, 1621, 1693, 1697,
     1730, 2953, 1732, 1734, 1743, 2957, 1740, 1758, 2939, 1746,
     6378, 1762, 1771, 2925, 1668, 6378, 6378, 1767, 6378, 2924,
     1783, 2914, 1786, 1780, 1795, 1791, 1800, 1804, 1813, 2897,
     6378, 1809, 6378, 1817, 1818, 1827, 1823, 2889, 1832, 1835,
     1844, 2883, 1840, 1853, 1863, 1884, 1885, 1324, 1841, 1894,
     1897, 1898, 1912, 1913, 1916, 1922, 1925, 1926, 1942, 1936,
     1945, 1026, 1095, 1163, 1241, 1468, 1390, 1947, 1958, 1965,

     1975, 6378, 1974, 1989,  436, 1956, 1873, 1522, 1968, 1915,
     1986, 1984, 1997, 1994, 1719, 1999, 1546, 1506, 2008, 2002,
     1640, 1996, 2012, 1736, 1978, 1921, 1722, 2860, 2016, 2021,
     2017, 2834, 1914, 2018, 1979, 2028, 2024, 2032, 2029, 2036,
     2820, 2047, 1820, 2046, 2048, 2051, 2064, 2052, 2059, 2061,
     2072, 2077, 2075, 2066, 2078, 2079, 6378, 2087, 2776, 2095,
     2081, 2121, 1850, 2108, 1954, 1702,  569, 2134, 2780, 2156,
     2778, 2138, 2144, 2160, 2148, 6378, 2164, 6378, 2166, 2167,
     2170, 2175, 2177,  812, 2184, 2766, 2188, 2749, 2180, 2192,
     2195, 2198, 2201, 2215, 2218, 2202, 2221, 2235,  818, 2239,

     2737, 2243, 2222, 2247,  824, 2250, 2734, 2254, 2723, 2258,
     2261, 2265, 2714, 2268, 6378, 2271, 2711, 6378, 2274, 2700,
     2278, 6378,  903, 2694, 2281, 2691, 2285, 2288, 2292, 2295,
     2224, 2223, 2299, 2302, 2304, 1775, 2311, 2682, 2315, 2671,
     2307, 6378, 2319, 2660, 6378, 2322, 2659, 2327, 2348, 2349,
     2352, 2361, 2357, 2645, 2366, 1856, 2369, 2646, 2631, 2377,
     2380, 1402, 2381, 2384, 2389, 2390, 2393, 2401, 2402, 2405,
     2411, 2417, 2420, 2421, 1853, 6378, 6378, 2380, 1542, 2385,
     2432, 2436, 2440, 2446, 2451, 2447, 1889,  352, 2409, 2607,
     2441, 2460, 2433, 2449, 2457, 2461, 2453, 2413, 2450, 2464,

     2444, 2423, 2477, 2484, 2483, 2482, 2571, 2485, 2489, 2503,
     2500, 2496, 2506, 2509, 2512, 2517, 2518, 2515, 2526, 2534,
     2527, 2533, 2514, 2537, 2488, 2558, 2542, 2555, 2530, 2562,
     2559, 2545, 2548, 2576, 2579, 2561, 2575, 2587, 2591, 2593,
     2613, 2619, 2635, 2622, 2639, 2647, 2656, 2643, 2653, 2665,
     2668, 2677, 2679, 2673, 2688, 2685, 2697, 2699, 2708, 2693,
     2705, 2717, 2720, 2729, 2731, 2740, 2743, 2744, 2748, 2757,
     2760, 2769, 2754, 2765, 2774, 2777, 2786, 2782, 2783, 2795,
     2791, 2800, 2804, 2809, 2813, 6378, 2815, 2818, 2819, 2828,
     2832, 2841, 2844, 2838, 2853, 2849, 2858, 2861, 2870, 2866,

     2867, 2879, 2882, 2891, 6378, 2901, 2922, 2923, 2887, 2932,
     2888, 2936, 2938, 2951, 2954, 2955, 2964, 6378, 2492, 6378,
     2967, 2451, 2970, 2975, 2979, 2976, 2409, 2988, 2990, 2999,
     2413, 2984, 3002, 3003, 3011, 3012, 3015, 3021, 3025, 3024,
     2583, 6378, 2569, 2691, 2822, 3034, 3037, 3041, 3045, 3049,
     6378, 2130, 2152, 6378, 2687, 2977, 2991, 3013, 2658, 3031,
     2808, 3042, 2382, 2877, 3037, 2797, 2710, 3023, 3036, 3038,
     2378, 3058, 3056, 3062, 3070, 2928, 2342, 3065, 3064, 3074,
     3067, 3084, 3090, 3089, 3094, 3098, 2338, 2337, 3092, 3102,
     2326, 2325, 3099, 2211, 3103, 3105, 3107, 3109, 3115, 2194,

     3116, 3118, 3128, 3119, 3130, 6378, 3137,  721, 3164, 3141,
     3181, 3158, 3193, 3189, 3202, 2205, 3161, 3206, 3210, 3215,
     6378, 3219, 3228, 3224, 3237, 3233, 3241, 3242, 3251, 3247,
     3256, 3259, 3268, 2139, 3264, 3277, 3265, 3281, 6378, 3286,
     3290, 3295, 3299, 3304, 3307, 2204, 3315, 3312, 3324, 3327,
     3336, 3339, 3313, 3348, 3351, 3321, 3360, 3333, 3364, 3366,
     3375, 2118, 3345, 3379, 3383, 3384, 3393, 3397, 3401, 3406,
     3402, 3411, 6378, 3415, 3424, 3428, 3433, 3437, 3442, 3446,
     3448, 3451, 3460, 3456, 3465, 3469, 3474, 3478, 3482, 3483,
     3492, 3488, 3497, 3500, 3509, 2115, 3505, 3518, 3506, 3522,

     6378, 3527, 3531, 3536, 3540, 3545, 3555, 3576, 3577, 3580,
     3589, 3585, 3598, 3604, 3608, 2114, 3586, 3617, 3613, 3622,
     6378, 3631, 3634, 3643, 3646, 3649, 3652, 3661, 3657, 3666,
     3669, 3678, 2067, 3674, 3687, 3675, 3691, 6378, 3696, 1984,
     3700, 6378, 3704, 3708, 3712, 3716, 3720, 3724, 3728, 3146,
     2903, 3207, 3733, 3737, 3738, 6378, 3743, 3742, 3729, 3668,
     3731, 3302, 3735, 3246, 3749, 6378, 1946, 1934, 3293, 6378,
     3487, 3579, 3743, 3753, 3751, 3732, 3701, 3755, 3756, 3779,
     3777, 3784, 3781, 3758, 3783, 3795, 3785, 1905, 1901, 3798,
     3800, 3786, 3804, 3801, 3802, 3814, 3797, 3808, 3816, 3812,

     3824, 6378, 3875, 1900, 3879, 6378, 3888, 1857, 3892, 6378,
     3901, 1836, 3897, 6378, 3910, 1820, 3906, 6378, 3733, 1814,
     3915, 3843, 3919, 1787, 3853, 3928, 3857, 3931, 3932, 3856,
     3936, 1749, 3940, 3949, 1713, 3937, 3953, 3962, 1703, 3958,
     6378, 3971, 1662, 3975, 1638, 3980, 6378, 3984, 6378, 3993,
     1628, 3989, 6378, 4002, 1627, 3998, 6378, 4011, 1593, 4007,
     6378, 4020, 1590, 4016, 6378, 4029, 1569, 4025, 6378, 4038,
     1550, 4034, 6378, 4047, 1547, 4043, 6378, 4051, 4055, 4059,
     4063, 4067, 4071, 3318, 3867, 3363, 4078, 6378, 4081, 4082,
     3907, 1517, 1516, 4036, 4059, 1513, 4048, 3450, 4060, 4073,

     4070, 1503, 1440, 4075, 4078, 4085, 1432, 4081, 4101, 1431,
     4071, 4092, 1341, 4074, 4107, 1332, 4121, 4124, 4094, 4104,
     1318, 1301, 4123, 4129, 1300, 4135, 4139, 4149, 4163, 6378,
     4167, 1293, 4177, 6378, 4180, 4190, 1279, 4186, 1239, 1228,
     1189, 1148, 6378, 4199, 1122, 4202, 4208, 4211, 3597, 4213,
     1085,  998, 3626, 4195, 4218, 4206, 4207,  926, 4208, 4073,
     4191, 4212, 4218, 4211, 4215, 4221, 4217, 4213, 4222,  925,
     4223, 4240, 4226, 4241, 4225, 4245,  858,  852,  848,  814,
     4284, 6378, 4289, 6378, 4293, 4299, 4303, 4059,  785, 4308,
      735, 4313, 4255, 4316,    0,    0, 4302,  674, 4300, 4270,

     4304, 4305, 4306, 4310, 4307,  664,  635, 4320, 4321, 4322,
     4318, 4324, 4325, 4332, 4326, 4357,  611, 4383, 6378, 4388,
     6378,  591,  584,  576, 4353,  504, 4312,  498, 4349, 4364,
      486,  360,  338,  326,  301, 4360, 4375, 4380, 4379, 4381,
     4362, 4364, 4402, 4415, 4396, 6378,  251, 4393,  235, 4392,
     4395, 4413,  202,  194,  186, 4440, 6378, 4457, 6378, 4414,
     4415,  172, 4408, 4420, 4409, 4411, 4444,  130,  119, 4450,
     4438, 4443, 4458,   88, 4131, 6378, 4425, 6378,   46, 6378,
     6378, 6378, 4514, 4522, 4530, 4538, 4546, 4554, 4562, 4570,
     4578, 4586, 4594, 4602, 4610, 4614, 4618, 4624, 4632, 4640,

     4648, 4656, 4664, 4672, 4680, 4688, 4694, 4697, 4702, 4710,
     4718, 4726, 4734, 4742, 4750, 4758, 4766, 4774, 4782, 4790,
     4798, 4806, 4814, 4822, 4830, 4838, 4846, 4854, 4862, 4870,
     4878, 4886, 4894, 4902, 4910, 4918, 4926, 4934, 4942, 4950,
     4958, 4966, 4974, 4982, 4990, 4998, 5006, 5014, 5022, 5030,
     5038, 5046, 5050, 5056, 5064, 5072, 5080, 5088, 5096, 5104,
     5112, 5120, 5128, 5136, 5144, 5152, 5160, 5168, 5176, 5184,
     5192, 5200, 5208, 5216, 5224, 5232, 5240, 5248, 5256, 5264,
     5272, 5280, 5288, 5292, 5298, 5306, 5314, 5322, 5330, 5338,
     5346, 5354, 5362, 5370, 5378, 5386, 5394, 5402, 5410, 5418,

     5426, 5434, 5442, 5450, 5458, 5466, 5474, 5482, 5490, 5498,
     5506, 5514, 5522, 5530, 5538, 5541, 5547, 5555, 5563, 5571,
     5579, 5587, 5595, 5603, 5611, 5619, 5627, 5635, 5643, 5651,
     5659, 5667, 5675, 5683, 5691, 5699, 5707, 5715, 5723, 5731,
     5739, 5747, 5755, 5763, 5771, 5779, 5787, 5795, 5803, 5811,
     5815, 5821, 5829, 5837, 5845, 5853, 5861, 5869, 5877, 5885,
     5893, 5901, 5909, 5917, 5925, 5933, 5941, 5949, 5957, 5965,
     5973, 5981, 5989, 5997, 6005, 6013, 6021, 6029, 6037, 6045,
     6053, 6061, 6069, 6077, 6085, 6093, 6101, 6109, 6113, 6119,
     6127, 6135, 6143, 6151, 6159, 6167, 6175, 6183, 6191, 6199,

     6207, 6215, 6223, 6231, 6239, 6247, 6255, 6263, 6271, 6279,
     6287, 6295, 6303, 6311, 6319, 6327, 6335, 6339, 6345, 6353,
     6361, 6369
    } ;

static const flex_int16_t yy_def[1623] =
    {   0,
     1383, 1383, 1384, 1384,    2,    5,    5,    5, 1385, 1385,
     1386, 1386, 1387, 1387, 1387, 1387, 1387, 1387, 1388, 1388,
     1389, 1390, 1391, 1391, 1392, 1392, 1393, 1393, 1394, 1394,
     1395, 1395, 1382, 1382, 1382, 1382, 1382, 1382, 1396, 1382,
     1382, 1397, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1398, 1382, 1399, 1400,
     1401, 1402, 1403, 1404, 1401, 1399, 1403, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,

     1382, 1382, 1405, 1382, 1382, 1382, 1382, 1382, 1396, 1406,
     1407, 1408, 1397, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1398, 1382, 1409, 1410, 1411, 1412,
     1400, 1410, 1413, 1414, 1415, 1410, 1416, 1417, 1418, 1419,
     1416, 1417, 1420, 1421, 1422, 1423, 1423, 1424, 1425, 1423,
     1426, 1427, 1415, 1415, 1415, 1415, 1415, 1415, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1428, 1382, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1382, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396,  213, 1396, 1429, 1430, 1431, 1410, 1432,
     1424, 1430, 1420, 1433, 1431, 1431, 1424, 1433, 1431, 1413,
     1420, 1434, 1414, 1414, 1424, 1434, 1435, 1436, 1437, 1438,
     1439, 1440, 1438, 1436, 1441, 1439, 1410, 1442, 1443, 1440,
     1440, 1424, 1444, 1440, 1420, 1382, 1441, 1441, 1382, 1441,
     1437, 1437, 1424, 1441, 1437, 1445, 1424, 1446, 1445, 1445,
     1424, 1447, 1446, 1382, 1446, 1445, 1424, 1448, 1410, 1449,

     1450, 1451, 1452, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1382, 1382,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1454, 1455, 1456, 1455, 1457, 1456, 1456, 1457, 1456, 1458,
     1420, 1447, 1424, 1424, 1457, 1457, 1382, 1457, 1424, 1382,

     1456, 1424, 1459, 1459, 1382, 1424, 1382, 1460, 1461, 1462,
     1461, 1463, 1462, 1462, 1463, 1462, 1464, 1465, 1466, 1464,
     1465, 1467, 1468, 1466, 1466, 1469, 1466, 1463, 1463, 1463,
     1467, 1420, 1470, 1468, 1468, 1424, 1470, 1468, 1424, 1469,
     1382, 1469, 1466, 1424, 1382, 1382, 1382, 1463, 1382, 1424,
     1462, 1424, 1471, 1472, 1471, 1472, 1472, 1471, 1471, 1447,
     1382, 1472, 1382, 1473, 1474, 1475, 1474, 1420, 1476, 1475,
     1475, 1424, 1476, 1475, 1477, 1478, 1478, 1479, 1480, 1481,
     1482, 1482, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,

     1382, 1382, 1382, 1382, 1382, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1382, 1382, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1382, 1484, 1484, 1484,
     1484, 1485, 1486, 1487, 1486, 1488, 1487, 1487, 1488, 1487,
     1488, 1488, 1488, 1487, 1447, 1382, 1488, 1382, 1489, 1490,
     1491, 1490, 1492, 1491, 1491, 1492, 1491, 1492, 1492, 1492,
     1491, 1489, 1493, 1494, 1489, 1493, 1495, 1496, 1494, 1494,

     1497, 1494, 1495, 1498, 1496, 1496, 1498, 1496, 1497, 1497,
     1494, 1492, 1498, 1498, 1382, 1498, 1424, 1382, 1496, 1424,
     1497, 1382, 1499, 1500, 1499, 1500, 1500, 1499, 1500, 1499,
     1501, 1502, 1503, 1502, 1504, 1503, 1503, 1504, 1503, 1504,
     1504, 1382, 1504, 1424, 1382, 1503, 1424, 1505, 1506, 1506,
     1507, 1508, 1507, 1509, 1510, 1508, 1508, 1424, 1510, 1508,
     1511, 1512, 1513, 1514, 1489, 1511, 1511, 1489, 1489, 1489,
     1489, 1489, 1489, 1511, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1515, 1382, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,

     1382, 1382, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1517, 1518, 1519, 1518, 1520, 1519, 1519, 1520, 1520, 1520,
     1519, 1520, 1521, 1522, 1523, 1522, 1524, 1523, 1523, 1524,
     1524, 1524, 1523, 1524, 1525, 1526, 1525, 1527, 1528, 1529,
     1530, 1530, 1531, 1528, 1532, 1529, 1529, 1532, 1531, 1530,
     1532, 1532, 1529, 1531, 1532, 1382, 1533, 1534, 1534, 1533,
     1534, 1533, 1535, 1536, 1537, 1536, 1538, 1537, 1537, 1538,

     1538, 1538, 1537, 1538, 1382, 1539, 1540, 1540, 1541, 1542,
     1541, 1543, 1542, 1542, 1543, 1543, 1543, 1382, 1544, 1382,
     1542, 1544, 1545, 1546, 1547, 1546, 1548, 1549, 1547, 1547,
     1544, 1549, 1550, 1550, 1545, 1550, 1550, 1550, 1550, 1550,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1382, 1382, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,

     1551, 1551, 1551, 1551, 1551, 1382, 1551, 1551, 1552, 1553,
     1554, 1553, 1555, 1554, 1554, 1544, 1555, 1554, 1555, 1555,
     1382, 1555, 1554, 1555, 1554, 1555, 1550, 1556, 1557, 1556,
     1558, 1557, 1557, 1544, 1558, 1557, 1558, 1558, 1382, 1558,
     1557, 1558, 1557, 1558, 1559, 1560, 1559, 1561, 1562, 1563,
     1563, 1564, 1565, 1566, 1567, 1568, 1569, 1568, 1570, 1569,
     1569, 1544, 1570, 1569, 1571, 1572, 1571, 1571, 1572, 1572,
     1570, 1570, 1382, 1570, 1569, 1571, 1570, 1569, 1572, 1570,
     1573, 1574, 1573, 1574, 1574, 1573, 1574, 1573, 1575, 1576,
     1577, 1576, 1578, 1577, 1577, 1544, 1578, 1577, 1578, 1578,

     1382, 1578, 1577, 1578, 1577, 1578, 1579, 1580, 1580, 1581,
     1582, 1581, 1583, 1582, 1582, 1544, 1583, 1582, 1583, 1583,
     1382, 1583, 1582, 1583, 1582, 1584, 1585, 1586, 1585, 1587,
     1586, 1586, 1544, 1587, 1586, 1587, 1587, 1382, 1587, 1544,
     1586, 1382, 1588, 1588, 1584, 1588, 1588, 1588, 1588, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1382, 1589, 1589, 1382, 1382,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,

     1589, 1382, 1590, 1544, 1591, 1382, 1590, 1544, 1591, 1382,
     1592, 1544, 1593, 1382, 1592, 1544, 1593, 1382, 1594, 1595,
     1596, 1597, 1597, 1544, 1598, 1597, 1599, 1599, 1599, 1600,
     1601, 1602, 1603, 1603, 1544, 1596, 1603, 1604, 1544, 1605,
     1382, 1604, 1544, 1606, 1544, 1607, 1382, 1605, 1382, 1608,
     1544, 1609, 1382, 1610, 1544, 1611, 1382, 1610, 1544, 1611,
     1382, 1612, 1544, 1613, 1382, 1612, 1544, 1613, 1382, 1614,
     1544, 1615, 1382, 1614, 1544, 1615, 1382, 1616, 1616, 1617,
     1616, 1617, 1617, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1382, 1618, 1618,

     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1596, 1596, 1382,
     1596, 1544, 1598, 1382, 1598, 1597, 1544, 1600, 1602, 1602,
     1602, 1544, 1382, 1603, 1544, 1616, 1616, 1616, 1382, 1382,
     1619, 1620, 1382, 1382, 1382, 1618, 1618, 1618, 1618, 1382,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1596, 1382, 1598, 1382, 1617, 1616, 1617, 1382, 1619, 1619,
     1620, 1620, 1382, 1382, 1621, 1622, 1618, 1618, 1618, 1382,

     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1617, 1382, 1619, 1382, 1620,
     1382, 1382, 1621, 1622, 1618, 1618, 1382, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1382, 1382, 1621, 1622, 1618, 1382, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1382, 1382, 1621, 1382, 1622, 1382, 1618,
     1618, 1618, 1618, 1618, 1382, 1382, 1618, 1618, 1618, 1618,
     1382, 1382, 1618, 1618, 1382, 1382, 1382, 1382, 1618, 1382,
     1382,    0, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,

     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,

     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,

     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382
    } ;

static const flex_int16_t yy_nxt[6454] =
    {   0,
       34,   34,   35,   36,   34,   34,   34,   34,   34,   34,
       34,   37,   34,   34,   34,   34,   38,   38,   34,   34,
       34,   34,   34,   62,   66,   62,   66,   59,   89,   90,
       89,   91,   63,   64,   63,   64,  101,  100,  101,  102,
       60,  108,  108,  111,  112,  106,  163,   40,   34,   34,
       34,  108,  108,  164,  110,   59,   70,   70,  107,  107,
      406,  148,  256,  149,  110,   71,   71,   60,  150,   67,
       68,   67,   68,   41,   34,   34,   34,   41,   36,   34,
       34,   34,   34,   34,   34,   34,   37,   34,   34,   34,
       34,   38,   38,   34,   34,   34,   34,   34,   59,   70,

       70,   73,   73,  110,  110,  152,  110,  153,   71,   71,
      110,   60,  154,  135,  156,  202,  158,   72,   72,  116,
      243,  165,   40,   34,   34,   34,   59,  244,  110,  148,
       70,  237,   74,  251,   74,   74,  238,  110,   60,   71,
      252,  135,   74,  202,   73,   73,  116,  122,  110,   34,
       34,   34,   35,   36,   34,   34,   34,   34,   34,   34,
       34,   37,   34,   34,   34,   34,   38,   38,   34,   34,
       34,   34,   34,  110,  122,   73,   70,  110,   74,  114,
       74,   74,  111,  112,  179,   71,  179,  180,   74,  183,
      110,  183,  180,  110,  184,  115,  130,   40,   34,   34,

       34, 1366,   74,  167,  168,  167,  169,  114,  240, 1365,
      185,  170,  193,  241,  193,  194,  254,  255,  254,  256,
      110,   73,  115,  130,   34,   34,   34,   41,   36,   34,
       34,   34,   34,   34,   34,   34,   37,   34,   34,   34,
       34,   38,   38,   34,   34,   34,   34,   34,   74,  323,
      110,  323,  110,  110,  110,   92,   90,   92,   91,   97,
       93,   98,  110,  136,  110,  110,  123,   94,  124,  110,
       98,  131,   40,   34,   34,   34,   95,  110,  137,   94,
      163,  125,   98,  106,  132,  133,  126,  265,  134,  142,
      505,  136,  110,  123,  110,  124,  107,  107,  131,   34,

       35,  240,  110,  505,  505,  137,  241,   94,  125,  110,
       98,  132,  133,  126,  141,  134,  198,  142,  123,  110,
      143,   43,   44,   45,   46,   47,   48,  110,  148,   49,
      149,  199,   50,   51,   52,  150,   53,   54,   55,   56,
       57,  141,   58,  198,  110,  123,  200,  143,  171,   43,
       44,   45,   46,   47,   48,  854,  110,   49,  199,   50,
       51,   52,  110,   53,   54,   55,   56,   57,  854,   58,
       80,   81,   82,  200,   83,  206,  110,   84,  110,  163,
      181,   83,  181,  110,   85,   85,  265,  110,  117,  110,
       86,  110,  203,   87,   83,  118,  110,  110,  201,  119,

      144,  110,  120,  206,  121,  110,  127,  182,  221,  110,
      216,  294,  110,  128,  129,  137,  117,  138,  295,  217,
      203,   87,   83,  118,  139,  201,  119,  223,  144,  120,
      189,  121,  189,  140,  127,  182,  221,  216,  240,  688,
      128,  129,  137,  241,  367,  138,  217,  246,  247,  246,
      248,  139,  688,  688,  223,  249,  179,  190,  179,  180,
      140,  155,  155,  156,  157,  158,  155,  155,  155,  110,
      160,  155,  155,  155,  155,  155,  155,  161,  161,  155,
      155,  155,  155,  155,  110,  190,  204,  205,  110,  110,
      110,  110,  379,  211,  110,  229,  222,  110,  314,  226,

      230,  227,  319,  365,  110,  152,  212,  153,  155,  155,
      155,  110,  154,  204,  205,  110,  110,  218,  156,  379,
      258,  211,  110,  229,  222,  259,  314,  226,  230,  227,
      319,  365,  225,  212,  224,  155,  155,  155,  156,  161,
      158,  155,  155,  155,  218,  165,  155,  155,  155,  155,
      155,  155,  161,  161,  155,  155,  155,  155,  155,  225,
      110,  224,  186,  240,  186,  110,  207,  110,  241,  232,
      110,  399,  110,  748,  186,  213,  186,  208,  110,  219,
      267,  228,  268,  155,  155,  155, 1344,  269,  187, 1343,
      214,  215,  188,  110,  209,  220,  210,  232,  231,  287,

      187,  288,  233,  213,  188,  208,  289,  219,  228, 1342,
      155,  172,  156,  172,  158,  110,  187,  214,  215,  165,
      188,  209,  220,  210,  339,  231,  235,  110,  187, 1341,
      233,  228,  188,  173,  299,  234,  300,  278,  279,  278,
      174,  301,  492,  340,  175,  280,  315,  176,  316,  177,
      214,  215,  339,  110,  235,  243,  178,  193,  228,  193,
      194,  173,  385,  234,  271,  272,  271,  273,  174,  492,
      340,  175,  274,  315,  176,  316,  177,  214,  215,  326,
      327,  326,  110,  178,  257,  257,  156,  260,  258,  257,
      257,  257,  110,  262,  257,  257,  257,  257,  257,  257,

      263,  263,  257,  257,  257,  257,  257,  282,  283,  282,
      284,  290,  168,  290,  288,  285,  317,  110,  110,  289,
      296,  297,  296,  288,  318,  331,  332,  323,  289,  324,
      391,  257,  257,  257,  156, 1102,  258,  392,  156,  110,
      258,  259,  325,  325,  317,  259,  393,  394,  393,  292,
      156,  318,  258,  331,  332,  306, 1292,  259,  257,  257,
      257,  156,  263,  258,  257,  257,  257,  312,  259,  257,
      257,  257,  257,  257,  257,  263,  263,  257,  257,  257,
      257,  257,  304,  306,  110,  110,  110,  110,  305,  183,
     1290,  183,  180,  342,  184,  312,  181,  343,  181,  404,

      405,  404,  363,  181,  336,  181,  257,  257,  257,  304,
      185,  148,  243,  382,  450,  305,  760,  400,  383,  385,
      439,  342,  773,  182,  398,  343,  617,  110,  778,  363,
      182,  336,  110,  257,  257,  302,  156,  302,  258,  257,
      257,  257,  257,  259,  257,  257,  257,  257,  257,  257,
      328,  182,  257,  257,  257,  257,  257,  156,  182,  258,
      186,  156,  186,  258,  259,  156,  110,  258,  259,  189,
      110,  189,  259,  320,  110,  320,  110,  328,  307,  110,
      110,  257,  257,  257,  257,  309,  187,  329,  313,  110,
      188,  110,  308,  330,  310,  311,  190,  110,  333,  321,

      110,  334,  337,  322,  361,  287,  307,  788,  257,  110,
      341,  335,  110,  309,  187,  329,  313,  110,  188,  308,
      330,  310,  311,  338,  190,  333,  344,  321,  334,  337,
      110,  322,  361,  358,  359,  110,  110,  341,  335,  345,
      251,  360,  110,  110,  110,  110,  110,  252,  110,  110,
      338,  364,  368,  344,  495,  110,  369,  240,  240,  362,
      358,  359,  241,  241,  370,  110,  380,  345,  110,  360,
      366,  110,  372,  346,  347,  348,  349,  350,  351,  364,
      368,  352,  495,  376,  369,  353,  362,  371,  354,  110,
      355,  356,  370,  380,  357,  110,  497,  366,  373,  372,

      517,  346,  347,  348,  349,  350,  351,  110,  496,  352,
      376,  110,  353,  110,  371,  354,  378,  355,  356, 1292,
      377,  357,  518,  497,  374,  540,  373,  517,  375,  387,
      247,  387,  388,  396,  397,  396,  496,  389,  399,  163,
      388,  398,  156,  378,  409,  389,  412,  163,  377,  410,
      518,  374,  675,  540,  412,  375,  387,  247,  387,  388,
      401,  402,  401,  388,  389,  445,  446,  445,  389,  254,
      255,  254,  256,  414,  283,  414,  415,  575,  576,  575,
      675,  416,  408,  408,  156,  417,  409,  408,  408,  408,
     1290,  419,  408,  408,  408,  408,  408,  408,  420,  420,

      408,  408,  408,  408,  408,  267,  110,  422,  425,  272,
      425,  426,  423,  429,  279,  429,  427,  267,  432,  422,
      439,  430,  426,  676,  423,  433,  292,  427,  513,  408,
      408,  408,  435,  436,  435,  437,  425,  272,  425,  426,
      438,  441,  447,  447,  427,  429,  279,  429,  442,  430,
      430,  676,  292,  430,  110,  513,  408,  408,  408,  156,
      420,  409,  408,  408,  408,  507,  410,  408,  408,  408,
      408,  408,  408,  420,  420,  408,  408,  408,  408,  408,
      443,  444,  443,  426,  448,  449,  448,  450,  427,  415,
      677, 1241,  430,  507,  416,  414,  283,  414,  415,  451,

      452,  451,  415,  416,  408,  408,  408,  416,  287,  294,
      454,  458,  297,  458,  454,  455,  457,  294,  677,  455,
      459,  168,  459,  454,  457,  462,  463,  462,  455,  110,
     1241,  408,  468,  457,  458,  297,  458,  454,  299,  469,
      465, 1241,  455,  243,  509,  466,  471,  472,  471,  473,
      566,  404,  405,  404,  474,  408,  475,  156,  475,  409,
      408,  408,  408,  408,  410,  408,  408,  408,  408,  408,
      408,  509,  678,  408,  408,  408,  408,  408,  478,  156,
      479,  409,  156,  292,  409,  480,  410,  493,  156,  410,
      409,  156,  156,  409,  409,  410,  494,  292,  410,  410,

      678,  110,  408,  408,  408,  408,  156,  482,  409,  510,
      156,  481,  409,  410,  156,  493,  409,  410,  110,  110,
      486,  410,  483,  494,  156,  320,  409,  320,  240,  408,
      484,  410,  156,  241,  409,  482,  110,  510,  481,  410,
      501,  110,  501,  487,  485,  323,  488,  504,  486,  483,
      110,  321,  498,  489,  498,  322,  110,  484,  110,  110,
      505,  505,  506,  490,  491,  508,  110,  502,  110,  110,
      487,  485,  514,  488,  110,  503,  110,  511,  110,  321,
      489,  512,  516,  322,  110,  499,  519,  500,  110,  506,
      490,  491,  110,  508,  520,  502,  525,  515,  110,  514,

      526,  521,  503,  110,  110,  511,  240,  522,  110,  512,
      516,  241,  499,  519,  500,  110,  680,  523,  110,  110,
      110,  520,  110,  525,  527,  515,  529,  526,  110,  521,
      524,  110,  532,  110,  528,  522,  110,  530,  534,  110,
      533,  535,  531,  110,  680,  523,  110,  542,  536,  110,
      110,  527,  538,  529,  544,  243,  541,  524,  110,  543,
      532,  528,  566,  537,  530,  534,  110,  533,  535,  531,
      545,  539,  110,  110,  542,  110,  536,  546,  110,  548,
      538,  544,  110,  541,  110,  110,  543,  547,  557,  549,
      537,  551,  110,  110,  400,  110,  550,  545,  539,  552,

      554,  573,  679,  555,  110,  546,  553,  548,  558,  110,
      148,  556,  563,  559,  547,  110,  549,  564,  561,  551,
      399,  110,  569,  550,  560,  391,  552,  570,  554,  679,
      555,  110,  392,  553,  110,  110,  558,  702,  556,  537,
      110,  559,  568,  247,  568,  569,  561,  572,  397,  572,
      570,  292,  560,  691,  292,  573,  568,  247,  568,  569,
      574,  402,  574,  569,  570,  702,  537,  400,  570,  393,
      394,  393,  292,  292,  573,  572,  397,  572,  577,  578,
      577,  691,  701,  573,  843,  163,  573,  574,  402,  574,
      569,  156,  583,  580,  292,  570,  163,  292,  581,  585,

      283,  585,  586,  583,  589,  279,  589,  587,  450,  701,
      586,  843,  590,  447,  432,  587,  585,  283,  585,  586,
      590,  604,  441,  447,  587,  591,  452,  591,  586,  610,
      590,  292,  292,  587,  579,  579,  156,  592,  580,  579,
      579,  579,  292,  594,  579,  579,  579,  579,  579,  579,
      595,  595,  579,  579,  579,  579,  579,  267,  110,  597,
      600,  272,  600,  601,  598,  267,  292,  597,  602,  445,
      446,  445,  598,  439,  705,  601,  606,  436,  606,  607,
      602,  579,  579,  579,  608,  600,  272,  600,  601,  611,
      444,  611,  601,  602,  589,  279,  589,  602,  612,  449,

      612,  705,  590,  750,  397,  750,  590,  292,  579,  579,
      579,  156,  595,  580,  579,  579,  579,  292,  581,  579,
      579,  579,  579,  579,  579,  595,  595,  579,  579,  579,
      579,  579,  432,  614,  615,  614,  617,  110,  607,  604,
      110,  616,  618,  608,  606,  436,  606,  607,  441,  616,
      699, 1241,  608,  711,  110,  610,  579,  579,  579,  619,
      620,  619,  607,  621,  622,  621,  708,  608,  612,  449,
      612,  610,  611,  444,  611,  601,  590,  644,  699,  800,
      602,  711,  294,  579,  591,  452,  591,  586,  287,  627,
      624,  292,  587,  294,  708,  625,  628,  297,  628,  624,

      627,  629,  463,  629,  625,  628,  297,  628,  624,  627,
      629,  463,  629,  625,  630,  168,  630,  624,  627,  299,
      468,  632,  625,  276,  292,  468,  633,  635,  637,  472,
      637,  638,  635,  641,  642,  641,  639,  644,  110,  638,
      292,  643,  645,  654,  639,  637,  472,  637,  638,  643,
      655,  724,  243,  639,  646,  647,  646,  638,  819,  745,
      815,  292,  639,  579,  648,  156,  648,  580,  579,  579,
      579,  579,  581,  579,  579,  579,  579,  579,  579,  724,
      841,  579,  579,  579,  579,  579,  478,  478,  651,  651,
      852,  110,  853,  652,  652,  657,  658,  657,  659,  662,

      662,  663,  663,  660,  292,  854,  664,  664,  841,  690,
      579,  579,  579,  579,  156,  156,  580,  580,  156,  110,
      580,  581,  581,  110,  156,  581,  580,  156,  156,  580,
      580,  581,  110,  110,  581,  581,  690,  579,  156,  110,
      580,  665,  693,  667,  156,  581,  580,  156,  498,  580,
      498,  581,  110,  666,  581,  715,  243,  668,  710,  681,
      670,  681,  669,  745,  110,  671,  683,  673,  683,  665,
      693,  667,  674,  672,  110,  685,  501,  685,  501,  689,
      666,  499,  715,  500,  668,  710,  110,  670,  292,  669,
      323,  684,  687,  671,  692,  673,  110,  110,  682,  686,

      674,  672,  110,  502,  110,  688,  688,  689,  499,  695,
      500,  503,  110,  694,  110,  110,  717,  110,  709,  684,
      110,  698,  692,  696,  700,  682,  110,  686,  697,  704,
      110,  502,  706,  703,  110,  110,  110,  695,  503,  110,
      707,  694,  110,  717,  716,  709,  110,  110,  719,  698,
      110,  696,  700,  714,  110,  720,  697,  704,  712,  706,
      713,  703,  718,  722,  110,  110,  110,  721,  707,  110,
      110,  292,  716,  725,  726,  729,  719,  110,  727,  110,
      714,  723,  110,  720,  110,  712,  730,  713,  731,  718,
      110,  722,  728,  110,  721,  110,  110,  110,  732,  110,

      733,  725,  726,  729,  736,  110,  727,  735,  723,  747,
      247,  747,  748,  110,  730,  734,  731,  740,  292,  292,
      728,  737,  292,  148,  739,  742,  732,  738,  733,  718,
      743,  323,  736,  323,  735,  747,  247,  747,  748,  750,
      397,  750,  734,  292,  740,  752,  578,  752,  737,  575,
      576,  575,  739,  323,  738,  323,  718,  751,  402,  751,
      748,  751,  402,  751,  748,  752,  578,  752,  156,  163,
      754,  759,  283,  759,  760,  755,  757,  163,  762,  279,
      762,  762,  279,  762,  757,  759,  283,  759,  760,  763,
      452,  763,  760,  764,  449,  764,  763,  452,  763,  760,

      156,  765,  754,  267,  267,  769,  769,  766,  240,  292,
      770,  770,  110,  241,  767,  767,  772,  272,  772,  773,
      156,  767,  754,  432,  432,  468,  299,  755,  794,  110,
      775,  775,  797,  795,  767,  767,  777,  436,  777,  778,
      772,  272,  772,  773,  780,  444,  780,  773,  782,  615,
      782,  777,  436,  777,  778,  783,  620,  783,  778,  784,
      622,  784,  780,  444,  780,  773,  764,  449,  764,  782,
      615,  782,  785,  786,  785,  783,  620,  783,  778,  784,
      622,  784,  790,  297,  790,  788,  791,  463,  791,  790,
      297,  790,  788,  791,  463,  791,  792,  168,  792,  788,

      799,  472,  799,  800,  468,  802,  642,  802,  802,  642,
      802,  797,  799,  472,  799,  800,  803,  647,  803,  800,
      804,  805,  804,  803,  647,  803,  800,  753,  806,  156,
      806,  754,  753,  753,  753,  753,  755,  753,  753,  753,
      753,  753,  753,  110,  110,  753,  753,  753,  753,  753,
      478,  478,  809,  809,  654,  110,  110,  810,  810,  654,
      110,  812,  814,  658,  814,  815,  812,  817,  818,  817,
      814,  658,  814,  815,  753,  753,  753,  753,  821,  822,
      821,  815,  662,  827,  824,  830,  831,  830,  832,  825,
      828,  156,  662,  754,  824,  662,  110,  824,  755,  825,

      110,  753,  825,  156,  156,  754,  754,  156,  842,  754,
      755,  755,  844,  156,  755,  754,  833,  292,  276,  156,
      755,  754,  156,  662,  754,  824,  755,  110,  834,  755,
      825,  110,  836,  681,  855,  681,  842,  845,  835,  845,
      844,  683,  837,  683,  833,  840,  838,  847,  849,  847,
      849,  110,  685,  839,  685,  292,  834,  867,  863,  110,
      836,  858,  855,  846,  856,  835,  684,  110,  110,  866,
      837,  110,  682,  840,  838,  110,  686,  848,  110,  110,
      839,  850,  110,  857,  867,  863,  864,  865,  861,  858,
      859,  846,  856,  862,  684,  110,  292,  866,  860,  682,

      110,  110,  110,  110,  686,  848,  110,  110,  850,  869,
      871,  857,  873,  864,  110,  865,  861,  859,  110,  868,
      862,  110,  870,  872,  110,  860,  874,  110,  875,  878,
      110,  877,  110,  110,  879,  110,  110,  869,  871,  880,
      873,  876,  884,  882,  110,  110,  868,  883,  110,  870,
      872,  110,  110,  874,  888,  110,  875,  878,  877,  881,
      110,  885,  879,  110,  894,  886,  110,  880,  876,  887,
      884,  882,  889,  110,  890,  883,  110,  110,  893,  110,
      110,  892,  888,  900,  898,  891,  881,  899,  885,  110,
      895,  894,  886,  110,  110, 1051,  887,  110,  906,  889,

      896,  890,  897,  904,  902,  110,  893,  901,  892,  110,
      900,  110,  898,  891,  899,  148,  905,  910,  895, 1050,
      903,  243,  911, 1051,  243,  110,  907,  896,  913,  897,
      904,  913,  902,  820,  908,  901,  915,  916,  915,  917,
      920,  921,  920,  905,  918,  400, 1050,  903,  922,  399,
      292,  917,  922,  907,  276,  400,  918,  923,  247,  923,
      917,  908,  922,  292,  292,  918,  924,  397,  924,  925,
      402,  925,  917,  645,  922,  163,  110,  918,  926,  578,
      926,  156,  931,  928,  645, 1063,  922,  163,  929,  933,
      934,  933,  935,  294,  931,  447,  294,  936,  938,  939,

      938,  450,  940,  935,  292,  110,  940,  447,  936,  941,
      283,  941,  935, 1063,  940,  292,  618,  936,  942,  279,
      942,  943,  452,  943,  935,  441,  940, 1052, 1059,  936,
      944,  449,  944,  946,  947,  948,  618, 1070,  940,  441,
      949,  951,  952,  951,  953,  946,  267,  948,  956,  936,
      432,  447,  954,  957, 1052, 1059,  441,  959,  961,  962,
      961,  963,  439,  970,  966, 1070,  964,  432,  447,  967,
      968,  272,  968,  966,  959,  972,  973,  972,  967,  617,
      400,  963,  400,  974,  618,  441,  964,  975,  436,  975,
      963,  974,  970,  618,  110,  964,  976,  444,  976,  966,

      974,  977,  615,  977,  967,  978,  620,  978,  963,  974,
      979,  622,  979,  964,  980,  786,  980,  287,  970,  982,
      294,  294,  974,  845,  983,  845,  110,  985,  985,  986,
      297,  986,  982,  987,  463,  987, 1065,  983,  110, 1069,
      468,  985,  988,  168,  988,  982,  299,  993,  990,  846,
      983,  468,  110,  991,  995,  996,  995,  997,  993, 1000,
     1001, 1000,  998,  644, 1065,  997, 1069, 1002,  645,  645,
      998, 1003,  472, 1003,  997, 1002, 1002,  846,  110,  998,
     1004,  642, 1004, 1005,  647, 1005,  997,  292, 1002,  654,
      654,  998, 1006,  805, 1006,  110, 1013, 1013,  276,  461,

     1002,  927, 1007,  156, 1007,  928,  927,  927,  927,  927,
      929,  927,  927,  927,  927,  927,  927, 1067,  292,  927,
      927,  927,  927,  927,  478,  478, 1010, 1010,  292,  292,
     1185, 1011, 1011, 1015, 1016, 1015, 1017, 1020, 1021, 1020,
      819, 1018, 1017,  292, 1067, 1022,  110, 1018,  927,  927,
      927,  927, 1023,  658, 1023, 1017,  820,  820, 1185, 1078,
     1018,  292,  276, 1022, 1022, 1024,  818, 1024, 1025,  822,
     1025, 1017,  662, 1022, 1027,  927, 1018,  827,  827, 1028,
     1032, 1033, 1032, 1034, 1030, 1030, 1042, 1078, 1035, 1037,
     1038, 1037, 1040, 1039, 1034,  110,  292, 1039,  407, 1035,

     1041,  831, 1041, 1034,  156,  156,  928,  928, 1035,  110,
      292,  929,  929,  662,  156, 1027,  928,  156, 1060,  928,
     1028,  929,  292,  156,  929,  928,  156,  156,  928,  928,
      929,  110, 1061,  929,  929, 1053, 1062, 1053,  847, 1044,
      847,  110, 1055, 1043, 1055, 1060,  849, 1049,  849,  110,
     1057, 1046, 1057, 1066,  110,  110,  110, 1045, 1064, 1061,
      110,  292, 1071, 1047, 1062, 1054, 1044, 1048,  848, 1056,
     1043, 1068,  276, 1072,  110, 1049,  110, 1073, 1046,  850,
      110, 1074,  110,  110, 1045,  110, 1064, 1076,  110, 1071,
     1047, 1058,  110, 1054, 1048, 1075,  848, 1056, 1068, 1079,

     1072, 1082,  110, 1077, 1073, 1080,  850,  110,  110, 1074,
      110, 1083,  110, 1081, 1085, 1076,  110,  110, 1058, 1088,
      110,  110, 1075,  110, 1090,  110, 1079,  110, 1082, 1084,
     1077, 1086, 1080,  110,  110, 1087,  110,  110, 1089, 1083,
     1081, 1097, 1085,  243, 1092, 1091,  110, 1088,  110, 1093,
      913, 1094, 1090, 1099, 1095,  110, 1084,  110, 1086, 1096,
      243, 1100, 1087,  400, 1101, 1089,  148,  913,  910, 1097,
      922, 1092, 1091,  911, 1098,  110, 1093,  110, 1094,  110,
     1099, 1095, 1103, 1104, 1103,  917, 1096, 1184,  292, 1100,
      918,  399, 1101,  917, 1105, 1106, 1105,  461,  918,  292,

      292, 1098,  922,  915,  916,  915,  917, 1107, 1108, 1107,
      917,  918,  400,  292, 1184,  918,  920,  921,  920,  922,
     1109, 1110, 1109,  276,  922,  924,  397,  924,  922,  923,
      247,  923,  917,  922,  926,  578,  926,  918,  925,  402,
      925,  917,  922,  156,  163,  928,  918,  292, 1186,  163,
      929,  931, 1111, 1112, 1111,  935,  931, 1113, 1114, 1113,
      936,  450,  407,  935,  110,  940,  447,  447,  936,  933,
      934,  933,  935,  940,  940, 1186,  292,  936, 1115, 1116,
     1115,  935,  938,  939,  938, 1196,  936, 1117, 1118, 1117,
      940,  941,  283,  941,  935,  940,  942,  279,  942,  936,

      943,  452,  943,  935,  940,  944,  449,  944,  936,  946,
      276,  948, 1196,  940, 1120, 1132,  954,  946,  947,  948,
      110, 1121,  940,  432,  949, 1123, 1124, 1123, 1125, 1127,
      959,  953, 1198, 1126,  292,  432,  936,  951,  952,  951,
      953, 1129,  959, 1130, 1194,  936, 1249,  618,  291, 1134,
     1135, 1134, 1136,  267,  974,  956,  276, 1137,  110, 1198,
      957, 1138, 1139, 1138,  963, 1140, 1141, 1140,  617,  964,
      963, 1194,  195,  974, 1249,  964,  961,  962,  961,  963,
     1142, 1143, 1142,  963,  964,  439,  441,  966,  964,  191,
      292, 1253,  967,  970, 1144, 1145, 1144,  966,  968,  272,

      968,  966,  967,  441,  618,  276,  967, 1146, 1147, 1146,
      970,  974,  972,  973,  972,  970, 1148, 1149, 1148, 1253,
      974,  146,  110,  110,  974,  975,  436,  975,  963,  976,
      444,  976,  966,  964,  977,  615,  977,  967,  978,  620,
      978,  963,  974,  979,  622,  979,  964,  980,  786,  980,
      287,  970,  982,  294,  112,  974,  110,  983,  294,  195,
      985, 1150, 1151, 1150,  982,  985, 1152, 1153, 1152,  983,
      986,  297,  986,  982,  985,  987,  463,  987,  983,  988,
      168,  988,  982,  985,  299,  468,  990,  983,  192, 1260,
      468,  991,  993, 1154, 1155, 1154,  997,  993, 1156, 1157,

     1156,  998,  644,  191,  997,  110, 1002,  645,  645,  998,
      995,  996,  995,  997, 1002, 1002, 1260,  146,  998, 1158,
     1159, 1158,  997, 1000, 1001, 1000, 1199,  998, 1160, 1161,
     1160, 1002, 1003,  472, 1003,  997, 1002, 1004,  642, 1004,
      998, 1005,  647, 1005,  997, 1002, 1006,  805, 1006,  998,
      110, 1382,  105, 1199, 1002,  927, 1007,  156, 1007,  928,
      927,  927,  927,  927,  929,  927,  927,  927,  927,  927,
      927,  105,   76,  927,  927,  927,  927,  927,  478,  478,
     1010, 1010,  654,   76,  100, 1011, 1011,  654,  820, 1013,
     1162, 1163, 1162, 1017, 1013, 1022,   97,  110, 1018, 1164,

     1165, 1164,  927,  927,  927,  927,  819, 1022, 1017, 1015,
     1016, 1015, 1017, 1018, 1200,  820,   78, 1018, 1166, 1167,
     1166, 1017, 1022, 1020, 1021, 1020, 1018,   76, 1288,  927,
       76, 1022, 1168, 1169, 1168, 1023,  658, 1023, 1017,   41,
     1022, 1200, 1382, 1018, 1024,  818, 1024, 1025,  822, 1025,
     1017,  662, 1022, 1027,  827, 1018, 1288, 1293, 1028,  827,
     1382, 1030, 1170, 1171, 1170, 1034, 1030, 1172, 1173, 1172,
     1035, 1040, 1382, 1034, 1382, 1039, 1042, 1042, 1035, 1032,
     1033, 1032, 1034, 1039, 1039, 1293,  110, 1035, 1174, 1175,
     1174, 1034, 1037, 1038, 1037, 1192, 1035, 1176, 1177, 1176,

     1039, 1041,  831, 1041, 1034, 1039,  156, 1382,  928, 1035,
      156, 1382,  928,  929,  662, 1382, 1027,  929,  156,  110,
      928, 1028,  156, 1192,  928,  929,  156, 1205,  928,  929,
      156, 1178,  928,  929, 1053, 1120, 1053,  929, 1187, 1055,
     1187, 1055, 1121, 1189, 1057, 1189, 1057,  110, 1179,  110,
      110, 1182, 1382,  110, 1193, 1205, 1180, 1181, 1195, 1178,
     1191,  110, 1183, 1204, 1054, 1188, 1056,  110, 1190,  110,
     1201,  110, 1197,  110,  110, 1179,  110, 1382, 1203, 1182,
     1206, 1212, 1193, 1180, 1181, 1058, 1195, 1202, 1191, 1183,
     1207, 1204, 1054, 1188, 1056,  110, 1190,  110, 1201,  110,

     1197,  110,  110,  110,  110, 1209, 1203, 1211, 1206, 1212,
     1208, 1210, 1058,  110, 1202,  110,  110, 1207,  110,  110,
      110, 1214,  110, 1218, 1213, 1216,  110, 1215, 1219, 1221,
      110, 1382,  110, 1209,  110, 1211, 1217, 1223, 1208, 1210,
     1220, 1222,  110, 1225, 1382, 1232, 1224, 1125, 1226, 1214,
     1218, 1213, 1126, 1216, 1215, 1234, 1219, 1221, 1239, 1129,
     1227, 1130, 1235, 1217, 1223,  460,  291, 1220, 1250, 1222,
     1250, 1225, 1251, 1224, 1382, 1226, 1103, 1104, 1103,  917,
     1105, 1106, 1105, 1382,  918, 1382, 1252, 1227,  922, 1107,
     1108, 1107,  917, 1109, 1110, 1109, 1382,  918, 1113, 1114,

     1113,  922, 1111, 1112, 1111,  935,  940, 1117, 1118, 1117,
      936, 1115, 1116, 1115,  935,  940, 1229, 1230, 1229,  936,
     1123, 1124, 1123, 1125, 1231,  110, 1382, 1382, 1126, 1236,
     1237, 1236, 1125, 1129, 1129, 1130, 1130, 1126, 1132, 1243,
      291,  291, 1242, 1256, 1136,  940, 1231, 1382, 1382, 1137,
     1134, 1135, 1134, 1136, 1244, 1245, 1244, 1136, 1137, 1140,
     1141, 1140, 1137, 1138, 1139, 1138,  963,  974, 1382, 1382,
     1256,  964, 1142, 1143, 1142,  963, 1144, 1145, 1144,  966,
      964, 1146, 1147, 1146,  967, 1148, 1149, 1148, 1382,  970,
     1152, 1153, 1152,  974, 1150, 1151, 1150,  982,  985, 1156,

     1157, 1156,  983, 1154, 1155, 1154,  997, 1002, 1160, 1161,
     1160,  998, 1158, 1159, 1158,  997, 1002, 1164, 1165, 1164,
      998, 1162, 1163, 1162, 1017, 1022, 1168, 1169, 1168, 1018,
     1166, 1167, 1166, 1017, 1022, 1172, 1173, 1172, 1018, 1170,
     1171, 1170, 1034, 1039, 1176, 1177, 1176, 1035, 1174, 1175,
     1174, 1034, 1039,  156,  110,  928, 1035,  156, 1382,  928,
      929,  662, 1382, 1027,  929,  156,  110,  928, 1028,  662,
     1257, 1027,  929,  662, 1246, 1027, 1028,  110,  110, 1187,
     1028, 1187, 1189, 1254, 1189, 1254, 1247, 1261,  110,  110,
     1259,  110,  110,  110, 1258, 1263,  110, 1257, 1264,  110,

     1300, 1265, 1246,  110, 1317, 1248, 1188, 1190, 1266, 1255,
      110, 1262,  110, 1269, 1247, 1261, 1271, 1259, 1267,  110,
     1382, 1258,  110, 1263, 1268,  110, 1264, 1270, 1300, 1265,
     1382, 1317, 1248, 1275, 1188, 1190, 1266, 1255, 1262,  110,
     1269,  110,  110, 1271, 1276, 1267, 1273,  110, 1272, 1274,
     1277, 1243, 1268,  110, 1270, 1382, 1278,  110, 1231, 1380,
     1275, 1382, 1279, 1382, 1229, 1230, 1229, 1382, 1281, 1282,
     1281, 1276, 1231, 1382, 1273, 1272, 1231, 1274, 1277, 1234,
     1280, 1283, 1284, 1283, 1278, 1382, 1235, 1380, 1239, 1235,
     1279, 1236, 1237, 1236, 1125,  460, 1254, 1382, 1254, 1126,

     1244, 1245, 1244, 1136,  156, 1382,  928, 1280, 1137,  110,
      156,  929,  928,  156, 1250,  928, 1250,  929, 1251, 1294,
      929, 1294, 1255, 1295,  110,  110,  110, 1301, 1296,  110,
      110,  110, 1252,  110, 1382,  110,  110, 1285, 1308,  110,
      110,  110, 1299,  110,  110, 1286, 1302, 1297, 1298, 1303,
     1255, 1287, 1304, 1307, 1301, 1306, 1305, 1310,  110,  110,
     1382, 1309, 1314,  110, 1285, 1382, 1308, 1312, 1313, 1299,
     1382, 1311, 1286, 1302, 1297, 1298, 1315, 1303, 1287, 1304,
     1307, 1382, 1306, 1305, 1310, 1281, 1282, 1281, 1309, 1314,
     1283, 1284, 1283, 1231, 1312,  662, 1313, 1027, 1235, 1311,

     1322,  156, 1028,  928, 1315,  662, 1327, 1027,  929, 1318,
     1319, 1318, 1028, 1290, 1320, 1321, 1320, 1294,  110, 1294,
      110, 1295,  110,  110,  110,  110, 1296, 1322,  110, 1325,
     1332, 1382, 1329, 1327, 1292, 1316,  110, 1331,  110,  110,
      110, 1326,  110,  110,  110, 1328, 1330, 1333, 1334, 1335,
      110, 1338, 1382, 1346, 1336, 1337, 1382, 1325, 1332,  662,
     1329, 1027, 1316, 1382, 1382, 1331, 1028,  110, 1326, 1340,
     1382,  110, 1328, 1330, 1339, 1333, 1334, 1335,  110, 1338,
     1346, 1336,  110, 1337, 1318, 1319, 1318, 1349, 1290, 1320,
     1321, 1320, 1345,  110, 1347, 1348, 1340,  110,  110,  110,

     1354, 1339, 1355, 1356, 1357, 1356, 1382, 1343, 1353, 1292,
      110,  110, 1350,  110,  110, 1349, 1358, 1359, 1358, 1345,
     1352, 1347, 1351, 1348, 1360, 1344,  110, 1354, 1362, 1355,
     1361,  110,  110,  110, 1363, 1369, 1353, 1367,  110, 1350,
     1382, 1356, 1357, 1356, 1364, 1343, 1371, 1352, 1372, 1351,
     1382, 1368, 1360, 1381, 1382, 1362, 1370, 1361, 1358, 1359,
     1358, 1363,  110, 1369, 1382, 1367, 1375, 1344,  110, 1373,
     1382, 1377, 1364, 1371, 1376, 1372,  110, 1374, 1368, 1378,
     1382, 1381, 1382, 1370, 1382, 1379, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1375, 1382, 1382, 1373, 1382, 1377,

     1382, 1376, 1382, 1382, 1382, 1374, 1378, 1382, 1382, 1382,
     1382, 1382, 1382, 1379,   39,   39,   39,   39,   39,   39,
       39,   39,   42,   42,   42,   42,   42,   42,   42,   42,
       61,   61,   61,   61,   61,   61,   61,   61,   65,   65,
       65,   65,   65,   65,   65,   65,   69,   69,   69,   69,
       69,   69,   69,   69,   75,   75,   75,   75,   75,   75,
       75,   75,   77,   77,   77,   77,   77,   77,   77,   77,
       79,   79,   79,   79,   79,   79,   79,   79,   88,   88,
       88,   88,   88,   88,   88,   88,   96,   96,   96,   96,
       96,   96,   96,   96,   99,   99,   99,   99,   99,   99,

       99,   99,  103,  103,  103,  103,  103,  103,  103,  103,
      104,  104,  104,  104,  104,  104,  104,  104,  109,  109,
      113, 1382,  113,  113,  145,  145,  145,  145,  145,  145,
      145,  145,  147,  147,  147,  147,  147,  147,  147,  147,
      151,  151,  151,  151,  151,  151,  151,  151,  159,  159,
      159,  159,  159,  159,  159,  159,  162,  162,  162,  162,
      162,  162,  162,  162,  155,  155,  155,  155,  155,  155,
      155,  155,  166,  166,  166,  166,  166,  166,  166,  166,
      196,  196,  196,  196,  196,  196, 1382,  196,  197,  197,
      197,  197,  197, 1382,  197,  197,  111, 1382,  111,  112,

     1382,  112,  236,  236,  236,  236,  236,  236,  236,  236,
      239,  239,  239,  239,  239,  239,  239,  239,  242,  242,
      242,  242,  242,  242,  242,  242,  245,  245,  245,  245,
      245,  245,  245,  245,  250,  250,  250,  250,  250,  250,
      250,  250,  253,  253,  253,  253,  253,  253,  253,  253,
      257,  257,  257,  257,  257,  257,  257,  257,  261,  261,
      261,  261,  261,  261,  261,  261,  264,  264,  264,  264,
      264,  264,  264,  264,  266,  266,  266,  266,  266,  266,
      266,  266,  270,  270,  270,  270,  270,  270,  270,  270,
      275,  275,  275,  275,  275,  275,  275,  275,  277,  277,

      277,  277,  277,  277,  277,  277,  281,  281,  281,  281,
      281,  281,  281,  281,  286,  286,  286,  286,  286,  286,
      286,  286,  291,  291,  291,  291,  291,  291,  291,  291,
      293,  293,  293,  293,  293,  293,  293,  293,  298,  298,
      298,  298,  298,  298,  298,  298,  303,  303,  303,  303,
      303,  303,  303,  303,  196,  196,  196,  196,  196,  196,
     1382,  196,  381,  381,  381,  381,  381,  381,  381,  381,
      384,  384,  384,  384,  384,  384,  384,  384,  386,  386,
      386,  386,  386,  386,  386,  386,  390,  390,  390,  390,
      390,  390,  390,  390,  395,  395,  395,  395,  395,  395,

      395,  395,  403,  403,  403,  403,  403,  403,  403,  403,
      408,  408,  408,  408,  408,  408,  408,  408,  411,  411,
      411,  411,  411,  411,  411,  411,  413,  413,  413,  413,
      413,  413,  413,  413,  418,  418,  418,  418,  418,  418,
      418,  418,  421,  421,  421,  421,  421,  421,  421,  421,
      424,  424,  424,  424,  424,  424,  424,  424,  428,  428,
      428,  428,  428,  428,  428,  428,  431,  431,  431,  431,
      431,  431,  431,  431,  434,  434,  434,  434,  434,  434,
      434,  434,  440,  440,  440,  440,  440,  440,  440,  440,
      453,  453,  453,  453,  453,  453,  453,  453,  456,  456,

      456,  456,  456,  456,  456,  456,  460,  460,  460,  460,
      460,  460,  460,  460,  464,  464,  464,  464,  464,  464,
      464,  464,  467,  467,  467,  467,  467,  467,  467,  467,
      470,  470,  470,  470,  470,  470,  470,  470,  476,  476,
      476,  476,  476,  476,  476,  476,  477,  477,  477,  477,
      477,  477,  477,  477,  109,  109,  562,  562,  562,  562,
      562,  562,  562,  562,  565,  565,  565,  565,  565,  565,
      565,  565,  567,  567,  567,  567,  567,  567,  567,  567,
      571,  571,  571,  571,  571,  571,  571,  571,  390,  390,
      390,  390,  390,  390,  390,  390,  403,  403,  403,  403,

      403,  403,  403,  403,  579,  579,  579,  579,  579,  579,
      579,  579,  582,  582,  582,  582,  582,  582,  582,  582,
      584,  584,  584,  584,  584,  584,  584,  584,  588,  588,
      588,  588,  588,  588,  588,  588,  593,  593,  593,  593,
      593,  593,  593,  593,  596,  596,  596,  596,  596,  596,
      596,  596,  599,  599,  599,  599,  599,  599,  599,  599,
      603,  603,  603,  603,  603,  603,  603,  603,  605,  605,
      605,  605,  605,  605,  605,  605,  609,  609,  609,  609,
      609,  609,  609,  609,  613,  613,  613,  613,  613,  613,
      613,  613,  623,  623,  623,  623,  623,  623,  623,  623,

      626,  626,  626,  626,  626,  626,  626,  626,  631,  631,
      631,  631,  631,  631,  631,  631,  634,  634,  634,  634,
      634,  634,  634,  634,  636,  636,  636,  636,  636,  636,
      636,  636,  640,  640,  640,  640,  640,  640,  640,  640,
      649,  649,  649,  649,  649,  649,  649,  649,  650,  650,
      650,  650,  650,  650,  650,  650,  239,  239,  239,  239,
      239,  239,  239,  239,  653,  653,  653,  653,  653,  653,
      653,  653,  656,  656,  656,  656,  656,  656,  656,  656,
      661,  661,  661,  661,  661,  661,  661,  661,  579,  579,
      579,  579,  579,  579,  579,  579,  109,  109,  741,  741,

      741,  741,  741,  741,  741,  741,  744,  744,  744,  744,
      744,  744,  744,  744,  746,  746,  746,  746,  746,  746,
      746,  746,  749,  749,  749,  749,  749,  749,  749,  749,
      753,  753,  753,  753,  753,  753,  753,  753,  756,  756,
      756,  756,  756,  756,  756,  756,  758,  758,  758,  758,
      758,  758,  758,  758,  761,  761,  761,  761,  761,  761,
      761,  761,  768,  768,  768,  768,  768,  768,  768,  768,
      771,  771,  771,  771,  771,  771,  771,  771,  774,  774,
      774,  774,  774,  774,  774,  774,  776,  776,  776,  776,
      776,  776,  776,  776,  779,  779,  779,  779,  779,  779,

      779,  779,  781,  781,  781,  781,  781,  781,  781,  781,
      787,  787,  787,  787,  787,  787,  787,  787,  789,  789,
      789,  789,  789,  789,  789,  789,  793,  793,  793,  793,
      793,  793,  793,  793,  796,  796,  796,  796,  796,  796,
      796,  796,  798,  798,  798,  798,  798,  798,  798,  798,
      801,  801,  801,  801,  801,  801,  801,  801,  807,  807,
      807,  807,  807,  807,  807,  807,  808,  808,  808,  808,
      808,  808,  808,  808,  811,  811,  811,  811,  811,  811,
      811,  811,  813,  813,  813,  813,  813,  813,  813,  813,
      275,  275,  275,  275,  275,  275,  275,  275,  816,  816,

      816,  816,  816,  816,  816,  816,  823,  823,  823,  823,
      823,  823,  823,  823,  239,  239,  239,  239,  239,  239,
      239,  239,  826,  826,  826,  826,  826,  826,  826,  826,
      829,  829,  829,  829,  829,  829,  829,  829,  851,  851,
      851,  851,  851,  851,  851,  109,  109,  909,  909,  909,
      909,  909,  909,  909,  909,  912,  912,  912,  912,  912,
      912,  912,  912,  914,  914,  914,  914,  914,  914,  914,
      914,  919,  919,  919,  919,  919,  919,  919,  919,  927,
      927,  927,  927,  927,  927,  927,  927,  930,  930,  930,
      930,  930,  930,  930,  930,  932,  932,  932,  932,  932,

      932,  932,  932,  937,  937,  937,  937,  937,  937,  937,
      937,  945,  945,  945,  945,  945,  945,  945,  945,  950,
      950,  950,  950,  950,  950,  950,  950,  955,  955,  955,
      955,  955,  955,  955,  955,  958,  958,  958,  958,  958,
      958,  958,  958,  960,  960,  960,  960,  960,  960,  960,
      960,  965,  965,  965,  965,  965,  965,  965,  965,  969,
      969,  969,  969,  969,  969,  969,  969,  971,  971,  971,
      971,  971,  971,  971,  971,  981,  981,  981,  981,  981,
      981,  981,  981,  984,  984,  984,  984,  984,  984,  984,
      984,  989,  989,  989,  989,  989,  989,  989,  989,  992,

      992,  992,  992,  992,  992,  992,  992,  994,  994,  994,
      994,  994,  994,  994,  994,  999,  999,  999,  999,  999,
      999,  999,  999, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019,  291,  291,  291,  291,  291,  291,  291,
      291, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031,  275,  275,  275,  275,  275,

      275,  275,  275, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036,  927,  927,  927,  927,  927,  927,  927,  927,  109,
      109,  909,  909,  909,  909,  909,  909,  909,  909,  912,
      912,  912,  912,  912,  912,  912,  912,  914,  914,  914,
      914,  914,  914,  914,  914,  919,  919,  919,  919,  919,
      919,  919,  919,  930,  930,  930,  930,  930,  930,  930,
      930,  932,  932,  932,  932,  932,  932,  932,  932,  937,
      937,  937,  937,  937,  937,  937,  937,  945,  945,  945,
      945,  945,  945,  945,  945,  239,  239,  239,  239,  239,
      239,  239,  239, 1119, 1119, 1119, 1119, 1119, 1119, 1119,

     1119, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,  950,
      950,  950,  950,  950,  950,  950,  950, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133,  955,  955,  955,  955,  955,  955,  955,  955,  958,
      958,  958,  958,  958,  958,  958,  958,  960,  960,  960,
      960,  960,  960,  960,  960,  971,  971,  971,  971,  971,
      971,  971,  971,  965,  965,  965,  965,  965,  965,  965,
      965,  969,  969,  969,  969,  969,  969,  969,  969,  981,
      981,  981,  981,  981,  981,  981,  981,  984,  984,  984,

      984,  984,  984,  984,  984,  989,  989,  989,  989,  989,
      989,  989,  989,  992,  992,  992,  992,  992,  992,  992,
      992,  994,  994,  994,  994,  994,  994,  994,  994,  999,
      999,  999,  999,  999,  999,  999,  999, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1031, 1031, 1031, 1031, 1031, 1031, 1031,

     1031, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,  927,
      927,  927,  927,  927,  927,  927,  927,  109,  109,  914,
      914,  914,  914,  914,  914,  914,  914,  919,  919,  919,
      919,  919,  919,  919,  919,  932,  932,  932,  932,  932,
      932,  932,  932,  937,  937,  937,  937,  937,  937,  937,
      937, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,  275,
      275,  275,  275,  275,  275,  275,  275, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1238,

     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1240, 1240, 1240, 1382, 1240,
     1240, 1240, 1240, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133,  960,  960,  960,  960,  960,  960,  960,  960,  971,
      971,  971,  971,  971,  971,  971,  971,  965,  965,  965,
      965,  965,  965,  965,  965,  969,  969,  969,  969,  969,
      969,  969,  969,  981,  981,  981,  981,  981,  981,  981,
      981,  984,  984,  984,  984,  984,  984,  984,  984,  994,
      994,  994,  994,  994,  994,  994,  994,  999,  999,  999,
      999,  999,  999,  999,  999, 1014, 1014, 1014, 1014, 1014,

     1014, 1014, 1014, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036,  927,  927,  927,
      927,  927,  927,  927,  927, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026,  109,  109, 1289, 1382, 1289, 1289, 1289,
     1289, 1289, 1289, 1291, 1382, 1291, 1291, 1291, 1291, 1291,
     1291, 1323, 1382, 1323, 1323, 1323, 1323, 1323, 1323, 1324,
     1382, 1324, 1324, 1324, 1324, 1324, 1324,   33, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,

     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382
    } ;

static const flex_int16_t yy_chk[6454] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,   11,   10,   12,    7,   23,   23,
       23,   23,    9,    9,   10,   10,   28,   28,   28,   28,
        7,   38,   38,   42,   42,   36,   82,    1,    1,    1,
        1,  108,  108,   82,   42,    7,   15,   16,   36,   36,
      253,   79,  253,   79, 1379,   15,   16,    7,   79,   11,
       11,   12,   12,    8,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    8,   13,

       14,   15,   16,   44,   54,   80, 1374,   80,   13,   14,
      118,    8,   80,   54,   83,  118,   83,   13,   14,   44,
      149,   83,    2,    2,    2,    2,    8,  149,   46,  147,
       17,  147,   17,  153,   17,   17,  147, 1369,    8,   17,
      153,   54,   17,  118,   13,   14,   44,   46, 1368,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   43,   46,   17,   18,   50,   18,   43,
       18,   18,  113,  113,   89,   18,   89,   89,   18,   92,
     1362,   92,   92,  113,   92,   43,   50,    3,    3,    3,

        3, 1355,   17,   84,   84,   84,   84,   43,  148, 1354,
       92,   84,  101,  148,  101,  101,  154,  154,  154,  154,
     1353,   18,   43,   50,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,   18,  323,
       47,  323,   51, 1349,   55,   24,   24,   24,   24,   26,
       24,   26,   48,   55,   53,   52,   47,   24,   47, 1347,
       26,   51,    4,    4,    4,    4,   24,   58,   55,   24,
      158,   48,   26,  107,   52,   53,   48,  158,   53,   58,
      325,   55,   57,   47,  114,   47,  107,  107,   51,    4,

        5,  152,   59,  325,  325,   55,  152,   24,   48,  115,
       26,   52,   53,   48,   57,   53,  114,   58,   59, 1335,
       59,    5,    5,    5,    5,    5,    5,  116,   86,    5,
       86,  115,    5,    5,    5,   86,    5,    5,    5,    5,
        5,   57,    5,  114, 1334,   59,  116,   59,   86,    5,
        5,    5,    5,    5,    5,  688, 1333,    5,  115,    5,
        5,    5,  121,    5,    5,    5,    5,    5,  688,    5,
       22,   22,   22,  116,   22,  121,  117,   22, 1332,  162,
       91,   22,   91,   45,   22,   22,  162,  119,   45,  125,
       22,   60,  119,   22,   22,   45,   49,  130,  117,   45,

       60,  126,   45,  121,   45,   56,   49,   91,  130,  132,
      125,  169,  223,   49,   49,   60,   45,   56,  169,  126,
      119,   22,   22,   45,   56,  117,   45,  132,   60,   45,
       94,   45,   94,   56,   49,   91,  130,  125,  156,  505,
       49,   49,   60,  156,  223,   56,  126,  150,  150,  150,
      150,   56,  505,  505,  132,  150,  179,   94,  179,  179,
       56,   81,   81,   81,   81,   81,   81,   81,   81,  120,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,  123,   94,  120,  120,  131,  137,
      221,  138,  234,  123,  135,  137,  131,  128,  182,  135,

      138,  135,  190,  221, 1331,  151,  123,  151,   81,   81,
       81,  134,  151,  120,  120,  133, 1328,  128,  155,  234,
      155,  123, 1326,  137,  131,  155,  182,  135,  138,  135,
      190,  221,  134,  123,  133,   81,   85,   85,   85,   85,
       85,   85,   85,   85,  128,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,  134,
      141,  133,   93,  239,   93,  136,  122,  124,  239,  141,
      122,  567,  129,  567,  184,  124,  184,  122,  140,  129,
      159,  136,  159,   85,   85,   85, 1324,  159,   93, 1323,
      124,  124,   93,  142,  122,  129,  122,  141,  140,  166,

      184,  166,  142,  124,  184,  122,  166,  129,  136, 1322,
       85,   87,   87,   87,   87,  144,   93,  124,  124,   87,
       93,  122,  129,  122,  207,  140,  144,  143,  184, 1317,
      142,  144,  184,   87,  171,  143,  171,  164,  164,  164,
       87,  171,  314,  207,   87,  164,  187,   87,  187,   87,
      143,  143,  207, 1307,  144,  237,   87,  193,  144,  193,
      193,   87,  237,  143,  160,  160,  160,  160,   87,  314,
      207,   87,  160,  187,   87,  187,   87,  143,  143,  195,
      195,  195, 1306,   87,  157,  157,  157,  157,  157,  157,
      157,  157, 1298,  157,  157,  157,  157,  157,  157,  157,

      157,  157,  157,  157,  157,  157,  157,  165,  165,  165,
      165,  167,  167,  167,  167,  165,  188,  201,  200,  167,
      170,  170,  170,  170,  188,  200,  201,  192,  170,  192,
      240,  157,  157,  157,  174,  908,  174,  240,  177,  908,
      177,  174,  192,  192,  188,  177,  241,  241,  241,  241,
      173,  188,  173,  200,  201,  174, 1291,  173,  157,  161,
      161,  161,  161,  161,  161,  161,  161,  177,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  173,  174,  204,  210,  219,  209,  173,  183,
     1289,  183,  183,  209,  183,  177,  180,  210,  180,  252,

      252,  252,  219,  181,  204,  181,  161,  161,  161,  173,
      183,  236,  242,  236,  584,  173,  584,  248,  236,  242,
      599,  209,  599,  180,  248,  210,  605,  198,  605,  219,
      181,  204, 1280,  161,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      198,  180,  172,  172,  172,  172,  172,  175,  181,  175,
      186,  176,  186,  176,  175,  178, 1279,  178,  176,  189,
     1278,  189,  178,  191,  199,  191, 1277,  198,  175,  205,
      202,  172,  172,  172,  172,  176,  186,  199,  178,  203,
      186,  208,  175,  199,  176,  176,  189,  217,  202,  191,

      206,  202,  205,  191,  217,  623,  175,  623,  172,  211,
      208,  203,  214,  176,  186,  199,  178,  215,  186,  175,
      199,  176,  176,  206,  189,  202,  211,  191,  202,  205,
      212,  191,  217,  214,  215,  218,  216,  208,  203,  212,
      250,  216,  220, 1270, 1258,  224,  222,  250,  227,  235,
      206,  220,  224,  211,  316,  225,  224,  267,  299,  218,
      214,  215,  267,  299,  225,  230,  235,  212,  213,  216,
      222,  226,  227,  213,  213,  213,  213,  213,  213,  220,
      224,  213,  316,  230,  224,  213,  218,  226,  213,  228,
      213,  213,  225,  235,  213,  233,  319,  222,  228,  227,

      339,  213,  213,  213,  213,  213,  213,  229,  318,  213,
      230,  231,  213,  357,  226,  213,  233,  213,  213, 1252,
      231,  213,  340,  319,  229,  357,  228,  339,  229,  238,
      238,  238,  238,  244,  244,  244,  318,  238,  245,  258,
      245,  244,  257,  233,  257,  245,  258,  264,  231,  257,
      340,  229,  492,  357,  264,  229,  246,  246,  246,  246,
      249,  249,  249,  249,  246,  276,  276,  276,  249,  254,
      254,  254,  254,  259,  259,  259,  259,  392,  392,  392,
      492,  259,  260,  260,  260,  260,  260,  260,  260,  260,
     1251,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  261,  335,  261,  262,  262,
      262,  262,  261,  265,  265,  265,  262,  266,  268,  266,
      270,  265,  270,  493,  266,  268, 1245,  270,  335,  260,
      260,  260,  269,  269,  269,  269,  271,  271,  271,  271,
      269,  273,  277,  284,  271,  278,  278,  278,  273,  277,
      284,  493, 1242,  278,  329,  335,  260,  263,  263,  263,
      263,  263,  263,  263,  263,  329,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      274,  274,  274,  274,  280,  280,  280,  281,  274,  281,
      494, 1241,  280,  329,  281,  282,  282,  282,  282,  285,

      285,  285,  285,  282,  263,  263,  263,  285,  286,  288,
      286,  289,  289,  289,  289,  286,  288,  293,  494,  289,
      290,  290,  290,  290,  293,  295,  295,  295,  290,  331,
     1240,  263,  300,  295,  296,  296,  296,  296,  298,  300,
      298, 1239,  296,  382,  331,  298,  301,  301,  301,  301,
      382,  404,  404,  404,  301,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  331,  495,  302,  302,  302,  302,  302,  303,  304,
      303,  304,  305, 1237,  305,  303,  304,  315,  306,  305,
      306,  309,  307,  309,  307,  306,  315, 1232,  309,  307,

      495,  332,  302,  302,  302,  302,  308,  305,  308,  332,
      310,  304,  310,  308,  311,  315,  311,  310, 1225, 1222,
      309,  311,  306,  315,  312,  320,  312,  320,  478,  302,
      307,  312,  313,  478,  313,  305, 1221,  332,  304,  313,
      322,  328,  322,  310,  308,  324,  310,  324,  309,  306,
     1216,  320,  321,  311,  321,  320,  336,  307,  330, 1213,
      324,  324,  328,  312,  313,  330,  333,  322,  341,  338,
      310,  308,  336,  310,  346,  322,  334,  333,  342,  320,
      311,  334,  338,  320,  347,  321,  341,  321,  343,  328,
      312,  313,  337,  330,  342,  322,  346,  337,  344,  336,

      347,  343,  322,  348,  345,  333,  662,  344,  350,  334,
      338,  662,  321,  341,  321,  349,  497,  345,  351,  353,
      354,  342,  352,  346,  348,  337,  350,  347,  358,  343,
      345,  360,  352,  362,  349,  344,  361,  351,  353,  355,
      352,  354,  351,  356,  497,  345,  363,  360,  355, 1210,
     1207,  348,  356,  350,  362,  384,  358,  345, 1203,  361,
      352,  349,  384,  355,  351,  353,  364,  352,  354,  351,
      363,  356,  365,  366,  360,  367,  355,  364,  369,  365,
      356,  362,  368,  358,  374,  372,  361,  364,  377,  366,
      355,  368,  375,  373,  388,  377,  367,  363,  356,  369,

      373,  388,  496,  374,  378,  364,  372,  365,  377,  380,
      381,  375,  381,  378,  364,  379,  366,  381,  380,  368,
      386, 1202,  386,  367,  379,  390,  369,  386,  373,  496,
      374, 1196,  390,  372, 1193, 1192,  377,  518,  375,  379,
      508,  378,  383,  383,  383,  383,  380,  385,  385,  385,
      383, 1175,  379,  508, 1171,  385,  387,  387,  387,  387,
      389,  389,  389,  389,  387,  518,  379,  395,  389,  393,
      393,  393,  393, 1167,  395,  396,  396,  396,  398,  398,
      398,  508,  517,  396,  679,  409,  398,  401,  401,  401,
      401,  408,  409,  408, 1163,  401,  411, 1159,  408,  410,

      410,  410,  410,  411,  412,  412,  412,  410,  413,  517,
      413,  679,  412,  415,  422,  413,  414,  414,  414,  414,
      415,  422,  426,  428,  414,  416,  416,  416,  416,  426,
      428, 1155, 1151,  416,  417,  417,  417,  417,  417,  417,
      417,  417, 1145,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  418,  521,  418,
      419,  419,  419,  419,  418,  421, 1143,  421,  419,  445,
      445,  445,  421,  424,  521,  424,  423,  423,  423,  423,
      424,  417,  417,  417,  423,  425,  425,  425,  425,  427,
      427,  427,  427,  425,  429,  429,  429,  427,  430,  430,

      430,  521,  429,  566,  566,  566,  430, 1139,  417,  420,
      420,  420,  420,  420,  420,  420,  420, 1135,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  431,  433,  433,  433,  434,  515,  434,  431,
      527,  433,  437,  434,  435,  435,  435,  435,  440,  437,
      515, 1132,  435,  527,  524,  440,  420,  420,  420,  438,
      438,  438,  438,  442,  442,  442,  524,  438,  448,  448,
      448,  442,  443,  443,  443,  443,  448,  636,  515,  636,
      443,  527,  454,  420,  451,  451,  451,  451,  453,  454,
      453, 1124,  451,  456,  524,  453,  455,  455,  455,  455,

      456,  457,  457,  457,  455,  458,  458,  458,  458,  457,
      462,  462,  462,  458,  459,  459,  459,  459,  462,  464,
      465,  464,  459, 1120, 1116,  467,  464,  465,  466,  466,
      466,  466,  467,  469,  469,  469,  466,  470,  543,  470,
     1112,  469,  473,  479,  470,  471,  471,  471,  471,  473,
      479,  543,  563,  471,  474,  474,  474,  474,  656,  563,
      656, 1108,  474,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  543,
      675,  475,  475,  475,  475,  475,  476,  477,  476,  477,
      687,  507,  687,  476,  477,  480,  480,  480,  480,  481,

      482,  481,  482,  480, 1104,  687,  481,  482,  675,  507,
      475,  475,  475,  475,  483,  484,  483,  484,  485, 1089,
      485,  483,  484, 1088,  486,  485,  486,  487,  488,  487,
      488,  486,  533,  510,  487,  488,  507,  475,  490,  526,
      490,  483,  510,  485,  489,  490,  489,  491,  498,  491,
      498,  489, 1068,  484,  491,  533,  565,  486,  526,  499,
      488,  499,  487,  565, 1067,  489,  500,  490,  500,  483,
      510,  485,  491,  489,  506,  503,  501,  503,  501,  506,
      484,  498,  533,  498,  486,  526,  509,  488, 1040,  487,
      504,  500,  504,  489,  509,  490,  525,  535,  499,  503,

      491,  489,  512,  501,  511,  504,  504,  506,  498,  512,
      498,  501,  514,  511,  522,  513,  535,  516,  525,  500,
      520,  514,  509,  513,  516,  499,  519,  503,  513,  520,
      523,  501,  522,  519,  529,  531,  534,  512,  501,  530,
      523,  511,  537,  535,  534,  525,  536,  539,  537,  514,
      538,  513,  516,  531,  540,  538,  513,  520,  529,  522,
      530,  519,  536,  540,  544,  542,  545,  539,  523,  546,
      548, 1033,  534,  544,  545,  548,  537,  549,  546,  550,
      531,  542,  547,  538,  554,  529,  549,  530,  550,  536,
      551,  540,  547,  553,  539,  552,  555,  556,  551,  561,

      552,  544,  545,  548,  555,  558,  546,  554,  542,  564,
      564,  564,  564,  560,  549,  553,  550,  561, 1016,  996,
      547,  556,  962,  562,  560,  562,  551,  558,  552,  560,
      562,  852,  555,  852,  554,  568,  568,  568,  568,  572,
      572,  572,  553,  934,  561,  573,  573,  573,  556,  575,
      575,  575,  560,  853,  558,  853,  560,  570,  570,  570,
      570,  574,  574,  574,  574,  577,  577,  577,  579,  580,
      579,  581,  581,  581,  581,  579,  580,  582,  583,  583,
      583,  589,  589,  589,  582,  585,  585,  585,  585,  587,
      587,  587,  587,  590,  590,  590,  591,  591,  591,  591,

      592,  592,  592,  593,  596,  593,  596,  592,  946,  916,
      593,  596,  900,  946,  592,  592,  594,  594,  594,  594,
      595,  595,  595,  597,  603,  632,  631,  595,  631,  894,
      597,  603,  632,  631,  595,  595,  598,  598,  598,  598,
      600,  600,  600,  600,  602,  602,  602,  602,  604,  604,
      604,  606,  606,  606,  606,  608,  608,  608,  608,  610,
      610,  610,  611,  611,  611,  611,  612,  612,  612,  614,
      614,  614,  616,  616,  616,  619,  619,  619,  619,  621,
      621,  621,  625,  625,  625,  625,  627,  627,  627,  628,
      628,  628,  628,  629,  629,  629,  630,  630,  630,  630,

      633,  633,  633,  633,  634,  635,  635,  635,  641,  641,
      641,  634,  637,  637,  637,  637,  639,  639,  639,  639,
      643,  643,  643,  646,  646,  646,  646,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  892,  891,  648,  648,  648,  648,  648,
      649,  650,  649,  650,  651,  888,  887,  649,  650,  653,
      877,  651,  652,  652,  652,  652,  653,  655,  655,  655,
      657,  657,  657,  657,  648,  648,  648,  648,  660,  660,
      660,  660,  661,  663,  661,  664,  664,  664,  664,  661,
      663,  665,  666,  665,  666,  667,  871,  667,  665,  666,

      863,  648,  667,  668,  669,  668,  669,  670,  678,  670,
      668,  669,  680,  671,  670,  671,  665,  831,  827,  672,
      671,  672,  673,  674,  673,  674,  672,  689,  668,  673,
      674,  698,  670,  681,  689,  681,  678,  682,  669,  682,
      680,  683,  671,  683,  665,  673,  672,  684,  686,  684,
      686,  693,  685,  672,  685,  822,  668,  702,  698,  691,
      670,  693,  689,  682,  691,  669,  683,  694,  699,  701,
      671,  697,  681,  673,  672,  695,  685,  684,  692,  696,
      672,  686,  700,  692,  702,  698,  699,  700,  696,  693,
      694,  682,  691,  697,  683,  703,  819,  701,  695,  681,

      706,  705,  704,  708,  685,  684,  725,  709,  686,  704,
      705,  692,  708,  699,  712,  700,  696,  694,  711,  703,
      697,  710,  704,  706,  713,  695,  709,  714,  710,  713,
      715,  712,  723,  718,  714,  716,  717,  704,  705,  715,
      708,  711,  718,  717,  719,  721,  703,  717,  729,  704,
      706,  722,  720,  709,  721,  724,  710,  713,  712,  716,
      727,  719,  714,  732,  729,  719,  733,  715,  711,  720,
      718,  717,  722,  728,  724,  717,  726,  731,  728,  736,
      730,  727,  721,  733,  731,  726,  716,  732,  719,  707,
      730,  729,  719,  737,  734,  843,  720,  735,  738,  722,

      730,  724,  730,  736,  735,  738,  728,  734,  727,  739,
      733,  740,  731,  726,  732,  741,  737,  741,  730,  841,
      735,  742,  741,  843,  744,  690,  739,  730,  742,  730,
      736,  744,  735,  659,  740,  734,  743,  743,  743,  743,
      745,  745,  745,  737,  743,  748,  841,  735,  745,  746,
      658,  746,  748,  739,  654,  749,  746,  747,  747,  747,
      747,  740,  749,  647,  644,  747,  750,  750,  750,  751,
      751,  751,  751,  640,  750,  754,  859,  751,  752,  752,
      752,  753,  754,  753,  638,  859,  752,  756,  753,  755,
      755,  755,  755,  626,  756,  760,  624,  755,  757,  757,

      757,  758,  760,  758,  620,  855,  757,  761,  758,  759,
      759,  759,  759,  859,  761,  617,  613,  759,  762,  762,
      762,  763,  763,  763,  763,  609,  762,  844,  855,  763,
      764,  764,  764,  765,  765,  765,  607,  867,  764,  601,
      765,  766,  766,  766,  766,  767,  768,  767,  768,  766,
      769,  588,  767,  768,  844,  855,  773,  769,  770,  770,
      770,  770,  771,  773,  771,  867,  770,  774,  586,  771,
      772,  772,  772,  772,  774,  775,  775,  775,  772,  776,
      571,  776,  569,  775,  778,  779,  776,  777,  777,  777,
      777,  778,  779,  781,  559,  777,  780,  780,  780,  780,

      781,  782,  782,  782,  780,  783,  783,  783,  783,  782,
      784,  784,  784,  783,  785,  785,  785,  787,  784,  787,
      788,  789,  785,  845,  787,  845,  861,  788,  789,  790,
      790,  790,  790,  791,  791,  791,  861,  790,  541,  866,
      794,  791,  792,  792,  792,  792,  793,  794,  793,  845,
      792,  796,  532,  793,  795,  795,  795,  795,  796,  797,
      797,  797,  795,  798,  861,  798,  866,  797,  800,  801,
      798,  799,  799,  799,  799,  800,  801,  845,  528,  799,
      802,  802,  802,  803,  803,  803,  803,  472,  802,  809,
      811,  803,  804,  804,  804,  864,  809,  811,  468,  460,

      804,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  864,  452,  806,
      806,  806,  806,  806,  807,  808,  807,  808,  450,  444,
     1051,  807,  808,  810,  810,  810,  810,  812,  812,  812,
      813,  810,  813,  439,  864,  812,  876,  813,  806,  806,
      806,  806,  814,  814,  814,  814,  815,  816, 1051,  876,
      814,  436,  432,  815,  816,  817,  817,  817,  821,  821,
      821,  821,  823,  817,  823,  806,  821,  824,  826,  823,
      825,  825,  825,  825,  824,  826,  832,  876,  825,  828,
      828,  828,  829,  832,  829,  856,  406,  828,  403,  829,

      830,  830,  830,  830,  833,  834,  833,  834,  830,  857,
      402,  833,  834,  835,  836,  835,  836,  837,  856,  837,
      835,  836,  399,  838,  837,  838,  840,  839,  840,  839,
      838,  858,  857,  840,  839,  846,  858,  846,  847,  834,
      847,  868,  848,  833,  848,  856,  849,  840,  849,  860,
      850,  837,  850,  862,  869,  865,  870,  836,  860,  857,
      862,  394,  868,  838,  858,  846,  834,  839,  847,  848,
      833,  865,  391,  869,  873,  840,  872,  870,  837,  849,
      874,  872,  879,  878,  836,  881,  860,  874,  875,  868,
      838,  850,  880,  846,  839,  873,  847,  848,  865,  878,

      869,  881,  882,  875,  870,  879,  849,  884,  883,  872,
      889,  882,  885,  880,  884,  874,  886,  893,  850,  889,
      890,  895,  873,  896,  893,  897,  878,  898,  881,  883,
      875,  885,  879,  899,  901,  886,  902,  904,  890,  882,
      880,  902,  884,  910,  896,  895,  903,  889,  905,  897,
      910,  898,  893,  904,  899,  907,  883,  376,  885,  901,
      912,  905,  886,  917,  907,  890,  909,  912,  909,  902,
      917,  896,  895,  909,  903,  371,  897,  370,  898,  359,
      904,  899,  911,  911,  911,  911,  901, 1050,  297,  905,
      911,  914,  907,  914,  913,  913,  913,  292,  914,  291,

      287,  903,  913,  915,  915,  915,  915,  918,  918,  918,
      918,  915,  919,  283, 1050,  918,  920,  920,  920,  919,
      922,  922,  922,  275,  920,  924,  924,  924,  922,  923,
      923,  923,  923,  924,  926,  926,  926,  923,  925,  925,
      925,  925,  926,  927,  928,  927,  925,  272, 1052,  930,
      927,  928,  929,  929,  929,  929,  930,  931,  931,  931,
      929,  932,  256,  932, 1064,  931,  935,  937,  932,  933,
      933,  933,  933,  935,  937, 1052,  255,  933,  936,  936,
      936,  936,  938,  938,  938, 1064,  936,  940,  940,  940,
      938,  941,  941,  941,  941,  940,  942,  942,  942,  941,

      943,  943,  943,  943,  942,  944,  944,  944,  943,  945,
      251,  945, 1064,  944,  948,  953,  945,  947,  947,  947,
     1062,  948,  953,  956,  947,  949,  949,  949,  949,  950,
      956,  950, 1069,  949,  247,  958,  950,  951,  951,  951,
      951,  952,  958,  952, 1062,  951, 1184,  963,  952,  954,
      954,  954,  954,  955,  963,  955,  243,  954,  232, 1069,
      955,  957,  957,  957,  957,  959,  959,  959,  960,  957,
      960, 1062,  194,  959, 1184,  960,  961,  961,  961,  961,
      964,  964,  964,  964,  961,  965,  966,  965,  964,  185,
      168, 1186,  965,  966,  967,  967,  967,  967,  968,  968,

      968,  968,  967,  969,  971,  163,  968,  970,  970,  970,
      969,  971,  972,  972,  972,  970,  974,  974,  974, 1186,
      972,  145,  139,  127,  974,  975,  975,  975,  975,  976,
      976,  976,  976,  975,  977,  977,  977,  976,  978,  978,
      978,  978,  977,  979,  979,  979,  978,  980,  980,  980,
      981,  979,  981,  982,  111,  980,  109,  981,  984,  102,
      982,  983,  983,  983,  983,  984,  985,  985,  985,  983,
      986,  986,  986,  986,  985,  987,  987,  987,  986,  988,
      988,  988,  988,  987,  989,  990,  989,  988,   98, 1198,
      992,  989,  990,  991,  991,  991,  991,  992,  993,  993,

      993,  991,  994,   95,  994, 1071,  993,  997,  999,  994,
      995,  995,  995,  995,  997,  999, 1198,   77,  995,  998,
      998,  998,  998, 1000, 1000, 1000, 1071,  998, 1002, 1002,
     1002, 1000, 1003, 1003, 1003, 1003, 1002, 1004, 1004, 1004,
     1003, 1005, 1005, 1005, 1005, 1004, 1006, 1006, 1006, 1005,
       39,   33,   32, 1071, 1006, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007,   31,   30, 1007, 1007, 1007, 1007, 1007, 1008, 1009,
     1008, 1009, 1010,   29,   27, 1008, 1009, 1012, 1017, 1010,
     1011, 1011, 1011, 1011, 1012, 1017,   25, 1072, 1011, 1013,

     1013, 1013, 1007, 1007, 1007, 1007, 1014, 1013, 1014, 1015,
     1015, 1015, 1015, 1014, 1072, 1019,   21, 1015, 1018, 1018,
     1018, 1018, 1019, 1020, 1020, 1020, 1018,   20, 1249, 1007,
       19, 1020, 1022, 1022, 1022, 1023, 1023, 1023, 1023,    6,
     1022, 1072,    0, 1023, 1024, 1024, 1024, 1025, 1025, 1025,
     1025, 1026, 1024, 1026, 1027, 1025, 1249, 1253, 1026, 1029,
        0, 1027, 1028, 1028, 1028, 1028, 1029, 1030, 1030, 1030,
     1028, 1031,    0, 1031,    0, 1030, 1034, 1036, 1031, 1032,
     1032, 1032, 1032, 1034, 1036, 1253, 1060, 1032, 1035, 1035,
     1035, 1035, 1037, 1037, 1037, 1060, 1035, 1039, 1039, 1039,

     1037, 1041, 1041, 1041, 1041, 1039, 1043,    0, 1043, 1041,
     1044,    0, 1044, 1043, 1045,    0, 1045, 1044, 1046, 1077,
     1046, 1045, 1047, 1060, 1047, 1046, 1048, 1077, 1048, 1047,
     1049, 1043, 1049, 1048, 1053, 1119, 1053, 1049, 1054, 1055,
     1054, 1055, 1119, 1058, 1057, 1058, 1057, 1059, 1044, 1061,
     1076, 1048,    0, 1063, 1061, 1077, 1046, 1047, 1063, 1043,
     1059, 1073, 1049, 1076, 1053, 1054, 1055, 1065, 1058, 1075,
     1073, 1074, 1065, 1078, 1079, 1044, 1084,    0, 1075, 1048,
     1078, 1084, 1061, 1046, 1047, 1057, 1063, 1074, 1059, 1049,
     1079, 1076, 1053, 1054, 1055, 1081, 1058, 1080, 1073, 1083,

     1065, 1085, 1082, 1087, 1092, 1081, 1075, 1083, 1078, 1084,
     1080, 1082, 1057, 1086, 1074, 1097, 1090, 1079, 1091, 1094,
     1095, 1086, 1093, 1092, 1085, 1090, 1098, 1087, 1093, 1095,
     1100,    0, 1096, 1081, 1099, 1083, 1091, 1097, 1080, 1082,
     1094, 1096, 1101, 1099,    0, 1122, 1098, 1122, 1100, 1086,
     1092, 1085, 1122, 1090, 1087, 1125, 1093, 1095, 1130, 1127,
     1101, 1127, 1125, 1091, 1097, 1130, 1127, 1094, 1185, 1096,
     1185, 1099, 1185, 1098,    0, 1100, 1103, 1103, 1103, 1103,
     1105, 1105, 1105,    0, 1103,    0, 1185, 1101, 1105, 1107,
     1107, 1107, 1107, 1109, 1109, 1109,    0, 1107, 1113, 1113,

     1113, 1109, 1111, 1111, 1111, 1111, 1113, 1117, 1117, 1117,
     1111, 1115, 1115, 1115, 1115, 1117, 1121, 1121, 1121, 1115,
     1123, 1123, 1123, 1123, 1121, 1191,    0,    0, 1123, 1126,
     1126, 1126, 1126, 1128, 1129, 1128, 1129, 1126, 1131, 1136,
     1128, 1129, 1133, 1191, 1133, 1131, 1136,    0,    0, 1133,
     1134, 1134, 1134, 1134, 1137, 1137, 1137, 1137, 1134, 1140,
     1140, 1140, 1137, 1138, 1138, 1138, 1138, 1140,    0,    0,
     1191, 1138, 1142, 1142, 1142, 1142, 1144, 1144, 1144, 1144,
     1142, 1146, 1146, 1146, 1144, 1148, 1148, 1148,    0, 1146,
     1152, 1152, 1152, 1148, 1150, 1150, 1150, 1150, 1152, 1156,

     1156, 1156, 1150, 1154, 1154, 1154, 1154, 1156, 1160, 1160,
     1160, 1154, 1158, 1158, 1158, 1158, 1160, 1164, 1164, 1164,
     1158, 1162, 1162, 1162, 1162, 1164, 1168, 1168, 1168, 1162,
     1166, 1166, 1166, 1166, 1168, 1172, 1172, 1172, 1166, 1170,
     1170, 1170, 1170, 1172, 1176, 1176, 1176, 1170, 1174, 1174,
     1174, 1174, 1176, 1178, 1194, 1178, 1174, 1179,    0, 1179,
     1178, 1180,    0, 1180, 1179, 1181, 1197, 1181, 1180, 1182,
     1194, 1182, 1181, 1183, 1178, 1183, 1182, 1195, 1199, 1187,
     1183, 1187, 1189, 1190, 1189, 1190, 1179, 1199, 1201, 1211,
     1197, 1200, 1214, 1204, 1195, 1201, 1205, 1194, 1204, 1208,

     1260, 1205, 1178, 1206, 1288, 1181, 1187, 1189, 1206, 1190,
     1212, 1200, 1219, 1211, 1179, 1199, 1214, 1197, 1208, 1209,
        0, 1195, 1220, 1201, 1209, 1215, 1204, 1212, 1260, 1205,
        0, 1288, 1181, 1219, 1187, 1189, 1206, 1190, 1200, 1217,
     1211, 1223, 1218, 1214, 1220, 1208, 1217, 1224, 1215, 1218,
     1223, 1228, 1209, 1226, 1212,    0, 1224, 1227, 1228, 1375,
     1219,    0, 1226,    0, 1229, 1229, 1229,    0, 1231, 1231,
     1231, 1220, 1229,    0, 1217, 1215, 1231, 1218, 1223, 1233,
     1227, 1235, 1235, 1235, 1224,    0, 1233, 1375, 1238, 1235,
     1226, 1236, 1236, 1236, 1236, 1238, 1254,    0, 1254, 1236,

     1244, 1244, 1244, 1244, 1246,    0, 1246, 1227, 1244, 1261,
     1247, 1246, 1247, 1248, 1250, 1248, 1250, 1247, 1250, 1255,
     1248, 1255, 1254, 1255, 1256, 1257, 1259, 1261, 1255, 1264,
     1262, 1268, 1250, 1265,    0, 1267, 1263, 1246, 1268, 1266,
     1269, 1271, 1259, 1275, 1273, 1247, 1262, 1256, 1257, 1263,
     1254, 1248, 1264, 1267, 1261, 1266, 1265, 1271, 1272, 1274,
        0, 1269, 1275, 1276, 1246,    0, 1268, 1273, 1274, 1259,
        0, 1272, 1247, 1262, 1256, 1257, 1276, 1263, 1248, 1264,
     1267,    0, 1266, 1265, 1271, 1281, 1281, 1281, 1269, 1275,
     1283, 1283, 1283, 1281, 1273, 1285, 1274, 1285, 1283, 1272,

     1293, 1286, 1285, 1286, 1276, 1287, 1300, 1287, 1286, 1290,
     1290, 1290, 1287, 1290, 1292, 1292, 1292, 1294, 1299, 1294,
     1297, 1294, 1301, 1302, 1303, 1305, 1294, 1293, 1304, 1297,
     1305,    0, 1302, 1300, 1292, 1286, 1311, 1304, 1308, 1309,
     1310, 1299, 1312, 1313, 1315, 1301, 1303, 1308, 1309, 1310,
     1314, 1313,    0, 1327, 1311, 1312,    0, 1297, 1305, 1316,
     1302, 1316, 1286,    0,    0, 1304, 1316, 1329, 1299, 1315,
        0, 1325, 1301, 1303, 1314, 1308, 1309, 1310, 1336, 1313,
     1327, 1311, 1330, 1312, 1318, 1318, 1318, 1336, 1318, 1320,
     1320, 1320, 1325, 1337, 1329, 1330, 1315, 1339, 1338, 1340,

     1341, 1314, 1342, 1343, 1343, 1343,    0, 1343, 1340, 1320,
     1350, 1348, 1337, 1351, 1345, 1336, 1344, 1344, 1344, 1325,
     1339, 1329, 1338, 1330, 1345, 1344, 1363, 1341, 1350, 1342,
     1348, 1352, 1360, 1361, 1351, 1363, 1340, 1360, 1364, 1337,
        0, 1356, 1356, 1356, 1352, 1356, 1365, 1339, 1366, 1338,
        0, 1361, 1345, 1377,    0, 1350, 1364, 1348, 1358, 1358,
     1358, 1351, 1367, 1363,    0, 1360, 1371, 1358, 1370, 1367,
        0, 1372, 1352, 1365, 1371, 1366, 1373, 1370, 1361, 1372,
        0, 1377,    0, 1364,    0, 1373,    0,    0,    0,    0,
        0,    0,    0,    0, 1371,    0,    0, 1367,    0, 1372,

        0, 1371,    0,    0,    0, 1370, 1372,    0,    0,    0,
        0,    0,    0, 1373, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393, 1393,

     1393, 1393, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1396, 1396,
     1397,    0, 1397, 1397, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1405, 1405, 1405, 1405, 1405, 1405,    0, 1405, 1406, 1406,
     1406, 1406, 1406,    0, 1406, 1406, 1407,    0, 1407, 1408,

        0, 1408, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1421, 1421,

     1421, 1421, 1421, 1421, 1421, 1421, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1428, 1428, 1428, 1428, 1428, 1428,
        0, 1428, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433, 1433, 1433,

     1433, 1433, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1436, 1436,
     1436, 1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1438, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1448, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1453, 1453, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459, 1459,

     1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1480, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1484, 1484, 1485, 1485,

     1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1495, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1497, 1497, 1497, 1497, 1497, 1497,

     1497, 1497, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505,
     1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506, 1506,
     1506, 1506, 1506, 1506, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1510, 1510,

     1510, 1510, 1510, 1510, 1510, 1510, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1515, 1515,
     1515, 1515, 1515, 1515, 1515, 1516, 1516, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523, 1523, 1523,

     1523, 1523, 1523, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1532, 1532, 1532,
     1532, 1532, 1532, 1532, 1532, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534, 1534, 1534,
     1534, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1536,

     1536, 1536, 1536, 1536, 1536, 1536, 1536, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1542, 1542, 1542,
     1542, 1542, 1542, 1542, 1542, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1548, 1548, 1548, 1548, 1548,

     1548, 1548, 1548, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1551,
     1551, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1553,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1555, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1559, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1574, 1574, 1574,

     1574, 1574, 1574, 1574, 1574, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1586, 1586, 1586, 1586, 1586, 1586, 1586,

     1586, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1589, 1589, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
     1593, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1601, 1601, 1601,
     1601, 1601, 1601, 1601, 1601, 1602, 1602, 1602,    0, 1602,
     1602, 1602, 1602, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
     1608, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1611, 1611, 1611,
     1611, 1611, 1611, 1611, 1611, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1618, 1618, 1619,    0, 1619, 1619, 1619,
     1619, 1619, 1619, 1620,    0, 1620, 1620, 1620, 1620, 1620,
     1620, 1621,    0, 1621, 1621, 1621, 1621, 1621, 1621, 1622,
        0, 1622, 1622, 1622, 1622, 1622, 1622, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,

     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest, lexer_string, lexer_lr;
std::string     lexer_include;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;

#line 2487 "lexer.cpp"

#line 32 "lexer.l"
  //  following are keywords starting with c
#line 2491 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_esope 3
#define state_lr 4
#define state_lrb 5
#define state_skip 6
#define state_skipall 7
#define state_skipnoop 8
#define state_error 9
#define state_findformat 10
#define state_scanfixpre 11
#define state_scanompfixed 12
#define state_scanompfree 13
#define state_incfilename 14
#define state_char 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 34 "lexer.l"


#line 2735 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1383 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6378 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 36 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 39 "lexer.l"
{ D(O("lrplus");O(lrlevel);Y;); 
                   lrlevel++;
		}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "lexer.l"
{ D(O("lrmin");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			D(O("LR");Y); return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 57 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); 
                    lexer_lr += yytext;
		} 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 65 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 86 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 94 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		lexer_lr = "";
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 110 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 114 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK

/* to be used in '#include <file>' */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("INCFILENAME");Y;); lexer_string = yytext; 
                             BEGIN state_char; 
			     return INCFILENAME; }
	YY_BREAK


case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 141 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
/* see comment at TYPEIS */
case 32:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("ENDTEAM");Y);            return ENDTEAM;           }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("INCLUDE");Y;);           return INCLUDE;           }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("NON_RECURSIVE");Y;);     return NON_RECURSIVE;     } 
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 219 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 220 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 95:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 221 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
/* To disambiguate between 'TYPE ISMYTYPE' and TYPE IS(MYTYPE), the lexer */
/* recognizes 'TYPEIS(' and returns "TYPEIS" */
/* Note that the '(' stays in the input buffer */
case 96:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 225 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 226 "lexer.l"
{ D(O("USE");Y);                return USE;               }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 227 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 99:
YY_RULE_SETUP
#line 231 "lexer.l"
{ D(O("SEGMENT");Y;);           return SEGMENT;           }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 232 "lexer.l"
{ D(O("SEGMENT,");Y;);          return SEGMENT;           }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 233 "lexer.l"
{ D(O("ENDSEGMENT");Y;);        return ENDSEGMENT;        }
	YY_BREAK


case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 237 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 238 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 239 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 240 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 241 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 242 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 243 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 244 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 245 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 246 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 247 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 248 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 249 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 250 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 116:
#line 255 "lexer.l"
case 117:
/* rule 117 can match eol */
#line 256 "lexer.l"
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 256 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 259 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 260 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 121:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 263 "lexer.l"
case 122:
YY_RULE_SETUP
#line 264 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 267 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 268 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 125:
YY_RULE_SETUP
#line 271 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 274 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 277 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 280 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 283 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 288 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 293 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 296 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 299 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 302 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 305 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 308 "lexer.l"
{ D(O("INCLUDE_CPP");Y;);
                                extract_include();
                                return INCLUDE_CPP;
		              }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 312 "lexer.l"
{ D(O("INCLUDE_CPP_STD");Y;);
                                extract_include();
                                return INCLUDE_CPP_STD;
		              }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 318 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 321 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 324 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 327 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 330 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 333 "lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                extract_include();
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 340 "lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                extract_include();
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 349 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 350 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 147:
YY_RULE_SETUP
#line 353 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       lexer_string = pline.get_value(std::string(yytext));
		       D(O("QSTRING");O(lexer_string);Y;);
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 148:
/* rule 148 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 378 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 384 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 391 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    lexer_lr = "";
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 399 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 406 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 408 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 409 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 411 "lexer.l"
ECHO;
	YY_BREAK
#line 3816 "lexer.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(state_identifier):
			case YY_STATE_EOF(state_keyword):
			case YY_STATE_EOF(state_esope):
			case YY_STATE_EOF(state_lr):
			case YY_STATE_EOF(state_lrb):
			case YY_STATE_EOF(state_skip):
			case YY_STATE_EOF(state_skipall):
			case YY_STATE_EOF(state_skipnoop):
			case YY_STATE_EOF(state_error):
			case YY_STATE_EOF(state_findformat):
			case YY_STATE_EOF(state_scanfixpre):
			case YY_STATE_EOF(state_scanompfixed):
			case YY_STATE_EOF(state_scanompfree):
			case YY_STATE_EOF(state_incfilename):
			case YY_STATE_EOF(state_char):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1383 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1383 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1382);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 411 "lexer.l"


void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case CHAR:          BEGIN(state_char);         break;
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case INCFILENAME:   BEGIN(state_incfilename);  break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case ESOPE:         BEGIN(state_esope);        break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}
std::string lexer_getstring()
{
   D(O("lexer_string");O(lexer_string););
   return lexer_string;
}
std::string lexer_getlr()
{
   D(O("lexer_lr");O(lexer_lr););
   return lexer_lr;
}
std::string lexer_getinclude()
{
   D(O("lexer_getinclude");O(lexer_include););
   return lexer_include;
}

void extract_include()
{
// removes first and last character of rest of input line
// example: 
// #include "file.inc"
// after scanning of '#include ', the string "file.inc",
// without quotes is put in lexer_include

   size_t l = input_string.length()-yyleng-1;
   lexer_include = input_string.substr(yyleng,l);
   if (lexer_include.size() > 1)
   {
      lexer_include.erase(lexer_include.end()-1);
      lexer_include.erase(lexer_include.begin());
   }
   D(O("lexer_include");O(lexer_include););
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


