#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 112
#define YY_END_OF_BUFFER 113
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1086] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      113,  111,  110,  111,  107,  106,  111,  108,  109,   16,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,    4,    5,    2,    3,    8,    9,
        6,    7,   15,   14,   10,   12,   11,   13,    1,  112,
      112,  103,  112,  103,  112,  112,  112,  112,  112,  112,
      104,    0,  106,    0,    0,   16,   17,   16,    0,    0,
        0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
        0,   67,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   85,    0,    0,    0,  103,    0,   91,    0,
        0,    0,   91,    0,    0,    0,  103,    0,    0,    0,
        0,    0,    0,   93,    0,    0,    0,    0,   91,    0,
        0,    0,    0,    0,    0,    0,    0,  105,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   33,    0,    0,
        0,    0,    0,   49,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   91,    0,
        0,    0,   91,    0,    0,    0,   91,    0,    0,    0,
       91,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   92,    0,    0,    0,    0,   95,    0,    0,
        0,    0,    0,    0,   93,    0,    0,    0,   95,    0,
        0,    0,   91,    0,    0,    0,    0,    0,    0,   91,
        0,    0,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   24,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   64,    0,    0,    0,    0,    0,
        0,    0,    0,   78,   79,    0,    0,    0,    0,   86,
       87,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   93,    0,    0,   97,    0,    0,   91,    0,
       91,   91,    0,   91,    0,    0,   91,   91,   91,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   92,    0,    0,    0,   92,    0,    0,
       98,    0,   93,    0,    0,   95,    0,   97,   93,    0,
       93,  103,    0,   95,    0,    0,    0,    0,    0,    0,
        0,    0,   93,    0,   91,    0,    0,    0,  101,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   21,    0,    0,   27,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   48,    0,    0,    0,   53,    0,    0,    0,
        0,    0,    0,    0,   63,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   88,    0,
       90,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   93,    0,   91,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   92,    0,   92,   92,    0,   92,

        0,   93,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
       95,    0,    0,    0,  100,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   20,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   42,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   65,    0,
       68,    0,    0,    0,   72,    0,    0,    0,    0,    0,
        0,   89,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   92,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,  101,   93,    0,
       95,    0,    0,    0,    0,   93,    0,    0,    0,   95,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   28,   29,    0,    0,    0,    0,
        0,    0,    0,   36,    0,    0,    0,    0,    0,   50,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   61,

        0,    0,   69,    0,   71,    0,    0,    0,    0,   77,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   91,    0,    0,    0,    0,   91,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       97,    0,    0,    0,    0,   93,    0,    0,    0,    0,
        0,    0,  102,    0,    0,    0,    0,    0,   94,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   92,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   97,    0,    0,    0,    0,   93,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   97,    0,    0,    0,    0,   93,    0,  100,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   30,   31,    0,   37,    0,    0,    0,
        0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   62,   66,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   91,    0,   91,
        0,   91,    0,   91,    0,   96,    0,   93,    0,   96,
        0,   93,    0,   93,    0,    0,    0,   96,    0,    0,

       94,    0,   94,    0,    0,   93,    0,    0,   96,    0,
        0,    0,   92,    0,   92,    0,   92,    0,   96,    0,
       93,    0,   92,    0,   91,    0,   91,    0,   96,    0,
       93,    0,   96,    0,   93,    0,   96,    0,   93,    0,
       96,    0,   93,    0,    0,    0,    0,    0,    0,   19,
       22,    0,   25,    0,    0,    0,    0,    0,   40,   43,
        0,    0,    0,   51,    0,    0,   55,    0,    0,   58,
        0,    0,   70,    0,    0,    0,   76,   80,    0,    0,
       83,    0,    0,    0,   93,    0,   99,    0,   93,    0,
        0,   96,    0,   93,    0,   94,  102,   93,    0,   96,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   57,    0,    0,    0,    0,
        0,   81,   82,   84,    0,   93,    0,   93,    0,    0,
        0,   23,    0,    0,    0,    0,    0,    0,    0,   47,
       52,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       26,    0,   34,    0,    0,   44,   46,   54,   56,   60,
        0,    0,    0,    0,    0,   35,   38,    0,   59,    0,
        0,    0,    0,    0,   75,    0,    0,    0,   39,   73,
        0,    0,   74,   18,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,    1,    1,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
       16,    1,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       26,   33,   34,   35,   36,   37,   38,   39,   40,   26,
       41,    1,   42,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   26,   53,   54,   55,   56,
       57,   58,   26,   59,   60,   61,   62,   63,   64,   65,
       66,   26,    1,   67,    1,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    4,    5,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_uint16_t yy_base[1279] =
    {   0,
        0,   67,  134,  201,  266, 2344,   14,   16,   15,   17,
       19,   20,   43,   44,   84,  111, 2343, 2341, 2323,  328,
     2324, 4568, 4568,   17, 4568, 2309, 2300, 4568, 4568,   25,
      138,   34,  361,   35,  139,   71,  170,   98,  100,  203,
       78,  209,  207,   13, 4568, 4568, 4568, 4568, 4568, 4568,
     4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568, 4568,
     2311, 4568,   95,  155,  420,   35,  156,  177,  487,  553,
     4568,   41, 2293, 2277,    0, 2283,    0,   88,  206,  212,
      217,  218,  153,  179,  205,  238,  326,  301,  308,  222,
      226, 2268,  235,  214,  323,  282,  239,  244,  335,  343,

      261,  336, 2267,  345,  338, 2269, 4568,  390,   43,  102,
      404,  393,  114,  103,  185,  434,  157,  619,  401,  435,
      443,  686,  408, 2261,  447,  455,  460,  468, 2249,  465,
      476,  753,  505,  504,  517,  527,  522, 4568,  321,  519,
      368,  490,  530,  452,  491,  545,  552,  505,  385,  274,
      404,  559,  570,  806,  568,  587,  560,  563,  480,  590,
      621,  504,  622,  628,  624,  641,  632,  650,  625,  636,
      649,  587,  473,  708,  300,  591,  363,  641, 2244,  712,
      666,  720, 2237,  645,  728,  717, 2225,  732,   60,  736,
     2228, 2219,  739,  740,  768,  870,  742,  776,  937,  743,

      780,  783,  590,  784,  795,  798,  806, 2214,  803,  885,
     2203,  772,  810,  830, 4568,  889,  813,  897, 2195,  827,
      905,  840, 2186,  839,  913,  921, 2179, 2172,  853, 4568,
      925,  952, 2162, 1004,  854,  964,  955,  963,  990,  977,
     1022,  991, 1025, 1030,  845,  644,  850,  906,  916,  888,
     1006,  947, 1021, 1007,   70,  256, 1026, 1027, 1038,  950,
     1047, 1033, 1029, 1028, 1058, 1049, 1060, 1079, 1061, 1055,
     1083, 1034, 1082, 1063, 2140, 1080, 1092, 1087, 1109, 1097,
     1095, 1115, 1106, 2119, 2111, 1111, 1132, 1110, 1123, 2095,
     1146, 1137,  978,  910, 1170,  981, 1179, 1157, 1187,  982,

     1197, 1184, 2067, 1201, 1205, 2051, 1208, 1210, 4568, 1218,
     2035, 4568, 1221, 2033, 2022, 1229, 4568, 1985, 4568, 1231,
     1226, 1239, 1236, 1247, 1249, 1257, 1244, 1265, 1274, 1288,
     1296, 1341, 1299, 1254, 1308, 1315, 1323, 1262, 1331, 1300,
     1356, 1359, 1320, 1968, 1367, 1369, 1382, 1949, 1328, 1390,
     1940, 1364, 4568, 1394, 1402, 1907, 1292, 4568, 4568, 1410,
     4568, 1899, 1413, 1888, 1372, 1417, 1425, 1422, 1433, 1436,
     1444, 1887, 4568, 1448, 4568, 1457, 1471, 1472,  653, 1475,
     1483, 1486, 1498, 1499, 1506, 1507, 1514, 1523, 1532, 1535,
     1543, 1133, 1334, 1203, 1514, 1499, 1475, 1538, 1535, 1267,

     1524,  761,  777, 1550, 1551, 1428, 1552, 1553, 1222, 1540,
     1440, 1563, 1867, 1558, 1564, 1565, 1865, 1566, 1578, 1574,
     1468, 1588, 1577, 1589, 1747, 1596, 1592, 1597, 1598, 1607,
     1140, 1611, 1619, 1599, 1613, 1623, 1621, 1615, 4568, 1627,
     1746, 1660, 1522, 1650, 1661, 1398,  117, 1676, 1743, 1686,
     1742, 1672, 1690, 1693, 1697, 4568, 1700, 4568, 1702, 1703,
     1711, 1714, 1706,  127, 1716, 1719, 1722, 1682, 1726, 1729,
     1732, 1735, 1738, 1748, 1751, 1754, 1739, 1764,  168, 1768,
     1679, 1772, 1755, 1776,  512, 1779, 1669, 1783, 1668, 1787,
     1790, 1794, 1664, 1797, 4568, 1800, 1657, 4568, 1803, 1644,

     1807, 4568,  612, 1645, 1810, 1583, 1814, 1817, 1821, 1824,
     1829, 1843, 1844, 1847, 1855, 1852, 1533, 1860,  701, 1863,
     1525, 1515, 1871, 1874,  661, 1875, 1883, 1886, 1889, 1894,
     1897, 1902, 1905, 1913, 1916, 1923, 1894, 1498, 1914, 1922,
     1902, 1625, 1923, 1886, 1926, 1918, 1932,  849, 1141, 1919,
     1941, 1946, 1937, 1491, 1949, 1944, 1963, 1953, 1964, 1968,
     1965, 1974, 1971, 1977, 1987, 1988, 1989, 1991, 1478, 1998,
     1429, 2001, 2013, 1990, 2017, 2000, 2016, 2027, 2039, 2005,
     2011, 1418, 2056, 2060, 2078, 2061, 2086, 2088, 2099, 2075,
     2083, 2103, 2111, 2115, 2118, 2119, 2127, 2130, 2138, 2140,

     2148, 2135, 2145, 2156, 2159, 2167, 2169, 2177, 2180, 2185,
     2184, 2193, 2196, 2204, 2201, 2208, 2212, 2215, 2223, 2220,
     2227, 2235, 2232, 2243, 2246, 2254, 2257, 4568, 2259, 2262,
     2264, 2272, 2276, 2284, 2293, 2307, 2308, 2281, 2316, 2319,
     2328, 2324, 2336, 2339, 2340, 2348, 4568, 1427, 4568, 2359,
     1419, 2350, 2362, 2370, 2367, 1414, 2378, 2380, 2388, 1416,
     2375, 2391, 2396, 2399, 2404, 2407, 2414, 2415, 2033, 2038,
     2131, 2081, 2407, 2414, 1395, 1394, 2343, 2341, 1202, 1092,
     2411, 2383, 2412, 1374, 2371, 2415, 2416, 2216, 2426, 1373,
     2418, 2422, 2434, 2437, 2458, 2451, 2439, 2446, 2465, 1365,

     2460, 2438, 1364, 2467, 1351, 2141, 2472, 2473, 2474, 1324,
     2475, 2480, 1439, 2483, 2477, 2511, 2512, 2523, 2514, 2537,
     2539, 2547, 1333, 2527, 2555, 2544, 2559, 4568, 2563, 2571,
     2575, 2583, 2587, 2590, 2591, 2599, 2602, 2610, 2612, 2620,
     1325, 2607, 2628, 2617, 2632, 4568, 2636, 2644, 2648, 2656,
     2660, 2663,  965, 2670, 2667, 2678, 2681, 2689, 2692, 2668,
     2700, 2703, 2704, 2712, 2715, 2723, 2725, 2733, 1317, 2720,
     2741, 2744, 2730, 2752, 2760, 2749, 2764, 2767, 2775, 4568,
     2778, 2786, 2794, 2798, 2806, 2810, 2814, 2817, 2783, 2825,
     2822, 2833, 2836, 2844, 2847, 2856, 2870, 2871, 2874, 2882,

     2879, 2891, 2887, 2899, 1316, 2902, 2910, 2907, 2918, 4568,
     2922, 2930, 2934, 2942, 2945, 2946, 2954, 2957, 2965, 2967,
     2975, 1309, 2962, 2983, 2972, 2987, 4568, 2991, 1302, 2999,
     4568, 3002, 3007, 3010, 3015, 3018, 3023, 2530, 3010, 2554,
     2582, 2652, 2789, 1291, 1257, 1624, 4568, 2663, 3014, 3019,
     2555, 3020, 2829, 3002, 3018, 3027, 3023, 2726, 3032, 3037,
     3039, 2938, 3045, 2592, 1201, 1200, 3058, 3015, 3059, 1836,
     3061, 3070, 2725, 3046, 3072, 3071, 3093, 1192, 3108, 4568,
     3119, 1189, 3127, 4568, 3130, 1181, 3138, 4568, 3141, 1171,
     3149, 4568, 3085, 1060, 3152, 3110, 3160, 1063, 3096, 3168,

     3171, 3176, 3179, 3105, 3157, 1034, 3184, 3192,  984, 3183,
     3200, 3208,  983, 3212, 4568, 3220,  972, 3228,  940, 3232,
     4568, 3236, 4568, 3244,  930, 3248, 4568, 3256,  915, 3260,
     4568, 3268,  892, 3272, 4568, 3280,  842, 3284, 4568, 3292,
      841, 3296, 4568, 3299, 3304, 3307, 3312, 3317, 3212,  822,
      799, 3035,  790, 2947, 1810, 3304, 3168, 3299,  775,  752,
     3312, 3313, 3316,  735, 3275, 3319,  704, 3192, 3320,  703,
     3308, 3183,  692, 3322, 3327, 3325,  670,  659, 3332, 3333,
      648, 3340, 3356, 3374, 4568, 3383,  603, 3363, 4568, 3387,
     3395,  598, 3392,  595,  550,  515,  499, 4568, 3403,  479,

     3406, 3411, 3367, 3378, 3395, 1116, 3388, 3402, 3123, 3406,
     3407, 3404, 3410, 3414, 3419,  468, 3420, 3421, 3416, 3432,
     3412,  460,  451,  439, 3479, 4568, 3482, 4568, 3467, 3452,
     3444,  438, 3460, 2079, 3464, 3472, 3474, 3479, 3486,  426,
      386, 3481, 3483, 3490, 3492, 3491, 3347, 3497, 3510, 3495,
      376, 2076,  365, 3475, 3511,  348,  302,  293,  236,  213,
     3503, 3522, 3520, 3517, 3524, 4568,  176, 3526,  169, 3530,
     3529, 3540, 3532, 3551,  159, 3543, 3554, 3552,  148,   36,
     3553, 3572,   24,   19, 4568, 3620, 3625, 3630, 3635, 3640,
     3645, 3650, 3655, 3657, 3661, 3666, 3671, 3676, 3681, 3686,

     3691, 3696, 3701, 3704, 3707, 3711, 3716, 3721, 3726, 3731,
     3736, 3741, 3746, 3751, 3756, 3761, 3766, 3771, 3776, 3781,
     3786, 3791, 3796, 3801, 3806, 3811, 3816, 3821, 3826, 3831,
     3836, 3841, 3846, 3851, 3856, 3861, 3866, 3871, 3876, 3881,
     3886, 3891, 3896, 3901, 3906, 3911, 3916, 3921, 3926, 3931,
     3936, 3941, 3946, 3951, 3956, 3961, 3966, 3971, 3976, 3981,
     3986, 3991, 3996, 4001, 4006, 4011, 4016, 4021, 4023, 4028,
     4033, 4038, 4043, 4048, 4053, 4058, 4063, 4068, 4073, 4078,
     4083, 4088, 4093, 4098, 4103, 4108, 4113, 4118, 4123, 4128,
     4133, 4138, 4143, 4148, 4153, 4158, 4163, 4168, 4173, 4178,

     4183, 4188, 4193, 4198, 4203, 4208, 4213, 4218, 4223, 4228,
     4233, 4238, 4243, 4248, 4253, 4258, 4263, 4268, 4273, 4278,
     4283, 4288, 4293, 4298, 4300, 4305, 4310, 4315, 4320, 4325,
     4330, 4335, 4340, 4345, 4350, 4355, 4360, 4365, 4370, 4375,
     4380, 4385, 4390, 4395, 4400, 4405, 4410, 4415, 4420, 4425,
     4430, 4435, 4440, 4445, 4450, 4455, 4460, 4462, 4467, 4472,
     4477, 4482, 4487, 4492, 4497, 4502, 4507, 4512, 4517, 4522,
     4527, 4532, 4537, 4542, 4547, 4552, 4557, 4562
    } ;

static yyconst flex_int16_t yy_def[1279] =
    {   0,
     1086, 1086, 1087, 1087,    2,    5, 1088, 1088, 1089, 1089,
     1090, 1090, 1090, 1090, 1090, 1090, 1091, 1091, 1092, 1093,
     1085, 1085, 1085, 1085, 1085, 1085, 1094, 1085, 1085, 1095,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1096, 1085, 1097, 1098, 1099, 1100, 1101, 1102, 1099, 1101,
     1085, 1085, 1085, 1094, 1103, 1104, 1105, 1095, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1096, 1085, 1106, 1107, 1108,
     1109, 1098, 1107, 1110, 1111, 1112, 1107, 1113, 1114, 1115,
     1116, 1113, 1114, 1117, 1118, 1119, 1120, 1120, 1121, 1122,
     1120, 1123, 1112, 1112, 1112, 1112, 1112, 1085, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1085, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1124, 1125, 1126, 1107, 1127, 1121, 1125, 1117, 1128,
     1126, 1126, 1121, 1128, 1126, 1110, 1117, 1129, 1111, 1111,
     1121, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1133, 1131,

     1136, 1134, 1107, 1137, 1138, 1135, 1135, 1121, 1139, 1135,
     1117, 1085, 1136, 1136, 1085, 1136, 1132, 1132, 1121, 1136,
     1132, 1140, 1121, 1141, 1140, 1140, 1121, 1142, 1141, 1085,
     1141, 1140, 1121, 1143, 1144, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1085, 1085, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1145, 1146, 1147, 1146, 1148, 1147, 1147, 1148,

     1147, 1149, 1117, 1142, 1121, 1121, 1148, 1148, 1085, 1148,
     1121, 1085, 1147, 1121, 1129, 1129, 1085, 1121, 1085, 1150,
     1151, 1152, 1151, 1153, 1152, 1152, 1153, 1152, 1154, 1155,
     1156, 1154, 1155, 1157, 1158, 1156, 1156, 1159, 1156, 1153,
     1153, 1153, 1157, 1117, 1160, 1158, 1158, 1121, 1160, 1158,
     1121, 1159, 1085, 1159, 1156, 1121, 1085, 1085, 1085, 1153,
     1085, 1121, 1152, 1121, 1161, 1162, 1161, 1162, 1162, 1161,
     1161, 1142, 1085, 1162, 1085, 1163, 1164, 1164, 1165, 1166,
     1167, 1168, 1168, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,

     1169, 1085, 1085, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1085, 1169,
     1169, 1170, 1171, 1172, 1171, 1173, 1172, 1172, 1173, 1172,
     1173, 1173, 1173, 1172, 1142, 1085, 1173, 1085, 1174, 1175,
     1176, 1175, 1177, 1176, 1176, 1177, 1176, 1177, 1177, 1177,
     1176, 1174, 1178, 1179, 1174, 1178, 1180, 1181, 1179, 1179,
     1182, 1179, 1180, 1183, 1181, 1181, 1183, 1181, 1182, 1182,
     1179, 1177, 1183, 1183, 1085, 1183, 1121, 1085, 1181, 1121,

     1182, 1085, 1184, 1185, 1184, 1185, 1185, 1184, 1185, 1184,
     1186, 1187, 1187, 1188, 1189, 1188, 1190, 1191, 1189, 1189,
     1121, 1191, 1189, 1192, 1193, 1194, 1195, 1192, 1192, 1174,
     1174, 1174, 1174, 1174, 1174, 1192, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1085, 1085, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1196, 1197, 1198, 1197, 1199, 1198, 1198, 1199,
     1199, 1199, 1198, 1199, 1200, 1201, 1202, 1201, 1203, 1202,

     1202, 1203, 1203, 1203, 1202, 1203, 1204, 1205, 1204, 1206,
     1207, 1208, 1209, 1209, 1210, 1207, 1211, 1208, 1208, 1211,
     1210, 1209, 1211, 1211, 1208, 1210, 1211, 1085, 1212, 1213,
     1213, 1212, 1213, 1212, 1214, 1215, 1215, 1216, 1217, 1216,
     1218, 1217, 1217, 1218, 1218, 1218, 1085, 1219, 1085, 1217,
     1219, 1220, 1221, 1222, 1221, 1223, 1224, 1222, 1222, 1219,
     1224, 1200, 1220, 1200, 1200, 1200, 1200, 1200, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1085, 1085,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,

     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1226, 1227, 1228, 1227, 1229,
     1228, 1228, 1219, 1229, 1228, 1229, 1229, 1085, 1229, 1228,
     1229, 1228, 1229, 1200, 1230, 1231, 1230, 1232, 1231, 1231,
     1219, 1232, 1231, 1232, 1232, 1085, 1232, 1231, 1232, 1231,
     1232, 1204, 1233, 1204, 1234, 1235, 1236, 1236, 1237, 1238,
     1239, 1240, 1241, 1242, 1241, 1243, 1242, 1242, 1219, 1243,
     1242, 1244, 1245, 1244, 1244, 1245, 1245, 1243, 1243, 1085,
     1243, 1242, 1244, 1243, 1242, 1245, 1243, 1246, 1247, 1246,
     1247, 1247, 1246, 1247, 1246, 1248, 1249, 1249, 1250, 1251,

     1250, 1252, 1251, 1251, 1219, 1252, 1251, 1252, 1252, 1085,
     1252, 1251, 1252, 1251, 1253, 1254, 1255, 1254, 1256, 1255,
     1255, 1219, 1256, 1255, 1256, 1256, 1085, 1256, 1219, 1255,
     1085, 1257, 1253, 1257, 1257, 1257, 1257, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1085, 1085, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1259, 1219, 1260, 1085,
     1259, 1219, 1260, 1085, 1261, 1219, 1262, 1085, 1261, 1219,
     1262, 1085, 1263, 1264, 1265, 1266, 1266, 1219, 1267, 1266,

     1268, 1268, 1268, 1269, 1270, 1271, 1272, 1272, 1219, 1265,
     1272, 1273, 1219, 1274, 1085, 1273, 1219, 1275, 1219, 1276,
     1085, 1274, 1085, 1277, 1219, 1278, 1085, 1251, 1219, 1252,
     1085, 1251, 1219, 1252, 1085, 1255, 1219, 1256, 1085, 1255,
     1219, 1256, 1085, 1257, 1253, 1257, 1253, 1253, 1258, 1258,
     1258, 1258, 1258, 1258, 1085, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1265, 1265, 1085, 1265, 1219, 1267, 1085, 1267,
     1266, 1219, 1269, 1271, 1271, 1271, 1219, 1085, 1272, 1219,

     1257, 1257, 1258, 1258, 1258, 1085, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1265, 1085, 1267, 1085, 1257, 1253,
     1258, 1258, 1258, 1085, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1253, 1258,
     1258, 1085, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1085, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258,    0, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085
    } ;

static yyconst flex_uint16_t yy_nxt[4636] =
    {   0,
       22,   22,   23,   24,   22,   22,   22,   22,   22,   25,
       22,   22,   22,   26,   22,   22,   46,   50,   46,   50,
       71,   54,   54,   47,   48,   47,   48,   75,   55,   55,
       72,   76,   77,   75,   56,   56,  105,  124,   75,   75,
       28,   22,   22,  125,   71,   54,   54,  176,   75,   75,
       75,  177,   55,   55,   72,   51,   52,   51,   52,   57,
       57,   81,  318,  105,  192,   87,   22,   22,   22,   29,
       24,   22,   22,   22,   22,   22,   25,   22,   22,   22,
       26,   22,   22,   57,   57,   75,   54,   81,   58,   58,
       58,   87,   75,   55,   76,   77,   58,  109,   99,  110,

      402,   90,   75,  111,  179,  187,   91,   28,   22,   22,
      180,  188,   75,   54,   75,   58,   58,   58,  176,  311,
       55,  590,  177,   58,   57,   99,  402,   90,   95,  362,
       96,  602,   91,   22,   22,   22,   23,   24,   22,   22,
       22,   22,   22,   25,   22,   22,   22,   26,   22,   22,
       58,   57,   75,   75,   95,   79,   96,  113,  117,  114,
      119,  176,   75,  115,  126,  177,   88,   75,   89,  143,
      351,   80,  615,   75,   28,   22,   22,   58,  128,  129,
      128,  130,   79,   75,   75,  131,  190,  191,  190,  192,
       75,   92,   88,   75,   89,  144,  143,   80,   93,   94,

       22,   22,   22,   29,   24,   22,   22,   22,   22,   22,
       25,   22,   22,   22,   26,   22,   22,   75,   92,   75,
       75,   75,  144,   75,   93,   94,   75,   75,   75,  100,
      102,   75,   75,  145,  146,   97,   75,  103,   98,  139,
       75,   28,   22,   22,  101,  140,  104,  141,  160,   75,
       75,  142,   75,   75,  157,  158,  100,  102,   75,  145,
      146,   97,  147,  103,   98,  139,  159,   22,   23,  163,
      101,  140,  104,  141,  160,   75,  164,  142,  168,  403,
      157,  158,   31,   32,   33,   34,   35,   36,   75,  147,
       37,  258,  159,   38,   39,  163,   75,   40,   41,   42,

       43,  162,  164,   44,  176,  168,  403,   75,  177,   31,
       32,   33,   34,   35,   36,   75,   75,   37,  258,   38,
       39,  152,   75,   40,   41,   42,   43,  154,  162,   44,
       64,   65,   66,   67,  153,   75,   68,   75,  148,   67,
       75,   69,  155,  156,  149,  161,   70,   67,  152,   75,
       75,  165,   75,  166,  154,  245,  169,   75,  171,   75,
      153,  150,   75,  151,  305,  306,  305,  228,  155,  156,
      167,  149,  161,   70,   67,   75,  170,   82,  165,   75,
      166,  245,   75,  169,   83,  171,  248,  150,   84,  151,
       75,   85,  109,   86,  173,  113,  167,  114,  174,   75,

       75,  115,  170,  124,   82,  182,  183,  182,  184,  201,
      124,   83,  185,  248,   84,  257,  201,   85,   75,   86,
      116,  116,  117,  118,  119,  116,  116,  259,  121,  116,
      116,  116,  116,  122,  116,  116,  117,  203,  194,  204,
       75,  257,  195,  205,  207,  208,  207,  209,  214,  215,
      214,  210,   75,   75,  259,  216,  218,  219,  218,  220,
      116,  116,  223,  221,  224,   75,   75,  230,  225,  226,
      129,  226,  224,  231,   75,  179,  225,  232,  233,  232,
      224,  297,   75,  228,  225,  251,  116,  116,  116,  117,
      122,  119,  116,  116,   75,  126,  116,  116,  116,  116,

      122,  116,  116,  228,   75,   75,  117,  117,  194,  194,
      249,  251,  195,  195,  497,  278,  620,  996,   75,  117,
      238,  194,  252,  255,  117,  195,  194,  116,  116,  117,
      195,  194,  236,   75,  239,  195,  240,  249,  237,  281,
      244,  278,  256,  246,   75,  241,  242,  238,  252,  247,
      255,  243,  996,  116,  132,  117,  132,  119,  236,   75,
      239,  126,  250,  240,  237,  281,   75,  244,  256,  133,
      246,  241,  242,   75,   75,  247,  276,   75,  243,  253,
      134,  277,   75,  135,   75,  136,  254,  260,  250,  109,
      261,  294,  137,  303,  176,  295,  133,  996,  177,  304,

      274,   75,  228,  276,   75,  253,  134,  228,  277,  135,
      279,  136,  254,  260,  223,  275,  630,  261,  137,  193,
      193,  117,  196,  194,  193,  193,  274,  198,  193,  193,
      193,  193,  199,  193,  193,   75,   75,  279,   75,   75,
      282,  275,   75,  179,  283,  280,   75,  312,  284,  297,
       75,  285,  287,  310,  290,   75,  291,  176,   75,  193,
      193,  177,   75,   75,   75,  176,  393,  282,  311,  177,
      300,  283,  280,   75,  301,  284,  286,  285,  288,  287,
      290,  292,  289,  291,   75,  193,  193,  193,  117,  199,
      194,  193,  193,  393,  195,  193,  193,  193,  193,  199,

      193,  193,  286,  648,  288,  644,   75,  292,  289,  299,
      183,  299,  300,  308,  309,  308,  301,   75,   75,  187,
      310,  299,  183,  299,  300,  188,  193,  193,  301,  313,
      314,  313,  300,  316,  317,  316,  301,  190,  191,  190,
      192,  117,  124,  321,  203,  124,  334,  322,  324,   75,
      335,  324,  193,  193,  234,  117,  234,  194,  193,  193,
      193,  195,  193,  193,  193,  193,   75,  193,  193,  326,
      219,  326,  327,  357,  358,  357,  328,  337,  208,  337,
      338,  341,  215,  341,  339,  203,  344,  334,  342,   75,
      548,  335,  345,  193,  193,  193,  347,  348,  347,  349,

      351,  549,  338,  350,   75,  353,  339,  337,  208,  337,
      338,  354,  359,   75,  339,  362,  548,  327,  342,  193,
       75,  328,  262,  263,  264,  265,  266,  267,  549,  359,
      268,  341,  215,  341,  269,  342,   75,  270,  342,  271,
      272,  230,  223,  273,  366,  228,  228,  369,  367,  262,
      263,  264,  265,  266,  267,  230,  379,  268,  380,   75,
      269,  369,  381,  270,   75,  271,  272,  679,  394,  273,
      320,  320,  117,  329,  321,  320,  320,  392,  331,  320,
      320,  320,  320,  332,  320,  320,  355,  356,  355,  338,
      360,  361,  360,  339,  679,  394,  228,  342,  326,  219,

      326,  327,   75,  392,  397,  328,  363,  364,  363,  327,
      320,  320,  179,  328,  370,  233,  370,  366,  446,  228,
       75,  367,  371,  129,  371,  366,  374,  375,  374,  367,
       75,  397,  395,  369,  228,  396,  320,  320,  320,  117,
      332,  321,  320,  320,  228,  322,  320,  320,  320,  320,
      332,  320,  320,  370,  233,  370,  366,  117,  395,  321,
      367,   75,  396,  322,   75,  117,  117,  321,  321,  176,
      407,  322,  322,  177,  399,  383,  228,  320,  320,  117,
      109,  321,  443,  179,  312,  322,  444,  228,  228,  446,
      453,  382,  117,  117,  321,  321,  384,  407,  322,  322,

      399,  386,  383,  320,  320,  376,  117,  376,  321,  320,
      320,  320,  322,  320,  320,  320,  320,  382,  320,  320,
       75,   75,  384,  385,  117,  389,  321,  117,  386,  321,
      322,  401,  117,  322,  321,   75,  996,  400,  322,  398,
       75,   75,   75,   75,  320,  320,  320,   75,   75,  385,
      387,  389,   75,  388,  405,  404,  411,  391,  401,  390,
      412,   75,  406,   75,  400,  398,  410,  228,  212,   75,
      320,  408,   75,  423,   75,   75,  387,   75,  414,  388,
      405,  404,  411,  391,  409,  390,  412,  420,  413,  406,
      415,  419,  410,   75,   75,  416,   75,   75,  408,  423,

      417,   75,  425,  421,  414,  424,   75,  426,  418,   75,
      409,   75,  847,  420,  413,  431,  415,  419,  422,  428,
       75,  416,  432,   75,   75,   75,  427,  417,  425,   75,
      421,  429,  424,  426,  418,  433, 1034,   75,  434,  847,
      437,  430,  431,  435,  422,  428,   75,   75,  432,  537,
      436,   75,  427,  438,   75,  439,  574,  441,  429,  311,
       75,  449,  433, 1034,  434,  450,  437,  430,  680,  435,
      440,  448,  183,  448,  449,  228,  537,  436,  450,  438,
      452,  309,  452,  574,  441,  228,  303,  453,  448,  183,
      448,  449,  304,  228,  680,  450,  228,  440,  454,  314,

      454,  449,  455,  456,  455,  450,  305,  306,  305,  228,
      312,  452,  309,  452,   75,   75,  453,   75,  453,  457,
      458,  457,  454,  314,  454,  449,  453,  539,  124,  450,
      316,  317,  316,  117,  463,  460,   75,  846,  124,  461,
      465,  219,  465,  466,  463,  555,  359,  467,  469,  215,
      469,  362,  470,  466,  539,  470,  344,  467,  465,  219,
      465,  466,  484,  846,  353,  467,  471,  364,  471,  466,
      490,   75,  555,  467,  459,  459,  117,  472,  460,  459,
      459,   75,  474,  459,  459,  459,  459,  475,  459,  459,
      203,  546,  477,  357,  358,  357,  478,  480,  208,  480,

      481,  203,  359,  477,  482,   75,  228,  478,  470,  486,
      348,  486,  487,  228,  459,  459,  488,  351,  546,  481,
      228,  228,  344,  482,  480,  208,  480,  481,  484,  228,
      498,  482,  491,  356,  491,  481,  496,  228,   75,  482,
      459,  459,  459,  117,  475,  460,  459,  459,   75,  461,
      459,  459,  459,  459,  475,  459,  459,  469,  215,  469,
      492,  361,  492,  538,  470,   75,  353,  470,  494,  495,
      494,  497,  490,  487,  223,  496,  504,  488,   75,   75,
      505,  459,  459,  486,  348,  486,  487,   75,   75,  538,
      488,  499,  500,  499,  487,  501,  502,  501,  488,  592,

      309,  592,  490,  491,  356,  491,  481,  459,   75,   75,
      482,  492,  361,  492,  471,  364,  471,  466,  470,  230,
      228,  467,  212,  228,  230,  507,  508,  233,  508,  504,
      507,  228,   75,  505,  509,  375,  509,  508,  233,  508,
      504,  507,   75,   75,  505,  510,  129,  510,  504,  509,
      375,  509,  505,   75,   75,  552,  507,  459,  511,  117,
      511,  460,  459,  459,  459,  461,  459,  459,  459,  459,
      557,  459,  459,  379,  379,  514,  514,  517,  874,  515,
      515,  552,   75,  518,  520,  521,  520,  522,  525,   75,
      526,  523,   75,  542,  527,  565,  557,  459,  459,  459,

      525,  117,  526,  460,  874,   75,  527,  461,  117,  117,
      460,  460,   75,   75,  461,  461,  117,  649,  460,  541,
      542,  565,  461,  459,  179,  117,  529,  460,   75,  228,
      587,  461,  528,  540,  117,  530,  460,  117,   75,  460,
      461,  212,  547,  461,  531,  117,  541,  460,  533,   75,
      532,  461,   75,  529,   75,  545,  534,  543,  528,  535,
      540,  530,  544,  536,   75,   75,   75,   75,  550,  547,
      531,  551,   75,  556,  554,  533,  532,   75,   75,   75,
       75,  553,  545,  534,  543,  230,  535,  558,   75,  544,
      536,   75,   75,  559,  561,  550,  560,  563,  551,  556,

      562,  554,   75,   75,  564,  566,   75,  553,  567,  568,
       75,   75,   75,   75,  558,  577,  570,  571,  572,  559,
      561,   75,  560,  569,  563,   75,  562,   75,  573,   75,
      564,  575,  566,   75,  567,   75,  568,   75,  576,   75,
      580,   75,  577,  570,  571,  572,  578,  230,  228,  569,
      581,  589,  183,  589,  590,  573,  955,  579,  575,  673,
      582,  228,  109,  179,  584,  576,  498,  580,  585,  587,
      353,  498,  578,  592,  309,  592,  581,  589,  183,  589,
      590,  353,  955,  579,  359,  673,  582,  593,  314,  593,
      590,  594,  458,  594,  593,  314,  593,  590,  455,  456,

      455,  594,  458,  594,  117,  124,  596,  604,  215,  604,
      597,  599,  601,  219,  601,  602,  124,  601,  219,  601,
      602,  359,  599,  605,  364,  605,  602,  604,  215,  604,
      606,  361,  606,  605,  364,  605,  602,  117,  607,  596,
      203,  344,  611,  608,  312,  312,  612,  617,  609,  614,
      208,  614,  615,  117,  609,  596,  203,  344,  611,  597,
       75,   75,  612,  617,  609,  619,  348,  619,  620,  614,
      208,  614,  615,  622,  356,  622,  615,  624,  495,  624,
      619,  348,  619,  620,  625,  500,  625,  620,  626,  502,
      626,  622,  356,  622,  615,  606,  361,  606,  624,  495,

      624,  627,  628,  627,  625,  500,  625,  620,  626,  502,
      626,  632,  233,  632,  630,  633,  375,  633,  632,  233,
      632,  630,  633,  375,  633,  634,  129,  634,  630,  595,
      635,  117,  635,  596,  595,  595,  595,  597,  595,  595,
      595,  595, 1006,  595,  595,  379,  379,  638,  638,  517,
       75,  639,  639,  976,  517,  641,  643,  521,  643,  644,
      641,  646,  647,  646,  643,  521,  643,  644, 1006,  595,
      595,  595,  650,  651,  650,  644,  525,  656,  653,   75,
      976,   75,  654,  657,  659,  660,  659,  661,  525,  373,
      653,  525,  228,  653,  654,  595,  117,  654,  596,  117,

       75,  596,  597,  228,  117,  597,  596,  117,   75,  596,
      597,  228,  669,  597,  662,  117,   75,  596,  117,  675,
      596,  597,  664,  672,  597,  525,  663,  653,   75,  665,
      670,  654,   75,   75,  668,  666,   75,   75,  671,  669,
       75,  662,  667,  674,  228,  675,   75,  677,  678,  664,
      672,   75,  663,  228,  681,   75,  665,  670,   75,  682,
       75,  668,  666,   75,  676,  671,  684,   75,  667,  686,
      674,  685,  683,  677,  687,  678,  212,   75,   75,   75,
      681,  688,   75,  692,  691,   75,  682,  689,   75,  228,
      676,   75,  690,  684,  693,  695,  686,  685,  683,  696,

      687,   75,   75,   75,   75,   75,  694,  697,  688,  700,
      692,  691,   75,  689,   75,   75,  698,  705,  690,   75,
      699,  693,  695,  701,  319,   75,  696,   75,  702,  704,
       75,   75,  694,  703,  697,  709,  700,  228,  706,  228,
      714,   75,  698,  705,  710,  715,  699,   75,  707,  701,
      708,  711,   75,   75,  702,  228,  704,  712,  109,  703,
      717,  709,  179,  179,  718,  706,  714,  838,  720,  720,
      710,  715,  839,  713,  707,  212,  708,  312,  711,  722,
      723,  722,  724,  729,  712,  312,  725,  727,  728,  727,
      311,  729,  724,  838,  729,   75,  725,  841,  839,  713,

      730,  183,  730,  724,  731,  309,  731,  725, 1052,   75,
     1066,  729,  732,  314,  732,  724,  733,  458,  733,  725,
      117,  124,  735,  729,  841,   75,  736,  738,  740,  741,
      740,  742,  124,   75, 1052,  743, 1066,  359,  738,  745,
      746,  745,  362,  747,  742,   75,  747,  359,  743,  748,
      219,  748,  742,  747,   75,   75,  743,  749,  215,  749,
      750,  364,  750,  742,  747,  840,  228,  743,  751,  361,
      751,  753,  754,  755,  373,  747,  868,  756,  758,  759,
      758,  760,  753,  228,  755,  743,  344,  203,  761,  763,
      228,  840,  766,  764,  768,  769,  768,  770,  351,  228,

      773,  771,  868,  353,  774,  775,  208,  775,  773,  777,
      344,  212,  774,  779,  780,  779,  766,  497,  228,  770,
      781,  319,  498,  771,  782,  348,  782,  770,  781,  353,
       75,  771,  228,  212,  498,  777,  783,  356,  783,  773,
      781,  228,  854,  774,  784,  495,  784,  785,  500,  785,
      770,  781,  212,  228,  771,  786,  502,  786,  787,  628,
      787,  223,  777,  789,  230,  781,  230,  790,  854,  212,
      792,  107,  792,  793,  233,  793,  789,  794,  375,  794,
      790,   75,   75,  517,  792,  795,  129,  795,  789,  802,
       77,   75,  790,  734,  796,  117,  796,  735,  734,  734,

      734,  736,  734,  734,  734,  734,   73,  734,  734,  379,
      379,  799,  799,  107,   75,  800,  800,  804,  805,  804,
      806,  517,   73, 1085,  807,   62,  648,  802,  806,  809,
      810,  809,  807,  734,  734,  734,  811,  812,  521,  812,
      806,  649,  649,   60,  807,   60,   29,  811,  811,  813,
      647,  813,  525, 1085,  816,   75,  811,   75,  817,  734,
      814,  651,  814,  806,  656, 1085, 1085,  807,  845,  656,
      819,  821,  822,  821,  823,  819,  844,  831,  824,  826,
      827,  826,  829,  828,  823,   75,  828,  851,  824,  830,
      660,  830,  823,  117,  845,  735,  824,   75,  525,  736,

      816,  117,  844,  735,  817, 1085,  117,  736,  735,  117,
     1085,  735,  736,  849,  851,  736,  117,  117,  735,  735,
      832,   75,  736,  736, 1085,   75,   75,  842,   75,   75,
       75,  837,   75,  834,  853,  843,   75,  833, 1085,  849,
       75, 1085,  835,  848,  850,  856,  832,  852,   75,  836,
      855,   75,   75,   75,  842, 1085,  857,  862,  837,  834,
       75,  853,  843,  833,  859,   75,  858,  866,  835,  848,
      850,  856,   75,  852,   75,  836,  863,  855,  860,   75,
      865,   75,  857,  861,  862,  867,   75,   75,   75,   75,
      859,   75,  858,  866,   75,  864,  873,   75, 1085, 1085,

     1085,  876,  863, 1085,  869,  860,  871,  865,  870,  861,
      875,  872,  867,  109,  179,  717,  179, 1085, 1085,  718,
      720,  864,  720,  873,  877,  878,  877,  724,  876,  312,
      869,  725,  871, 1085,  870,  729,  875,  872,  879,  880,
      879,  311, 1085,  724,   75,  729,  312,  725,  722,  723,
      722,  724,  729, 1085,  949,  725,  881,  882,  881,  724,
      727,  728,  727,  725,  883,  884,  883,  729,   75,   75,
      951,  729,  730,  183,  730,  724,  731,  309,  731,  725,
     1085,  949,  959,  729,  732,  314,  732,  724,  733,  458,
      733,  725,  117,  124,  735,  729,   75,  951,  736,  738,

      885,  886,  885,  742,  124, 1085,   75,  743,  959,  359,
      738,  887,  888,  887,  362,  747,  742,  952,  747,  359,
      743,  740,  741,  740,  742,  747, 1085,  972,  743,  889,
      890,  889,  742,  745,  746,  745,  743,  891,  892,  891,
      747, 1085, 1085,  952,  747,  748,  219,  748,  742,  749,
      215,  749,  743,  972, 1085, 1085,  747,  750,  364,  750,
      742,  751,  361,  751,  743,  753,   75,  755,  747,  894,
      906,  761,  753,  754,  755,  895,  747,   75,  756,  897,
      898,  897,  899,  901,  953,  760,  900, 1085, 1085,  743,
      758,  759,  758,  760,  903,  956,  904,  743, 1085, 1085,

      227,  908,  909,  908,  910,  203,  344,  763,  911, 1085,
      953,  764,  766,  912,  913,  912,  770,  344, 1085, 1085,
      771,  956,  498,  766,  914,  915,  914,  497,  781,  770,
     1085,  781,  353,  771,  768,  769,  768,  770,  777,   75,
       75,  771,  916,  917,  916,  770,  351,  966,  773,  771,
     1085,  353,  774,  918,  919,  918,  773,  777,  979, 1085,
      774,  775,  208,  775,  773,  920,  921,  920,  774,  498,
     1085, 1085,  777, 1085,  966,  781,  779,  780,  779,  922,
      923,  922, 1085,  781,  979,  230,  781,  782,  348,  782,
      770,  792, 1085, 1085,  771,  783,  356,  783,  773,  784,

      495,  784,  774,   75, 1085,  954,  781,  785,  500,  785,
      770,  786,  502,  786,  771,  787,  628,  787,  777,  223,
     1085,  789,  781, 1085,  230,  790,  924,  925,  924,  789,
      792, 1085,  954,  790,  926,  927,  926,  793,  233,  793,
      789,  792, 1085,   75,  790,  794,  375,  794,  795,  129,
      795,  789,  792,  961, 1085,  790,  734,  796,  117,  796,
      735,  734,  734,  734,  736,  734,  734,  734,  734, 1085,
      734,  734,  379,  379,  799,  799,  517, 1085,  800,  800,
      961,  517,  802,  928,  929,  928,  806,  802, 1085,  648,
      807,  806,  930,  931,  930,  807,  734,  734,  734,  811,

      804,  805,  804,  806,  649, 1085, 1085,  807, 1085,  649,
      811,  932,  933,  932,  806,  811, 1085, 1085,  807,  809,
      810,  809,  734,  934,  935,  934,  811, 1085, 1085, 1085,
      811,  812,  521,  812,  806,  813,  647,  813,  807, 1085,
     1085, 1085,  811,  814,  651,  814,  806,  525,  656,  816,
      807, 1085,   75,  817,  819,  936,  937,  936,  823,  656,
     1085,   75,  824, 1085,  831,  819,  938,  939,  938,  829,
      828,  823,  970,  828,  831,  824,  821,  822,  821,  823,
      828, 1085, 1005,  824,  940,  941,  940,  823,  826,  827,
      826,  824,  942,  943,  942,  828, 1085, 1085,  970,  828,

      830,  660,  830,  823,  117, 1085,  735,  824, 1005,  525,
      736,  816,  117, 1085,  735,  817,   75,  117,  736,  735,
      117,  962,  735,  736,   75,  117,  736,  735,   75,   75,
      950,  736,   75,   75,   75,  944,  963,   75,  947,  958,
      960,   75,  957,  945,  974,  946,   75,  965,  962,   75,
      948,   75,  967,   75,  964,  969,  968,  950, 1085,   75,
       75,  944, 1004,  963,  971,  947,  958,  960,  957,  945,
      974,  946,   75,   75,  965,   75,  948,  980,  973,  967,
      964,  977,  969,  968,   75,   75,   75,  894, 1004,  975,
      978,  971,  981,  895,  877,  878,  877,  724,  989, 1085,

      982,  725, 1085,  980,  990,  973, 1085,  994,  977,  879,
      880,  879,  987,  372,  899,  975,  729,  978,  900,  981,
      881,  882,  881,  724, 1085, 1085,  982,  725,  883,  884,
      883,  885,  886,  885,  742,  729, 1085,   75,  743,  887,
      888,  887,  889,  890,  889,  742,  747, 1037, 1085,  743,
      891,  892,  891,  984,  985,  984, 1085,  747, 1085,  906,
      986,  897,  898,  897,  899,  747, 1085, 1085,  900,  991,
      992,  991,  899,  903, 1037,  904,  900, 1085,  903,  227,
      904,  903,   75,  904,  227,  998,  997,  227,  910, 1085,
     1085,  986,  911,  908,  909,  908,  910,   75, 1085, 1008,

      911,  999, 1000,  999,  910, 1085,   75, 1085,  911,  912,
      913,  912,  770,  914,  915,  914,  771, 1018, 1085, 1085,
      781,  916,  917,  916,  770, 1008,   75, 1015,  771,  918,
      919,  918,  773,  920,  921,  920,  774,  922,  923,  922,
      777, 1003, 1085, 1018,  781,  924,  925,  924,  789,  926,
      927,  926,  790, 1015, 1085, 1085,  792,  928,  929,  928,
      806,  930,  931,  930,  807, 1085, 1085, 1003,  811,  932,
      933,  932,  806,  934,  935,  934,  807, 1085, 1085, 1085,
      811,  936,  937,  936,  823,  938,  939,  938,  824,   75,
     1085, 1085,  828,  940,  941,  940,  823,  942,  943,  942,

      824,  117, 1085,  735,  828, 1013,  525,  736,  816,  117,
     1085,  735,  817,   75,  525,  736,  816, 1009,   75,  525,
      817,  816,   75, 1001, 1007,  817,   75,   75, 1010, 1011,
       75, 1013, 1012,   75,   75, 1014,   75, 1085, 1085,   75,
     1019,   75, 1002, 1017, 1009, 1020,   75,   75, 1016, 1085,
     1001, 1007, 1022, 1023,   75, 1010, 1011, 1021,  998, 1012,
     1024,   75, 1014, 1085,  986,  989, 1063, 1019, 1002, 1017,
     1085,  990, 1020, 1085, 1016,  984,  985,  984, 1085, 1022,
     1023,   75,  986, 1021, 1025, 1026, 1025, 1024, 1027, 1028,
     1027,  986,   75, 1063,  994,  990,  991,  992,  991,  899,

      372, 1031,   75,  900,  999, 1000,  999,  910,  117,   75,
      735,  911, 1032,  117,  736,  735,   75, 1035,   75,  736,
       75,   75, 1033, 1085,   75, 1085,   75, 1031,   75, 1036,
       75, 1040, 1042,   75,   75,   75, 1029, 1085, 1032, 1041,
     1038, 1039, 1048, 1035, 1030, 1045,   75, 1044, 1033, 1085,
     1046, 1043, 1047, 1085,  525, 1036,  816, 1040,   75, 1042,
      817, 1085, 1029, 1085, 1050, 1041, 1038, 1039, 1048,  117,
     1030,  735, 1045, 1044,   75,  736, 1046, 1043,   75, 1047,
     1025, 1026, 1025, 1027, 1028, 1027,   75,  986,   75,   75,
      990, 1050, 1054,   75, 1051,   75, 1049,   75, 1053, 1056,

       75, 1058, 1057, 1059,   75,   75,   75, 1055, 1085,   75,
     1060,   75,  525, 1067,  816, 1062, 1085,   75,  817, 1054,
     1051, 1061, 1049, 1069, 1053,   75, 1056, 1065, 1058, 1057,
     1059,   75, 1064, 1055,   75, 1068,   75, 1060,   75, 1067,
       75, 1085, 1062,   75,   75, 1073,   75, 1061, 1078, 1085,
     1069, 1072, 1070, 1065,   75, 1071, 1074,   75, 1064, 1075,
     1085, 1076, 1068, 1080, 1077,   75,   75,   75,   75, 1085,
     1082, 1085, 1073, 1083, 1085, 1078, 1085, 1072, 1070, 1085,
     1079, 1071, 1074, 1081, 1085, 1075,   75, 1076, 1085, 1085,
     1080, 1077, 1084, 1085, 1085, 1085, 1085, 1082, 1085, 1085,

     1083, 1085, 1085, 1085, 1085, 1085, 1079, 1085, 1085, 1081,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1084,
       27,   27,   27,   27,   27,   30,   30,   30,   30,   30,
       45,   45,   45,   45,   45,   49,   49,   49,   49,   49,
       53,   53,   53,   53,   53,   59,   59,   59,   59,   59,
       61,   61,   61,   61,   61,   63,   63,   63,   63,   63,
       74,   74,   78, 1085,   78,   78,  106,  106,  106,  106,
      106,  108,  108,  108,  108,  108,  112,  112,  112,  112,
      112,  120,  120,  120,  120,  120,  123,  123,  123,  123,
      123,  116,  116,  116,  116,  116,  127,  127,  127,  127,

      127,  138,  138,  138,  138,   76, 1085,   76,   77, 1085,
       77,  172,  172,  172,  172,  172,  175,  175,  175,  175,
      175,  178,  178,  178,  178,  178,  181,  181,  181,  181,
      181,  186,  186,  186,  186,  186,  189,  189,  189,  189,
      189,  193,  193,  193,  193,  193,  197,  197,  197,  197,
      197,  200,  200,  200,  200,  200,  202,  202,  202,  202,
      202,  206,  206,  206,  206,  206,  211,  211,  211,  211,
      211,  213,  213,  213,  213,  213,  217,  217,  217,  217,
      217,  222,  222,  222,  222,  222,  227,  227,  227,  227,
      227,  229,  229,  229,  229,  229,  235,  235,  235,  235,

      235,  293,  293,  293,  293,  293,  296,  296,  296,  296,
      296,  298,  298,  298,  298,  298,  302,  302,  302,  302,
      302,  307,  307,  307,  307,  307,  315,  315,  315,  315,
      315,  320,  320,  320,  320,  320,  323,  323,  323,  323,
      323,  325,  325,  325,  325,  325,  330,  330,  330,  330,
      330,  333,  333,  333,  333,  333,  336,  336,  336,  336,
      336,  340,  340,  340,  340,  340,  343,  343,  343,  343,
      343,  346,  346,  346,  346,  346,  352,  352,  352,  352,
      352,  365,  365,  365,  365,  365,  368,  368,  368,  368,
      368,  372,  372,  372,  372,  372,  377,  377,  377,  377,

      377,  378,  378,  378,  378,  378,  442,  442,  442,  442,
      442,  445,  445,  445,  445,  445,  447,  447,  447,  447,
      447,  451,  451,  451,  451,  451,  302,  302,  302,  302,
      302,  459,  459,  459,  459,  459,  462,  462,  462,  462,
      462,  464,  464,  464,  464,  464,  468,  468,  468,  468,
      468,  473,  473,  473,  473,  473,  476,  476,  476,  476,
      476,  479,  479,  479,  479,  479,  483,  483,  483,  483,
      483,  485,  485,  485,  485,  485,  489,  489,  489,  489,
      489,  493,  493,  493,  493,  493,  503,  503,  503,  503,
      503,  506,  506,  506,  506,  506,  512,  512,  512,  512,

      512,  513,  513,  513,  513,  513,  175,  175,  175,  175,
      175,  516,  516,  516,  516,  516,  519,  519,  519,  519,
      519,  524,  524,  524,  524,  524,   74,   74,  583,  583,
      583,  583,  583,  586,  586,  586,  586,  586,  588,  588,
      588,  588,  588,  591,  591,  591,  591,  591,  595,  595,
      595,  595,  595,  598,  598,  598,  598,  598,  600,  600,
      600,  600,  600,  603,  603,  603,  603,  603,  610,  610,
      610,  610,  610,  613,  613,  613,  613,  613,  616,  616,
      616,  616,  616,  618,  618,  618,  618,  618,  621,  621,
      621,  621,  621,  623,  623,  623,  623,  623,  629,  629,

      629,  629,  629,  631,  631,  631,  631,  631,  636,  636,
      636,  636,  636,  637,  637,  637,  637,  637,  640,  640,
      640,  640,  640,  642,  642,  642,  642,  642,  211,  211,
      211,  211,  211,  645,  645,  645,  645,  645,  652,  652,
      652,  652,  652,  175,  175,  175,  175,  175,  655,  655,
      655,  655,  655,  658,  658,  658,  658,  658,  716,  716,
      716,  716,  716,  719,  719,  719,  719,  719,  721,  721,
      721,  721,  721,  726,  726,  726,  726,  726,  734,  734,
      734,  734,  734,  737,  737,  737,  737,  737,  739,  739,
      739,  739,  739,  744,  744,  744,  744,  744,  752,  752,

      752,  752,  752,  757,  757,  757,  757,  757,  762,  762,
      762,  762,  762,  765,  765,  765,  765,  765,  767,  767,
      767,  767,  767,  772,  772,  772,  772,  772,  776,  776,
      776,  776,  776,  778,  778,  778,  778,  778,  788,  788,
      788,  788,  788,  791,  791,  791,  791,  791,  797,  797,
      797,  797,  797,  798,  798,  798,  798,  798,  801,  801,
      801,  801,  801,  803,  803,  803,  803,  803,  808,  808,
      808,  808,  808,  227,  227,  227,  227,  227,  815,  815,
      815,  815,  815,  818,  818,  818,  818,  818,  820,  820,
      820,  820,  820,  211,  211,  211,  211,  211,  825,  825,

      825,  825,  825,   74,   74,  716,  716,  716,  716,  716,
      719,  719,  719,  719,  719,  721,  721,  721,  721,  721,
      726,  726,  726,  726,  726,  737,  737,  737,  737,  737,
      739,  739,  739,  739,  739,  744,  744,  744,  744,  744,
      175,  175,  175,  175,  175,  893,  893,  893,  893,  893,
      896,  896,  896,  896,  896,  757,  757,  757,  757,  757,
      902,  902,  902,  902,  902,  905,  905,  905,  905,  905,
      907,  907,  907,  907,  907,  762,  762,  762,  762,  762,
      765,  765,  765,  765,  765,  767,  767,  767,  767,  767,
      778,  778,  778,  778,  778,  772,  772,  772,  772,  772,

      776,  776,  776,  776,  776,  788,  788,  788,  788,  788,
      791,  791,  791,  791,  791,  797,  797,  797,  797,  797,
      798,  798,  798,  798,  798,  801,  801,  801,  801,  801,
      803,  803,  803,  803,  803,  808,  808,  808,  808,  808,
      815,  815,  815,  815,  815,  818,  818,  818,  818,  818,
      820,  820,  820,  820,  820,  825,  825,  825,  825,  825,
      734,  734,  734,  734,  734,   74,   74,  721,  721,  721,
      721,  721,  726,  726,  726,  726,  726,  739,  739,  739,
      739,  739,  744,  744,  744,  744,  744,  893,  893,  893,
      893,  893,  211,  211,  211,  211,  211,  983,  983,  983,

      983,  983,  896,  896,  896,  896,  896,  988,  988,  988,
      988,  988,  902,  902,  902,  902,  902,  993,  993,  993,
      993,  993,  905,  905,  905,  905,  905,  995,  995, 1085,
      995,  995,  907,  907,  907,  907,  907,  767,  767,  767,
      767,  767,  778,  778,  778,  778,  778,  772,  772,  772,
      772,  772,  776,  776,  776,  776,  776,  788,  788,  788,
      788,  788,  791,  791,  791,  791,  791,   21, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085
    } ;

static yyconst flex_int16_t yy_chk[4636] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    7,    9,    8,   10,
       24,   11,   12,    7,    7,    8,    8,   44,   11,   12,
       24,   30,   30, 1084,   11,   12,   44,   66, 1083,   30,
        1,    1,    1,   66,   72,   13,   14,  109,   32,   34,
     1080,  109,   13,   14,   72,    9,    9,   10,   10,   11,
       12,   32,  189,   44,  189,   34,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   13,   14,   36,   15,   32,   15,   15,
       15,   34,   41,   15,   78,   78,   15,   63,   41,   63,

      255,   36,   78,   63,  110,  114,   36,    2,    2,    2,
      110,  114,   38,   16,   39,   16,   16,   16,  113,  447,
       16,  447,  113,   16,   15,   41,  255,   36,   38,  464,
       39,  464,   36,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
       15,   16,   31,   35,   38,   31,   39,   64,   67,   64,
       67,  117, 1079,   64,   67,  117,   35,   83,   35,   83,
      479,   31,  479, 1075,    3,    3,    3,   16,   68,   68,
       68,   68,   31, 1069,   37,   68,  115,  115,  115,  115,
     1067,   37,   35,   84,   35,   84,   83,   31,   37,   37,

        3,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,   40,   37,   85,
       79,   43,   84,   42,   37,   37,   80, 1060,   94,   42,
       43,   81,   82,   85,   85,   40,   90,   43,   40,   79,
       91,    4,    4,    4,   42,   80,   43,   81,   94,   93,
     1059,   82,   86,   97,   90,   91,   42,   43,   98,   85,
       85,   40,   86,   43,   40,   79,   93,    4,    5,   97,
       42,   80,   43,   81,   94,  101,   98,   82,  101,  256,
       90,   91,    5,    5,    5,    5,    5,    5,  150,   86,
        5,  150,   93,    5,    5,   97,   96,    5,    5,    5,

        5,   96,   98,    5,  175,  101,  256, 1058,  175,    5,
        5,    5,    5,    5,    5,   88, 1057,    5,  150,    5,
        5,   88,   89,    5,    5,    5,    5,   89,   96,    5,
       20,   20,   20,   20,   88,  139,   20,   95,   87,   20,
       87,   20,   89,   89,   87,   95,   20,   20,   88,   99,
      102,   99,  105,   99,   89,  139,  102,  100,  105,  104,
       88,   87, 1056,   87,  177,  177,  177,  177,   89,   89,
      100,   87,   95,   20,   20,   33,  104,   33,   99, 1053,
       99,  139,  141,  102,   33,  105,  141,   87,   33,   87,
     1051,   33,  108,   33,  108,  112,  100,  112,  108,  149,

     1041,  112,  104,  119,   33,  111,  111,  111,  111,  119,
      123,   33,  111,  141,   33,  149,  123,   33,  151,   33,
       65,   65,   65,   65,   65,   65,   65,  151,   65,   65,
       65,   65,   65,   65,   65,   65,  116,  120,  116,  120,
     1040,  149,  116,  120,  121,  121,  121,  121,  125,  125,
      125,  121, 1032, 1024,  151,  125,  126,  126,  126,  126,
       65,   65,  127,  126,  127, 1023,  144,  130,  127,  128,
      128,  128,  128,  130, 1022,  173,  128,  131,  131,  131,
      131,  173, 1016, 1000,  131,  144,   65,   69,   69,   69,
       69,   69,   69,   69,  159,   69,   69,   69,   69,   69,

       69,   69,   69,  997,  142,  145,  134,  133,  134,  133,
      142,  144,  134,  133,  485,  159,  485,  996,  162,  135,
      134,  135,  145,  148,  137,  135,  137,   69,   69,  136,
      137,  136,  133,  140,  134,  136,  135,  142,  133,  162,
      137,  159,  148,  140,  143,  135,  135,  134,  145,  140,
      148,  136,  995,   69,   70,   70,   70,   70,  133,  146,
      134,   70,  143,  135,  133,  162,  147,  137,  148,   70,
      140,  135,  135,  152,  157,  140,  157,  158,  136,  146,
       70,  158,  155,   70,  153,   70,  147,  152,  143,  172,
      153,  172,   70,  176,  203,  172,   70,  994,  203,  176,

      155,  156,  992,  157,  160,  146,   70,  987,  158,   70,
      160,   70,  147,  152,  503,  156,  503,  153,   70,  118,
      118,  118,  118,  118,  118,  118,  155,  118,  118,  118,
      118,  118,  118,  118,  118,  161,  163,  160,  165,  169,
      163,  156,  164,  178,  163,  161,  167,  184,  164,  178,
      170,  165,  167,  184,  169,  166,  170,  379,  246,  118,
      118,  379,  981,  171,  168,  525,  246,  163,  181,  525,
      181,  163,  161,  978,  181,  164,  166,  165,  168,  167,
      169,  171,  168,  170,  977,  118,  122,  122,  122,  122,
      122,  122,  122,  246,  122,  122,  122,  122,  122,  122,

      122,  122,  166,  519,  168,  519,  973,  171,  168,  174,
      174,  174,  174,  180,  180,  180,  174,  970,  967,  186,
      180,  182,  182,  182,  182,  186,  122,  122,  182,  185,
      185,  185,  185,  188,  188,  188,  185,  190,  190,  190,
      190,  193,  194,  193,  197,  200,  197,  193,  194,  964,
      197,  200,  122,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  960,  132,  132,  195,
      195,  195,  195,  212,  212,  212,  195,  198,  198,  198,
      198,  201,  201,  201,  198,  202,  204,  202,  201,  959,
      402,  202,  204,  132,  132,  132,  205,  205,  205,  205,

      206,  403,  206,  205,  953,  209,  206,  207,  207,  207,
      207,  209,  213,  951,  207,  217,  402,  217,  213,  132,
      154,  217,  154,  154,  154,  154,  154,  154,  403,  220,
      154,  214,  214,  214,  154,  220,  950,  154,  214,  154,
      154,  224,  222,  154,  222,  941,  937,  224,  222,  154,
      154,  154,  154,  154,  154,  229,  235,  154,  235,  245,
      154,  229,  235,  154,  247,  154,  154,  548,  247,  154,
      196,  196,  196,  196,  196,  196,  196,  245,  196,  196,
      196,  196,  196,  196,  196,  196,  210,  210,  210,  210,
      216,  216,  216,  210,  548,  247,  933,  216,  218,  218,

      218,  218,  250,  245,  250,  218,  221,  221,  221,  221,
      196,  196,  294,  221,  225,  225,  225,  225,  294,  929,
      248,  225,  226,  226,  226,  226,  231,  231,  231,  226,
      249,  250,  248,  231,  925,  249,  196,  199,  199,  199,
      199,  199,  199,  199,  919,  199,  199,  199,  199,  199,
      199,  199,  199,  232,  232,  232,  232,  237,  248,  237,
      232,  252,  249,  237,  260,  238,  236,  238,  236,  753,
      260,  238,  236,  753,  252,  237,  917,  199,  199,  240,
      293,  240,  293,  296,  300,  240,  293,  913,  909,  296,
      300,  236,  239,  242,  239,  242,  238,  260,  239,  242,

      252,  240,  237,  199,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  236,  234,  234,
      251,  254,  238,  239,  241,  242,  241,  243,  240,  243,
      241,  254,  244,  243,  244,  253,  906,  253,  244,  251,
      257,  258,  264,  263,  234,  234,  234,  262,  272,  239,
      241,  242,  259,  241,  258,  257,  263,  244,  254,  243,
      264,  261,  259,  266,  253,  251,  262,  898,  894,  270,
      234,  261,  265,  272,  267,  269,  241,  274,  266,  241,
      258,  257,  263,  244,  261,  243,  264,  270,  265,  259,
      267,  269,  262,  268,  276,  267,  273,  271,  261,  272,

      268,  278,  274,  271,  266,  273,  277,  276,  268,  281,
      261,  280,  680,  270,  265,  280,  267,  269,  271,  278,
      283,  267,  281,  279,  288,  286,  277,  268,  274,  282,
      271,  279,  273,  276,  268,  282, 1006,  289,  283,  680,
      288,  279,  280,  286,  271,  278,  287,  392,  281,  392,
      287,  292,  277,  289,  431,  291,  431,  292,  279,  298,
      291,  298,  282, 1006,  283,  298,  288,  279,  549,  286,
      291,  295,  295,  295,  295,  890,  392,  287,  295,  289,
      297,  297,  297,  431,  292,  886,  302,  297,  299,  299,
      299,  299,  302,  882,  549,  299,  878,  291,  301,  301,

      301,  301,  304,  304,  304,  301,  305,  305,  305,  305,
      307,  308,  308,  308,  866,  865,  307,  394,  308,  310,
      310,  310,  313,  313,  313,  313,  310,  394,  321,  313,
      316,  316,  316,  320,  321,  320,  409,  679,  323,  320,
      322,  322,  322,  322,  323,  409,  327,  322,  324,  324,
      324,  325,  327,  325,  394,  324,  334,  325,  326,  326,
      326,  326,  334,  679,  338,  326,  328,  328,  328,  328,
      338,  845,  409,  328,  329,  329,  329,  329,  329,  329,
      329,  400,  329,  329,  329,  329,  329,  329,  329,  329,
      330,  400,  330,  357,  357,  357,  330,  331,  331,  331,

      331,  333,  340,  333,  331,  844,  829,  333,  340,  335,
      335,  335,  335,  822,  329,  329,  335,  336,  400,  336,
      805,  769,  343,  336,  337,  337,  337,  337,  343,  741,
      349,  337,  339,  339,  339,  339,  349,  723,  710,  339,
      329,  332,  332,  332,  332,  332,  332,  332,  393,  332,
      332,  332,  332,  332,  332,  332,  332,  341,  341,  341,
      342,  342,  342,  393,  341,  705,  352,  342,  345,  345,
      345,  346,  352,  346,  365,  345,  365,  346,  703,  700,
      365,  332,  332,  347,  347,  347,  347,  690,  684,  393,
      347,  350,  350,  350,  350,  354,  354,  354,  350,  446,

      446,  446,  354,  355,  355,  355,  355,  332,  676,  675,
      355,  360,  360,  360,  363,  363,  363,  363,  360,  366,
      660,  363,  656,  651,  368,  366,  367,  367,  367,  367,
      368,  648,  582,  367,  369,  369,  369,  370,  370,  370,
      370,  369,  406,  571,  370,  371,  371,  371,  371,  374,
      374,  374,  371,  713,  411,  406,  374,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      411,  376,  376,  377,  378,  377,  378,  380,  713,  377,
      378,  406,  421,  380,  381,  381,  381,  381,  382,  397,
      382,  381,  569,  397,  382,  421,  411,  376,  376,  376,

      383,  384,  383,  384,  713,  554,  383,  384,  385,  386,
      385,  386,  538,  396,  385,  386,  387,  522,  387,  396,
      397,  421,  387,  376,  443,  388,  385,  388,  395,  521,
      443,  388,  384,  395,  389,  386,  389,  390,  401,  390,
      389,  517,  401,  390,  387,  391,  396,  391,  389,  399,
      388,  391,  398,  385,  410,  399,  389,  398,  384,  390,
      395,  386,  398,  391,  404,  405,  407,  408,  404,  401,
      387,  405,  414,  410,  408,  389,  388,  412,  415,  416,
      418,  407,  399,  389,  398,  506,  390,  412,  420,  398,
      391,  423,  419,  414,  416,  404,  415,  419,  405,  410,

      418,  408,  422,  424,  420,  422,  427,  407,  423,  424,
      426,  428,  429,  434,  412,  434,  427,  428,  429,  414,
      416,  430,  415,  426,  419,  432,  418,  435,  430,  438,
      420,  432,  422,  433,  423,  437,  424,  436,  433,  542,
      437,  440,  434,  427,  428,  429,  435,  504,  500,  426,
      438,  444,  444,  444,  444,  430,  846,  436,  432,  542,
      440,  497,  442,  445,  442,  433,  493,  437,  442,  445,
      489,  487,  435,  452,  452,  452,  438,  448,  448,  448,
      448,  481,  846,  436,  468,  542,  440,  450,  450,  450,
      450,  453,  453,  453,  454,  454,  454,  454,  455,  455,

      455,  457,  457,  457,  459,  460,  459,  463,  463,  463,
      459,  460,  461,  461,  461,  461,  462,  465,  465,  465,
      465,  466,  462,  467,  467,  467,  467,  469,  469,  469,
      470,  470,  470,  471,  471,  471,  471,  472,  472,  472,
      473,  477,  473,  472,  451,  449,  473,  477,  472,  474,
      474,  474,  474,  475,  475,  475,  476,  483,  476,  475,
      441,  425,  476,  483,  475,  478,  478,  478,  478,  480,
      480,  480,  480,  482,  482,  482,  482,  484,  484,  484,
      486,  486,  486,  486,  488,  488,  488,  488,  490,  490,
      490,  491,  491,  491,  491,  492,  492,  492,  494,  494,

      494,  496,  496,  496,  499,  499,  499,  499,  501,  501,
      501,  505,  505,  505,  505,  507,  507,  507,  508,  508,
      508,  508,  509,  509,  509,  510,  510,  510,  510,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  955,  511,  511,  512,  513,  512,  513,  514,
      870,  512,  513,  870,  516,  514,  515,  515,  515,  515,
      516,  518,  518,  518,  520,  520,  520,  520,  955,  511,
      511,  511,  523,  523,  523,  523,  524,  526,  524,  417,
      870,  413,  524,  526,  527,  527,  527,  527,  528,  372,
      528,  529,  364,  529,  528,  511,  530,  529,  530,  531,

      544,  531,  530,  362,  532,  531,  532,  533,  537,  533,
      532,  356,  537,  533,  530,  534,  541,  534,  535,  544,
      535,  534,  532,  541,  535,  536,  531,  536,  539,  533,
      539,  536,  546,  550,  535,  534,  540,  543,  540,  537,
      545,  530,  534,  543,  351,  544,  547,  546,  547,  532,
      541,  553,  531,  348,  550,  551,  533,  539,  556,  551,
      552,  535,  534,  555,  545,  540,  552,  558,  534,  555,
      543,  553,  551,  546,  556,  547,  344,  557,  559,  561,
      550,  557,  560,  561,  560,  563,  551,  558,  562,  318,
      545,  564,  559,  552,  562,  564,  555,  553,  551,  564,

      556,  565,  566,  567,  574,  568,  563,  565,  557,  567,
      561,  560,  570,  558,  576,  572,  566,  574,  559,  580,
      566,  562,  564,  568,  315,  581,  564,  573,  570,  573,
      577,  575,  563,  572,  565,  576,  567,  314,  575,  311,
      580,  578,  566,  574,  577,  581,  566,  669,  575,  568,
      575,  578,  670,  579,  570,  306,  573,  579,  583,  572,
      583,  576,  584,  586,  583,  575,  580,  669,  584,  586,
      577,  581,  670,  579,  575,  303,  575,  590,  578,  585,
      585,  585,  585,  590,  579,  591,  585,  587,  587,  587,
      588,  591,  588,  669,  587,  672,  588,  672,  670,  579,

      589,  589,  589,  589,  592,  592,  592,  589, 1034,  290,
     1052,  592,  593,  593,  593,  593,  594,  594,  594,  593,
      595,  596,  595,  594,  672,  285,  595,  596,  597,  597,
      597,  597,  598,  284, 1034,  597, 1052,  602,  598,  599,
      599,  599,  600,  602,  600,  671,  599,  603,  600,  601,
      601,  601,  601,  603,  275,  706,  601,  604,  604,  604,
      605,  605,  605,  605,  604,  671,  233,  605,  606,  606,
      606,  607,  607,  607,  228,  606,  706,  607,  608,  608,
      608,  608,  609,  227,  609,  608,  611,  610,  609,  610,
      223,  671,  611,  610,  612,  612,  612,  612,  613,  219,

      613,  612,  706,  615,  613,  614,  614,  614,  614,  615,
      616,  211,  614,  617,  617,  617,  616,  618,  208,  618,
      617,  192,  620,  618,  619,  619,  619,  619,  620,  621,
      688,  619,  191,  187,  623,  621,  622,  622,  622,  622,
      623,  183,  688,  622,  624,  624,  624,  625,  625,  625,
      625,  624,  179,  129,  625,  626,  626,  626,  627,  627,
      627,  629,  626,  629,  630,  627,  631,  629,  688,  124,
      630,  106,  631,  632,  632,  632,  632,  633,  633,  633,
      632,  103,   92,  638,  633,  634,  634,  634,  634,  638,
       76,   74,  634,  635,  635,  635,  635,  635,  635,  635,

      635,  635,  635,  635,  635,  635,   73,  635,  635,  636,
      637,  636,  637,   61,   27,  636,  637,  639,  639,  639,
      639,  640,   26,   21,  639,   19,  642,  640,  642,  641,
      641,  641,  642,  635,  635,  635,  641,  643,  643,  643,
      643,  644,  645,   18,  643,   17,    6,  644,  645,  646,
      646,  646,  652,    0,  652,  678,  646,  677,  652,  635,
      650,  650,  650,  650,  653,    0,    0,  650,  678,  655,
      653,  654,  654,  654,  654,  655,  677,  661,  654,  657,
      657,  657,  658,  661,  658,  685,  657,  685,  658,  659,
      659,  659,  659,  662,  678,  662,  659,  682,  663,  662,

      663,  664,  677,  664,  663,    0,  665,  664,  665,  666,
        0,  666,  665,  682,  685,  666,  667,  668,  667,  668,
      662,  673,  667,  668,    0,  681,  683,  673,  674,  686,
      687,  668,  691,  665,  687,  674,  692,  664,    0,  682,
      689,    0,  666,  681,  683,  691,  662,  686,  693,  667,
      689,  694,  702,  697,  673,    0,  692,  697,  668,  665,
      698,  687,  674,  664,  694,  696,  693,  702,  666,  681,
      683,  691,  695,  686,  701,  667,  698,  689,  695,  699,
      701,  704,  692,  696,  697,  704,  707,  708,  709,  711,
      694,  715,  693,  702,  712,  699,  712,  714,    0,    0,

        0,  715,  698,    0,  707,  695,  709,  701,  708,  696,
      714,  711,  704,  716,  717,  716,  719,    0,    0,  716,
      717,  699,  719,  712,  718,  718,  718,  718,  715,  724,
      707,  718,  709,    0,  708,  724,  714,  711,  720,  720,
      720,  721,    0,  721,  838,  720,  726,  721,  722,  722,
      722,  722,  726,    0,  838,  722,  725,  725,  725,  725,
      727,  727,  727,  725,  729,  729,  729,  727,  840,  851,
      840,  729,  730,  730,  730,  730,  731,  731,  731,  730,
        0,  838,  851,  731,  732,  732,  732,  732,  733,  733,
      733,  732,  734,  735,  734,  733,  841,  840,  734,  735,

      736,  736,  736,  736,  737,    0,  864,  736,  851,  742,
      737,  738,  738,  738,  739,  742,  739,  841,  738,  744,
      739,  740,  740,  740,  740,  744,    0,  864,  740,  743,
      743,  743,  743,  745,  745,  745,  743,  747,  747,  747,
      745,    0,    0,  841,  747,  748,  748,  748,  748,  749,
      749,  749,  748,  864,    0,    0,  749,  750,  750,  750,
      750,  751,  751,  751,  750,  752,  842,  752,  751,  755,
      760,  752,  754,  754,  754,  755,  760,  848,  754,  756,
      756,  756,  756,  757,  842,  757,  756,    0,    0,  757,
      758,  758,  758,  758,  759,  848,  759,  758,    0,    0,

      759,  761,  761,  761,  761,  762,  763,  762,  761,    0,
      842,  762,  763,  764,  764,  764,  764,  765,    0,    0,
      764,  848,  770,  765,  766,  766,  766,  767,  770,  767,
        0,  766,  773,  767,  768,  768,  768,  768,  773,  873,
      858,  768,  771,  771,  771,  771,  772,  858,  772,  771,
        0,  776,  772,  774,  774,  774,  774,  776,  873,    0,
      774,  775,  775,  775,  775,  777,  777,  777,  775,  778,
        0,    0,  777,    0,  858,  778,  779,  779,  779,  781,
      781,  781,    0,  779,  873,  789,  781,  782,  782,  782,
      782,  789,    0,    0,  782,  783,  783,  783,  783,  784,

      784,  784,  783,  843,    0,  843,  784,  785,  785,  785,
      785,  786,  786,  786,  785,  787,  787,  787,  786,  788,
        0,  788,  787,    0,  791,  788,  790,  790,  790,  790,
      791,    0,  843,  790,  792,  792,  792,  793,  793,  793,
      793,  792,    0,  853,  793,  794,  794,  794,  795,  795,
      795,  795,  794,  853,    0,  795,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,    0,
      796,  796,  797,  798,  797,  798,  799,    0,  797,  798,
      853,  801,  799,  800,  800,  800,  800,  801,    0,  803,
      800,  803,  802,  802,  802,  803,  796,  796,  796,  802,

      804,  804,  804,  804,  806,    0,    0,  804,    0,  808,
      806,  807,  807,  807,  807,  808,    0,    0,  807,  809,
      809,  809,  796,  811,  811,  811,  809,    0,    0,    0,
      811,  812,  812,  812,  812,  813,  813,  813,  812,    0,
        0,    0,  813,  814,  814,  814,  814,  815,  816,  815,
      814,    0,  862,  815,  816,  817,  817,  817,  817,  818,
        0,  954,  817,    0,  823,  818,  819,  819,  819,  820,
      823,  820,  862,  819,  825,  820,  821,  821,  821,  821,
      825,    0,  954,  821,  824,  824,  824,  824,  826,  826,
      826,  824,  828,  828,  828,  826,    0,    0,  862,  828,

      830,  830,  830,  830,  832,    0,  832,  830,  954,  833,
      832,  833,  834,    0,  834,  833,  854,  835,  834,  835,
      836,  854,  836,  835,  839,  837,  836,  837,  849,  868,
      839,  837,  855,  850,  852,  832,  855,  857,  836,  850,
      852,  856,  849,  834,  868,  835,  859,  857,  854,  952,
      837,  860,  859,  861,  856,  861,  860,  839,    0,  863,
      874,  832,  952,  855,  863,  836,  850,  852,  849,  834,
      868,  835,  867,  869,  857,  871,  837,  874,  867,  859,
      856,  871,  861,  860,  872,  876,  875,  893,  952,  869,
      872,  863,  875,  893,  877,  877,  877,  877,  899,    0,

      876,  877,    0,  874,  899,  867,    0,  904,  871,  879,
      879,  879,  896,  904,  896,  869,  879,  872,  896,  875,
      881,  881,  881,  881,    0,    0,  876,  881,  883,  883,
      883,  885,  885,  885,  885,  883,    0, 1009,  885,  887,
      887,  887,  889,  889,  889,  889,  887, 1009,    0,  889,
      891,  891,  891,  895,  895,  895,    0,  891,    0,  905,
      895,  897,  897,  897,  897,  905,    0,    0,  897,  900,
      900,  900,  900,  901, 1009,  901,  900,    0,  902,  901,
      902,  903,  957,  903,  902,  910,  907,  903,  907,    0,
        0,  910,  907,  908,  908,  908,  908,  972,    0,  957,

      908,  911,  911,  911,  911,    0,  968,    0,  911,  912,
      912,  912,  912,  914,  914,  914,  912,  972,    0,    0,
      914,  916,  916,  916,  916,  957,  949,  968,  916,  918,
      918,  918,  918,  920,  920,  920,  918,  922,  922,  922,
      920,  949,    0,  972,  922,  924,  924,  924,  924,  926,
      926,  926,  924,  968,    0,    0,  926,  928,  928,  928,
      928,  930,  930,  930,  928,    0,    0,  949,  930,  932,
      932,  932,  932,  934,  934,  934,  932,    0,    0,    0,
      934,  936,  936,  936,  936,  938,  938,  938,  936,  965,
        0,    0,  938,  940,  940,  940,  940,  942,  942,  942,

      940,  944,    0,  944,  942,  965,  945,  944,  945,  946,
        0,  946,  945,  958,  947,  946,  947,  958,  956,  948,
      947,  948,  971,  944,  956,  948,  961,  962,  961,  962,
      963,  965,  963,  966,  969,  966,  974,    0,    0,  976,
      974,  975,  946,  971,  958,  975,  979,  980,  969,    0,
      944,  956,  979,  980,  982,  961,  962,  976,  983,  963,
      982, 1047,  966,    0,  983,  988, 1047,  974,  946,  971,
        0,  988,  975,    0,  969,  984,  984,  984,    0,  979,
      980, 1003,  984,  976,  986,  986,  986,  982,  990,  990,
      990,  986, 1004, 1047,  993,  990,  991,  991,  991,  991,

      993, 1003, 1007,  991,  999,  999,  999,  999, 1001, 1005,
     1001,  999, 1004, 1002, 1001, 1002, 1008, 1007, 1012, 1002,
     1010, 1011, 1005,    0, 1013,    0, 1021, 1003, 1014, 1008,
     1019, 1012, 1014, 1015, 1017, 1018, 1001,    0, 1004, 1013,
     1010, 1011, 1021, 1007, 1002, 1018, 1020, 1017, 1005,    0,
     1019, 1015, 1020,    0, 1030, 1008, 1030, 1012, 1031, 1014,
     1030,    0, 1001,    0, 1031, 1013, 1010, 1011, 1021, 1029,
     1002, 1029, 1018, 1017, 1033, 1029, 1019, 1015, 1035, 1020,
     1025, 1025, 1025, 1027, 1027, 1027, 1036, 1025, 1037, 1054,
     1027, 1031, 1036, 1038, 1033, 1042, 1029, 1043, 1035, 1038,

     1039, 1042, 1039, 1043, 1044, 1046, 1045, 1037,    0, 1050,
     1044, 1048, 1049, 1054, 1049, 1046,    0, 1061, 1049, 1036,
     1033, 1045, 1029, 1061, 1035, 1055, 1038, 1050, 1042, 1039,
     1043, 1064, 1048, 1037, 1063, 1055, 1062, 1044, 1065, 1054,
     1068,    0, 1046, 1071, 1070, 1065, 1073, 1045, 1073,    0,
     1061, 1064, 1062, 1050, 1072, 1063, 1068, 1076, 1048, 1070,
        0, 1071, 1055, 1076, 1072, 1074, 1078, 1081, 1077,    0,
     1078,    0, 1065, 1081,    0, 1073,    0, 1064, 1062,    0,
     1074, 1063, 1068, 1077,    0, 1070, 1082, 1071,    0,    0,
     1076, 1072, 1082,    0,    0,    0,    0, 1078,    0,    0,

     1081,    0,    0,    0,    0,    0, 1074,    0,    0, 1077,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1082,
     1086, 1086, 1086, 1086, 1086, 1087, 1087, 1087, 1087, 1087,
     1088, 1088, 1088, 1088, 1088, 1089, 1089, 1089, 1089, 1089,
     1090, 1090, 1090, 1090, 1090, 1091, 1091, 1091, 1091, 1091,
     1092, 1092, 1092, 1092, 1092, 1093, 1093, 1093, 1093, 1093,
     1094, 1094, 1095,    0, 1095, 1095, 1096, 1096, 1096, 1096,
     1096, 1097, 1097, 1097, 1097, 1097, 1098, 1098, 1098, 1098,
     1098, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100, 1100,
     1100, 1101, 1101, 1101, 1101, 1101, 1102, 1102, 1102, 1102,

     1102, 1103, 1103, 1103, 1103, 1104,    0, 1104, 1105,    0,
     1105, 1106, 1106, 1106, 1106, 1106, 1107, 1107, 1107, 1107,
     1107, 1108, 1108, 1108, 1108, 1108, 1109, 1109, 1109, 1109,
     1109, 1110, 1110, 1110, 1110, 1110, 1111, 1111, 1111, 1111,
     1111, 1112, 1112, 1112, 1112, 1112, 1113, 1113, 1113, 1113,
     1113, 1114, 1114, 1114, 1114, 1114, 1115, 1115, 1115, 1115,
     1115, 1116, 1116, 1116, 1116, 1116, 1117, 1117, 1117, 1117,
     1117, 1118, 1118, 1118, 1118, 1118, 1119, 1119, 1119, 1119,
     1119, 1120, 1120, 1120, 1120, 1120, 1121, 1121, 1121, 1121,
     1121, 1122, 1122, 1122, 1122, 1122, 1123, 1123, 1123, 1123,

     1123, 1124, 1124, 1124, 1124, 1124, 1125, 1125, 1125, 1125,
     1125, 1126, 1126, 1126, 1126, 1126, 1127, 1127, 1127, 1127,
     1127, 1128, 1128, 1128, 1128, 1128, 1129, 1129, 1129, 1129,
     1129, 1130, 1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131,
     1131, 1132, 1132, 1132, 1132, 1132, 1133, 1133, 1133, 1133,
     1133, 1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135, 1135,
     1135, 1136, 1136, 1136, 1136, 1136, 1137, 1137, 1137, 1137,
     1137, 1138, 1138, 1138, 1138, 1138, 1139, 1139, 1139, 1139,
     1139, 1140, 1140, 1140, 1140, 1140, 1141, 1141, 1141, 1141,
     1141, 1142, 1142, 1142, 1142, 1142, 1143, 1143, 1143, 1143,

     1143, 1144, 1144, 1144, 1144, 1144, 1145, 1145, 1145, 1145,
     1145, 1146, 1146, 1146, 1146, 1146, 1147, 1147, 1147, 1147,
     1147, 1148, 1148, 1148, 1148, 1148, 1149, 1149, 1149, 1149,
     1149, 1150, 1150, 1150, 1150, 1150, 1151, 1151, 1151, 1151,
     1151, 1152, 1152, 1152, 1152, 1152, 1153, 1153, 1153, 1153,
     1153, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155, 1155,
     1155, 1156, 1156, 1156, 1156, 1156, 1157, 1157, 1157, 1157,
     1157, 1158, 1158, 1158, 1158, 1158, 1159, 1159, 1159, 1159,
     1159, 1160, 1160, 1160, 1160, 1160, 1161, 1161, 1161, 1161,
     1161, 1162, 1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163,

     1163, 1164, 1164, 1164, 1164, 1164, 1165, 1165, 1165, 1165,
     1165, 1166, 1166, 1166, 1166, 1166, 1167, 1167, 1167, 1167,
     1167, 1168, 1168, 1168, 1168, 1168, 1169, 1169, 1170, 1170,
     1170, 1170, 1170, 1171, 1171, 1171, 1171, 1171, 1172, 1172,
     1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173, 1174, 1174,
     1174, 1174, 1174, 1175, 1175, 1175, 1175, 1175, 1176, 1176,
     1176, 1176, 1176, 1177, 1177, 1177, 1177, 1177, 1178, 1178,
     1178, 1178, 1178, 1179, 1179, 1179, 1179, 1179, 1180, 1180,
     1180, 1180, 1180, 1181, 1181, 1181, 1181, 1181, 1182, 1182,
     1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183, 1184, 1184,

     1184, 1184, 1184, 1185, 1185, 1185, 1185, 1185, 1186, 1186,
     1186, 1186, 1186, 1187, 1187, 1187, 1187, 1187, 1188, 1188,
     1188, 1188, 1188, 1189, 1189, 1189, 1189, 1189, 1190, 1190,
     1190, 1190, 1190, 1191, 1191, 1191, 1191, 1191, 1192, 1192,
     1192, 1192, 1192, 1193, 1193, 1193, 1193, 1193, 1194, 1194,
     1194, 1194, 1194, 1195, 1195, 1195, 1195, 1195, 1196, 1196,
     1196, 1196, 1196, 1197, 1197, 1197, 1197, 1197, 1198, 1198,
     1198, 1198, 1198, 1199, 1199, 1199, 1199, 1199, 1200, 1200,
     1200, 1200, 1200, 1201, 1201, 1201, 1201, 1201, 1202, 1202,
     1202, 1202, 1202, 1203, 1203, 1203, 1203, 1203, 1204, 1204,

     1204, 1204, 1204, 1205, 1205, 1205, 1205, 1205, 1206, 1206,
     1206, 1206, 1206, 1207, 1207, 1207, 1207, 1207, 1208, 1208,
     1208, 1208, 1208, 1209, 1209, 1209, 1209, 1209, 1210, 1210,
     1210, 1210, 1210, 1211, 1211, 1211, 1211, 1211, 1212, 1212,
     1212, 1212, 1212, 1213, 1213, 1213, 1213, 1213, 1214, 1214,
     1214, 1214, 1214, 1215, 1215, 1215, 1215, 1215, 1216, 1216,
     1216, 1216, 1216, 1217, 1217, 1217, 1217, 1217, 1218, 1218,
     1218, 1218, 1218, 1219, 1219, 1219, 1219, 1219, 1220, 1220,
     1220, 1220, 1220, 1221, 1221, 1221, 1221, 1221, 1222, 1222,
     1222, 1222, 1222, 1223, 1223, 1223, 1223, 1223, 1224, 1224,

     1224, 1224, 1224, 1225, 1225, 1226, 1226, 1226, 1226, 1226,
     1227, 1227, 1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228,
     1229, 1229, 1229, 1229, 1229, 1230, 1230, 1230, 1230, 1230,
     1231, 1231, 1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232,
     1233, 1233, 1233, 1233, 1233, 1234, 1234, 1234, 1234, 1234,
     1235, 1235, 1235, 1235, 1235, 1236, 1236, 1236, 1236, 1236,
     1237, 1237, 1237, 1237, 1237, 1238, 1238, 1238, 1238, 1238,
     1239, 1239, 1239, 1239, 1239, 1240, 1240, 1240, 1240, 1240,
     1241, 1241, 1241, 1241, 1241, 1242, 1242, 1242, 1242, 1242,
     1243, 1243, 1243, 1243, 1243, 1244, 1244, 1244, 1244, 1244,

     1245, 1245, 1245, 1245, 1245, 1246, 1246, 1246, 1246, 1246,
     1247, 1247, 1247, 1247, 1247, 1248, 1248, 1248, 1248, 1248,
     1249, 1249, 1249, 1249, 1249, 1250, 1250, 1250, 1250, 1250,
     1251, 1251, 1251, 1251, 1251, 1252, 1252, 1252, 1252, 1252,
     1253, 1253, 1253, 1253, 1253, 1254, 1254, 1254, 1254, 1254,
     1255, 1255, 1255, 1255, 1255, 1256, 1256, 1256, 1256, 1256,
     1257, 1257, 1257, 1257, 1257, 1258, 1258, 1259, 1259, 1259,
     1259, 1259, 1260, 1260, 1260, 1260, 1260, 1261, 1261, 1261,
     1261, 1261, 1262, 1262, 1262, 1262, 1262, 1263, 1263, 1263,
     1263, 1263, 1264, 1264, 1264, 1264, 1264, 1265, 1265, 1265,

     1265, 1265, 1266, 1266, 1266, 1266, 1266, 1267, 1267, 1267,
     1267, 1267, 1268, 1268, 1268, 1268, 1268, 1269, 1269, 1269,
     1269, 1269, 1270, 1270, 1270, 1270, 1270, 1271, 1271,    0,
     1271, 1271, 1272, 1272, 1272, 1272, 1272, 1273, 1273, 1273,
     1273, 1273, 1274, 1274, 1274, 1274, 1274, 1275, 1275, 1275,
     1275, 1275, 1276, 1276, 1276, 1276, 1276, 1277, 1277, 1277,
     1277, 1277, 1278, 1278, 1278, 1278, 1278, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
// $Id: lexer.l 205 2017-06-19 11:16:18Z willem_vermin $
#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include "parser.h"
#include "findent.h"
#include "debug.h"
#define YY_DECL extern "C" int yylex()
std::stack<int>      start_stack;
std::string          lexer_name, lexer_stlabel, lexeri_number;
std::string          input_string;
int             lrlevel;
bool            lrreturn;
class line_prep pline;




//  following are keywords starting with c
#line 1907 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 29 "lexer.l"


#line 2140 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1086 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4568 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 34 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 51 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 56 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 74 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 77 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 85 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 100 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 104 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 120 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 125 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK

case 104:
YY_RULE_SETUP
#line 216 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.type_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.type_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.type_dot_operator)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 105:
/* rule 105 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 240 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 246 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 252 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 259 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 266 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 268 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 269 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 271 "lexer.l"
ECHO;
	YY_BREAK
#line 2887 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1086 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1086 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1085);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 271 "lexer.l"



void lexer_set(class line_prep p)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
}

void lexer_set(std::string s)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   BEGIN(state_findformat);
}

void lexer_enable(int k)
{
   switch(k)
   {
      case IDENTIFIER:  BEGIN(state_identifier);   break;
      case SKIPALL:     BEGIN(state_skipall);      break;
      case SKIP:        BEGIN(state_skip);         break;
      case SKIPNOOP:    BEGIN(state_skipnoop);     break;
      case KEYWORD:     BEGIN(state_keyword);      break;
      case FINDFORMAT:  BEGIN(state_findformat);   break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}

std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


