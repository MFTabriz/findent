#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[682] =
    {   0,
      152,  150,  151,  149,  151,  150,  151,  146,  150,  151,
      145,  150,  151,  150,  151,  147,  150,  151,  148,  149,
      151,   16,   17,  150,  151,  150,  151,  150,  151,  150,
      151,  150,  151,  150,  151,  150,  151,  150,  151,  150,
      151,  150,  151,  150,  151,  150,  151,  150,  151,  150,
      151,  150,  151,  150,  151,    4,  151,    5,  151,    2,
        4,  151,    3,    4,  151,    8,  151,    9,  151,    6,
        8,  151,    7,    8,  151,   15,  151,   14,  151,   10,
       15,  151,   12,   15,  151,   11,   15,  151,   13,   15,
      151,    1,  151,  151,  151,  111,  151,  151,  111,  151,

      151,  151,  151,  151,  151,  151,  151,  142,  151,  142,
      151,  141,  151,  142,  151,  142,  151,  127,  142,  151,
      142,  151,  142,  151,  116,  151,  115,  151,  116,  151,
      120,  151,  119,  151,  120,  151,  120,  151,   18,  151,
       20,  151,   19,  151,  143,  145,   16,   17,   17,   16,
       17,   36,   72,   91,  111,   99,  111,   99,  111,  101,
      111,   99,  103,  105,  106,  111,  127,  134,  114,   18,
      144,   37,   53,   96,   99,  101,  111,   99,  103,  105,
      111,   99,  101,   99,  105,  100,  111,  103,  105,  106,
      111,  101,  103,  105,  111,  103,  105,  111,   99,  106,

      111,   99,  101,  106,  111,   99,  103,  106,  111,   98,
       99,  111,  128,  114,  114,  118,  117,   27,   45,   69,
       84,   85,   92,   93,  101,  105,   99,  101,  103,  105,
      111,   99,  111,   99,  101,  111,   99,  103,  111,   99,
      101,  105,   99,   99,  101,  100,  101,  111,  100,  103,
      105,  111,  106,  111,  101,  106,  111,  103,  106,  111,
      105,  101,  111,  101,  103,  111,  111,  103,  111,  101,
       99,  101,  103,  106,  111,   98,   99,  101,  111,   98,
       99,  103,  105,  111,  109,  111,  135,  114,   24,   31,
       52,   57,   68,   94,   97,  101,  105,   99,  101,  103,

      111,  100,  101,  103,  105,  111,  100,  111,  100,  101,
      111,  100,  103,  111,  101,  103,  106,  111,   98,   99,
      101,  103,  105,  111,   98,   99,  111,   98,   99,  101,
      111,   98,   99,  103,  111,  101,  109,  111,  103,  105,
      109,  111,  108,  111,  131,  130,  112,  114,  112,   23,
       46,   70,   73,   78,   95,  100,  101,  103,  111,   98,
       99,  101,  103,  111,  101,  103,  105,  109,  111,  109,
      111,  101,  109,  111,  103,  109,  111,  101,  108,  111,
      103,  105,  108,  111,  129,  137,  113,  113,  114,  112,
      114,  112,   32,   33,   40,   54,   65,   66,   74,   75,

       77,   83,   99,  105,  111,   99,  101,  105,  111,  105,
      111,  101,  105,  111,  110,  111,  102,  105,  111,  100,
      105,  111,  100,  101,  105,  111,   98,   99,  105,  111,
       98,   99,  101,  105,  111,  105,  109,  111,  101,  105,
      109,  111,  105,  108,  111,  101,  105,  108,  111,  108,
      111,  101,  108,  111,  136,   34,   35,   41,   49,   67,
       71,   99,  104,  105,  111,   99,  101,  104,  105,  111,
       99,  104,  111,   99,  101,  104,  111,  104,  105,  111,
      101,  104,  105,  111,  104,  111,  101,  104,  111,  101,
      110,  111,  104,  105,  107,  110,  111,  102,  111,  102,

      101,  102,  111,  104,  105,  110,  111,  100,  104,  105,
      111,  100,  101,  104,  105,  111,  100,  104,  111,  104,
      106,  111,  101,  104,  106,  111,  100,  101,  104,  111,
       99,  104,  106,  111,   99,  101,  104,  106,  111,   98,
       99,  104,  105,  111,   98,   99,  101,  104,  105,  111,
       98,   99,  104,  111,   98,   99,  101,  104,  111,  104,
      105,  109,  111,  101,  104,  105,  109,  111,  104,  109,
      111,  101,  104,  109,  111,  104,  105,  108,  111,  101,
      104,  105,  108,  111,  104,  108,  111,  101,  104,  108,
      111,16516,16517,  138,   22,   25,   28,   44,   47,   55,

       59,   62,   76,   82,   86,   89,  101,  104,  105,  110,
      111,  107,  110,  111,  101,  107,  110,  111,  104,  107,
      110,  111,  101,  102,  102,  110,  111,  101,  110,  111,
      104,  110,  111,16516,16517,16523,16524,   30,   61,   87,
       88,   90,  101,  104,  110,  111,  101,  104,  107,  110,
      111,16523,16524,   26,   51,   56, 8324, 8325,   29,   38,
       48,   50,   58,   60,   64,  125,  126,   39,   42,   63,
     8332, 8331,   81,   43,   79,   80,  121,  122,   21,  123,
      124
    } ;

static const flex_int16_t yy_accept[1349] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    6,    8,   11,   14,   16,   19,   22,
       26,   28,   30,   32,   34,   36,   38,   40,   42,   44,
       46,   48,   50,   52,   54,   56,   58,   60,   63,   66,
       68,   70,   73,   76,   78,   80,   83,   86,   89,   92,
       94,   95,   96,   98,   99,  101,  102,  103,  104,  105,
      106,  107,  108,  110,  112,  114,  116,  118,  121,  123,
      125,  127,  129,  131,  133,  135,  137,  139,  141,  143,

      145,  146,  146,  147,  147,  147,  149,  150,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  153,  153,  153,
      153,  153,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  155,  155,  155,  155,  155,  156,  156,
      158,  158,  158,  158,  159,  159,  159,  159,  160,  160,
      160,  160,  160,  160,  160,  162,  162,  162,  162,  162,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  168,  168,  168,  168,
      168,  168,  168,  169,  170,  170,  170,  170,  171,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  173,

      173,  173,  173,  173,  173,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  178,  178,  178,  178,  182,  182,  182,  182,
      184,  184,  184,  184,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  188,  188,  188,  188,
      188,  192,  192,  192,  192,  192,  192,  192,  196,  196,
      196,  196,  199,  199,  199,  199,  202,  202,  202,  202,
      202,  202,  202,  206,  206,  206,  210,  210,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  214,  214,  214,  214,
      214,  214,  215,  216,  216,  217,  218,  218,  218,  218,
      218,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  222,  223,
      223,  223,  223,  223,  224,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  226,  226,  226,
      227,  227,  227,  232,  232,  234,  237,  237,  240,  240,
      240,  243,  244,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  249,  249,
      249,  249,  253,  253,  253,  255,  255,  258,  258,  258,
      261,  261,  262,  264,  264,  267,  268,  268,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  271,  271,  276,
      276,  276,  276,  276,  280,  280,  280,  280,  285,  285,
      285,  285,  285,  285,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  288,  288,
      289,  289,  289,  289,  289,  290,  290,  290,  290,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  292,  292,  292,  292,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  295,  295,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  298,
      298,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  307,  307,

      309,  312,  312,  315,  315,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  325,  325,  328,  332,  332,
      336,  336,  336,  336,  336,  336,  336,  339,  339,  339,
      339,  343,  343,  343,  343,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  346,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      349,  350,  350,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  353,  353,  354,  354,
      354,  354,  354,  355,  355,  355,  355,  355,  355,  355,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  370,  372,

      375,  375,  378,  378,  378,  378,  378,  381,  381,  381,
      381,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  386,  386,  386,  386,  387,  387,  387,  387,
      387,  388,  390,  392,  393,  393,  393,  393,  393,  393,
      393,  393,  394,  395,  395,  395,  395,  395,  395,  395,
      395,  396,  396,  396,  396,  396,  396,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  398,  399,  399,
      399,  400,  401,  401,  402,  402,  402,  402,  402,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  406,  406,  406,  406,  406,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      412,  412,  412,  412,  412,  415,  415,  415,  415,  415,
      415,  415,  417,  417,  417,  417,  417,  417,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  431,  431,  431,  431,  431,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  439,  439,  439,  439,  439,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  446,
      446,  446,  446,  446,  450,  450,  452,  452,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  457,  458,  458,  459,  459,  459,  459,  459,
      459,  459,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  461,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  466,  466,  471,  471,
      474,  474,  478,  478,  481,  481,  485,  485,  487,  487,
      490,  490,  493,  493,  493,  493,  498,  498,  498,  500,

      500,  501,  501,  501,  504,  504,  504,  508,  508,  508,
      508,  512,  512,  517,  517,  520,  520,  523,  523,  527,
      527,  531,  531,  535,  535,  540,  540,  545,  545,  551,
      551,  555,  555,  560,  560,  564,  564,  569,  569,  572,
      572,  576,  576,  580,  580,  585,  585,  588,  588,  592,
      592,  592,  592,  592,  592,  592,  592,  594,  594,  594,
      595,  595,  595,  595,  596,  597,  597,  597,  598,  598,
      598,  598,  598,  598,  599,  600,  600,  600,  600,  601,
      601,  601,  602,  602,  602,  603,  603,  603,  604,  604,
      604,  604,  605,  606,  606,  606,  607,  607,  607,  607,

      612,  612,  615,  615,  619,  619,  619,  623,  623,  625,
      625,  626,  628,  631,  631,  634,  634,  634,  634,  634,
      636,  636,  636,  636,  636,  638,  638,  638,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      640,  640,  640,  640,  640,  640,  641,  642,  643,  643,
      647,  647,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  654,  654,  654,  654,  655,  655,  655,  655,
      655,  655,  655,  655,  656,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  658,  658,  659,  659,
      659,  659,  659,  660,  660,  661,  661,  661,  662,  663,

      664,  665,  666,  666,  666,  666,  666,  667,  668,  668,
      668,  668,  669,  670,  670,  671,  671,  671,  671,  671,
      671,  671,  672,  672,  673,  673,  673,  674,  674,  674,
      674,  674,  674,  675,  676,  676,  676,  676,  676,  677,
      677,  678,  678,  679,  680,  681,  682,  682
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,    1,   15,   16,    1,    1,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       33,   40,   41,   42,   43,   44,   45,   46,   47,   33,
       48,    1,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   33,   61,   62,   63,   64,
       65,   66,   33,   67,   68,   69,   70,   71,   72,   73,
       74,   33,    1,   75,    1,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    3,    4,
        1,    1,    1,    1,    1,    1,    5,    5,    6,    1,
        1,    7,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    8,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1588] =
    {   0,
        0,   75,  150,  225,  298, 3469,   21,   23,   22,   24,
       26,   96,   52,   53,   54,  127, 3468, 3467, 3434,  368,
       37,  254, 3420,  257, 3405,   41, 3357, 3354, 3371, 3340,
     3342, 6276, 6276,   50, 6276,   13, 3322, 6276, 6276,   44,
      155,   84,  157,  231,   85,  244,  299,  232,  234,  245,
       87,  276,  350,  248,  158, 6276, 6276, 6276, 6276, 6276,
     6276, 6276, 6276, 6276, 6276, 6276, 6276, 6276, 6276, 6276,
     6276, 3322, 6276,  102,  106,  424,  111,  128,  180,  499,
      393,  573, 6276,  189, 6276,  250,  385,  289,  355, 3287,
     6276, 6276, 3301, 6276, 6276,  201, 3284,    0, 6276, 6276,

     6276,  123,  119, 3259,    0, 3267,    0,  202,  279,  380,
      355,  392,  430,  431,  432,  246,  509,  504,  515,  262,
      433, 3235,  247,  439,  273,  159,  460,  519,  437,  511,
      323,  434, 3211,  514,  438,  508, 3193, 6276,  210,   27,
      397,  482,  534,  108,  403,  473,  584,  202,  647,  407,
      585,  596,  722,  461, 3174,  612,  624,  600,  669, 3177,
      540,  673,  614,  797,  711,  679,  818,  822,  688,  826,
      375,  564,  690,  509,  683,  822, 3144,  833,  714,  724,
      758,  570,  836,  700,  400, 3135,  639,    0, 6276,  772,
      841,  731,  590,  844,  803,  573,  834,  848,  843,  856,

      739,  735,  855,  737,  903,  847,  880,  744,  879,  512,
      885,  881,  891,  637,  935,  906,  905,  876,  922,  934,
      945,  949, 3105,  933,  705,  634,  981,  300,  702, 1008,
      764, 3112,  780,  852, 1012, 3115,  977, 1016,  978, 3099,
      697,   55, 1025, 3100, 3100,  989,  992, 1029, 1039,  993,
     1061, 1114, 1064, 1066, 1070,  409, 1069, 1080, 1088, 1092,
     3067, 1089, 1101, 3045, 1004, 1097, 1136, 6276, 1139, 1142,
     1151, 2986, 1098, 1155, 1163, 2982, 1141, 1167, 1176, 2962,
     2950, 1164, 6276, 1180, 1189, 2936, 1192,  546, 1193, 1202,
     1212, 1233, 1234, 1237, 1243, 1247, 1261, 1246, 1265, 1269,

     1279, 1287,  503, 1213,  654, 6276,  950,  559, 1281, 1308,
     1296,  629, 1183, 1019, 6276, 6276, 1236, 1286, 1298, 1289,
     1240, 1300, 1275, 1295, 1299, 1316, 1307,  648, 1050, 1327,
     1336, 1337, 1323, 1343, 1313, 1338, 1340, 1328, 1346, 1358,
     1355, 1357, 1359, 1386, 1383, 1375, 1366, 2910, 1385, 1367,
     1368, 1398, 1397, 1399, 1413, 1405, 1412, 2908, 2874, 1419,
     1424, 1425, 1427, 2873, 1439, 1426, 1457, 1379, 1491, 1463,
     1481, 1467, 1500, 1466, 1504, 1471, 2864, 1206, 1513, 2855,
     1477, 1509, 6276, 1518, 2854, 6276, 1521, 2825, 2826, 1530,
     6276, 2813, 6276, 1532, 1526, 1536, 1540, 1545, 1548, 1557,

     1542, 1561, 1571, 1592, 1596, 1646, 1600, 1601, 1612, 1620,
     1624, 1621, 1633, 1629, 1668, 1671, 1630, 2799, 1680, 1682,
     1695, 2778, 1676, 1699, 2764, 1703, 6276, 1708, 1712, 2720,
     1566, 6276, 6276, 1721, 6276, 2706, 1724, 2694, 1727, 1730,
     1739, 1735, 1744, 1748, 1757, 2679, 6276, 1753, 6276, 1761,
     1762, 1771, 1767, 2657, 1776, 1779, 1788, 2651, 1784, 1797,
     1807, 1828, 1829,  770, 1785, 1838, 1841, 1842, 1856, 1857,
     1860, 1866, 1869, 1870, 1886, 1880, 1889, 1121, 1201, 1393,
     1548,  724, 1586, 1891, 1902, 1909, 1919, 6276, 1918, 1933,
     1779, 1900, 1817, 1818, 1912, 1930, 1935, 1940, 1941, 1943,

     1942, 1956, 1049, 1648, 1958, 1950, 1658, 1878, 1928, 1961,
     1577, 1865, 1968, 2628, 1946, 1969, 1960, 2627, 1858, 1971,
     1976, 1984, 1986, 1998, 1974, 1999, 2616, 1996, 1989, 2004,
     2006, 2010, 2015, 2011, 2023, 2018, 2024, 2028, 2033, 2035,
     2034, 6276, 2037, 2614, 2054, 1898, 1801, 2064, 2078,  933,
     2081, 2596, 2089, 2583, 2085, 2095, 2104, 2108, 6276, 2111,
     6276, 2113, 2114, 2117, 2122, 2124, 1107, 2131, 2582, 2135,
     2571, 2127, 2139, 2142, 2145, 2148, 2162, 2165, 2149, 2168,
     2182, 1495, 2186, 2566, 2190, 2169, 2194, 1551, 2197, 2562,
     2201, 2471, 2205, 2208, 2212, 2432, 2215, 6276, 2218, 2361,

     6276, 2221, 2360, 2225, 6276, 1604, 2357, 2228, 2345, 2232,
     2235, 2239, 2242, 2171, 2170, 2246, 2249, 2251, 1639, 2258,
     2341, 2262, 2305, 2254, 6276, 2266, 2299, 6276, 2269, 2298,
     2274, 2295, 2296, 2299, 2308, 2304, 2282, 2313, 1686, 2316,
     2286, 2174, 2324, 2327,  829, 2328, 2331, 2336, 2337, 2340,
     2348, 2349, 2352, 2358, 2364, 2367, 2368, 1679, 6276, 6276,
     1796, 1080, 2328, 2379, 2383, 2387, 2393, 2398, 2394, 2413,
      463, 2356, 2142, 2388, 2407, 2380, 2404, 2408, 2360, 2400,
     2387, 2417, 2419, 2408, 1495, 2426, 2425, 2429, 2413, 2141,
     2430, 2442, 2444, 2446, 2447, 2448, 2468, 2456, 2459, 2473,

     2476, 2457, 2470, 2486, 2471, 2138, 2490, 2137, 2489, 2494,
     2497, 2500, 2507, 2482, 2504, 2511, 2518, 2520, 2499, 2081,
     2548, 2544, 2574, 2547, 2578, 2586, 2590, 2556, 2594, 2599,
     2603, 2608, 2611, 2612, 2621, 2617, 2626, 2629, 2638, 2634,
     2635, 2647, 2650, 2659, 2661, 2670, 2673, 2674, 2678, 2687,
     2690, 2699, 2684, 2695, 2704, 2707, 2716, 2712, 2713, 2725,
     2721, 2730, 2734, 2739, 2743, 6276, 2745, 2748, 2749, 2758,
     2762, 2771, 2774, 2768, 2783, 2779, 2788, 2791, 2800, 2796,
     2797, 2809, 2812, 2821, 6276, 2831, 2852, 2853, 2817, 2862,
     2818, 2866, 2868, 2881, 2884, 2885, 2894, 6276, 2066, 6276,

     2897, 2065, 2900, 2905, 2909, 2906, 2055, 2918, 2920, 2929,
     2002, 2914, 2932, 2933, 2941, 2942, 2945, 2951, 2955, 2954,
     2031, 6276, 2543, 2519, 2752, 2964, 2967, 2971, 2975, 2615,
     6276, 2099, 2401, 6276, 2907, 2921, 2943, 2962, 2640, 2961,
     2738, 1985, 1962, 2807, 2651, 2727, 2821, 2953, 2964, 2965,
     1922, 2984, 2973, 2985, 2988, 2999, 1914, 3000, 3004, 2976,
     3007, 3019, 3011, 3022, 3014, 3015, 1890, 1868, 3026, 3031,
     1849, 1845, 3037, 1830, 3038, 3025, 3041, 3045, 1816, 3039,
     3042, 3051, 3052, 3058, 3083, 3064, 3097, 3086, 3113, 3116,
     3125, 1819, 3094, 3129, 3103, 3134, 6276, 3138, 3147, 3143,

     3156, 3152, 3160, 3161, 3170, 3166, 3175, 3178, 3187, 1780,
     3183, 3196, 3184, 3200, 6276, 3205, 3209, 3214, 3218, 3223,
     3226,  897, 3234, 3231, 3243, 3246, 3255, 3258, 3232, 3267,
     3270, 3240, 3279, 3252, 3283, 3285, 3294, 1764, 3264, 3298,
     3302, 3303, 3312, 3316, 3320, 3325, 3321, 3330, 6276, 3334,
     3343, 3347, 3352, 3356, 3361, 3365, 3367, 3370, 3379, 3375,
     3384, 3388, 3393, 3397, 3401, 3402, 3411, 3407, 3416, 3419,
     3428, 1763, 3424, 3437, 3425, 3441, 6276, 3446, 3450, 3455,
     3459, 3464, 3474, 3495, 3496, 3499, 3508, 3504, 3517, 3523,
     3527, 1734, 3505, 3536, 3532, 3541, 6276, 3550, 3553, 3562,

     3565, 3568, 3571, 3580, 3576, 3585, 3588, 3597, 1731, 3593,
     3606, 3594, 3610, 6276, 3615, 1714, 3619, 6276, 3623, 3627,
     3631, 3635, 3639, 3643, 3647, 3126, 2833, 3163, 3652, 3656,
     3657, 6276, 3662, 3661, 3648, 3587, 3650, 3221, 3654, 3406,
     3668, 1669, 1657, 3212, 6276, 3643, 3498, 3662, 3672, 3670,
     3692, 3620, 3674, 3682, 3703, 3696, 3702, 3700, 3712, 3704,
     3710, 3714, 1636, 1593, 3719, 3722, 3723, 3724, 3720, 3726,
     3721, 3731, 3750, 3737, 3788, 1539, 3777, 6276, 3800, 1522,
     3805, 6276, 3809, 1492, 3814, 6276, 3818, 1484, 3823, 6276,
     3757, 1478, 3827, 3829, 3838, 1385, 3835, 3847, 3850, 3851,

     3859, 3855, 3856, 1317, 3865, 3869, 1286, 3873, 3882, 3886,
     1281, 3891, 6276, 3895, 1272, 3904, 1236, 3900, 6276, 3909,
     6276, 3913, 1224, 3918, 6276, 3922, 1206, 3927, 6276, 3931,
     1193, 3936, 6276, 3940, 1183, 3945, 6276, 3949, 1170, 3954,
     6276, 3958, 1073, 3963, 6276, 3967, 1072, 3972, 6276, 3975,
     3976, 3984, 3985, 3988, 3997, 2861, 3999, 3237, 4002, 6276,
     4007, 4010, 3973, 1029, 1019, 3978, 3732, 1016, 3977, 3369,
     3996, 4002, 3997, 1006, 1005, 3747, 3998, 4006,  971, 4007,
     4024,  960, 3999, 4010,  930, 4013, 4025,  907, 4034, 4035,
     4030,  894,  893, 4046, 4052,  832, 4056, 4054, 4075, 6276,

     4088,  838, 4083, 6276, 4097, 4101,  828, 4106,  827,  792,
      786,  772, 6276, 4115,  764, 4118, 4119, 4127, 3279, 4129,
      749,  689, 3516, 4111, 4132, 4108, 4121,  626, 4091, 3549,
     4077, 4123, 4127, 4128, 4129, 4126, 4125, 4146, 4136,  617,
     4145, 4141, 4133, 4150, 4155,  588,  572,  552, 4206, 6276,
     4209, 6276, 4189, 4212, 4218, 3624,  559, 4223,  540, 4228,
     3790, 4231,    0,    0, 4215,  542, 4172, 4119, 4205, 4217,
     4199, 4225, 4227,  510,  507, 4229, 4233, 4235, 4219, 4236,
     4239, 4241, 4259,  469, 4284, 6276, 4295, 6276,  440,  412,
      390, 4240,  364, 4223,  325, 4256, 4263,  275,  271,  265,

      236,  230, 4281, 4274, 4258, 4284, 4239, 4265, 4312, 4330,
     4291, 6276,  199, 4287,  185, 4303, 4302, 4311,  171,  163,
     4343, 6276, 4352, 6276, 4338, 4331,  129, 4308, 4339, 4270,
     4286, 4340,  126,  109, 4342, 4336, 4345, 4356,   91, 3598,
     6276, 3743, 6276,    9, 6276, 6276, 6276, 4412, 4420, 4428,
     4436, 4444, 4452, 4460, 4468, 4476, 4484, 4492, 4500, 4508,
     4512, 4516, 4522, 4530, 4538, 4546, 4554, 4562, 4570, 4578,
     4586, 4592, 4595, 4600, 4608, 4616, 4624, 4632, 4640, 4648,
     4656, 4664, 4672, 4680, 4688, 4696, 4704, 4712, 4720, 4728,
     4736, 4744, 4752, 4760, 4768, 4776, 4784, 4792, 4800, 4808,

     4816, 4824, 4832, 4840, 4848, 4856, 4864, 4872, 4880, 4888,
     4896, 4904, 4912, 4920, 4928, 4936, 4944, 4948, 4954, 4962,
     4970, 4978, 4986, 4994, 5002, 5010, 5018, 5026, 5034, 5042,
     5050, 5058, 5066, 5074, 5082, 5090, 5098, 5106, 5114, 5122,
     5130, 5138, 5146, 5154, 5162, 5170, 5178, 5186, 5190, 5196,
     5204, 5212, 5220, 5228, 5236, 5244, 5252, 5260, 5268, 5276,
     5284, 5292, 5300, 5308, 5316, 5324, 5332, 5340, 5348, 5356,
     5364, 5372, 5380, 5388, 5396, 5404, 5412, 5420, 5428, 5436,
     5439, 5445, 5453, 5461, 5469, 5477, 5485, 5493, 5501, 5509,
     5517, 5525, 5533, 5541, 5549, 5557, 5565, 5573, 5581, 5589,

     5597, 5605, 5613, 5621, 5629, 5637, 5645, 5653, 5661, 5669,
     5677, 5685, 5693, 5701, 5709, 5713, 5719, 5727, 5735, 5743,
     5751, 5759, 5767, 5775, 5783, 5791, 5799, 5807, 5815, 5823,
     5831, 5839, 5847, 5855, 5863, 5871, 5879, 5887, 5895, 5903,
     5911, 5919, 5927, 5935, 5943, 5951, 5959, 5967, 5975, 5983,
     5991, 5999, 6007, 6011, 6017, 6025, 6033, 6041, 6049, 6057,
     6065, 6073, 6081, 6089, 6097, 6105, 6113, 6121, 6129, 6137,
     6145, 6153, 6161, 6169, 6177, 6185, 6193, 6201, 6209, 6217,
     6225, 6233, 6237, 6243, 6251, 6259, 6267
    } ;

static const flex_int16_t yy_def[1588] =
    {   0,
     1348, 1348, 1349, 1349,    2,    5, 1350, 1350, 1351, 1351,
     1352, 1352, 1352, 1352, 1352, 1352, 1353, 1353, 1354, 1355,
     1356, 1356, 1357, 1357, 1358, 1358, 1359, 1359, 1360, 1360,
     1347, 1347, 1347, 1347, 1347, 1347, 1361, 1347, 1347, 1362,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1363, 1347, 1364, 1365, 1366, 1367, 1368, 1369, 1366,
     1364, 1368, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1370, 1347, 1347,

     1347, 1347, 1347, 1361, 1371, 1372, 1373, 1362, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1363, 1347, 1374, 1375,
     1376, 1377, 1365, 1375, 1378, 1379, 1380, 1375, 1381, 1382,
     1383, 1384, 1381, 1382, 1385, 1386, 1387, 1388, 1388, 1389,
     1390, 1388, 1391, 1392, 1380, 1380, 1380, 1380, 1380, 1380,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1393, 1347, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1347, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1394, 1395, 1396, 1375, 1397, 1389,
     1395, 1385, 1398, 1396, 1396, 1389, 1398, 1396, 1378, 1385,
     1399, 1379, 1379, 1389, 1399, 1400, 1401, 1402, 1403, 1404,
     1405, 1403, 1401, 1406, 1404, 1375, 1407, 1408, 1405, 1405,
     1389, 1409, 1405, 1385, 1347, 1406, 1406, 1347, 1406, 1402,
     1402, 1389, 1406, 1402, 1410, 1389, 1411, 1410, 1410, 1389,
     1412, 1411, 1347, 1411, 1410, 1389, 1413, 1375, 1414, 1415,
     1416, 1417, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1347, 1347, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1419, 1420, 1421, 1420,
     1422, 1421, 1421, 1422, 1421, 1423, 1385, 1412, 1389, 1389,
     1422, 1422, 1347, 1422, 1389, 1347, 1421, 1389, 1424, 1424,
     1347, 1389, 1347, 1425, 1426, 1427, 1426, 1428, 1427, 1427,

     1428, 1427, 1429, 1430, 1431, 1429, 1430, 1432, 1433, 1431,
     1431, 1434, 1431, 1428, 1428, 1428, 1432, 1385, 1435, 1433,
     1433, 1389, 1435, 1433, 1389, 1434, 1347, 1434, 1431, 1389,
     1347, 1347, 1347, 1428, 1347, 1389, 1427, 1389, 1436, 1437,
     1436, 1437, 1437, 1436, 1436, 1412, 1347, 1437, 1347, 1438,
     1439, 1440, 1439, 1385, 1441, 1440, 1440, 1389, 1441, 1440,
     1442, 1443, 1443, 1444, 1445, 1446, 1447, 1447, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,

     1449, 1449, 1347, 1347, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1347, 1449, 1449, 1450, 1451, 1452, 1451, 1453, 1452,
     1452, 1453, 1452, 1453, 1453, 1453, 1452, 1412, 1347, 1453,
     1347, 1454, 1455, 1456, 1455, 1457, 1456, 1456, 1457, 1456,
     1457, 1457, 1457, 1456, 1454, 1458, 1459, 1454, 1458, 1460,
     1461, 1459, 1459, 1462, 1459, 1460, 1463, 1461, 1461, 1463,
     1461, 1462, 1462, 1459, 1457, 1463, 1463, 1347, 1463, 1389,

     1347, 1461, 1389, 1462, 1347, 1464, 1465, 1464, 1465, 1465,
     1464, 1465, 1464, 1466, 1467, 1468, 1467, 1469, 1468, 1468,
     1469, 1468, 1469, 1469, 1347, 1469, 1389, 1347, 1468, 1389,
     1470, 1471, 1471, 1472, 1473, 1472, 1474, 1475, 1473, 1473,
     1389, 1475, 1473, 1476, 1477, 1478, 1479, 1454, 1476, 1476,
     1454, 1454, 1454, 1454, 1454, 1454, 1476, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1480,
     1347, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1347, 1347, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,

     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1482, 1483, 1484, 1483, 1485, 1484, 1484, 1485, 1485, 1485,
     1484, 1485, 1486, 1487, 1488, 1487, 1489, 1488, 1488, 1489,
     1489, 1489, 1488, 1489, 1490, 1491, 1490, 1492, 1493, 1494,
     1495, 1495, 1496, 1493, 1497, 1494, 1494, 1497, 1496, 1495,
     1497, 1497, 1494, 1496, 1497, 1347, 1498, 1499, 1499, 1498,
     1499, 1498, 1500, 1501, 1502, 1501, 1503, 1502, 1502, 1503,
     1503, 1503, 1502, 1503, 1347, 1504, 1505, 1505, 1506, 1507,
     1506, 1508, 1507, 1507, 1508, 1508, 1508, 1347, 1509, 1347,

     1507, 1509, 1510, 1511, 1512, 1511, 1513, 1514, 1512, 1512,
     1509, 1514, 1515, 1515, 1510, 1515, 1515, 1515, 1515, 1515,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1347, 1347, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1517, 1518, 1519, 1518, 1520, 1519,
     1519, 1509, 1520, 1519, 1520, 1520, 1347, 1520, 1519, 1520,

     1519, 1520, 1515, 1521, 1522, 1521, 1523, 1522, 1522, 1509,
     1523, 1522, 1523, 1523, 1347, 1523, 1522, 1523, 1522, 1523,
     1524, 1525, 1524, 1526, 1527, 1528, 1528, 1529, 1530, 1531,
     1532, 1533, 1534, 1533, 1535, 1534, 1534, 1509, 1535, 1534,
     1536, 1537, 1536, 1536, 1537, 1537, 1535, 1535, 1347, 1535,
     1534, 1536, 1535, 1534, 1537, 1535, 1538, 1539, 1538, 1539,
     1539, 1538, 1539, 1538, 1540, 1541, 1542, 1541, 1543, 1542,
     1542, 1509, 1543, 1542, 1543, 1543, 1347, 1543, 1542, 1543,
     1542, 1543, 1544, 1545, 1545, 1546, 1547, 1546, 1548, 1547,
     1547, 1509, 1548, 1547, 1548, 1548, 1347, 1548, 1547, 1548,

     1547, 1549, 1550, 1551, 1550, 1552, 1551, 1551, 1509, 1552,
     1551, 1552, 1552, 1347, 1552, 1509, 1551, 1347, 1553, 1553,
     1549, 1553, 1553, 1553, 1553, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1347, 1347, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1555, 1509, 1556, 1347, 1555, 1509,
     1556, 1347, 1557, 1509, 1558, 1347, 1557, 1509, 1558, 1347,
     1559, 1560, 1561, 1562, 1562, 1509, 1563, 1562, 1564, 1564,

     1564, 1565, 1566, 1567, 1568, 1568, 1509, 1561, 1568, 1569,
     1509, 1570, 1347, 1569, 1509, 1571, 1509, 1572, 1347, 1570,
     1347, 1573, 1509, 1574, 1347, 1575, 1509, 1576, 1347, 1575,
     1509, 1576, 1347, 1577, 1509, 1578, 1347, 1577, 1509, 1578,
     1347, 1579, 1509, 1580, 1347, 1579, 1509, 1580, 1347, 1581,
     1581, 1582, 1581, 1582, 1582, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1347,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1561, 1561, 1347,

     1561, 1509, 1563, 1347, 1563, 1562, 1509, 1565, 1567, 1567,
     1567, 1509, 1347, 1568, 1509, 1581, 1581, 1581, 1347, 1347,
     1584, 1585, 1347, 1347, 1347, 1583, 1583, 1583, 1583, 1347,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1561, 1347,
     1563, 1347, 1582, 1581, 1582, 1347, 1584, 1584, 1585, 1585,
     1347, 1347, 1586, 1587, 1583, 1583, 1583, 1347, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1582, 1347, 1584, 1347, 1585, 1347, 1347, 1586,
     1587, 1583, 1583, 1347, 1583, 1583, 1583, 1583, 1583, 1583,

     1583, 1583, 1583, 1583, 1583, 1583, 1347, 1347, 1586, 1587,
     1583, 1347, 1583, 1583, 1583, 1583, 1583, 1583, 1347, 1347,
     1586, 1347, 1587, 1347, 1583, 1583, 1583, 1583, 1583, 1347,
     1347, 1583, 1583, 1583, 1583, 1347, 1347, 1583, 1583, 1347,
     1347, 1347, 1347, 1583, 1347, 1347,    0, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347
    } ;

static const flex_int16_t yy_nxt[6352] =
    {   0,
       32,   32,   33,   34,   32,   32,   32,   32,   32,   32,
       32,   35,   32,   32,   32,   32,   36,   36,   32,   32,
       32,   32,   32,   57,   61,   57,   61,  105,   65,  103,
      103,  229,   58,   59,   58,   59,  230,   66,   84,   85,
       84,   86,   96,   95,   96,   97,   67,   38,   32,   32,
       32,  106,  107,  101,   65,   65,   65,  392,   69,  245,
       69,   69,  105,   66,   66,   66,  102,  102,   69,   62,
       63,   62,   63,   68,   32,   32,   32,   39,   34,   32,
       32,   32,   32,   32,   32,   32,   35,   32,   32,   32,
       32,   36,   36,   32,   32,   32,   32,   32,   65,   68,

       68,   68,  105,  105,  140,  105,  141,   66,  144,  105,
      145,  142,  229,  155,  129,  146,   67,  230,  111,  118,
      156,  119,   38,   32,   32,   32,  101,  105,   69,   65,
      148,   69,  150,   69,   69,  103,  103,  157,   66,  102,
      102,   69,  129,   68,  105,  111,  118,  105,  119,   32,
       32,   32,   33,   34,   32,   32,   32,   32,   32,   32,
       32,   35,   32,   32,   32,   32,   36,   36,   32,   32,
       32,   32,   32,  105,   68,  105,  105,  105, 1331,  109,
      112,  159,  160,  159,  161,  214, 1330,  113,  136,  162,
      171,  114,  171,  172,  115,  110,  116,   38,   32,   32,

       32,   69,  185,  105,  185,  186,  229,  109,  112,  106,
      107,  230,  140,  214,  226,  113,  136,  105,  114,  227,
      105,  115,  110,  116,   32,   32,   32,   39,   34,   32,
       32,   32,   32,   32,   32,   32,   35,   32,   32,   32,
       32,   36,   36,   32,   32,   32,   32,   32,  105,  105,
      105,  173,  105,  173,  105,   87,   85,   87,   86,   92,
       88,   93,  105,  105,  105,  105,  105,   89,  117,  125,
       93,  126,   38,   32,   32,   32,   90,  198,  174,   89,
      105,  120,   93,  105,  127,  210,  121,  128,  135,  105,
      178,  105,  178,  105,  105,  117,  125,  105,  126,   32,

       33,  208,  213,  130,  229,  198,  174,   89,  120,  230,
       93,  127,  210,  121,  128,  135,  179,  105,  131,  190,
      180,   41,   42,   43,   44,   45,   46,  122,  208,   47,
      213,  130,   48,   49,  123,  124,   50,   51,   52,   53,
       54,  105,   55,  105,  179,  131,  190,  220,  180,   41,
       42,   43,   44,   45,   46,  122,  181,   47,  181,   48,
       49,  123,  124,   50,   51,   52,   53,   54,  105,   55,
       75,   76,   77,  105,   78,  220,  171,   79,  171,  172,
      132,   78,  105,  182,   80,   80,  175,  133,  175,  172,
       81,  176,  192,   82,   78,  140,  134,  141,  105,  232,

     1310,  185,  142,  185,  186,  240,  233,  177,  132,  155,
      105,  182,  241,  229,  133,  163,  254, 1309,  230,  192,
      191,   82,   78,  134,  147,  147,  148,  149,  150,  147,
      147,  147,  193,  152,  147,  147,  147,  147,  147,  147,
      153,  153,  147,  147,  147,  147,  147,  191,  105,  105,
      105,  105,  105,  194,  195,  105,  105,  105, 1308,  193,
      217,  221,  218,  155,  211,  223,  834,  196,  197,  209,
      254,  147,  147,  147,  243,  244,  243,  245,  105,  834,
      212,  194,  195,  235,  236,  235,  237, 1307,  217,  221,
      218,  238,  211,  223,  196,  197,  209,  215,  147,  147,

      147,  148,  153,  150,  147,  147,  147,  212,  157,  147,
      147,  147,  147,  147,  147,  153,  153,  147,  147,  147,
      147,  147,  105,  199,  215,  105,  105,  105,  105,  105,
      105,  203,  105,  105,  200,  224,  144,  105,  145,  478,
      303,  205,  283,  146,  204,  219,  147,  147,  147,  284,
      229,  201,  222,  202,  351,  230,  206,  207,  216,  203,
      105, 1260,  200,  224, 1258,  173,  478,  173,  303,  205,
      105,  204,  219,  147,  164,  148,  164,  150,  201,  222,
      202,  351,  157,  206,  207,  216,  148,  256,  247,  257,
      105,  105,  174,  248,  258,  483,  165,  260,  261,  260,

      262,  308,  276,  166,  277,  263,  105,  167,  105,  278,
      168,  325,  169,  267,  268,  267,  288,  321,  289,  170,
      174,  269,  483,  290,  165,  271,  272,  271,  273,  308,
      312,  166,  312,  274,  167,  105,  232,  168,  325,  169,
      315,  316,  315,  371,  105,  321,  170,  246,  246,  148,
      249,  247,  246,  246,  246,  105,  251,  246,  246,  246,
      246,  246,  246,  252,  252,  246,  246,  246,  246,  246,
      279,  160,  279,  277,  285,  286,  285,  277,  278,  355,
      481,  148,  278,  247,  175,  503,  175,  172,  248,  176,
      148,  173,  247,  173,  246,  246,  246,  248,  390,  391,

      390,  312,  295,  313,  377,  177,  355,  140,  481,  368,
     1260,  378,  503,  148,  369,  247,  314,  314,  174,  301,
      248,  246,  246,  246,  148,  252,  247,  246,  246,  246,
      295,  248,  246,  246,  246,  246,  246,  246,  252,  252,
      246,  246,  246,  246,  246,  293,  174,  301,  304,  105,
      305,  294,  306,  105, 1258,  105,  320,  105,  662,  181,
      307,  181,  105,  331,  334,  332,  232,  349,  281,  246,
      246,  246,  293,  371,  229,  304,  281,  305,  294,  230,
      306,  382,  383,  382,  320,  662,  182,  307, 1211,  384,
      105,  331,  334,  332, 1211,  349,  246,  246,  291,  148,

      291,  247,  246,  246,  246,  246,  248,  246,  246,  246,
      246,  246,  246,  317,  182,  246,  246,  246,  246,  246,
      148,  105,  247,  178,  148,  178,  247,  248,  148, 1211,
      247,  248,  281,  229,  178,  248,  178,  309,  230,  309,
      317,  296,  281,  324,  246,  246,  246,  246,  298,  179,
      105,  302,  105,  180,  385,  297,  374,  299,  300,  105,
      179,  375,  105,  310,  180,  105,  105,  311,  328,  296,
      324,  246,  318,  105,  105,  326,  298,  179,  319,  302,
      322,  180,  297,  323,  299,  300,  347,  329,  179,  327,
      333,  310,  180,  330,  105,  311,  328,  105,  105,  105,

      318,  229,  326,  105,  350,  319,  230,  322,  353,  105,
      323,  105,  105,  347,  329,  348,  327,  333,  360,  352,
      330,  105,  354,  105,  105,  105,  335,  336,  337,  338,
      339,  340,  350,  358,  341,  385,  353,  728,  342,  359,
      105,  343,  348,  344,  345,  360,  352,  346,  105,  361,
      354,  105,  105,  105,  335,  336,  337,  338,  339,  340,
      356,  358,  341,  105,  357,  342,  359,  105,  343,  362,
      344,  345,  366,  363,  346,  482,  365,  361,  105,  386,
      240,  364,  373,  236,  373,  374,  384,  241,  356,  105,
      375,  148,  357,  395,  155,  256,  362,  408,  396,  366,

      363,  398,  409,  482,  365,  431,  432,  431,  364,  379,
      380,  379,  281,  373,  236,  373,  374,  387,  388,  387,
      374,  375,  491,  105,  105,  375,  243,  244,  243,  245,
      400,  272,  400,  401,  105,  491,  491,  105,  402,  394,
      394,  148,  403,  395,  394,  394,  394,  105,  405,  394,
      394,  394,  394,  394,  394,  406,  406,  394,  394,  394,
      394,  394,  411,  261,  411,  412,  155,  415,  268,  415,
      413,  418,  256,  398,  408,  416,  281,  281,  419,  409,
      504,  421,  422,  421,  423,  684,  394,  394,  394,  424,
      425,  427,  412,  411,  261,  411,  412,  413,  428,  433,

      433,  413,  429,  430,  429,  412,  416,  416,  504,  436,
      413,  740,  684,  394,  394,  394,  148,  406,  395,  394,
      394,  394,  823,  396,  394,  394,  394,  394,  394,  394,
      406,  406,  394,  394,  394,  394,  394,  415,  268,  415,
      434,  435,  434,  283,  436,  416,  401,  658,  416,  823,
      443,  402,  400,  272,  400,  401,  437,  438,  437,  401,
      402,  394,  394,  394,  402,  276,  283,  440,  444,  286,
      444,  440,  441,  443,  281,  658,  441,  445,  160,  445,
      440,  448,  449,  448,  312,  441,  490,  281,  394,  443,
      444,  286,  444,  440,  288,  454,  451,  281,  441,  491,

      491,  452,  455,  457,  458,  457,  459,  558,  559,  558,
      281,  460,  394,  461,  148,  461,  395,  394,  394,  394,
      394,  396,  394,  394,  394,  394,  394,  394,  281,  659,
      394,  394,  394,  394,  394,  464,  148,  465,  395,  148,
      281,  395,  466,  396,  479,  148,  396,  395,  148,  148,
      395,  395,  396,  480,  105,  396,  396,  659,  105,  394,
      394,  394,  394,  148,  468,  395,  496,  148,  467,  395,
      396,  148,  479,  395,  396,  492,  281,  472,  396,  469,
      480,  148,  309,  395,  309,  281,  394,  470,  396,  148,
      281,  395,  468,  105,  496,  467,  396,  487,  498,  487,

      473,  471,  492,  474,  105,  472,  469,  105,  310,  484,
      475,  484,  311,  105,  470,  493,  105,  105,  105, 1211,
      476,  477,  495,  494,  488,  105,  498,  473,  471,  497,
      474,  105,  489,  500,  105,  499,  310,  475,  502,  501,
      311,  105,  485,  493,  486,  105,  105,  476,  477,  495,
      508,  494,  488,  511,  105,  105,  105,  497,  105,  489,
      500,  105,  499,  505,  105,  514,  502,  501,  507,  485,
      506,  486,  512,  105,  509,  105,  105,  105,  508,  513,
      511,  232,  515,  518,  105,  105,  105,  510,  549,  281,
      505,  519,  514,  105,  520,  516,  507,  506,  521,  512,

      517,  105,  509,  105,  105,  526,  513,  530,  529,  515,
      524,  518,  527,  522,  510,  105,  105,  105,  519,  528,
      660,  520,  516,  105,  534,  521,  532,  517,  523,  525,
      105,  105,  536,  526,  530,  529,  533,  105,  524,  527,
      531,  522,  105,  105,  105,  105,  528,  535,  660,  539,
      542,  537,  534,  544,  532,  523,  525,  105,  538,  140,
      536,  546,  540,  533,  541,  232,  547,  531,  386,  385,
      543,  552,  549,  377,  535,  556,  553,  539,  537,  386,
      378,  544,  555,  383,  555,  538,  556,  265,  281,  540,
      556,  541,  551,  236,  551,  552,  281,  425,  543,  753,

      553,  551,  236,  551,  552,  557,  388,  557,  552,  553,
      555,  383,  555,  553,  379,  380,  379,  281,  556,  560,
      561,  560,  557,  388,  557,  552,  281,  556,  155,  847,
      553,  390,  391,  390,  148,  566,  563,  568,  272,  568,
      569,  564,  155,  281,  433,  570,  572,  268,  572,  566,
      436,  573,  569,  600,  573,  758,  847,  570,  568,  272,
      568,  569,  574,  438,  574,  569,  570,  431,  432,  431,
      570,  562,  562,  148,  575,  563,  562,  562,  562,  661,
      577,  562,  562,  562,  562,  562,  562,  578,  578,  562,
      562,  562,  562,  562,  256,  105,  580,  583,  261,  583,

      584,  581,  256,  418,  580,  585,  276,  661,  768,  581,
      587,  105,  663,  589,  422,  589,  590,  692,  562,  562,
      562,  591,  425,  427,  584,  583,  261,  583,  584,  585,
      593,  433,  418,  585,  594,  430,  594,  584,  573,  587,
      663,  627,  585,  780,  692,  562,  562,  562,  148,  578,
      563,  562,  562,  562,  105,  564,  562,  562,  562,  562,
      562,  562,  578,  578,  562,  562,  562,  562,  562,  572,
      268,  572,  595,  435,  595,  105,  105,  573,  601,  685,
      573,  597,  598,  597,  600,  599,  590,  105,  799,  599,
      795,  591,  688,  562,  562,  562,  589,  422,  589,  590,

      602,  603,  602,  590,  591,  427,  821,  685,  591,  604,
      605,  604,  593,  594,  430,  594,  584,  593,  281,  688,
      562,  585,  595,  435,  595,  574,  438,  574,  569,  276,
      573,  607,  283,  570,  821,  281,  608,  283,  281,  610,
      611,  286,  611,  607,  610,  612,  449,  612,  608,  611,
      286,  611,  607,  610,  612,  449,  612,  608,  613,  160,
      613,  607,  610,  288,  454,  615,  608,  281,  281,  454,
      616,  618,  620,  458,  620,  621,  618,  624,  625,  624,
      622,  627,  671,  621,  281,  626,  628,  637,  622,  620,
      458,  620,  621,  626,  638,  671,  671,  622,  629,  630,

      629,  621,  727,  236,  727,  728,  622,  562,  631,  148,
      631,  563,  562,  562,  562,  562,  564,  562,  562,  562,
      562,  562,  562,  281,  822,  562,  562,  562,  562,  562,
      464,  464,  634,  634,  105,  105,  105,  635,  635,  640,
      641,  640,  642,  645,  645,  646,  646,  643,  105,  674,
      647,  647,  822,  673,  562,  562,  562,  562,  148,  148,
      563,  563,  148,  105,  563,  564,  564,  105,  148,  564,
      563,  148,  148,  563,  563,  564,  105,  674,  564,  564,
      673,  562,  148,  105,  563,  648,  105,  650,  148,  564,
      563,  148,  484,  563,  484,  564,  105,  649,  564,  698,

      232,  651,  693,  664,  653,  664,  652,  725,  105,  654,
      666,  656,  666,  648,  689,  650,  657,  655,  105,  668,
      487,  668,  487,  672,  649,  485,  698,  486,  651,  693,
      105,  653,  105,  652,  312,  667,  670,  654,  675,  656,
      105,  689,  665,  669,  657,  655,  105,  488,  105,  671,
      671,  672,  485,  105,  486,  489,  690,  676,  105,  105,
      105,  105,  677,  667,  105,  678,  675,  679,  105,  665,
      681,  669,  680,  682,  105,  488,  105,  687,  105,  105,
      105,  683,  489,  686,  690,  676,  105,  105,  695,  105,
      677,  691,  105,  678,  105,  679,  697,  699,  681,  694,

      680,  682,  105,  105,  105,  687,  281,  105,  696,  683,
      702,  686,  704,  700,  105,  695,  105,  105,  701,  691,
      707,  703,  105,  697,  105,  699,  705,  694,  105,  105,
      706,  708,  709,  105,  712,  696,  105,  710,  702,  704,
      700,  105,  105,  711,  714,  701,  105,  715,  707,  703,
      713,  105,  105,  105,  705,  105,  140,  706,  722,  708,
      709,  718,  712,  723,  265,  710,  232, 1026,  716,  281,
      281,  711,  714,  725,  717,  715,  719,  720,  713,  730,
      383,  730,  727,  236,  727,  728,  730,  383,  730,  718,
      731,  388,  731,  728, 1026,  716,  732,  561,  732,  105,

      312,  717,  312,  719,  720,  731,  388,  731,  728,  558,
      559,  558,  732,  561,  732,  148,  155,  734,  739,  272,
      739,  740,  735,  737,  155,  742,  268,  742,  742,  268,
      742,  737,  739,  272,  739,  740,  743,  438,  743,  740,
      744,  435,  744,  743,  438,  743,  740,  148,  745,  734,
      256,  256,  749,  749,  746,  105,  105,  750,  750,  105,
      105,  747,  747,  752,  261,  752,  753,  148,  747,  734,
      418,  418,  454,  288,  735,  774,  800,  755,  755,  777,
      775,  747,  747,  757,  422,  757,  758,  752,  261,  752,
      753,  760,  430,  760,  753,  762,  598,  762,  757,  422,

      757,  758,  763,  603,  763,  758,  764,  605,  764,  760,
      430,  760,  753,  744,  435,  744,  762,  598,  762,  765,
      766,  765,  763,  603,  763,  758,  764,  605,  764,  770,
      286,  770,  768,  771,  449,  771,  770,  286,  770,  768,
      771,  449,  771,  772,  160,  772,  768,  779,  458,  779,
      780,  454,  782,  625,  782,  782,  625,  782,  777,  779,
      458,  779,  780,  783,  630,  783,  780,  784,  785,  784,
      783,  630,  783,  780,  733,  786,  148,  786,  734,  733,
      733,  733,  733,  735,  733,  733,  733,  733,  733,  733,
      281,  265,  733,  733,  733,  733,  733,  464,  464,  789,

      789,  637,  281,  281,  790,  790,  637,  628,  792,  794,
      641,  794,  795,  792,  797,  798,  797,  794,  641,  794,
      795,  733,  733,  733,  733,  801,  802,  801,  795,  645,
      807,  804,  810,  811,  810,  812,  805,  808,  148,  645,
      734,  804,  645,  628,  804,  735,  805,  283,  733,  805,
      148,  148,  734,  734,  148,  824,  734,  735,  735,  283,
      148,  735,  734,  813,  281,  281,  148,  735,  734,  148,
      645,  734,  804,  735,  105,  814,  735,  805,  105,  816,
      664,  835,  664,  824,  825,  815,  825,  841,  666,  817,
      666,  813,  820,  818,  827,  829,  827,  829,  105,  668,

      819,  668,  312,  814,  312,  105,  105,  816,  838,  835,
      826,  836,  815,  667,  832,  841,  833,  817,  105,  665,
      820,  818,  105,  669,  828,  105,  105,  819,  830,  834,
      837,  105,  843,  846,  601,  105,  838,  105,  826,  836,
      842,  667,  845,  105,  105,  839,  665,  105,  105,  840,
      849,  669,  828,  844,  852,  830,  851,  853,  837,  843,
      105,  846,  105,  850,  105,  105,  105,  842,  848,  855,
      845,  858,  839,  427,  105,  105,  840,  105,  849,  854,
      844,  852,  857,  860,  851,  853,  105,  856,  105,  105,
      850,  105,  865,  859,  105,  848,  866,  855,  862,  858,

      105,  861,  863,  864,  105,  867,  854,  105,  105,  857,
      869,  860,  105,  868,  856,  105,  871,  105,  105,  865,
      873,  859,  105,  866,  878,  105,  862,  870,  861,  105,
      863,  864,  867,  872,  874,  875,  105,  869,  105,  879,
      884,  868,  880,  881,  871,  876,  232,  877,  873,  232,
      140,  878,  886,  889,  870, 1028,  889,  887,  386,  882,
      872,  874,  883,  875,  601,  898,  879,  884,  427, 1027,
      880,  881,  876,  433,  877,  891,  892,  891,  893,  896,
      897,  896, 1028,  894,  433,  386,  882,  898,  385,  883,
      893,  899,  236,  899,  893,  894,  386, 1027,  386,  894,

      900,  383,  900,  898,  901,  388,  901,  893,  898,  902,
      561,  902,  894,  148,  155,  904, 1033,  898, 1033,  155,
      905,  907,  909,  910,  909,  911,  907,  914,  915,  914,
      912,  436,  105,  911,  105,  916,  433,  433,  912,  917,
      272,  917,  911,  916,  916,  105,  105,  912,  918,  268,
      918,  919,  438,  919,  911,  281,  916, 1034,  105,  912,
      920,  435,  920,  922,  923,  924,  265, 1039,  916,  105,
      925,  927,  928,  927,  929,  922,  256,  924,  932,  912,
      418,  447,  930,  933, 1034, 1043,  427,  935,  937,  938,
      937,  939,  425,  946,  942, 1039,  940,  418,  281,  943,

      944,  261,  944,  942,  935,  948,  949,  948,  943,  600,
      281,  939, 1043,  950,  601,  427,  940,  951,  422,  951,
      939,  950,  946,  601,  281,  940,  952,  430,  952,  942,
      950,  953,  598,  953,  943,  954,  603,  954,  939,  950,
      955,  605,  955,  940,  956,  766,  956,  276,  946,  958,
      283,  283,  950,  825,  959,  825,  105,  961,  961,  962,
      286,  962,  958,  963,  449,  963, 1041,  959,  281, 1044,
      454,  961,  964,  160,  964,  958,  288,  969,  966,  826,
      959,  454,  281,  967,  971,  972,  971,  973,  969,  976,
      977,  976,  974,  627, 1041,  973, 1044,  978,  628,  628,

      974,  979,  458,  979,  973,  978,  978,  826,  265,  974,
      980,  625,  980,  981,  630,  981,  973,  281,  978,  637,
      637,  974,  982,  785,  982,  105,  989,  989,  393,  281,
      978,  903,  983,  148,  983,  904,  903,  903,  903,  903,
      905,  903,  903,  903,  903,  903,  903, 1042, 1045,  903,
      903,  903,  903,  903,  464,  464,  986,  986,  281,  281,
     1157,  987,  987,  991,  992,  991,  993,  996,  997,  996,
      799,  994,  993,  265, 1042,  998, 1045,  994,  903,  903,
      903,  903,  999,  641,  999,  993,  800,  800, 1157, 1219,
      994,  105,  105,  998,  998, 1000,  798, 1000, 1001,  802,

     1001,  993,  645,  998, 1003,  903,  994,  807,  807, 1004,
     1008, 1009, 1008, 1010, 1006, 1006, 1018, 1219, 1011, 1013,
     1014, 1013, 1016, 1015, 1010,  105,  105, 1015,  105, 1011,
     1017,  811, 1017, 1010,  148,  148,  904,  904, 1011,  105,
      281,  905,  905,  645,  148, 1003,  904,  148, 1035,  904,
     1004,  905,  447,  148,  905,  904,  148,  148,  904,  904,
      905,  105, 1036,  905,  905, 1029,  281, 1029,  827, 1020,
      827,  105, 1031, 1019, 1031, 1035,  829, 1025,  829,  105,
      105, 1022,  105,  105, 1037, 1038,  281, 1021, 1040, 1036,
      281,  105, 1046, 1023,  105, 1030, 1020, 1024,  828, 1032,

     1019, 1047,  105,  105, 1048, 1025,  105, 1049, 1022,  830,
     1051, 1037, 1050, 1038, 1021, 1056, 1040,  105,  105, 1046,
     1023, 1052,  105, 1030, 1024,  105,  828, 1032, 1047,  105,
     1053, 1048,  105,  105, 1054, 1049,  830,  105, 1051, 1050,
      105, 1057, 1056,  105,  105, 1055, 1058, 1060, 1052,  105,
     1059, 1061, 1062, 1063,  265,  105,  105,  105, 1053,  105,
      105, 1054, 1065,  105, 1067, 1071,  232, 1064, 1057,  105,
      105,  281, 1055,  889, 1058, 1060,  105, 1059, 1061, 1062,
     1066, 1063, 1070, 1068, 1069,  140, 1073,  886,  232, 1074,
     1065, 1067,  887, 1071, 1064,  889,  386, 1072, 1075, 1076,

     1075,  893,  393,  898,  281,  386,  894, 1066,  265, 1070,
     1068, 1069,  898, 1073, 1077, 1078, 1077, 1074,  385,  281,
      893,  265,  898,  105, 1072,  894,  891,  892,  891,  893,
     1079, 1080, 1079,  893,  894,  896,  897,  896,  894, 1081,
     1082, 1081,  187,  898,  900,  383,  900,  898,  899,  236,
      899,  893,  898,  902,  561,  902,  894,  901,  388,  901,
      893,  898,  148,  155,  904,  894,  183, 1156,  155,  905,
      907, 1083, 1084, 1083,  911,  907, 1085, 1086, 1085,  912,
      436,  281,  911,  265,  916,  433,  433,  912,  909,  910,
      909,  911,  916,  916, 1156,  138,  912, 1087, 1088, 1087,

      911,  914,  915,  914, 1158,  912, 1089, 1090, 1089,  916,
      917,  272,  917,  911,  916,  918,  268,  918,  912,  919,
      438,  919,  911,  916,  920,  435,  920,  912,  922,  105,
      924, 1158,  916, 1092, 1104,  930,  922,  923,  924,  105,
     1093,  916,  418,  925, 1095, 1096, 1095, 1097, 1099,  935,
      929, 1170, 1098,  105,  418,  912,  927,  928,  927,  929,
     1101,  935, 1102, 1166,  912, 1223,  601,  280, 1106, 1107,
     1106, 1108,  256,  950,  932,  107, 1109,  105, 1170,  933,
     1110, 1111, 1110,  939, 1112, 1113, 1112,  600,  940,  939,
     1166,  187,  950, 1223,  940,  937,  938,  937,  939, 1114,

     1115, 1114,  939,  940,  425,  427,  942,  940,  184,  183,
     1256,  943,  946, 1116, 1117, 1116,  942,  944,  261,  944,
      942,  943,  427,  601,  138,  943, 1118, 1119, 1118,  946,
      950,  948,  949,  948,  946, 1120, 1121, 1120, 1256,  950,
      105, 1347,  100,  950,  951,  422,  951,  939,  952,  430,
      952,  942,  940,  953,  598,  953,  943,  954,  603,  954,
      939,  950,  955,  605,  955,  940,  956,  766,  956,  276,
      946,  958,  283,  100,  950,   71,  959,  283,   71,  961,
     1122, 1123, 1122,  958,  961, 1124, 1125, 1124,  959,  962,
      286,  962,  958,  961,  963,  449,  963,  959,  964,  160,

      964,  958,  961,  288,  454,  966,  959,   95, 1230,  454,
      967,  969, 1126, 1127, 1126,  973,  969, 1128, 1129, 1128,
      974,  627,   92,  973,  105,  978,  628,  628,  974,  971,
      972,  971,  973,  978,  978, 1230,   73,  974, 1130, 1131,
     1130,  973,  976,  977,  976, 1168,  974, 1132, 1133, 1132,
      978,  979,  458,  979,  973,  978,  980,  625,  980,  974,
      981,  630,  981,  973,  978,  982,  785,  982,  974,   71,
       71,   39, 1168,  978,  903,  983,  148,  983,  904,  903,
      903,  903,  903,  905,  903,  903,  903,  903,  903,  903,
     1347, 1347,  903,  903,  903,  903,  903,  464,  464,  986,

      986,  637, 1347, 1347,  987,  987,  637,  800,  989, 1134,
     1135, 1134,  993,  989,  998, 1347,  105,  994, 1136, 1137,
     1136,  903,  903,  903,  903,  799,  998,  993,  991,  992,
      991,  993,  994, 1172,  800, 1347,  994, 1138, 1139, 1138,
      993,  998,  996,  997,  996,  994, 1347, 1261,  903, 1347,
      998, 1140, 1141, 1140,  999,  641,  999,  993, 1347,  998,
     1172, 1347,  994, 1000,  798, 1000, 1001,  802, 1001,  993,
      645,  998, 1003,  807,  994, 1261, 1268, 1004,  807, 1347,
     1006, 1142, 1143, 1142, 1010, 1006, 1144, 1145, 1144, 1011,
     1016, 1347, 1010, 1347, 1015, 1018, 1018, 1011, 1008, 1009,

     1008, 1010, 1015, 1015, 1268,  105, 1011, 1146, 1147, 1146,
     1010, 1013, 1014, 1013, 1164, 1011, 1148, 1149, 1148, 1015,
     1017,  811, 1017, 1010, 1015,  148, 1345,  904, 1011,  148,
     1347,  904,  905,  645, 1347, 1003,  905,  148,  105,  904,
     1004,  148, 1164,  904,  905,  148, 1177,  904,  905,  148,
     1150,  904,  905, 1029, 1345, 1029,  905, 1159, 1031, 1159,
     1031,  105, 1161, 1033, 1161, 1033,  105, 1151,  105, 1284,
     1154, 1347,  105, 1165, 1177, 1152, 1153, 1167, 1150, 1163,
      105, 1155, 1171, 1030, 1160, 1032,  105, 1162,  105, 1173,
      105, 1169,  105, 1347, 1151, 1347, 1284, 1175, 1154, 1178,

      105, 1165, 1152, 1153, 1034, 1167, 1174, 1163, 1155, 1171,
      105, 1030, 1160, 1032,  105, 1162, 1179, 1173,  105, 1169,
      105,  105,  105, 1176, 1181, 1175, 1183, 1178,  105, 1182,
      105, 1034,  105, 1174, 1180, 1184, 1186,  105,  105,  105,
      105,  105,  105, 1179,  105, 1185, 1188, 1192, 1191,  105,
      105, 1176, 1181, 1193, 1183,  105, 1187, 1182, 1189, 1092,
     1190, 1194, 1180, 1184, 1186,  105, 1093, 1228,  105, 1195,
     1234, 1346, 1185, 1197, 1188, 1192, 1191, 1196, 1077, 1078,
     1077, 1193, 1347, 1187, 1347, 1189,  898, 1190, 1194, 1075,
     1076, 1075,  893, 1347, 1228, 1347, 1195,  894, 1234, 1346,

     1197, 1079, 1080, 1079,  893, 1196, 1081, 1082, 1081,  894,
     1083, 1084, 1083,  911,  898, 1085, 1086, 1085,  912, 1087,
     1088, 1087,  911,  916, 1089, 1090, 1089,  912, 1199, 1200,
     1199, 1202,  916, 1097, 1347, 1289, 1201, 1204, 1098, 1095,
     1096, 1095, 1097, 1347, 1205, 1347, 1347, 1098, 1206, 1207,
     1206, 1097, 1101, 1101, 1102, 1102, 1098, 1209, 1104,  280,
      280, 1101, 1289, 1102,  446,  916, 1347, 1212,  280, 1108,
     1106, 1107, 1106, 1108, 1109, 1213, 1347, 1347, 1109, 1347,
     1347, 1347, 1201, 1214, 1215, 1214, 1108, 1110, 1111, 1110,
      939, 1109, 1112, 1113, 1112,  940, 1114, 1115, 1114,  939,

      950, 1118, 1119, 1118,  940, 1116, 1117, 1116,  942,  946,
     1120, 1121, 1120,  943, 1122, 1123, 1122,  958,  950, 1124,
     1125, 1124,  959, 1126, 1127, 1126,  973,  961, 1128, 1129,
     1128,  974, 1130, 1131, 1130,  973,  978, 1132, 1133, 1132,
      974, 1134, 1135, 1134,  993,  978, 1136, 1137, 1136,  994,
     1138, 1139, 1138,  993,  998, 1140, 1141, 1140,  994, 1142,
     1143, 1142, 1010,  998, 1144, 1145, 1144, 1011, 1146, 1147,
     1146, 1010, 1015, 1148, 1149, 1148, 1011,  148,  148,  904,
      904, 1015, 1347, 1347,  905,  905,  645,  148, 1003,  904,
      645,  105, 1003, 1004,  905,  105,  105, 1004, 1216,  645,

     1220, 1003, 1220, 1159, 1221, 1159, 1004, 1217, 1161, 1226,
     1161, 1224, 1227, 1224,  105,  105,  105,  105, 1222, 1229,
      105, 1235, 1233, 1231,  105,  105, 1216, 1218,  105, 1236,
     1160,  105, 1347, 1162, 1347, 1217, 1226, 1225, 1347, 1227,
     1232, 1239,  105,  105, 1237, 1240, 1229, 1238,  105, 1235,
     1233, 1231,  105,  105, 1218, 1241, 1213, 1236, 1160, 1243,
     1244, 1162, 1347, 1201,  105, 1225, 1242, 1232, 1239, 1245,
      105, 1237, 1240, 1246,  105, 1238, 1199, 1200, 1199, 1247,
     1347, 1347, 1241, 1248, 1201, 1204, 1347, 1243, 1244, 1249,
     1250, 1249, 1205, 1242, 1347,  105, 1245, 1201, 1251, 1252,

     1251, 1246, 1206, 1207, 1206, 1097, 1205, 1247, 1209,  105,
     1098, 1248, 1224, 1269, 1224,  446, 1214, 1215, 1214, 1108,
      148,  148,  904,  904, 1109, 1267,  105,  905,  905,  148,
     1220,  904, 1220, 1262, 1221, 1262,  905, 1263, 1225,  105,
     1269,  105, 1264,  105,  105,  105,  105,  105, 1222, 1265,
     1347,  105, 1267, 1253,  105, 1294, 1254, 1270, 1271,  105,
     1274, 1275, 1266,  105,  105, 1347, 1225, 1255,  105, 1272,
     1273, 1276, 1279,  105, 1280, 1277, 1265, 1281, 1347, 1278,
     1253, 1347, 1294, 1254, 1270, 1347, 1271, 1274, 1275, 1266,
      105,  645, 1282, 1003, 1255, 1347, 1272, 1273, 1004, 1276,

     1279, 1280, 1277, 1347, 1347, 1281, 1278, 1249, 1250, 1249,
     1251, 1252, 1251, 1293,  148, 1201,  904,  105, 1205, 1282,
      645,  905, 1003,  105, 1285, 1286, 1285, 1004, 1258, 1287,
     1288, 1287, 1262,  105, 1262,  105, 1263,  105, 1347, 1297,
     1293, 1264, 1292,  105, 1296,  105, 1295,  105, 1283, 1260,
     1299,  105, 1298,  105,  105, 1303, 1300,  105,  105,  105,
     1301,  645, 1302, 1003, 1312, 1305, 1297, 1304, 1004, 1347,
     1292, 1347, 1296, 1295,  105, 1283,  105, 1319, 1299, 1311,
     1298,  105, 1303, 1306, 1300, 1285, 1286, 1285, 1301, 1258,
     1302, 1312,  105, 1305, 1314, 1304, 1287, 1288, 1287,  105,

     1317, 1313,  105, 1320, 1319,  105, 1311, 1336, 1315,  105,
     1306, 1316, 1347, 1321, 1322, 1321, 1260, 1309, 1347, 1325,
      105,  105, 1314, 1337, 1326, 1318,  105, 1317, 1313,  105,
     1320, 1323, 1324, 1323, 1336, 1334, 1315, 1347, 1316, 1327,
     1310, 1328, 1329, 1347, 1321, 1322, 1321, 1325, 1309,  105,
     1337, 1326, 1318, 1323, 1324, 1323,  105,  105,  105, 1347,
      105, 1332, 1310, 1334, 1340, 1338, 1327, 1333, 1328, 1339,
     1329, 1347, 1341, 1342,  105, 1335, 1347, 1347, 1347, 1347,
     1347, 1343, 1347, 1344, 1347, 1347, 1347, 1347, 1347, 1332,
     1347, 1347, 1340, 1338, 1333, 1347, 1347, 1339, 1347, 1341,

     1347, 1342, 1335, 1347, 1347, 1347, 1347, 1347, 1343, 1347,
     1347, 1344,   37,   37,   37,   37,   37,   37,   37,   37,
       40,   40,   40,   40,   40,   40,   40,   40,   56,   56,
       56,   56,   56,   56,   56,   56,   60,   60,   60,   60,
       60,   60,   60,   60,   64,   64,   64,   64,   64,   64,
       64,   64,   70,   70,   70,   70,   70,   70,   70,   70,
       72,   72,   72,   72,   72,   72,   72,   72,   74,   74,
       74,   74,   74,   74,   74,   74,   83,   83,   83,   83,
       83,   83,   83,   83,   91,   91,   91,   91,   91,   91,
       91,   91,   94,   94,   94,   94,   94,   94,   94,   94,

       98,   98,   98,   98,   98,   98,   98,   98,   99,   99,
       99,   99,   99,   99,   99,   99,  104,  104,  108, 1347,
      108,  108,  137,  137,  137,  137,  137,  137,  137,  137,
      139,  139,  139,  139,  139,  139,  139,  139,  143,  143,
      143,  143,  143,  143,  143,  143,  151,  151,  151,  151,
      151,  151,  151,  151,  154,  154,  154,  154,  154,  154,
      154,  154,  147,  147,  147,  147,  147,  147,  147,  147,
      158,  158,  158,  158,  158,  158,  158,  158,  188,  188,
      188,  188,  188,  188, 1347,  188,  189,  189,  189,  189,
      189, 1347,  189,  189,  106, 1347,  106,  107, 1347,  107,

      225,  225,  225,  225,  225,  225,  225,  225,  228,  228,
      228,  228,  228,  228,  228,  228,  231,  231,  231,  231,
      231,  231,  231,  231,  234,  234,  234,  234,  234,  234,
      234,  234,  239,  239,  239,  239,  239,  239,  239,  239,
      242,  242,  242,  242,  242,  242,  242,  242,  246,  246,
      246,  246,  246,  246,  246,  246,  250,  250,  250,  250,
      250,  250,  250,  250,  253,  253,  253,  253,  253,  253,
      253,  253,  255,  255,  255,  255,  255,  255,  255,  255,
      259,  259,  259,  259,  259,  259,  259,  259,  264,  264,
      264,  264,  264,  264,  264,  264,  266,  266,  266,  266,

      266,  266,  266,  266,  270,  270,  270,  270,  270,  270,
      270,  270,  275,  275,  275,  275,  275,  275,  275,  275,
      280,  280,  280,  280,  280,  280,  280,  280,  282,  282,
      282,  282,  282,  282,  282,  282,  287,  287,  287,  287,
      287,  287,  287,  287,  292,  292,  292,  292,  292,  292,
      292,  292,  188,  188,  188,  188,  188,  188, 1347,  188,
      367,  367,  367,  367,  367,  367,  367,  367,  370,  370,
      370,  370,  370,  370,  370,  370,  372,  372,  372,  372,
      372,  372,  372,  372,  376,  376,  376,  376,  376,  376,
      376,  376,  381,  381,  381,  381,  381,  381,  381,  381,

      389,  389,  389,  389,  389,  389,  389,  389,  394,  394,
      394,  394,  394,  394,  394,  394,  397,  397,  397,  397,
      397,  397,  397,  397,  399,  399,  399,  399,  399,  399,
      399,  399,  404,  404,  404,  404,  404,  404,  404,  404,
      407,  407,  407,  407,  407,  407,  407,  407,  410,  410,
      410,  410,  410,  410,  410,  410,  414,  414,  414,  414,
      414,  414,  414,  414,  417,  417,  417,  417,  417,  417,
      417,  417,  420,  420,  420,  420,  420,  420,  420,  420,
      426,  426,  426,  426,  426,  426,  426,  426,  439,  439,
      439,  439,  439,  439,  439,  439,  442,  442,  442,  442,

      442,  442,  442,  442,  446,  446,  446,  446,  446,  446,
      446,  446,  450,  450,  450,  450,  450,  450,  450,  450,
      453,  453,  453,  453,  453,  453,  453,  453,  456,  456,
      456,  456,  456,  456,  456,  456,  462,  462,  462,  462,
      462,  462,  462,  462,  463,  463,  463,  463,  463,  463,
      463,  463,  104,  104,  545,  545,  545,  545,  545,  545,
      545,  545,  548,  548,  548,  548,  548,  548,  548,  548,
      550,  550,  550,  550,  550,  550,  550,  550,  554,  554,
      554,  554,  554,  554,  554,  554,  376,  376,  376,  376,
      376,  376,  376,  376,  389,  389,  389,  389,  389,  389,

      389,  389,  562,  562,  562,  562,  562,  562,  562,  562,
      565,  565,  565,  565,  565,  565,  565,  565,  567,  567,
      567,  567,  567,  567,  567,  567,  571,  571,  571,  571,
      571,  571,  571,  571,  576,  576,  576,  576,  576,  576,
      576,  576,  579,  579,  579,  579,  579,  579,  579,  579,
      582,  582,  582,  582,  582,  582,  582,  582,  586,  586,
      586,  586,  586,  586,  586,  586,  588,  588,  588,  588,
      588,  588,  588,  588,  592,  592,  592,  592,  592,  592,
      592,  592,  596,  596,  596,  596,  596,  596,  596,  596,
      606,  606,  606,  606,  606,  606,  606,  606,  609,  609,

      609,  609,  609,  609,  609,  609,  614,  614,  614,  614,
      614,  614,  614,  614,  617,  617,  617,  617,  617,  617,
      617,  617,  619,  619,  619,  619,  619,  619,  619,  619,
      623,  623,  623,  623,  623,  623,  623,  623,  632,  632,
      632,  632,  632,  632,  632,  632,  633,  633,  633,  633,
      633,  633,  633,  633,  228,  228,  228,  228,  228,  228,
      228,  228,  636,  636,  636,  636,  636,  636,  636,  636,
      639,  639,  639,  639,  639,  639,  639,  639,  644,  644,
      644,  644,  644,  644,  644,  644,  562,  562,  562,  562,
      562,  562,  562,  562,  104,  104,  721,  721,  721,  721,

      721,  721,  721,  721,  724,  724,  724,  724,  724,  724,
      724,  724,  726,  726,  726,  726,  726,  726,  726,  726,
      729,  729,  729,  729,  729,  729,  729,  729,  733,  733,
      733,  733,  733,  733,  733,  733,  736,  736,  736,  736,
      736,  736,  736,  736,  738,  738,  738,  738,  738,  738,
      738,  738,  741,  741,  741,  741,  741,  741,  741,  741,
      748,  748,  748,  748,  748,  748,  748,  748,  751,  751,
      751,  751,  751,  751,  751,  751,  754,  754,  754,  754,
      754,  754,  754,  754,  756,  756,  756,  756,  756,  756,
      756,  756,  759,  759,  759,  759,  759,  759,  759,  759,

      761,  761,  761,  761,  761,  761,  761,  761,  767,  767,
      767,  767,  767,  767,  767,  767,  769,  769,  769,  769,
      769,  769,  769,  769,  773,  773,  773,  773,  773,  773,
      773,  773,  776,  776,  776,  776,  776,  776,  776,  776,
      778,  778,  778,  778,  778,  778,  778,  778,  781,  781,
      781,  781,  781,  781,  781,  781,  787,  787,  787,  787,
      787,  787,  787,  787,  788,  788,  788,  788,  788,  788,
      788,  788,  791,  791,  791,  791,  791,  791,  791,  791,
      793,  793,  793,  793,  793,  793,  793,  793,  264,  264,
      264,  264,  264,  264,  264,  264,  796,  796,  796,  796,

      796,  796,  796,  796,  803,  803,  803,  803,  803,  803,
      803,  803,  228,  228,  228,  228,  228,  228,  228,  228,
      806,  806,  806,  806,  806,  806,  806,  806,  809,  809,
      809,  809,  809,  809,  809,  809,  831,  831,  831,  831,
      831,  831,  831,  104,  104,  885,  885,  885,  885,  885,
      885,  885,  885,  888,  888,  888,  888,  888,  888,  888,
      888,  890,  890,  890,  890,  890,  890,  890,  890,  895,
      895,  895,  895,  895,  895,  895,  895,  903,  903,  903,
      903,  903,  903,  903,  903,  906,  906,  906,  906,  906,
      906,  906,  906,  908,  908,  908,  908,  908,  908,  908,

      908,  913,  913,  913,  913,  913,  913,  913,  913,  921,
      921,  921,  921,  921,  921,  921,  921,  926,  926,  926,
      926,  926,  926,  926,  926,  931,  931,  931,  931,  931,
      931,  931,  931,  934,  934,  934,  934,  934,  934,  934,
      934,  936,  936,  936,  936,  936,  936,  936,  936,  941,
      941,  941,  941,  941,  941,  941,  941,  945,  945,  945,
      945,  945,  945,  945,  945,  947,  947,  947,  947,  947,
      947,  947,  947,  957,  957,  957,  957,  957,  957,  957,
      957,  960,  960,  960,  960,  960,  960,  960,  960,  965,
      965,  965,  965,  965,  965,  965,  965,  968,  968,  968,

      968,  968,  968,  968,  968,  970,  970,  970,  970,  970,
      970,  970,  970,  975,  975,  975,  975,  975,  975,  975,
      975,  984,  984,  984,  984,  984,  984,  984,  984,  985,
      985,  985,  985,  985,  985,  985,  985,  988,  988,  988,
      988,  988,  988,  988,  988,  990,  990,  990,  990,  990,
      990,  990,  990,  995,  995,  995,  995,  995,  995,  995,
      995,  280,  280,  280,  280,  280,  280,  280,  280, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007,  264,  264,  264,  264,  264,  264,  264,

      264, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,  903,
      903,  903,  903,  903,  903,  903,  903,  104,  104,  885,
      885,  885,  885,  885,  885,  885,  885,  888,  888,  888,
      888,  888,  888,  888,  888,  890,  890,  890,  890,  890,
      890,  890,  890,  895,  895,  895,  895,  895,  895,  895,
      895,  906,  906,  906,  906,  906,  906,  906,  906,  908,
      908,  908,  908,  908,  908,  908,  908,  913,  913,  913,
      913,  913,  913,  913,  913,  921,  921,  921,  921,  921,
      921,  921,  921,  228,  228,  228,  228,  228,  228,  228,
      228, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094,  926,  926,  926,
      926,  926,  926,  926,  926, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,  931,
      931,  931,  931,  931,  931,  931,  931,  934,  934,  934,
      934,  934,  934,  934,  934,  936,  936,  936,  936,  936,
      936,  936,  936,  947,  947,  947,  947,  947,  947,  947,
      947,  941,  941,  941,  941,  941,  941,  941,  941,  945,
      945,  945,  945,  945,  945,  945,  945,  957,  957,  957,
      957,  957,  957,  957,  957,  960,  960,  960,  960,  960,

      960,  960,  960,  965,  965,  965,  965,  965,  965,  965,
      965,  968,  968,  968,  968,  968,  968,  968,  968,  970,
      970,  970,  970,  970,  970,  970,  970,  975,  975,  975,
      975,  975,  975,  975,  975,  984,  984,  984,  984,  984,
      984,  984,  984,  985,  985,  985,  985,  985,  985,  985,
      985,  988,  988,  988,  988,  988,  988,  988,  988,  990,
      990,  990,  990,  990,  990,  990,  990,  995,  995,  995,
      995,  995,  995,  995,  995, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1012,

     1012, 1012, 1012, 1012, 1012, 1012, 1012,  903,  903,  903,
      903,  903,  903,  903,  903,  104,  104,  890,  890,  890,
      890,  890,  890,  890,  890,  895,  895,  895,  895,  895,
      895,  895,  895,  908,  908,  908,  908,  908,  908,  908,
      908,  913,  913,  913,  913,  913,  913,  913,  913, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091,  264,  264,  264,
      264,  264,  264,  264,  264, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1210, 1210, 1210, 1347, 1210, 1210, 1210,
     1210, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,  936,
      936,  936,  936,  936,  936,  936,  936,  947,  947,  947,
      947,  947,  947,  947,  947,  941,  941,  941,  941,  941,
      941,  941,  941,  945,  945,  945,  945,  945,  945,  945,
      945,  957,  957,  957,  957,  957,  957,  957,  957,  960,
      960,  960,  960,  960,  960,  960,  960,  970,  970,  970,
      970,  970,  970,  970,  970,  975,  975,  975,  975,  975,
      975,  975,  975,  990,  990,  990,  990,  990,  990,  990,

      990,  995,  995,  995,  995,  995,  995,  995,  995, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012,  903,  903,  903,  903,  903,
      903,  903,  903, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002,  104,  104, 1257, 1347, 1257, 1257, 1257, 1257, 1257,
     1257, 1259, 1347, 1259, 1259, 1259, 1259, 1259, 1259, 1290,
     1347, 1290, 1290, 1290, 1290, 1290, 1290, 1291, 1347, 1291,
     1291, 1291, 1291, 1291, 1291,   31, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347
    } ;

static const flex_int16_t yy_chk[6352] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    9,    8,   10, 1344,   11,   36,
       36,  140,    7,    7,    8,    8,  140,   11,   21,   21,
       21,   21,   26,   26,   26,   26,   11,    1,    1,    1,
        1,   40,   40,   34,   13,   14,   15,  242,   15,  242,
       15,   15,   40,   13,   14,   15,   34,   34,   15,    9,
        9,   10,   10,   11,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   12,   13,

       14,   15,   42,   45,   74,   51,   74,   12,   75, 1339,
       75,   74,  144,   77,   51,   75,   12,  144,   42,   45,
       77,   45,    2,    2,    2,    2,  102, 1334,   15,   16,
       78,   16,   78,   16,   16,  103,  103,   78,   16,  102,
      102,   16,   51,   12, 1333,   42,   45, 1327,   45,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   41,   16,   43,   55,  126, 1320,   41,
       43,   79,   79,   79,   79,  126, 1319,   43,   55,   79,
       84,   43,   84,   84,   43,   41,   43,    3,    3,    3,

        3,   16,   96, 1315,   96,   96,  148,   41,   43,  108,
      108,  148,  139,  126,  139,   43,   55, 1313,   43,  139,
      108,   43,   41,   43,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4, 1302,   44,
       48,   86,   49,   86, 1301,   22,   22,   22,   22,   24,
       22,   24,   46,   50,  116,  123,   54,   22,   44,   48,
       24,   49,    4,    4,    4,    4,   22,  116,   86,   22,
      120,   46,   24, 1300,   50,  123,   46,   50,   54, 1299,
       88,  125,   88, 1298,   52,   44,   48,  109,   49,    4,

        5,  120,  125,   52,  228,  116,   86,   22,   46,  228,
       24,   50,  123,   46,   50,   54,   88,   47,   52,  109,
       88,    5,    5,    5,    5,    5,    5,   47,  120,    5,
      125,   52,    5,    5,   47,   47,    5,    5,    5,    5,
        5,  131,    5, 1295,   88,   52,  109,  131,   88,    5,
        5,    5,    5,    5,    5,   47,   89,    5,   89,    5,
        5,   47,   47,    5,    5,    5,    5,    5,   53,    5,
       20,   20,   20,  111,   20,  131,  171,   20,  171,  171,
       53,   20, 1293,   89,   20,   20,   87,   53,   87,   87,
       20,   87,  111,   20,   20,   81,   53,   81,  110,  141,

     1291,  185,   81,  185,  185,  145,  141,   87,   53,  150,
      112,   89,  145,  256,   53,   81,  150, 1290,  256,  111,
      110,   20,   20,   53,   76,   76,   76,   76,   76,   76,
       76,   76,  112,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  110,  113,  114,
      115,  121,  132,  113,  114,  129,  135,  124, 1289,  112,
      129,  132,  129,  154,  124,  135,  671,  115,  115,  121,
      154,   76,   76,   76,  146,  146,  146,  146,  127,  671,
      124,  113,  114,  142,  142,  142,  142, 1284,  129,  132,
      129,  142,  124,  135,  115,  115,  121,  127,   76,   80,

       80,   80,   80,   80,   80,   80,   80,  124,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,  118,  117,  127, 1275,  136,  117, 1274,  130,
      210,  118,  134,  119,  117,  136,  143,  128,  143,  303,
      174,  119,  161,  143,  118,  130,   80,   80,   80,  161,
      288,  117,  134,  117,  210,  288,  119,  119,  128,  118,
     1266, 1259,  117,  136, 1257,  172,  303,  172,  174,  119,
     1248,  118,  130,   80,   82,   82,   82,   82,  117,  134,
      117,  210,   82,  119,  119,  128,  147,  151,  147,  151,
     1247,  196,  172,  147,  151,  308,   82,  152,  152,  152,

      152,  182,  158,   82,  158,  152, 1246,   82,  193,  158,
       82,  196,   82,  156,  156,  156,  163,  193,  163,   82,
      172,  156,  308,  163,   82,  157,  157,  157,  157,  182,
      312,   82,  312,  157,   82, 1240,  226,   82,  196,   82,
      187,  187,  187,  226, 1228,  193,   82,  149,  149,  149,
      149,  149,  149,  149,  149,  214,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      159,  159,  159,  159,  162,  162,  162,  162,  159,  214,
      305,  166,  162,  166,  175,  328,  175,  175,  166,  175,
      169,  173,  169,  173,  149,  149,  149,  169,  241,  241,

      241,  184,  166,  184,  229,  175,  214,  225,  305,  225,
     1222,  229,  328,  165,  225,  165,  184,  184,  173,  169,
      165,  149,  153,  153,  153,  153,  153,  153,  153,  153,
      166,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  165,  173,  169,  179,  192,
      179,  165,  180,  202, 1221,  204,  192,  201,  482,  181,
      180,  181,  208,  201,  204,  202,  231,  208, 1215,  153,
      153,  153,  165,  231,  464,  179, 1212,  179,  165,  464,
      180,  233,  233,  233,  192,  482,  181,  180, 1211,  233,
      190,  201,  204,  202, 1210,  208,  153,  164,  164,  164,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  190,  181,  164,  164,  164,  164,  164,
      167,  195,  167,  176,  168,  176,  168,  167,  170, 1209,
      170,  168, 1207,  645,  178,  170,  178,  183,  645,  183,
      190,  167, 1202,  195,  164,  164,  164,  164,  168,  176,
     1196,  170,  197,  176,  234,  167,  234,  168,  168,  191,
      178,  234,  194,  183,  178,  206,  198,  183,  199,  167,
      195,  164,  191,  203,  200,  197,  168,  176,  191,  170,
      194,  176,  167,  194,  168,  168,  206,  199,  178,  198,
      203,  183,  178,  200,  218,  183,  199,  209,  207,  212,

      191,  922,  197,  211,  209,  191,  922,  194,  212,  213,
      194, 1193, 1192,  206,  199,  207,  198,  203,  218,  211,
      200,  205,  213,  217,  216, 1188,  205,  205,  205,  205,
      205,  205,  209,  216,  205,  550,  212,  550,  205,  217,
      219,  205,  207,  205,  205,  218,  211,  205, 1185,  219,
      213,  224,  220,  215,  205,  205,  205,  205,  205,  205,
      215,  216,  205,  221,  215,  205,  217,  222,  205,  220,
      205,  205,  224,  220,  205,  307,  222,  219, 1182,  237,
      239,  221,  227,  227,  227,  227,  237,  239,  215, 1179,
      227,  246,  215,  246,  247,  250,  220,  250,  246,  224,

      220,  247,  250,  307,  222,  265,  265,  265,  221,  230,
      230,  230,  230,  235,  235,  235,  235,  238,  238,  238,
      238,  235,  314, 1175, 1174,  238,  243,  243,  243,  243,
      248,  248,  248,  248, 1168,  314,  314, 1165,  248,  249,
      249,  249,  249,  249,  249,  249,  249, 1164,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  251,  251,  251,  251,  253,  254,  254,  254,
      251,  257,  255,  253,  255,  254, 1147, 1143,  257,  255,
      329,  258,  258,  258,  258,  503,  249,  249,  249,  258,
      259,  262,  259,  260,  260,  260,  260,  259,  262,  266,

      273,  260,  263,  263,  263,  263,  266,  273,  329,  567,
      263,  567,  503,  249,  252,  252,  252,  252,  252,  252,
      252,  252,  662,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  267,  267,  267,
      269,  269,  269,  277,  270,  267,  270,  478,  269,  662,
      277,  270,  271,  271,  271,  271,  274,  274,  274,  274,
      271,  252,  252,  252,  274,  275,  282,  275,  278,  278,
      278,  278,  275,  282, 1139,  478,  278,  279,  279,  279,
      279,  284,  284,  284,  313,  279,  313, 1135,  252,  284,
      285,  285,  285,  285,  287,  289,  287, 1131,  285,  313,

      313,  287,  289,  290,  290,  290,  290,  378,  378,  378,
     1127,  290,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291, 1123,  479,
      291,  291,  291,  291,  291,  292,  293,  292,  293,  294,
     1117,  294,  292,  293,  304,  295,  294,  295,  298,  296,
      298,  296,  295,  304,  317,  298,  296,  479,  321,  291,
      291,  291,  291,  297,  294,  297,  321,  299,  293,  299,
      297,  300,  304,  300,  299,  317, 1115,  298,  300,  295,
      304,  301,  309,  301,  309, 1111,  291,  296,  301,  302,
     1107,  302,  294,  323,  321,  293,  302,  311,  323,  311,

      299,  297,  317,  299,  318,  298,  295,  320,  309,  310,
      300,  310,  309,  324,  296,  318,  319,  325,  322, 1104,
      301,  302,  320,  319,  311,  327,  323,  299,  297,  322,
      299,  335,  311,  325,  326,  324,  309,  300,  327,  326,
      309,  333,  310,  318,  310,  330,  338,  301,  302,  320,
      333,  319,  311,  335,  331,  332,  336,  322,  337,  311,
      325,  334,  324,  330,  339,  338,  327,  326,  332,  310,
      331,  310,  336,  341,  334,  342,  340,  343,  333,  337,
      335,  368,  339,  341,  347,  350,  351,  334,  368, 1096,
      330,  341,  338,  346,  342,  340,  332,  331,  343,  336,

      340,  345,  334,  349,  344,  346,  337,  351,  350,  339,
      345,  341,  347,  344,  334,  353,  352,  354,  341,  349,
      480,  342,  340,  356,  354,  343,  353,  340,  344,  345,
      357,  355,  356,  346,  351,  350,  353,  360,  345,  347,
      352,  344,  361,  362,  366,  363,  349,  355,  480,  361,
      365,  357,  354,  366,  353,  344,  345,  365,  360,  367,
      356,  367,  362,  353,  363,  370,  367,  352,  374,  372,
      365,  372,  370,  376,  355,  374,  372,  361,  357,  381,
      376,  366,  371,  371,  371,  360,  381, 1092, 1088,  362,
      371,  363,  369,  369,  369,  369, 1084,  582,  365,  582,

      369,  373,  373,  373,  373,  375,  375,  375,  375,  373,
      382,  382,  382,  375,  379,  379,  379,  379,  382,  384,
      384,  384,  387,  387,  387,  387, 1080,  384,  395,  685,
      387,  390,  390,  390,  394,  395,  394,  396,  396,  396,
      396,  394,  397, 1076,  401,  396,  398,  398,  398,  397,
      399,  401,  399,  588,  398,  588,  685,  399,  400,  400,
      400,  400,  402,  402,  402,  402,  400,  431,  431,  431,
      402,  403,  403,  403,  403,  403,  403,  403,  403,  481,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  404,  511,  404,  405,  405,  405,

      405,  404,  407,  408,  407,  405,  606,  481,  606,  407,
      408, 1064,  483,  409,  409,  409,  409,  511,  403,  403,
      403,  409,  410,  412,  410,  411,  411,  411,  411,  410,
      412,  414,  417,  411,  413,  413,  413,  413,  414,  417,
      483,  619,  413,  619,  511,  403,  406,  406,  406,  406,
      406,  406,  406,  406, 1063,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  415,
      415,  415,  416,  416,  416, 1043,  507,  415,  423,  504,
      416,  419,  419,  419,  420,  423,  420, 1042,  639,  419,
      639,  420,  507,  406,  406,  406,  421,  421,  421,  421,

      424,  424,  424,  424,  421,  426,  658,  504,  424,  428,
      428,  428,  426,  429,  429,  429,  429,  428, 1016,  507,
      406,  429,  434,  434,  434,  437,  437,  437,  437,  439,
      434,  439,  440,  437,  658, 1009,  439,  442,  992,  440,
      441,  441,  441,  441,  442,  443,  443,  443,  441,  444,
      444,  444,  444,  443,  448,  448,  448,  444,  445,  445,
      445,  445,  448,  450,  451,  450,  445,  972,  938,  453,
      450,  451,  452,  452,  452,  452,  453,  455,  455,  455,
      452,  456,  491,  456,  910,  455,  459,  465,  456,  457,
      457,  457,  457,  459,  465,  491,  491,  457,  460,  460,

      460,  460,  547,  547,  547,  547,  460,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  892,  661,  461,  461,  461,  461,  461,
      462,  463,  462,  463,  879,  493,  494,  462,  463,  466,
      466,  466,  466,  467,  468,  467,  468,  466,  874,  494,
      467,  468,  661,  493,  461,  461,  461,  461,  469,  470,
      469,  470,  471,  872,  471,  469,  470,  871,  472,  471,
      472,  473,  474,  473,  474,  472,  519,  494,  473,  474,
      493,  461,  476,  512,  476,  469,  868,  471,  475,  476,
      475,  477,  484,  477,  484,  475,  508,  470,  477,  519,

      546,  472,  512,  485,  474,  485,  473,  546,  867,  475,
      486,  476,  486,  469,  508,  471,  477,  475,  492,  489,
      487,  489,  487,  492,  470,  484,  519,  484,  472,  512,
      495,  474,  857,  473,  490,  486,  490,  475,  495,  476,
      851,  508,  485,  489,  477,  475,  509,  487,  496,  490,
      490,  492,  484,  497,  484,  487,  509,  496,  498,  499,
      501,  500,  497,  486,  515,  498,  495,  499,  506,  485,
      500,  489,  499,  501,  502,  487,  505,  506,  517,  510,
      843,  502,  487,  505,  509,  496,  513,  516,  515,  520,
      497,  510,  525,  498,  521,  499,  517,  520,  500,  513,

      499,  501,  522,  842,  523,  506,  811,  529,  516,  502,
      523,  505,  525,  521,  528,  515,  524,  526,  522,  510,
      529,  524,  530,  517,  531,  520,  526,  513,  532,  534,
      528,  530,  531,  533,  534,  516,  536,  532,  523,  525,
      521,  535,  537,  533,  536,  522,  538,  537,  529,  524,
      535,  539,  541,  540,  526,  543,  545,  528,  545,  530,
      531,  540,  534,  545,  807,  532,  548,  821,  538,  802,
      799,  533,  536,  548,  539,  537,  541,  543,  535,  549,
      549,  549,  551,  551,  551,  551,  555,  555,  555,  540,
      553,  553,  553,  553,  821,  538,  556,  556,  556,  720,

      832,  539,  832,  541,  543,  557,  557,  557,  557,  558,
      558,  558,  560,  560,  560,  562,  563,  562,  564,  564,
      564,  564,  562,  563,  565,  566,  566,  566,  572,  572,
      572,  565,  568,  568,  568,  568,  570,  570,  570,  570,
      573,  573,  573,  574,  574,  574,  574,  575,  575,  575,
      576,  579,  576,  579,  575,  708,  706,  576,  579,  690,
      673,  575,  575,  577,  577,  577,  577,  578,  578,  578,
      580,  586,  615,  614,  578,  614,  642,  580,  586,  615,
      614,  578,  578,  581,  581,  581,  581,  583,  583,  583,
      583,  585,  585,  585,  585,  587,  587,  587,  589,  589,

      589,  589,  591,  591,  591,  591,  593,  593,  593,  594,
      594,  594,  594,  595,  595,  595,  597,  597,  597,  599,
      599,  599,  602,  602,  602,  602,  604,  604,  604,  608,
      608,  608,  608,  610,  610,  610,  611,  611,  611,  611,
      612,  612,  612,  613,  613,  613,  613,  616,  616,  616,
      616,  617,  618,  618,  618,  624,  624,  624,  617,  620,
      620,  620,  620,  622,  622,  622,  622,  626,  626,  626,
      629,  629,  629,  629,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      641,  637,  631,  631,  631,  631,  631,  632,  633,  632,

      633,  634,  630,  627,  632,  633,  636,  623,  634,  635,
      635,  635,  635,  636,  638,  638,  638,  640,  640,  640,
      640,  631,  631,  631,  631,  643,  643,  643,  643,  644,
      646,  644,  647,  647,  647,  647,  644,  646,  648,  649,
      648,  649,  650,  621,  650,  648,  649,  609,  631,  650,
      651,  652,  651,  652,  653,  663,  653,  651,  652,  607,
      654,  653,  654,  648,  603,  600,  655,  654,  655,  656,
      657,  656,  657,  655,  672,  651,  656,  657,  679,  653,
      664,  672,  664,  663,  665,  652,  665,  679,  666,  654,
      666,  648,  656,  655,  667,  669,  667,  669,  676,  668,

      655,  668,  833,  651,  833,  681,  674,  653,  676,  672,
      665,  674,  652,  666,  670,  679,  670,  654,  680,  664,
      656,  655,  677,  668,  667,  675,  678,  655,  669,  670,
      675,  689,  681,  684,  596,  682,  676,  683,  665,  674,
      680,  666,  683,  687,  686,  677,  664,  688,  691,  678,
      687,  668,  667,  682,  689,  669,  688,  691,  675,  681,
      692,  684,  693,  687,  694,  695,  696,  680,  686,  693,
      683,  696,  677,  592,  698,  702,  678,  699,  687,  692,
      682,  689,  695,  698,  688,  691,  697,  694,  703,  705,
      687,  700,  702,  697,  701,  686,  702,  693,  700,  696,

      714,  699,  700,  701,  704,  703,  692,  709,  707,  695,
      705,  698,  710,  704,  694,  711,  709,  719,  712,  702,
      711,  697,  715,  702,  714,  713,  700,  707,  699,  716,
      700,  701,  703,  710,  712,  713,  717,  705,  718,  715,
      719,  704,  716,  717,  709,  713,  722,  713,  711,  724,
      721,  714,  721,  722,  707,  824,  724,  721,  728,  717,
      710,  712,  718,  713,  590,  728,  715,  719,  584,  823,
      716,  717,  713,  571,  713,  723,  723,  723,  723,  725,
      725,  725,  824,  723,  569,  554,  717,  725,  726,  718,
      726,  727,  727,  727,  727,  726,  729,  823,  552,  727,

      730,  730,  730,  729,  731,  731,  731,  731,  730,  732,
      732,  732,  731,  733,  734,  733,  830,  732,  830,  736,
      733,  734,  735,  735,  735,  735,  736,  737,  737,  737,
      735,  738,  544,  738,  527,  737,  740,  741,  738,  739,
      739,  739,  739,  740,  741,  518,  514,  739,  742,  742,
      742,  743,  743,  743,  743,  458,  742,  830,  839,  743,
      744,  744,  744,  745,  745,  745,  454,  839,  744,  845,
      745,  746,  746,  746,  746,  747,  748,  747,  748,  746,
      749,  446,  747,  748,  830,  845,  753,  749,  750,  750,
      750,  750,  751,  753,  751,  839,  750,  754,  438,  751,

      752,  752,  752,  752,  754,  755,  755,  755,  752,  756,
      436,  756,  845,  755,  758,  759,  756,  757,  757,  757,
      757,  758,  759,  761,  430,  757,  760,  760,  760,  760,
      761,  762,  762,  762,  760,  763,  763,  763,  763,  762,
      764,  764,  764,  763,  765,  765,  765,  767,  764,  767,
      768,  769,  765,  825,  767,  825,  841,  768,  769,  770,
      770,  770,  770,  771,  771,  771,  841,  770,  425,  846,
      774,  771,  772,  772,  772,  772,  773,  774,  773,  825,
      772,  776,  422,  773,  775,  775,  775,  775,  776,  777,
      777,  777,  775,  778,  841,  778,  846,  777,  780,  781,

      778,  779,  779,  779,  779,  780,  781,  825,  418,  779,
      782,  782,  782,  783,  783,  783,  783,  392,  782,  789,
      791,  783,  784,  784,  784,  844,  789,  791,  389,  388,
      784,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  844,  847,  786,
      786,  786,  786,  786,  787,  788,  787,  788,  385,  380,
     1027,  787,  788,  790,  790,  790,  790,  792,  792,  792,
      793,  790,  793,  377,  844,  792,  847,  793,  786,  786,
      786,  786,  794,  794,  794,  794,  795,  796, 1027, 1156,
      794,  364,  359,  795,  796,  797,  797,  797,  801,  801,

      801,  801,  803,  797,  803,  786,  801,  804,  806,  803,
      805,  805,  805,  805,  804,  806,  812, 1156,  805,  808,
      808,  808,  809,  812,  809,  835,  358,  808,  348,  809,
      810,  810,  810,  810,  813,  814,  813,  814,  810,  836,
      286,  813,  814,  815,  816,  815,  816,  817,  835,  817,
      815,  816,  281,  818,  817,  818,  820,  819,  820,  819,
      818,  837,  836,  820,  819,  826,  280,  826,  827,  814,
      827,  848,  828,  813,  828,  835,  829,  820,  829,  840,
      838,  817,  849,  850,  837,  838,  276,  816,  840,  836,
      272,  853,  848,  818,  860,  826,  814,  819,  827,  828,

      813,  849,  852,  854,  850,  820,  855,  852,  817,  829,
      854,  837,  853,  838,  816,  860,  840,  856,  858,  848,
      818,  855,  859,  826,  819,  861,  827,  828,  849,  863,
      856,  850,  865,  866,  858,  852,  829,  862,  854,  853,
      864,  861,  860,  876,  869,  859,  862,  864,  855,  870,
      863,  865,  866,  869,  264,  873,  875,  880,  856,  877,
      881,  858,  873,  878,  876,  881,  886,  870,  861,  882,
      883,  261,  859,  886,  862,  864,  884,  863,  865,  866,
      875,  869,  880,  877,  878,  885,  883,  885,  888,  884,
      873,  876,  885,  881,  870,  888,  893,  882,  887,  887,

      887,  887,  245,  893,  244,  895,  887,  875,  240,  880,
      877,  878,  895,  883,  889,  889,  889,  884,  890,  236,
      890,  232,  889,  223,  882,  890,  891,  891,  891,  891,
      894,  894,  894,  894,  891,  896,  896,  896,  894,  898,
      898,  898,  186,  896,  900,  900,  900,  898,  899,  899,
      899,  899,  900,  902,  902,  902,  899,  901,  901,  901,
      901,  902,  903,  904,  903,  901,  177, 1026,  906,  903,
      904,  905,  905,  905,  905,  906,  907,  907,  907,  905,
      908,  160,  908,  155,  907,  911,  913,  908,  909,  909,
      909,  909,  911,  913, 1026,  137,  909,  912,  912,  912,

      912,  914,  914,  914, 1028,  912,  916,  916,  916,  914,
      917,  917,  917,  917,  916,  918,  918,  918,  917,  919,
      919,  919,  919,  918,  920,  920,  920,  919,  921,  133,
      921, 1028,  920,  924,  929,  921,  923,  923,  923, 1038,
      924,  929,  932,  923,  925,  925,  925,  925,  926,  932,
      926, 1044,  925,  122,  934,  926,  927,  927,  927,  927,
      928,  934,  928, 1038,  927, 1158,  939,  928,  930,  930,
      930,  930,  931,  939,  931,  106,  930,  104, 1044,  931,
      933,  933,  933,  933,  935,  935,  935,  936,  933,  936,
     1038,   97,  935, 1158,  936,  937,  937,  937,  937,  940,

      940,  940,  940,  937,  941,  942,  941,  940,   93,   90,
     1219,  941,  942,  943,  943,  943,  943,  944,  944,  944,
      944,  943,  945,  947,   72,  944,  946,  946,  946,  945,
      947,  948,  948,  948,  946,  950,  950,  950, 1219,  948,
       37,   31,   30,  950,  951,  951,  951,  951,  952,  952,
      952,  952,  951,  953,  953,  953,  952,  954,  954,  954,
      954,  953,  955,  955,  955,  954,  956,  956,  956,  957,
      955,  957,  958,   29,  956,   28,  957,  960,   27,  958,
      959,  959,  959,  959,  960,  961,  961,  961,  959,  962,
      962,  962,  962,  961,  963,  963,  963,  962,  964,  964,

      964,  964,  963,  965,  966,  965,  964,   25, 1170,  968,
      965,  966,  967,  967,  967,  967,  968,  969,  969,  969,
      967,  970,   23,  970, 1040,  969,  973,  975,  970,  971,
      971,  971,  971,  973,  975, 1170,   19,  971,  974,  974,
      974,  974,  976,  976,  976, 1040,  974,  978,  978,  978,
      976,  979,  979,  979,  979,  978,  980,  980,  980,  979,
      981,  981,  981,  981,  980,  982,  982,  982,  981,   18,
       17,    6, 1040,  982,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
        0,    0,  983,  983,  983,  983,  983,  984,  985,  984,

      985,  986,    0,    0,  984,  985,  988,  993,  986,  987,
      987,  987,  987,  988,  993,    0, 1047,  987,  989,  989,
      989,  983,  983,  983,  983,  990,  989,  990,  991,  991,
      991,  991,  990, 1047,  995,    0,  991,  994,  994,  994,
      994,  995,  996,  996,  996,  994,    0, 1223,  983,    0,
      996,  998,  998,  998,  999,  999,  999,  999,    0,  998,
     1047,    0,  999, 1000, 1000, 1000, 1001, 1001, 1001, 1001,
     1002, 1000, 1002, 1003, 1001, 1223, 1230, 1002, 1005,    0,
     1003, 1004, 1004, 1004, 1004, 1005, 1006, 1006, 1006, 1004,
     1007,    0, 1007,    0, 1006, 1010, 1012, 1007, 1008, 1008,

     1008, 1008, 1010, 1012, 1230, 1036, 1008, 1011, 1011, 1011,
     1011, 1013, 1013, 1013, 1036, 1011, 1015, 1015, 1015, 1013,
     1017, 1017, 1017, 1017, 1015, 1019, 1340, 1019, 1017, 1020,
        0, 1020, 1019, 1021,    0, 1021, 1020, 1022, 1052, 1022,
     1021, 1023, 1036, 1023, 1022, 1024, 1052, 1024, 1023, 1025,
     1019, 1025, 1024, 1029, 1340, 1029, 1025, 1030, 1031, 1030,
     1031, 1046, 1034, 1033, 1034, 1033, 1035, 1020, 1037, 1256,
     1024,    0, 1039, 1037, 1052, 1022, 1023, 1039, 1019, 1035,
     1048, 1025, 1046, 1029, 1030, 1031, 1041, 1034, 1050, 1048,
     1049, 1041, 1053,    0, 1020,    0, 1256, 1050, 1024, 1053,

     1054, 1037, 1022, 1023, 1033, 1039, 1049, 1035, 1025, 1046,
     1051, 1029, 1030, 1031, 1056, 1034, 1054, 1048, 1058, 1041,
     1057, 1055, 1060, 1051, 1056, 1050, 1058, 1053, 1061, 1057,
     1059, 1033, 1062, 1049, 1055, 1059, 1061, 1065, 1069, 1071,
     1066, 1067, 1068, 1054, 1070, 1060, 1065, 1069, 1068, 1072,
     1167, 1051, 1056, 1070, 1058, 1074, 1062, 1057, 1066, 1091,
     1067, 1071, 1055, 1059, 1061, 1176, 1091, 1167, 1073, 1072,
     1176, 1342, 1060, 1074, 1065, 1069, 1068, 1073, 1077, 1077,
     1077, 1070,    0, 1062,    0, 1066, 1077, 1067, 1071, 1075,
     1075, 1075, 1075,    0, 1167,    0, 1072, 1075, 1176, 1342,

     1074, 1079, 1079, 1079, 1079, 1073, 1081, 1081, 1081, 1079,
     1083, 1083, 1083, 1083, 1081, 1085, 1085, 1085, 1083, 1087,
     1087, 1087, 1087, 1085, 1089, 1089, 1089, 1087, 1093, 1093,
     1093, 1094, 1089, 1094,    0, 1261, 1093, 1097, 1094, 1095,
     1095, 1095, 1095,    0, 1097,    0,    0, 1095, 1098, 1098,
     1098, 1098, 1099, 1100, 1099, 1100, 1098, 1102, 1103, 1099,
     1100, 1101, 1261, 1101, 1102, 1103,    0, 1105, 1101, 1105,
     1106, 1106, 1106, 1106, 1105, 1108,    0,    0, 1106,    0,
        0,    0, 1108, 1109, 1109, 1109, 1109, 1110, 1110, 1110,
     1110, 1109, 1112, 1112, 1112, 1110, 1114, 1114, 1114, 1114,

     1112, 1118, 1118, 1118, 1114, 1116, 1116, 1116, 1116, 1118,
     1120, 1120, 1120, 1116, 1122, 1122, 1122, 1122, 1120, 1124,
     1124, 1124, 1122, 1126, 1126, 1126, 1126, 1124, 1128, 1128,
     1128, 1126, 1130, 1130, 1130, 1130, 1128, 1132, 1132, 1132,
     1130, 1134, 1134, 1134, 1134, 1132, 1136, 1136, 1136, 1134,
     1138, 1138, 1138, 1138, 1136, 1140, 1140, 1140, 1138, 1142,
     1142, 1142, 1142, 1140, 1144, 1144, 1144, 1142, 1146, 1146,
     1146, 1146, 1144, 1148, 1148, 1148, 1146, 1150, 1151, 1150,
     1151, 1148,    0,    0, 1150, 1151, 1152, 1153, 1152, 1153,
     1154, 1163, 1154, 1152, 1153, 1169, 1166, 1154, 1150, 1155,

     1157, 1155, 1157, 1159, 1157, 1159, 1155, 1151, 1161, 1163,
     1161, 1162, 1166, 1162, 1171, 1173, 1177, 1183, 1157, 1169,
     1172, 1177, 1173, 1171, 1178, 1180, 1150, 1153, 1184, 1178,
     1159, 1186,    0, 1161,    0, 1151, 1163, 1162,    0, 1166,
     1172, 1183, 1181, 1187, 1180, 1184, 1169, 1181, 1191, 1177,
     1173, 1171, 1189, 1190, 1153, 1186, 1198, 1178, 1159, 1189,
     1190, 1161,    0, 1198, 1194, 1162, 1187, 1172, 1183, 1191,
     1195, 1180, 1184, 1194, 1197, 1181, 1199, 1199, 1199, 1195,
        0,    0, 1186, 1197, 1199, 1203,    0, 1189, 1190, 1201,
     1201, 1201, 1203, 1187,    0, 1231, 1191, 1201, 1205, 1205,

     1205, 1194, 1206, 1206, 1206, 1206, 1205, 1195, 1208, 1229,
     1206, 1197, 1224, 1231, 1224, 1208, 1214, 1214, 1214, 1214,
     1216, 1217, 1216, 1217, 1214, 1229, 1226, 1216, 1217, 1218,
     1220, 1218, 1220, 1225, 1220, 1225, 1218, 1225, 1224, 1227,
     1231, 1232, 1225, 1237, 1236, 1233, 1234, 1235, 1220, 1226,
        0, 1243, 1229, 1216, 1239, 1268, 1217, 1232, 1233, 1242,
     1236, 1237, 1227, 1241, 1238,    0, 1224, 1218, 1244, 1234,
     1235, 1238, 1242, 1245, 1243, 1239, 1226, 1244,    0, 1241,
     1216,    0, 1268, 1217, 1232,    0, 1233, 1236, 1237, 1227,
     1267, 1253, 1245, 1253, 1218,    0, 1234, 1235, 1253, 1238,

     1242, 1243, 1239,    0,    0, 1244, 1241, 1249, 1249, 1249,
     1251, 1251, 1251, 1267, 1254, 1249, 1254, 1271, 1251, 1245,
     1255, 1254, 1255, 1269, 1258, 1258, 1258, 1255, 1258, 1260,
     1260, 1260, 1262, 1265, 1262, 1270, 1262, 1279,    0, 1271,
     1267, 1262, 1265, 1272, 1270, 1273, 1269, 1276, 1254, 1260,
     1273, 1277, 1272, 1278, 1280, 1279, 1276, 1281, 1292, 1282,
     1277, 1283, 1278, 1283, 1294, 1281, 1271, 1280, 1283,    0,
     1265,    0, 1270, 1269, 1296, 1254, 1305, 1307, 1273, 1292,
     1272, 1297, 1279, 1282, 1276, 1285, 1285, 1285, 1277, 1285,
     1278, 1294, 1304, 1281, 1297, 1280, 1287, 1287, 1287, 1303,

     1305, 1296, 1306, 1308, 1307, 1314, 1292, 1330, 1303, 1311,
     1282, 1304,    0, 1309, 1309, 1309, 1287, 1309,    0, 1311,
     1317, 1316, 1297, 1331, 1314, 1306, 1328, 1305, 1296, 1318,
     1308, 1310, 1310, 1310, 1330, 1328, 1303,    0, 1304, 1316,
     1310, 1317, 1318,    0, 1321, 1321, 1321, 1311, 1321, 1326,
     1331, 1314, 1306, 1323, 1323, 1323, 1325, 1329, 1332,    0,
     1335, 1325, 1323, 1328, 1336, 1332, 1316, 1326, 1317, 1335,
     1318,    0, 1336, 1337, 1338, 1329,    0,    0,    0,    0,
        0, 1337,    0, 1338,    0,    0,    0,    0,    0, 1325,
        0,    0, 1336, 1332, 1326,    0,    0, 1335,    0, 1336,

        0, 1337, 1329,    0,    0,    0,    0,    0, 1337,    0,
        0, 1338, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,

     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1361, 1361, 1362,    0,
     1362, 1362, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1370, 1370,
     1370, 1370, 1370, 1370,    0, 1370, 1371, 1371, 1371, 1371,
     1371,    0, 1371, 1371, 1372,    0, 1372, 1373,    0, 1373,

     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386,

     1386, 1386, 1386, 1386, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1393, 1393, 1393, 1393, 1393, 1393,    0, 1393,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411,

     1411, 1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1418, 1418, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424,

     1424, 1424, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1437, 1437,

     1437, 1437, 1437, 1437, 1437, 1437, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1444, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1449, 1449, 1450, 1450, 1450, 1450,

     1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1475, 1475, 1475, 1475,

     1475, 1475, 1475, 1475, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480, 1480,
     1480, 1480, 1480, 1481, 1481, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488, 1488, 1488,

     1488, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
     1498, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1501, 1501, 1501,

     1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505,
     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
     1508, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1513, 1513, 1513, 1513, 1513, 1513, 1513,

     1513, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1515,
     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1516, 1516, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527,

     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1530, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1532,
     1532, 1532, 1532, 1532, 1532, 1532, 1532, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534,
     1534, 1534, 1534, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1542,
     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1545, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1549, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
     1550, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1552,

     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553,
     1553, 1553, 1553, 1553, 1553, 1554, 1554, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1565, 1565, 1565,

     1565, 1565, 1565, 1565, 1565, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1567, 1567, 1567,    0, 1567, 1567, 1567,
     1567, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1577, 1577, 1577, 1577, 1577, 1577, 1577,

     1577, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1583, 1583, 1584,    0, 1584, 1584, 1584, 1584, 1584,
     1584, 1585,    0, 1585, 1585, 1585, 1585, 1585, 1585, 1586,
        0, 1586, 1586, 1586, 1586, 1586, 1586, 1587,    0, 1587,
     1587, 1587, 1587, 1587, 1587, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <iostream>
#include <stack>
#include <string>
#include <vector>

#include "debug.h"
#include "lexer.h"
#include "line_prep.h"
#include "parser.h"

#define YY_DECL extern "C" int yylex()
std::stack<int> start_stack;
std::string     lexer_name, lexer_stlabel, lexeri_number, lexer_rest, lexer_string, lexer_lr;
std::string     lexer_include;
std::string     input_string;
int             lrlevel;
bool            lrreturn;
Line_prep       pline;

#line 2449 "lexer.cpp"

#line 32 "lexer.l"
  //  following are keywords starting with c
#line 2453 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9
#define state_scanfixpre 10
#define state_scanompfixed 11
#define state_scanompfree 12
#define state_incfilename 13
#define state_char 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 34 "lexer.l"


#line 2696 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1348 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6276 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 36 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 39 "lexer.l"
{ D(O("lrplus");O(lrlevel);Y;); 
                   lrlevel++;
		}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "lexer.l"
{ D(O("lrmin");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 57 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); 
                    lexer_lr += yytext;
		} 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 65 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 86 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 94 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		lexer_lr = "";
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 110 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 114 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK

/* to be used in '#include <file>' */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("INCFILENAME");Y;); lexer_string = yytext; 
                             BEGIN state_char; 
			     return INCFILENAME; }
	YY_BREAK


case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 141 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("CHANGETEAM");Y);         return CHANGETEAM;        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("DO,");Y;);               return DOCOMMA;           }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("DOCONCURRENT");Y;);      return DOCONCURRENT;      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("DO,CONCURRENT");Y;);     return DOCONCURRENT;      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("DOWHILE");Y;);           return DOWHILE;           }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("DO,WHILE");Y;);          return DOWHILE;           }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("ENDTEAM");Y);            return ENDTEAM;           }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 193 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 194 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("INCLUDE");Y;);           return INCLUDE;           }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 209 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 210 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 211 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 212 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 213 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 214 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 215 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 216 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 217 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 218 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 94:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 219 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 220 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 221 "lexer.l"
{ D(O("USE");Y);                return USE;               }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 222 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 226 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 227 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 228 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 229 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 230 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 231 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 232 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 233 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 234 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 235 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 236 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 237 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 238 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 239 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK


case 112:
#line 244 "lexer.l"
case 113:
/* rule 113 can match eol */
#line 245 "lexer.l"
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 245 "lexer.l"
{ D(O("FIXOMP");Y;);
                                return OMP;
                              }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 248 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 249 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 117:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 252 "lexer.l"
case 118:
YY_RULE_SETUP
#line 253 "lexer.l"
{ D(O("OMP");Y;);
				return OMP;
                              }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 256 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 257 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK


case 121:
YY_RULE_SETUP
#line 260 "lexer.l"
{ D(O("FINDENTFIX P-ON");Y;); 
				return P_ON;
		              }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 263 "lexer.l"
{ D(O("FIXFINDENTFIX P-ON");Y;);
				return P_ON;
		              }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 266 "lexer.l"
{ D(O("FINDENTFIX P-OFF");Y;); 
				return P_OFF;
		              }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 269 "lexer.l"
{ D(O("FIXFINDENTFIX P-OFF");Y;);
				return P_OFF;
		              }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 272 "lexer.l"
{ D(O("FINDENTFIX");Y;); 
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FINDENTFIX;
		              }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 277 "lexer.l"
{ D(O("FIXFINDENTFIX");Y;);
                                size_t l = input_string.length()-yyleng-1;
                                lexer_rest = input_string.substr(yyleng,l);
				return FIXFINDENTFIX;
		              }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 282 "lexer.l"
{ D(O("CPP");Y;);
                                return CPP;
                              }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 285 "lexer.l"
{ D(O("CPP_IF");Y;);
                                return CPP_IF;
			      }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 288 "lexer.l"
{ D(O("CPP_ENDIF");Y;);
                                return CPP_ENDIF;
			      }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 291 "lexer.l"
{ D(O("CPP_ELSE");Y;);
                                return CPP_ELSE;
			      }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 294 "lexer.l"
{ D(O("CPP_ELIF");Y;);
                                return CPP_ELIF;
			      }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 297 "lexer.l"
{ D(O("INCLUDE_CPP");Y;);
                                extract_include();
                                return INCLUDE_CPP;
		              }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 301 "lexer.l"
{ D(O("INCLUDE_CPP_STD");Y;);
                                extract_include();
                                return INCLUDE_CPP_STD;
		              }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 307 "lexer.l"
{ D(O("COCO");Y;);
                                return COCO;
                              }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 310 "lexer.l"
{ D(O("COCO_IF");Y;);
                                return COCO_IF;
			      }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 313 "lexer.l"
{ D(O("COCO_ENDIF");Y;);
                                return COCO_ENDIF;
			      }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 316 "lexer.l"
{ D(O("COCO_ELSE");Y;);
                                return COCO_ELSE;
			      }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 319 "lexer.l"
{ D(O("COCO_ELIF");Y;);
                                return COCO_ELIF;
			      }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 322 "lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                extract_include();
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 329 "lexer.l"
{ D(O("INCLUDE_COCO");Y;);
                              /* coco statements must start with '??' in column 1.
			         However, for this code that is somewhat inconvenient,
				 so we allow white space before '??' */
                                extract_include();
                                return INCLUDE_COCO;
		              }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 338 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 339 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK

case 143:
YY_RULE_SETUP
#line 342 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.is_string)
		    {
		       lexer_string = pline.get_value(std::string(yytext));
		       D(O("QSTRING");O(lexer_string);Y;);
		       return QSTRING;
		    }
		    if (type == pline.is_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.is_dotop)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 144:
/* rule 144 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 367 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 373 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 380 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    lexer_lr = "";
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 388 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 395 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 397 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 398 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 400 "lexer.l"
ECHO;
	YY_BREAK
#line 3745 "lexer.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(state_identifier):
			case YY_STATE_EOF(state_keyword):
			case YY_STATE_EOF(state_lr):
			case YY_STATE_EOF(state_lrb):
			case YY_STATE_EOF(state_skip):
			case YY_STATE_EOF(state_skipall):
			case YY_STATE_EOF(state_skipnoop):
			case YY_STATE_EOF(state_error):
			case YY_STATE_EOF(state_findformat):
			case YY_STATE_EOF(state_scanfixpre):
			case YY_STATE_EOF(state_scanompfixed):
			case YY_STATE_EOF(state_scanompfree):
			case YY_STATE_EOF(state_incfilename):
			case YY_STATE_EOF(state_char):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1348 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1348 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1347);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 400 "lexer.l"


void lexer_set(Line_prep p, const int state)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
   lexer_enable(state);
}

void lexer_set(const std::string &s, const int state)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}

void lexer_enable(const int k)
{
   switch(k)
   {
      case CHAR:          BEGIN(state_char);         break;
      case IDENTIFIER:    BEGIN(state_identifier);   break;
      case INCFILENAME:   BEGIN(state_incfilename);  break;
      case SKIPALL:       BEGIN(state_skipall);      break;
      case SKIP:          BEGIN(state_skip);         break;
      case SKIPNOOP:      BEGIN(state_skipnoop);     break;
      case KEYWORD:       BEGIN(state_keyword);      break;
      case FINDFORMAT:    BEGIN(state_findformat);   break;
      case SCANFIXPRE:    BEGIN(state_scanfixpre);   break;
      case SCANOMPFIXED:  BEGIN(state_scanompfixed); break;
      case SCANOMPFREE:   BEGIN(state_scanompfree);  break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}
std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}
std::string lexer_getrest()
{
   return lexer_rest;
}
std::string lexer_getstring()
{
   D(O("lexer_string");O(lexer_string););
   return lexer_string;
}
std::string lexer_getlr()
{
   D(O("lexer_lr");O(lexer_lr););
   return lexer_lr;
}
std::string lexer_getinclude()
{
   D(O("lexer_getinclude");O(lexer_include););
   return lexer_include;
}

void extract_include()
{
// removes first and last character of rest of input line
// example: 
// #include "file.inc"
// after scanning of '#include ', the string "file.inc",
// without quotes is put in lexer_include

   size_t l = input_string.length()-yyleng-1;
   lexer_include = input_string.substr(yyleng,l);
   if (lexer_include.size() > 1)
   {
      lexer_include.erase(lexer_include.end()-1);
      lexer_include.erase(lexer_include.begin());
   }
   D(O("lexer_include");O(lexer_include););
}

#if 0
// maybe we need this in the future:
// not sure if this works OK
std::stack<std::string> input_string_stack;
void lexer_push(std::string s, const int state)
{
   // https://sourceforge.net/p/flex/mailman/message/30542280/

   input_string_stack.push(s);
   input_string = s+'\n';
   yypush_buffer_state(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   lexer_enable(state);
}
void lexer_pop()
{
   yypop_buffer_state();
   input_string=input_string_stack.top();
   input_string_stack.pop();
}
#endif

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


