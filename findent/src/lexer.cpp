#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 106
#define YY_END_OF_BUFFER 107
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1049] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      107,  105,  104,  105,  101,  100,  105,  102,  103,   16,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,    4,    5,    2,    3,    8,    9,
        6,    7,   15,   14,   10,   12,   11,   13,    1,  106,
      106,   97,  106,   97,  106,  106,  106,  106,  106,  106,
       98,    0,  100,    0,    0,   16,   17,   16,    0,    0,
        0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
        0,   62,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   79,    0,    0,    0,   97,    0,   85,    0,
        0,    0,   85,    0,    0,    0,   97,    0,    0,    0,
        0,    0,    0,   87,    0,    0,    0,    0,   85,    0,
        0,    0,    0,    0,    0,    0,    0,   99,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       44,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   85,    0,    0,    0,   85,
        0,    0,    0,   85,    0,    0,    0,   85,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   86,

        0,    0,    0,    0,   89,    0,    0,    0,    0,    0,
        0,   87,    0,    0,    0,   89,    0,    0,    0,   85,
        0,    0,    0,    0,    0,    0,   85,    0,    0,   85,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
        0,    0,    0,   36,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   59,    0,    0,
        0,    0,    0,    0,    0,   72,   73,    0,    0,    0,
        0,   80,   81,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   87,    0,    0,   91,    0,    0,

       85,    0,   85,   85,    0,   85,    0,    0,   85,   85,
       85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   86,    0,    0,    0,   86,
        0,    0,   92,    0,   87,    0,    0,   89,    0,   91,
       87,    0,   87,   97,    0,   89,    0,    0,    0,    0,
        0,    0,    0,    0,   87,    0,   85,    0,    0,    0,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   21,    0,    0,   27,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       43,    0,    0,    0,   48,    0,    0,    0,    0,    0,
        0,    0,   58,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   82,    0,   84,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   87,    0,   85,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   86,    0,   86,   86,    0,   86,    0,   87,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   87,    0,    0,    0,   89,    0,    0,
        0,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   20,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   37,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   60,    0,   63,    0,    0,    0,   67,    0,    0,
        0,    0,    0,   83,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   86,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   87,   95,
       87,    0,   89,    0,    0,    0,    0,   87,    0,    0,
        0,   89,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   28,   29,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   45,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   56,    0,    0,
       64,    0,   66,    0,    0,    0,   71,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   85,

        0,    0,    0,    0,   85,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   91,    0,    0,
        0,    0,   87,    0,    0,    0,    0,    0,    0,   96,
        0,    0,    0,    0,    0,   88,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   86,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   86,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   91,    0,    0,    0,    0,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   91,    0,

        0,    0,    0,   87,    0,   94,    0,   87,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       30,   31,    0,    0,    0,    0,    0,   40,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   57,   61,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       85,    0,   85,    0,   85,    0,   85,    0,   90,    0,
       87,    0,   90,    0,   87,    0,   87,    0,    0,    0,
       90,    0,    0,   88,    0,   88,    0,    0,   87,    0,
        0,   90,    0,    0,    0,   86,    0,   86,    0,   86,
        0,   90,    0,   87,    0,   86,    0,   85,    0,   85,

        0,   90,    0,   87,    0,   90,    0,   87,    0,   90,
        0,   87,    0,   90,    0,   87,    0,    0,    0,    0,
        0,    0,   19,   22,    0,   25,    0,    0,    0,   35,
       38,    0,    0,    0,   46,    0,    0,   50,    0,    0,
       53,    0,    0,   65,    0,    0,    0,   74,    0,    0,
       77,    0,    0,    0,   87,    0,   93,    0,   87,    0,
        0,   90,    0,   87,    0,   88,   96,   87,    0,   90,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   52,    0,    0,    0,    0,    0,   75,
       76,   78,    0,   87,    0,   87,    0,    0,    0,   23,

        0,    0,    0,    0,    0,   42,   47,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,    0,    0,   39,
       41,   49,   51,   55,    0,    0,    0,    0,    0,   33,
        0,   54,    0,    0,    0,    0,    0,   70,    0,    0,
        0,   34,   68,    0,    0,   69,   18,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,    1,    1,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
       16,    1,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       26,   33,   34,   35,   36,   37,   38,   39,   40,   26,
       41,    1,   42,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   26,   53,   54,   55,   56,
       57,   58,   26,   59,   60,   61,   62,   63,   64,   65,
       66,   26,    1,   13,    1,   13,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    4,    5,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_uint16_t yy_base[1230] =
    {   0,
        0,   43,   86,  129,  170, 2190,   14,   16,   19,   25,
       62,   65,   28,   29,  105,  144, 2174, 2173, 2162,  232,
     2157, 4397, 4397,   16, 4397, 2142, 2130, 4397, 4397,   56,
      141,    8,  265,  137,  212,  224,  228,  143,  149,  148,
       59,  161,  261,   58, 4397, 4397, 4397, 4397, 4397, 4397,
     4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397,
     2139, 4397,   74,  111,  327,   26,  114,  260,  369,  410,
     4397,  151, 2121, 2108,    0, 2106,    0,  154,  133,  211,
      217,  239,  109,  244,  291,  292,  287,  343,  373,  293,
      257, 2092,  372,  290,  197,  339,  218,  330,  377,  390,

      252,  380, 2083,  375,  401, 2087, 4397,  174,   28,   31,
      443,  352,  116,  157,  395,  357,  285,  476,  301,  448,
      456,  518,  347, 2069,  422,  491,  463,  499, 2055,  433,
      507,  560,  546,  574,  579,  533,  608, 4397,  402,  589,
      535,  492,  440,  563,  483,  491,  572,  571,  581,  577,
      640,  579,  613,  578,  624,  604,  600,  638,  609,  447,
      629,  652,  637,  661,  664,  666,  687,  679,  534,  544,
      711,  286,  702,  722,  725, 2048,  727,  734,  742, 2043,
      739,  750,  747, 2024,  542,  208,  758, 1991, 1992,  761,
      762,  770,  779,  793,  801,  821,  798,  809,  835,  306,

      805,  843,  846,  855, 1981,  806,  863, 1970,  765,  847,
      867, 4397,  871,  874,  882, 1966,  879,  890,  893, 1931,
      894,  902,  910, 1889, 1890,  907, 4397,  918,  921, 1879,
      930,  944,  947,  955,  952,  960,  965,  975,  974,  984,
      993,  784,  614,  976,  939,  636,  982,  782,  985,  993,
      990,  996, 1008, 1003,  991,  999,  885,  676,  702, 1021,
     1016, 1001, 1028, 1033, 1019,  725, 1034, 1838, 1045, 1029,
     1047, 1053, 1051, 1056, 1060, 1813, 1802, 1074, 1077, 1048,
     1067, 1800, 1101, 1073, 1099,  979, 1125, 1106, 1133, 1135,
     1143, 1111, 1152, 1122, 1795, 1147, 1160, 1773, 1157, 1165,

     4397, 1168, 1692, 4397, 1176, 1691, 1678, 1180, 4397, 1675,
     4397, 1183, 1184, 1192, 1195, 1203, 1205, 1213, 1200, 1221,
     1230, 1244, 1252, 1272, 1255, 1210, 1287, 1260, 1295, 1218,
     1303, 1259, 1307, 1315, 1292, 1635, 1318, 1320, 1328, 1638,
     1325, 1336, 1636, 1333, 4397, 1344, 1347, 1615, 1187, 4397,
     4397, 1355, 4397, 1607, 1358, 1588, 1363, 1362, 1371, 1374,
     1382, 1385, 1393, 1543, 4397, 1397, 4397, 1406, 1420, 1421,
      397, 1424, 1432, 1435, 1447, 1448, 1455, 1456, 1463, 1464,
     1472, 1475, 1493, 1158, 1102, 1329, 1459, 1478, 1424, 1490,
     1480, 1492, 1494, 1504, 1237, 1507,  866, 1489, 1389, 1506,

     1528, 1476, 1515, 1517, 1475, 1427, 1519, 1520, 1377, 1518,
     1311, 1538, 1472, 1417, 1530, 1539, 1546, 1535, 1547, 1550,
     1553, 1554, 1557, 1560, 1563, 4397, 1561, 1471, 1576, 1580,
     1598, 1587, 1602,  362, 1606, 1480, 1624, 1460, 1613, 1620,
     1628, 1632, 4397, 1635, 4397, 1637, 1610, 1645, 1642, 1650,
      627, 1653, 1452, 1657, 1390, 1661, 1664, 1667, 1670, 1673,
     1683, 1686, 1689, 1674, 1699,  644, 1703, 1379, 1707, 1690,
     1711,  836, 1714, 1376, 1718, 1375, 1722, 1725, 1729, 1367,
     1732, 4397, 1735, 1350, 4397, 1738, 1330, 1742, 4397, 1136,
     1312, 1745, 1300, 1749, 1752, 1756, 1759, 1764, 1778, 1779,

     1782, 1790, 1787, 1293, 1795, 1245, 1798, 1289, 1277, 1806,
     1809,  466, 1810, 1818, 1821, 1822, 1829, 1830, 1837, 1838,
     1846, 1859, 1856, 1829, 1255, 1837, 1855, 1851, 1821, 1859,
     1864, 1852, 1873, 1872, 1882, 1822, 1251, 1889, 1814, 1893,
     1880, 1877, 1894, 1903, 1898, 1906, 1908, 1905, 1915, 1930,
     1910, 1244, 1919, 1236, 1932, 1918, 1944, 1941, 1937, 1942,
     1962, 1949, 1945, 1223, 1979, 1952, 2000, 1980, 2010, 2012,
     2022, 1984, 2007, 2026, 2034, 2038, 2041, 2042, 2050, 2053,
     2061, 2063, 2071, 2058, 2068, 2079, 2082, 2090, 2092, 2100,
     2103, 2108, 2107, 2116, 2119, 2127, 2124, 2131, 2135, 2138,

     2146, 2143, 2150, 2158, 2155, 2166, 2169, 2177, 2180, 4397,
     2182, 2185, 2187, 2195, 2199, 2207, 2216, 2230, 2231, 2204,
     2239, 2242, 2251, 2247, 2259, 2262, 2263, 2271, 4397, 1224,
     4397, 2274, 1223, 2279, 2278, 2287, 2290, 1211, 2298, 2300,
     2308, 1206, 2295, 2311, 2316, 2319, 2324, 2327, 2334, 2335,
     2054, 2234, 2300, 2005, 2327, 1985, 1185, 1184, 2311, 2303,
     2319, 2331, 2334, 2332, 2340, 2139, 2341, 1161, 2345, 2347,
     2354, 2353, 2362, 2359, 2379, 2357, 2370, 1144, 2382, 2385,
     1128, 2387, 1107, 2064, 2389, 2380, 1103, 2394, 2402, 1388,
     2396, 2411, 2429, 2420, 2449, 2434, 2457, 2459, 2467, 1108,

     2436, 2475, 2446, 2479, 4397, 2483, 2491, 2495, 2503, 2507,
     2510, 2464, 2518, 2515, 2526, 2528, 2536, 1096, 2523, 2544,
     2533, 2548, 4397, 2552, 2560, 2564, 2572, 2576, 2579,  976,
     2586, 2583, 2594, 2597, 2605, 2608, 2584, 2616, 2619, 2620,
     2628, 2631, 2639, 2641, 2649, 1086, 2636, 2657, 2660, 2646,
     2668, 2676, 2665, 2680, 2683, 2691, 4397, 2694, 2702, 2710,
     2714, 2722, 2726, 2730, 2733, 2699, 2741, 2738, 2749, 2752,
     2760, 2763, 2772, 2786, 2787, 2790, 2798, 2795, 2807, 2803,
     2815, 1072, 2818, 2826, 2823, 2834, 4397, 2837, 2845, 2849,
     2857, 2860, 2861, 2869, 2872, 2880, 2882, 2890, 1035, 2877,

     2898, 2887, 2902, 4397, 2906,  962, 2914, 4397, 2917, 2922,
     2925, 2930, 2933, 2938, 2450, 2925, 2705, 2852, 2568, 2935,
      947,  944, 2003, 2934, 2909, 2941, 2519, 2933, 2945, 2917,
     2745, 2425, 2953, 2950, 2952, 2807, 2963, 2957,  936,  933,
     2969, 2973, 2486, 1771, 2979, 2641, 2632, 2983, 2984, 3003,
      924, 3019, 4397, 3030,  923, 3034, 4397, 3042,  904, 3046,
     4397, 3054,  903, 3058, 4397, 3006,  892, 3062, 3015, 3070,
      884, 3067, 3078, 3081, 3086, 3089, 3090, 3093,  875, 3098,
     3106,  856, 3097, 3114, 3122,  849, 3126, 4397, 3134,  848,
     3142,  824, 3146, 4397, 3150, 4397, 3158,  814, 3162, 4397,

     3170,  795, 3174, 4397, 3182,  782, 3186, 4397, 3194,  773,
     3198, 4397, 3206,  772, 3210, 4397, 3213, 3218, 3221, 3226,
     3231, 2996,  742,  726, 3166,  706, 2980, 3082, 3213,  703,
      695, 3189, 3222, 3226,  688, 3227, 3229,  575, 3106, 3232,
      542, 3233, 3097,  541, 3230, 3235, 2579,  533, 3241, 3253,
      520, 3256, 3269, 3288, 4397, 3296,  509, 3276, 4397, 3304,
     3307,  500, 3277,  481,  471,  453,  435, 4397, 3315,  434,
     3318, 3323, 3190, 3279, 3287, 3307, 2961, 3310, 3315, 3314,
     3126, 3318, 3319,  417, 3316, 3053, 3321, 3332, 3324,  414,
      338,  333, 3356, 4397, 3370, 4397, 3381, 3382, 3348,  320,

     3331, 3373, 3333, 3374, 3238,  299,  288, 3382, 3383, 3384,
     3237, 3387, 3386, 3392, 3405, 3385,  285, 3401, 3394,  241,
      238,  206,  181,  163, 3402, 3398, 3400, 3410, 3412,  107,
     3411,   98, 3423, 3426, 3432, 3434, 3433,   90, 3443, 3437,
     3441,   89,   61, 3454, 3455,    6,    3, 4397, 3503, 3508,
     3513, 3518, 3523, 3528, 3533, 3538, 3540, 3544, 3549, 3554,
     3559, 3564, 3569, 3574, 3579, 3584, 3587, 3590, 3594, 3599,
     3604, 3609, 3614, 3619, 3624, 3629, 3634, 3639, 3644, 3649,
     3654, 3659, 3664, 3669, 3674, 3679, 3684, 3689, 3694, 3699,
     3704, 3709, 3714, 3719, 3724, 3729, 3734, 3739, 3744, 3749,

     3754, 3759, 3764, 3769, 3774, 3779, 3784, 3789, 3794, 3799,
     3804, 3809, 3814, 3819, 3824, 3829, 3834, 3839, 3844, 3849,
     3854, 3859, 3864, 3869, 3874, 3879, 3884, 3889, 3894, 3899,
     3904, 3909, 3914, 3919, 3924, 3929, 3934, 3939, 3944, 3949,
     3954, 3959, 3964, 3969, 3974, 3979, 3984, 3989, 3994, 3999,
     4004, 4009, 4014, 4019, 4024, 4029, 4034, 4039, 4044, 4049,
     4054, 4059, 4064, 4069, 4074, 4079, 4084, 4089, 4094, 4099,
     4104, 4109, 4114, 4119, 4124, 4129, 4134, 4139, 4144, 4149,
     4154, 4159, 4164, 4169, 4174, 4179, 4184, 4189, 4194, 4199,
     4204, 4209, 4214, 4219, 4224, 4229, 4234, 4239, 4244, 4249,

     4254, 4259, 4264, 4269, 4274, 4279, 4284, 4289, 4294, 4299,
     4301, 4306, 4311, 4316, 4321, 4326, 4331, 4336, 4341, 4346,
     4351, 4356, 4361, 4366, 4371, 4376, 4381, 4386, 4391
    } ;

static yyconst flex_int16_t yy_def[1230] =
    {   0,
     1049, 1049, 1050, 1050,    2,    5, 1051, 1051, 1052, 1052,
     1053, 1053, 1053, 1053, 1053, 1053, 1054, 1054, 1055, 1056,
     1048, 1048, 1048, 1048, 1048, 1048, 1057, 1048, 1048, 1058,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1059, 1048, 1060, 1061, 1062, 1063, 1064, 1065, 1062, 1064,
     1048, 1048, 1048, 1057, 1066, 1067, 1068, 1058, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,

     1057, 1057, 1057, 1057, 1057, 1059, 1048, 1069, 1070, 1071,
     1072, 1061, 1070, 1073, 1074, 1075, 1070, 1076, 1077, 1078,
     1079, 1076, 1077, 1080, 1081, 1082, 1083, 1083, 1084, 1085,
     1083, 1086, 1075, 1075, 1075, 1075, 1075, 1048, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1087, 1088,
     1089, 1070, 1090, 1084, 1088, 1080, 1091, 1089, 1089, 1084,
     1091, 1089, 1073, 1080, 1092, 1074, 1074, 1084, 1092, 1093,
     1094, 1095, 1096, 1097, 1098, 1096, 1094, 1099, 1097, 1070,

     1100, 1101, 1098, 1098, 1084, 1102, 1098, 1080, 1048, 1099,
     1099, 1048, 1099, 1095, 1095, 1084, 1099, 1095, 1103, 1084,
     1104, 1103, 1103, 1084, 1105, 1104, 1048, 1104, 1103, 1084,
     1106, 1107, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1108, 1109, 1110, 1109, 1111, 1110,
     1110, 1111, 1110, 1112, 1080, 1105, 1084, 1084, 1111, 1111,

     1048, 1111, 1084, 1048, 1110, 1084, 1092, 1092, 1048, 1084,
     1048, 1113, 1114, 1115, 1114, 1116, 1115, 1115, 1116, 1115,
     1117, 1118, 1119, 1117, 1118, 1120, 1121, 1119, 1119, 1122,
     1119, 1116, 1116, 1116, 1120, 1080, 1123, 1121, 1121, 1084,
     1123, 1121, 1084, 1122, 1048, 1122, 1119, 1084, 1048, 1048,
     1048, 1116, 1048, 1084, 1115, 1084, 1124, 1125, 1124, 1125,
     1125, 1124, 1124, 1105, 1048, 1125, 1048, 1126, 1127, 1127,
     1128, 1129, 1130, 1131, 1131, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,

     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1048, 1057, 1057, 1132, 1133,
     1134, 1133, 1135, 1134, 1134, 1135, 1134, 1135, 1135, 1135,
     1134, 1105, 1048, 1135, 1048, 1136, 1137, 1138, 1137, 1139,
     1138, 1138, 1139, 1138, 1139, 1139, 1139, 1138, 1136, 1140,
     1141, 1136, 1140, 1142, 1143, 1141, 1141, 1144, 1141, 1142,
     1145, 1143, 1143, 1145, 1143, 1144, 1144, 1141, 1139, 1145,
     1145, 1048, 1145, 1084, 1048, 1143, 1084, 1144, 1048, 1146,
     1147, 1146, 1147, 1147, 1146, 1147, 1146, 1148, 1149, 1149,

     1150, 1151, 1150, 1152, 1153, 1151, 1151, 1084, 1153, 1151,
     1154, 1155, 1156, 1157, 1154, 1154, 1136, 1136, 1136, 1136,
     1136, 1136, 1154, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1158, 1159, 1160, 1159, 1161, 1160,
     1160, 1161, 1161, 1161, 1160, 1161, 1162, 1163, 1164, 1163,
     1165, 1164, 1164, 1165, 1165, 1165, 1164, 1165, 1166, 1167,
     1166, 1168, 1169, 1170, 1171, 1171, 1172, 1169, 1173, 1170,

     1170, 1173, 1172, 1171, 1173, 1173, 1170, 1172, 1173, 1048,
     1174, 1175, 1175, 1174, 1175, 1174, 1176, 1177, 1177, 1178,
     1179, 1178, 1180, 1179, 1179, 1180, 1180, 1180, 1048, 1181,
     1048, 1179, 1181, 1182, 1183, 1184, 1183, 1185, 1186, 1184,
     1184, 1181, 1186, 1162, 1182, 1162, 1162, 1162, 1162, 1162,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1158, 1159, 1160, 1159, 1161, 1160, 1160, 1181,

     1161, 1160, 1161, 1161, 1048, 1161, 1160, 1161, 1160, 1161,
     1162, 1163, 1164, 1163, 1165, 1164, 1164, 1181, 1165, 1164,
     1165, 1165, 1048, 1165, 1164, 1165, 1164, 1165, 1166, 1187,
     1166, 1188, 1189, 1190, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1195, 1197, 1196, 1196, 1181, 1197, 1196, 1198, 1199,
     1198, 1198, 1199, 1199, 1197, 1197, 1048, 1197, 1196, 1198,
     1197, 1196, 1199, 1197, 1200, 1201, 1200, 1201, 1201, 1200,
     1201, 1200, 1202, 1203, 1203, 1204, 1205, 1204, 1206, 1205,
     1205, 1181, 1206, 1205, 1206, 1206, 1048, 1206, 1205, 1206,
     1205, 1207, 1208, 1209, 1208, 1210, 1209, 1209, 1181, 1210,

     1209, 1210, 1210, 1048, 1210, 1181, 1209, 1048, 1162, 1207,
     1162, 1162, 1162, 1162, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1212,
     1181, 1213, 1048, 1212, 1181, 1213, 1048, 1214, 1181, 1215,
     1048, 1214, 1181, 1215, 1048, 1188, 1216, 1217, 1218, 1218,
     1181, 1219, 1218, 1220, 1220, 1220, 1221, 1222, 1223, 1224,
     1224, 1181, 1217, 1224, 1225, 1181, 1197, 1048, 1225, 1181,
     1226, 1181, 1227, 1048, 1197, 1048, 1228, 1181, 1229, 1048,

     1205, 1181, 1206, 1048, 1205, 1181, 1206, 1048, 1209, 1181,
     1210, 1048, 1209, 1181, 1210, 1048, 1162, 1207, 1162, 1207,
     1207, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1217, 1217, 1048, 1217, 1181, 1219, 1048, 1219,
     1218, 1181, 1221, 1223, 1223, 1223, 1181, 1048, 1224, 1181,
     1162, 1162, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1217, 1048, 1219, 1048, 1162, 1207, 1211, 1211,

     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1207, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211,    0, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,

     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,

     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048
    } ;

static yyconst flex_uint16_t yy_nxt[4464] =
    {   0,
       22,   22,   23,   24,   22,   22,   22,   22,   22,   25,
       22,   22,   22,   26,   22,   22,   46,   75,   46,   71,
       75,   50,   75,   47,   48,   47,   48,   50,  124,   72,
       54,   54,  173,  176,  125,   81,  174,   55,   55,  177,
       28,   22,   22,   22,   22,   29,   24,   22,   22,   22,
       22,   22,   25,   22,   22,   22,   26,   22,   22,   51,
       52,   81,   76,   77,   54,   51,   52,   54,   57,   57,
       75,   55,   75,   75,   55,   75,  109,   56,  110,   99,
       56,  105,  111,   28,   22,   22,   22,   22,   23,   24,
       22,   22,   22,   22,   22,   25,   22,   22,   22,   26,

       22,   22,   57,   75,   75,   57,   99,   54,  105,   58,
       58,   58,   75,  113,   55,  114,  117,   58,  119,  115,
      173,   75,  126,   75,  174,  143,   28,   22,   22,   22,
       22,   29,   24,   22,   22,   22,   22,   22,   25,   22,
       22,   22,   26,   22,   22,   57,   54,   75,   58,   58,
       58,   75,  143,   55,   71,   75,   58,   75,   79,  184,
       76,   77,   75,   75,   72,  185,  139,   87,   75,   28,
       22,   22,   23,   95,   80,   75,  109,   75,  170,   96,
       97,  100,  171,   98,   57,   79,   31,   32,   33,   34,
       35,   36,  139,   87,   37,   75,  101,   38,   39,   95,

       80,   40,   41,   42,   43,   96,   97,   44,  100,   98,
      310,   75,  189,   31,   32,   33,   34,   35,   36,  158,
       75,   37,  101,   38,   39,   75,   75,   40,   41,   42,
       43,   75,   75,   44,   64,   65,   66,   67,   75,   88,
       68,   89,   75,   67,  140,   69,  158,  141,  160,   92,
       70,   67,   75,   75,   90,   75,   93,   94,   75,   91,
      144,  128,  129,  128,  130,   88,   75,   89,  131,  165,
      140,   75,  142,  141,  160,   75,   92,   70,   67,   75,
       90,   82,   93,   94,  102,   91,  155,  144,   83,  173,
      173,  103,   84,  174,  174,   85,  165,   86,  142,   75,

      104,   75,   75,  124,   75,   75,   75,   75,   82,  198,
      173,  102,  155,   75,  174,   83,  147,  103,   84,  145,
      146,   85,  148,   86,  157,  154,  104,  116,  116,  117,
      118,  119,  116,  116,   75,  121,  116,  116,  116,  116,
      122,  116,  116,  147,   75,  145,  146,   75,  148,  124,
      157,  154,   75,   75,  113,  198,  114,   75,  159,  117,
      115,  191,  161,  149,  303,  192,  572,  116,  116,  116,
      116,  117,  122,  119,  116,  116,  150,  126,  116,  116,
      116,  116,  122,  116,  116,  159,   75,   75,  161,   75,
      149,   75,  151,  162,   75,  163,  187,  188,  187,  189,

      166,  173,  150,  156,   75,  174,  167,  152,  153,  116,
      116,  132,  117,  132,  119,   75,   75,  164,  126,  151,
      162,  168,  163,  211,  212,  211,  133,  166,   75,  156,
      213,   75,  167,  152,  153,  227,  242,  134,  225,  225,
      135,  228,  136,  164,  179,  180,  179,  181,  168,  137,
      200,  182,  201,  133,   75,  966,  202,  204,  205,  204,
      206,   75,  242,  134,  207,  220,  135,  221,  136,  275,
      173,  222,  247,  966,  174,  137,  190,  190,  117,  193,
      191,  190,  190,  966,  195,  190,  190,  190,  190,  196,
      190,  190,  215,  216,  215,  217,  275,   75,  247,  218,

      223,  129,  223,  221,  225,   75,   75,  222,  229,  230,
      229,  221,  246,  225,  249,  222,  190,  190,  190,  190,
      117,  196,  191,  190,  190,  250,  192,  190,  190,  190,
      190,  196,  190,  190,   75,  117,  109,  191,  286,  246,
      249,  192,  287,  308,  309,  308,  176,   75,  117,   75,
      191,  250,  289,  245,  192,   75,   75,  240,  190,  190,
      190,  231,  117,  231,  191,  190,  190,  190,  192,  190,
      190,  190,  190,  233,  190,  190,  117,   75,  191,  234,
      245,  117,  192,  191,  240,   75,   75,  192,  252,   75,
      235,   75,   75,   75,  269,   75,  248,  254,  237,  233,

      190,  190,  190,   75,  236,  234,  251,  238,  239,  253,
      117,  267,  191,  243,   75,  252,  192,  235,   75,  244,
      272,  269,  248,   75,  254,  237,  241,   75,   75,  354,
      236,  584,  251,  238,  239,  253,  385,  267,   75,  271,
      243,  268,  270,   75,  274,  244,  343,  272,  597,  276,
       75,   75,   75,  241,   75,  388,  255,  256,  257,  258,
      259,  260,  273,  385,  261,  271,   75,  268,  262,  270,
      274,  263,  278,  264,  265,   75,  276,  266,   75,  277,
       75,  279,  388,  255,  256,  257,  258,  259,  260,  273,
       75,  261,  280,   75,  262,  282,  281,  263,  278,  264,

      265,   75,   75,  266,  295,  277,  401,  283,  279,   75,
      296,  284,  291,  180,  291,  292,   75,   75,  280,  293,
       75,  282,  281,  297,  298,  297,  225,  176,  300,  301,
      300,  402,  401,  289,  283,  302,  303,  284,  292,   75,
       75,  304,  293,  291,  180,  291,  292,  302,  412,  184,
      293,  305,  306,  305,  292,  185,   75,  402,  293,  187,
      188,  187,  189,  117,  124,  313,  349,  350,  349,  314,
      316,  318,  216,  318,  319,  412,  225,  225,  320,  312,
      312,  117,  321,  313,  312,  312,  225,  323,  312,  312,
      312,  312,  324,  312,  312,  200,   75,  326,   75,  225,

      124,  327,  329,  205,  329,  330,  316,  336,  345,  331,
      333,  212,  333,  337,  346,  390,  384,  334,  225,  312,
      312,  312,  312,  117,  324,  313,  312,  312,  225,  314,
      312,  312,  312,  312,  324,  312,  312,  200,  484,  326,
      602,  390,  384,  327,  339,  340,  339,  341,  343,  351,
      330,  342,  225,  225,  331,  334,  329,  205,  329,  330,
      225,  312,  312,  331,  347,  348,  347,  330,  333,  212,
      333,  331,  352,  353,  352,  334,  354,  966,  319,  334,
       75,  351,  320,  318,  216,  318,  319,  334,  225,  538,
      320,  355,  356,  355,  319,  220,  227,  358,  320,   75,

      209,  359,  361,  362,  230,  362,  358,  225,  225,  227,
      359,  363,  129,  363,  358,  361,  538,  400,  359,  366,
      367,  366,  362,  230,  362,  358,  361,  225,  225,  359,
      312,  368,  117,  368,  313,  312,  312,  312,  314,  312,
      312,  312,  312,  400,  312,  312,  371,   75,  372,  117,
       75,  313,  373,   75,  117,  314,  313,  117,   75,  313,
      314,   75,  117,  314,  313,  387,  225,  117,  314,  313,
      312,  312,  312,  314,  374,  375,  117,  117,  313,  313,
      173,  176,  314,  314,  174,  376,  117,  433,  313,  378,
       75,  387,  314,  377,  386,  117,   75,  313,  389,   75,

      374,  314,  375,  379,   75,   75,  380,   75,  381,  392,
       75,  376,  391,   75,  393,   75,  378,   75,  382,  377,
      383,  386,   75,  394,  398,  389,  399,  396,  395,  379,
       75,  407,  380,   75,  381,   75,  392,  405,  391,  225,
      397,  393,   75,   75,  382,  406,  383,   75,   75,  394,
      398,  403,  399,  409,  396,  395,  404,  407,  411,   75,
      408,   75,   75,  415,  405,   75,  397,   75,  410,  419,
       75,  406,  414,  413,   75,  417,  225,  403,  424,  416,
      409,   75,  404,  420,  411,  418,  408,   75,   75,  415,
      225,   75,  421,  428,  410,  423,  419,  425,  414,  413,

      225,  109,  417,  430,  424,  416,  422,  431,  176,  420,
      426,  418,  225,  304,  433,   75,   75,   75,  421,  440,
      428,   75,  423,  425,  295,  427,  435,  180,  435,  436,
      296,  525,  422,  437,  439,  301,  439,  303,  220,  436,
      612,  440,   75,  437,  435,  180,  435,  436,  442,  443,
      442,  437,  427,  441,  306,  441,  436,  525,   75,  304,
      437,  297,  298,  297,  225,  440,  439,  301,  439,  444,
      445,  444,   75,  440,  524,   75,  440,  441,  306,  441,
      436,  308,  309,  308,  437,  117,  124,  447,  349,  350,
      349,  448,  450,  452,  216,  452,  453,  124,   75,   75,

      454,  524,  351,  450,  456,  212,  456,  354,  457,  453,
      225,  457,  336,  454,  452,  216,  452,  453,  471,  209,
      345,  454,  458,  356,  458,  453,  477,  225,  225,  454,
      446,  446,  117,  459,  447,  446,  446,   75,  461,  446,
      446,  446,  446,  462,  446,  446,  200,  630,  464,  626,
       75,   75,  465,  467,  205,  467,  468,  200,   75,  464,
      469,  351,  343,  465,  468,   75,  536,  457,  469,   75,
      446,  446,  446,  446,  117,  462,  447,  446,  446,  631,
      448,  446,  446,  446,  446,  462,  446,  446,  473,  340,
      473,  474,  536,  225,  336,  475,  467,  205,  467,  468,

      471,  209,  227,  469,  478,  348,  478,  468,  456,  212,
      456,  469,  446,  446,  227,  457,  479,  353,  479,  481,
      482,  481,  484,  457,  474,   75,  483,  485,  475,  473,
      340,  473,  474,  483,  225,  345,  475,  486,  487,  486,
      474,  477,  550,   75,  475,  488,  489,  488,  478,  348,
      478,  468,  477,  526,  225,  469,  479,  353,  479,  458,
      356,  458,  453,  457,  227,  220,  454,  491,  550,  485,
      494,  492,  495,  230,  495,  491,  227,  345,  485,  492,
      526,  345,  494,  496,  367,  496,  495,  230,  495,  491,
      494,   75,  351,  492,  497,  129,  497,  491,  496,  367,

      496,  492,   75,   75,  548,  494,  446,  498,  117,  498,
      447,  446,  446,  446,  448,  446,  446,  446,  446,  540,
      446,  446,  371,  371,  501,  501,  504,  847,  502,  502,
      548,   75,  505,  507,  508,  507,  509,  512,   75,  513,
      510,   75,  529,  514,  552,  540,  446,  446,  446,  512,
      117,  513,  447,  847,  351,  514,  448,  117,  117,  447,
      447,  545,  304,  448,  448,  117,  117,  447,  447,  529,
      552,  448,  448,   75,  117,  516,  447,  117,  527,  447,
      448,  515,  304,  448,  517,   75,   75,  545,  520,   75,
       75,  519,   75,  518,   75,  117,  521,  447,  528,  522,

      532,  448,  516,   75,   75,  527,   75,  515,   75,  530,
      517,  542,  534,  523,  531,  520,  533,  519,   75,  518,
       75,   75,  539,  521,  535,  528,  522,  532,  537,   75,
      541,   75,   75,   75,   75,  549,  530,  542,  546,  534,
      523,  531,   75,  533,   75,  365,  544,  543,  539,   75,
      547,  535,   75,   75,  553,  537,  556,  541,  551,  554,
       75,   75,  549,  557,   75,  546,  555,   75,   75,  559,
      558,   75,  544,  543,   75,   75,  547,   75,  109,  562,
      566,  553,  176,  556,  567,  551,  554,  560,  569,  176,
      557,  561,  225,  555,  564,  569,  559,  558,  563,  571,

      180,  571,  572,  574,  301,  574,  562,  571,  180,  571,
      572,  225,  124,  560,  574,  301,  574,  561,  581,  225,
      564,  576,  445,  576,  563,  575,  306,  575,  572,  575,
      306,  575,  572,  442,  443,  442,  576,  445,  576,  117,
      225,  578,  225,  209,  124,  579,  583,  216,  583,  584,
      581,  586,  212,  586,  583,  216,  583,  584,  587,  356,
      587,  584,  586,  212,  586,  588,  353,  588,  587,  356,
      587,  584,  117,  589,  578,  200,  336,  593,  590,  225,
      311,  594,  599,  591,  596,  205,  596,  597,  117,  591,
      578,  200,  336,  593,  579,  225,  225,  594,  599,  591,

      601,  340,  601,  602,  596,  205,  596,  597,  604,  348,
      604,  597,  606,  482,  606,  601,  340,  601,  602,  607,
      487,  607,  602,  608,  489,  608,  604,  348,  604,  597,
      588,  353,  588,  606,  482,  606,  609,  610,  609,  607,
      487,  607,  602,  608,  489,  608,  614,  230,  614,  612,
      615,  367,  615,  614,  230,  614,  612,  615,  367,  615,
      616,  129,  616,  612,  577,  617,  117,  617,  578,  577,
      577,  577,  579,  577,  577,  577,  577,  225,  577,  577,
      371,  371,  620,  620,  504,   75,  621,  621,  947,  504,
      623,  625,  508,  625,  626,  623,  628,  629,  628,  625,

      508,  625,  626,  209,  577,  577,  577,  632,  633,  632,
      626,  512,  638,  635,   75,  947,   75,  636,  639,  641,
      642,  641,  643,  512,  512,  635,  635,   75,   75,  636,
      636,  117,  117,  578,  578,   75,   75,  579,  579,  117,
      117,  578,  578,   75,  665,  579,  579,  651,  117,  644,
      578,   75,   75,  652,  579,  655,  663,  646,  512,  645,
      635,  117,  647,  578,  636,   75,   75,  579,  648,   75,
      665,  653,  654,   75,  651,  649,  644,  650,   75,  656,
      652,  655,  663,  225,  646,  645,   75,   75,  660,  647,
      658,   75,  365,  225,   75,  648,   75,  657,  653,  654,

      661,  649,  659,   75,  650,  668,  656,   75,   75,  664,
      669,  666,   75,  662,  667,  660,  658,   75,  671,   75,
       75,  670,   75,  657,   75,  675,  673,  661,  659,   75,
      674,  668,   75,   75,  682,  225,  664,  669,  666,  662,
      667,  672,  679,  676,   75,  671,   75,  677,  670,  680,
      678,   75,  675,  673,  176,   75,   75,  674,   75,   75,
      697,  682,  684,   75,  681,  687,  688,  672,  679,  676,
      225,  683,  685,  677,  686,  680,   75,  678,  209,  692,
      689,  109,  176,  694,  691,  225,  304,  695,  697,  684,
      681,  687,  706,  688,  311,  225,  690,  683,  685,   75,

      686,  699,  700,  699,  701,  692,  820,  689,  702,  304,
      691,  704,  705,  704,  303,  706,  701,   75,  706,   75,
      702,  818,  690,  707,  180,  707,  701,  708,  301,  708,
      702,  928,  209,  820,  706,  709,  306,  709,  701,  710,
      445,  710,  702,  117,  124,  712,  706,  225,  818,  713,
      715,  717,  718,  717,  719,  124,  209,  928,  720,  225,
      351,  715,  722,  723,  722,  354,  724,  719,   75,  724,
      351,  720,  725,  216,  725,  719,  724,  209,   75,  720,
      726,  212,  726,  727,  356,  727,  719,  724,  815,  107,
      720,  728,  353,  728,  730,  731,  732,   75,  724,  842,

      733,  735,  736,  735,  737,  730,   75,  732,  720,  336,
      200,  738,  740,   77,  815,  743,  741,  745,  746,  745,
      747,  343,   75,  750,  748,  842,  345,  751,  752,  205,
      752,  750,  754,  336,   73,  751,  756,  757,  756,  743,
      484,  107,  747,  758,   75,  485,  748,  759,  340,  759,
      747,  758,  345,   75,  748,   73, 1048,  485,  754,  760,
      348,  760,  750,  758,   62,  828,  751,  761,  482,  761,
      762,  487,  762,  747,  758,   60,   60,  748,  763,  489,
      763,  764,  610,  764,  220,  754,  766,  227,  758,  227,
      767,  828,   29,  769, 1048,  769,  770,  230,  770,  766,

      771,  367,  771,  767, 1048, 1048,  504,  769,  772,  129,
      772,  766,  779, 1048, 1048,  767,  711,  773,  117,  773,
      712,  711,  711,  711,  713,  711,  711,  711,  711, 1048,
      711,  711,  371,  371,  776,  776, 1048, 1048,  777,  777,
      781,  782,  781,  783,  504, 1048, 1048,  784,   75,  630,
      779,  783,  786,  787,  786,  784,  711,  711,  711,  788,
      789,  508,  789,  783,  631,  631, 1048,  784,  816, 1048,
      788,  788,  790,  629,  790,  791,  633,  791,  783,  788,
      638,  512,  784,  793, 1048, 1048,  796,  794,  798,  799,
      798,  800,  638, 1048,  816,  801, 1048,  808,  796,  803,

      804,  803,  806,  805,  800, 1048,  805, 1048,  801,  807,
      642,  807,  800,  117,   75,  712,  801,   75,  512,  713,
      793,  117, 1048,  712,  794,   75,  117,  713,  712,  117,
      822,  712,  713,   75,  817,  713,  117,  117,  712,  712,
      809,   75,  713,  713,  821,   75,   75,  819,   75,  823,
      825,  814, 1048,  811,   75,   75,  822,  810,  827,   75,
      817,   75,  812,  824,  826,  829,  809,   75,   75,  813,
      821,   75,  830,   75,  819,  823,   75,  825,  814,  811,
      833,  831,  834,  810,   75,  827,  832,  837,  812,  824,
      826,  835,  829,   75,   75,  813,   75,  836,  830,   75,

      838,   75,  839,   75, 1048,  841,  833,  831,   75,  834,
       75, 1048,  832,  837,  840,  844,   75,  835,  846, 1048,
     1048,  843,  176,  848,  836,   75,  838, 1048,  697,  839,
      845,  109,  841,  694, 1048,  849,  176,  695,  304,   75,
      840,  844,  697, 1048,  706,  846,  937,  843,  304,  848,
      850,  851,  850,  701,  706, 1048,  845,  702,  852,  853,
      852,  303,  849,  701,   75,  706,  124,  702,  699,  700,
      699,  701,  715,  937,  922,  702,  854,  855,  854,  701,
      704,  705,  704,  702,  856,  857,  856,  706, 1048, 1048,
     1048,  706,  707,  180,  707,  701,  708,  301,  708,  702,

       75,  922, 1048,  706,  709,  306,  709,  701,  710,  445,
      710,  702,  117, 1048,  712,  706,  946,  124,  713,  858,
      859,  858,  719,  715, 1048,  351,  720,  860,  861,  860,
      354,  724,  719,   75,  724,  351,  720,  717,  718,  717,
      719,  724,  946,  932,  720,  862,  863,  862,  719,  722,
      723,  722,  720,  864,  865,  864,  724, 1048, 1048, 1048,
      724,  725,  216,  725,  719,  726,  212,  726,  720, 1048,
      932, 1048,  724,  727,  356,  727,  719,  728,  353,  728,
      720,  730,   75,  732,  724,  867,  879,  738,  730,  731,
      732,  868,  724,   75,  733,  870,  871,  870,  872,  874,

      926,  737,  873, 1048, 1048,  720,  735,  736,  735,  737,
      876,  989,  877,  720, 1048, 1048,  224,  881,  882,  881,
      883,  200,  336,  740,  884, 1048,  926,  741,  743,  885,
      886,  885,  747,  336, 1048, 1048,  748,  989,  485,  743,
      887,  888,  887,  484,  758,  747,   75,  758,  345,  748,
      745,  746,  745,  747,  754,   75, 1048,  748,  889,  890,
      889,  747,  343,  950,  750,  748, 1048,  345,  751,  891,
      892,  891,  750,  754,  949, 1048,  751,  752,  205,  752,
      750,  893,  894,  893,  751,  485, 1048, 1048,  754,  950,
     1048,  758,  756,  757,  756,  895,  896,  895, 1048,  758,

      949,  227,  758,  759,  340,  759,  747,  769, 1048, 1048,
      748,  760,  348,  760,  750,  761,  482,  761,  751,   75,
     1048,  924,  758,  762,  487,  762,  747,  763,  489,  763,
      748,  764,  610,  764,  754,  220, 1048,  766,  758, 1048,
      227,  767,  897,  898,  897,  766,  769, 1048,  924,  767,
      899,  900,  899,  770,  230,  770,  766,  769, 1048,   75,
      767,  771,  367,  771,  772,  129,  772,  766,  769,  936,
     1048,  767,  711,  773,  117,  773,  712,  711,  711,  711,
      713,  711,  711,  711,  711, 1048,  711,  711,  371,  371,
      776,  776,  504, 1048,  777,  777,  936,  504,  779,  901,

      902,  901,  783,  779, 1048,  630,  784,  783,  903,  904,
      903,  784,  711,  711,  711,  788,  781,  782,  781,  783,
      631,   75, 1048,  784, 1048,  631,  788,  905,  906,  905,
      783,  788, 1048, 1048,  784,  786,  787,  786,  907,  908,
      907,  941,  788, 1048, 1048,  788,  789,  508,  789,  783,
      790,  629,  790,  784, 1048, 1048, 1048,  788,  791,  633,
      791,  783,  512,  638,  793,  784,   75,  941,  794,  796,
      909,  910,  909,  800,  638, 1048, 1048,  801, 1048,  808,
      796,  911,  912,  911,  806,  805,  800,  925,  805,  808,
      801,  798,  799,  798,  800,  805, 1048, 1048,  801,  913,

      914,  913,  800,  803,  804,  803,  801,  915,  916,  915,
      805, 1048, 1048,  925,  805,  807,  642,  807,  800,  117,
     1048,  712,  801,   75,  512,  713,  793,  117, 1048,  712,
      794,   75,  117,  713,  712,  117,  930,  712,  713,   75,
      117,  713,  712, 1048,  935,  923,  713,   75,   75,   75,
      917,  927,  933,  920,  929,   75, 1048, 1048,  918,   75,
      919,  931,  930,  934,   75,  921,   75,   75,  940,  939,
      935,   75,  923,  938, 1048,   75,  917,   75,  927,  933,
      920,  929,  942,   75,  918, 1003,  919,   75,  931,  944,
      934,  921,  943,   75,   75,  940,  939,   75,   75,  948,

      938, 1048,  945,  951,  850,  851,  850,  701,  867,  942,
       75,  702, 1003,  952,  868,  975,  944,  957,  943,  872,
      852,  853,  852,  873, 1048,  973,  948,  706,  945, 1048,
      951,  854,  855,  854,  701,  856,  857,  856,  702,  952,
     1048,  975,  706,  858,  859,  858,  719,  860,  861,  860,
      720,  973, 1048, 1048,  724,  862,  863,  862,  719,  864,
      865,  864,  720,  954,  955,  954,  724,   75, 1048,  959,
      956,  870,  871,  870,  872,  960, 1048, 1011,  873,  961,
      962,  961,  872,  876, 1048,  877,  873, 1048,  876,  224,
      877,  876,  964,  877,  224,  879,   75,  224,  364,  968,

      967,  724,  883, 1048, 1011,  956,  884,  881,  882,  881,
      883,   75, 1048,  976,  884,  969,  970,  969,  883, 1048,
       75, 1048,  884,  885,  886,  885,  747,  887,  888,  887,
      748,  986, 1048, 1048,  758,  889,  890,  889,  747,  976,
       75,  983,  748,  891,  892,  891,  750,  893,  894,  893,
      751,  895,  896,  895,  754, 1007, 1048,  986,  758,  897,
      898,  897,  766,  899,  900,  899,  767,  983, 1048, 1048,
      769,  901,  902,  901,  783,  903,  904,  903,  784, 1048,
       75, 1007,  788,  905,  906,  905,  783,  907,  908,  907,
      784, 1048, 1048,  974,  788,  909,  910,  909,  800,  911,

      912,  911,  801,   75,   75,  978,  805,  913,  914,  913,
      800,  915,  916,  915,  801,  117, 1048,  712,  805,  974,
      512,  713,  793,  117,  999,  712,  794,   75,  512,  713,
      793,  977,  978,  512,  794,  793,   75,  971,  979,  794,
       75,   75,  980,   75,   75,  982,   75,   75,  987,   75,
      999,   75,   75,  988, 1021,   75,  972,  981,  977, 1048,
      984,  990, 1048, 1048,  971,  979, 1025,   75,  985,  980,
       75,  968,  982,  991, 1048,  987,  992,  956,  959,  964,
      988, 1021,  972,  981,  960,  364,  984, 1048,  990,  954,
      955,  954, 1025,   75,  985, 1048,  956,  993,  994,  993,

      991,   75, 1048,  992,  956,  995,  996,  995,  961,  962,
      961,  872,  960, 1000, 1001,  873,  969,  970,  969,  883,
      117,   75,  712,  884,   75,  117,  713,  712,   75,   75,
       75,  713,   75,   75, 1002,   75, 1008, 1048,   75, 1000,
     1001, 1006, 1048, 1010, 1004,   75,   75,   75,  997, 1005,
     1048, 1009, 1013, 1048, 1014, 1012,  998,  993,  994,  993,
     1002, 1048,   75, 1008,  956, 1017, 1019, 1006, 1016, 1010,
     1004,  995,  996,  995,  997, 1005, 1048, 1009,  960, 1013,
     1014, 1012,  998,  117,  512,  712,  793,   75,   75,  713,
      794, 1017, 1019, 1018, 1020, 1016,   75,   75,   75,   75,

       75,   75, 1022, 1023, 1024, 1027,   75,  512,   75,  793,
     1015, 1026,   75,  794,   75,   75,   75, 1029, 1031, 1048,
     1018, 1020, 1032, 1048,   75,   75,   75, 1028, 1033, 1022,
     1023, 1024, 1027, 1036, 1048, 1034, 1015,   75, 1026, 1030,
       75, 1037, 1048, 1029, 1035, 1031,   75,   75,   75, 1032,
     1041,   75, 1038, 1028, 1033,   75, 1040,   75, 1039, 1045,
     1036, 1034, 1042, 1043, 1048, 1030, 1044, 1037,   75,   75,
     1035, 1048, 1048, 1048, 1046, 1047, 1048, 1041, 1038, 1048,
     1048, 1048, 1048, 1040, 1039, 1048, 1045, 1048, 1042, 1048,
     1043, 1048, 1044, 1048, 1048, 1048, 1048, 1048, 1048, 1048,

     1048, 1046, 1047,   27,   27,   27,   27,   27,   30,   30,
       30,   30,   30,   45,   45,   45,   45,   45,   49,   49,
       49,   49,   49,   53,   53,   53,   53,   53,   59,   59,
       59,   59,   59,   61,   61,   61,   61,   61,   63,   63,
       63,   63,   63,   74,   74,   78, 1048,   78,   78,  106,
      106,  106,  106,  106,  108,  108,  108,  108,  108,  112,
      112,  112,  112,  112,  120,  120,  120,  120,  120,  123,
      123,  123,  123,  123,  116,  116,  116,  116,  116,  127,
      127,  127,  127,  127,  138,  138,  138,  138,   76, 1048,
       76,   77, 1048,   77,  169,  169,  169,  169,  169,  172,

      172,  172,  172,  172,  175,  175,  175,  175,  175,  178,
      178,  178,  178,  178,  183,  183,  183,  183,  183,  186,
      186,  186,  186,  186,  190,  190,  190,  190,  190,  194,
      194,  194,  194,  194,  197,  197,  197,  197,  197,  199,
      199,  199,  199,  199,  203,  203,  203,  203,  203,  208,
      208,  208,  208,  208,  210,  210,  210,  210,  210,  214,
      214,  214,  214,  214,  219,  219,  219,  219,  219,  224,
      224,  224,  224,  224,  226,  226,  226,  226,  226,  232,
      232,  232,  232,  232,  285,  285,  285,  285,  285,  288,
      288,  288,  288,  288,  290,  290,  290,  290,  290,  294,

      294,  294,  294,  294,  299,  299,  299,  299,  299,  307,
      307,  307,  307,  307,  312,  312,  312,  312,  312,  315,
      315,  315,  315,  315,  317,  317,  317,  317,  317,  322,
      322,  322,  322,  322,  325,  325,  325,  325,  325,  328,
      328,  328,  328,  328,  332,  332,  332,  332,  332,  335,
      335,  335,  335,  335,  338,  338,  338,  338,  338,  344,
      344,  344,  344,  344,  357,  357,  357,  357,  357,  360,
      360,  360,  360,  360,  364,  364,  364,  364,  364,  369,
      369,  369,  369,  369,  370,  370,  370,  370,  370,  429,
      429,  429,  429,  429,  432,  432,  432,  432,  432,  434,

      434,  434,  434,  434,  438,  438,  438,  438,  438,  294,
      294,  294,  294,  294,  446,  446,  446,  446,  446,  449,
      449,  449,  449,  449,  451,  451,  451,  451,  451,  455,
      455,  455,  455,  455,  460,  460,  460,  460,  460,  463,
      463,  463,  463,  463,  466,  466,  466,  466,  466,  470,
      470,  470,  470,  470,  472,  472,  472,  472,  472,  476,
      476,  476,  476,  476,  480,  480,  480,  480,  480,  490,
      490,  490,  490,  490,  493,  493,  493,  493,  493,  499,
      499,  499,  499,  499,  500,  500,  500,  500,  500,  172,
      172,  172,  172,  172,  503,  503,  503,  503,  503,  506,

      506,  506,  506,  506,  511,  511,  511,  511,  511,  565,
      565,  565,  565,  565,  568,  568,  568,  568,  568,  570,
      570,  570,  570,  570,  573,  573,  573,  573,  573,  577,
      577,  577,  577,  577,  580,  580,  580,  580,  580,  582,
      582,  582,  582,  582,  585,  585,  585,  585,  585,  592,
      592,  592,  592,  592,  595,  595,  595,  595,  595,  598,
      598,  598,  598,  598,  600,  600,  600,  600,  600,  603,
      603,  603,  603,  603,  605,  605,  605,  605,  605,  611,
      611,  611,  611,  611,  613,  613,  613,  613,  613,  618,
      618,  618,  618,  618,  619,  619,  619,  619,  619,  622,

      622,  622,  622,  622,  624,  624,  624,  624,  624,  208,
      208,  208,  208,  208,  627,  627,  627,  627,  627,  634,
      634,  634,  634,  634,  172,  172,  172,  172,  172,  637,
      637,  637,  637,  637,  640,  640,  640,  640,  640,  693,
      693,  693,  693,  693,  696,  696,  696,  696,  696,  698,
      698,  698,  698,  698,  703,  703,  703,  703,  703,  711,
      711,  711,  711,  711,  714,  714,  714,  714,  714,  716,
      716,  716,  716,  716,  721,  721,  721,  721,  721,  729,
      729,  729,  729,  729,  734,  734,  734,  734,  734,  739,
      739,  739,  739,  739,  742,  742,  742,  742,  742,  744,

      744,  744,  744,  744,  749,  749,  749,  749,  749,  753,
      753,  753,  753,  753,  755,  755,  755,  755,  755,  765,
      765,  765,  765,  765,  768,  768,  768,  768,  768,  774,
      774,  774,  774,  774,  775,  775,  775,  775,  775,  778,
      778,  778,  778,  778,  780,  780,  780,  780,  780,  785,
      785,  785,  785,  785,  224,  224,  224,  224,  224,  792,
      792,  792,  792,  792,  795,  795,  795,  795,  795,  797,
      797,  797,  797,  797,  208,  208,  208,  208,  208,  802,
      802,  802,  802,  802,  172,  172,  172,  172,  172,  866,
      866,  866,  866,  866,  869,  869,  869,  869,  869,  734,

      734,  734,  734,  734,  875,  875,  875,  875,  875,  878,
      878,  878,  878,  878,  880,  880,  880,  880,  880,  739,
      739,  739,  739,  739,  742,  742,  742,  742,  742,  744,
      744,  744,  744,  744,  755,  755,  755,  755,  755,  749,
      749,  749,  749,  749,  753,  753,  753,  753,  753,  765,
      765,  765,  765,  765,  768,  768,  768,  768,  768,  774,
      774,  774,  774,  774,  775,  775,  775,  775,  775,  778,
      778,  778,  778,  778,  780,  780,  780,  780,  780,  785,
      785,  785,  785,  785,  792,  792,  792,  792,  792,  795,
      795,  795,  795,  795,  797,  797,  797,  797,  797,  802,

      802,  802,  802,  802,   74,   74,  698,  698,  698,  698,
      698,  703,  703,  703,  703,  703,  716,  716,  716,  716,
      716,  721,  721,  721,  721,  721,  208,  208,  208,  208,
      208,  953,  953,  953,  953,  953,  869,  869,  869,  869,
      869,  958,  958,  958,  958,  958,  875,  875,  875,  875,
      875,  963,  963,  963,  963,  963,  878,  878,  878,  878,
      878,  965,  965, 1048,  965,  965,  880,  880,  880,  880,
      880,  744,  744,  744,  744,  744,  749,  749,  749,  749,
      749,  753,  753,  753,  753,  753,  765,  765,  765,  765,
      765,  768,  768,  768,  768,  768,   21, 1048, 1048, 1048,

     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048
    } ;

static yyconst flex_int16_t yy_chk[4464] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    7, 1047,    8,   24,
     1046,    9,   32,    7,    7,    8,    8,   10,   66,   24,
       13,   14,  109,  110,   66,   32,  109,   13,   14,  110,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    9,
        9,   32,   30,   30,   11,   10,   10,   12,   13,   14,
       30,   11,   44,   41,   12, 1043,   63,   11,   63,   41,
       12,   44,   63,    2,    2,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,   11, 1042, 1038,   12,   41,   15,   44,   15,
       15,   15, 1032,   64,   15,   64,   67,   15,   67,   64,
      113, 1030,   67,   83,  113,   83,    3,    3,    3,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,   15,   16,   79,   16,   16,
       16,   34,   83,   16,   72,   31,   16,   38,   31,  114,
       78,   78,   40,   39,   72,  114,   79,   34,   78,    4,
        4,    4,    5,   38,   31,   42,  108, 1024,  108,   39,
       40,   42,  108,   40,   16,   31,    5,    5,    5,    5,
        5,    5,   79,   34,    5, 1023,   42,    5,    5,   38,

       31,    5,    5,    5,    5,   39,   40,    5,   42,   40,
      186,   95,  186,    5,    5,    5,    5,    5,    5,   95,
     1022,    5,   42,    5,    5,   80,   35,    5,    5,    5,
        5,   81,   97,    5,   20,   20,   20,   20,   36,   35,
       20,   35,   37,   20,   80,   20,   95,   81,   97,   37,
       20,   20, 1021,   82,   36, 1020,   37,   37,   84,   36,
       84,   68,   68,   68,   68,   35,  101,   35,   68,  101,
       80,   91,   82,   81,   97,   43,   37,   20,   20,   33,
       36,   33,   37,   37,   43,   36,   91,   84,   33,  117,
      172,   43,   33,  117,  172,   33,  101,   33,   82, 1017,

       43,   87, 1007,  119,   94,   85,   86,   90,   33,  119,
      200,   43,   91, 1006,  200,   33,   86,   43,   33,   85,
       85,   33,   87,   33,   94,   90,   43,   65,   65,   65,
       65,   65,   65,   65, 1000,   65,   65,   65,   65,   65,
       65,   65,   65,   86,   98,   85,   85,  992,   87,  123,
       94,   90,  991,   96,  112,  123,  112,   88,   96,  116,
      112,  116,   98,   88,  434,  116,  434,   65,   65,   69,
       69,   69,   69,   69,   69,   69,   88,   69,   69,   69,
       69,   69,   69,   69,   69,   96,   93,   89,   98,  104,
       88,   99,   89,   99,  102,   99,  115,  115,  115,  115,

      102,  371,   88,   93,  100,  371,  104,   89,   89,   69,
       69,   70,   70,   70,   70,  105,  139,  100,   70,   89,
       99,  105,   99,  125,  125,  125,   70,  102,  990,   93,
      125,  984,  104,   89,   89,  130,  139,   70,  970,  967,
       70,  130,   70,  100,  111,  111,  111,  111,  105,   70,
      120,  111,  120,   70,  143,  966,  120,  121,  121,  121,
      121,  160,  139,   70,  121,  127,   70,  127,   70,  160,
      512,  127,  143,  965,  512,   70,  118,  118,  118,  118,
      118,  118,  118,  964,  118,  118,  118,  118,  118,  118,
      118,  118,  126,  126,  126,  126,  160,  145,  143,  126,

      128,  128,  128,  128,  962,  146,  142,  128,  131,  131,
      131,  131,  142,  957,  145,  131,  118,  118,  122,  122,
      122,  122,  122,  122,  122,  146,  122,  122,  122,  122,
      122,  122,  122,  122,  951,  136,  169,  136,  169,  142,
      145,  136,  169,  185,  185,  185,  170,  948,  133,  141,
      133,  146,  170,  141,  133,  944,  941,  136,  122,  122,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  133,  132,  132,  134,  144,  134,  133,
      141,  135,  134,  135,  136,  148,  147,  135,  148,  938,
      134,  150,  154,  152,  154,  149,  144,  150,  135,  133,

      132,  132,  132,  140,  134,  133,  147,  135,  135,  149,
      137,  152,  137,  140,  157,  148,  137,  134,  156,  140,
      157,  154,  144,  159,  150,  135,  137,  153,  243,  451,
      134,  451,  147,  135,  135,  149,  243,  152,  155,  156,
      140,  153,  155,  161,  159,  140,  466,  157,  466,  161,
      246,  163,  158,  137,  151,  246,  151,  151,  151,  151,
      151,  151,  158,  243,  151,  156,  162,  153,  151,  155,
      159,  151,  163,  151,  151,  164,  161,  151,  165,  162,
      166,  164,  246,  151,  151,  151,  151,  151,  151,  158,
      258,  151,  165,  168,  151,  166,  165,  151,  163,  151,

      151,  167,  935,  151,  173,  162,  258,  167,  164,  931,
      173,  168,  171,  171,  171,  171,  259,  930,  165,  171,
      926,  166,  165,  174,  174,  174,  174,  175,  177,  177,
      177,  259,  258,  175,  167,  177,  178,  168,  178,  266,
      924,  181,  178,  179,  179,  179,  179,  181,  266,  183,
      179,  182,  182,  182,  182,  183,  923,  259,  182,  187,
      187,  187,  187,  190,  191,  190,  209,  209,  209,  190,
      191,  192,  192,  192,  192,  266,  914,  910,  192,  193,
      193,  193,  193,  193,  193,  193,  906,  193,  193,  193,
      193,  193,  193,  193,  193,  194,  248,  194,  242,  902,

      197,  194,  195,  195,  195,  195,  197,  201,  206,  195,
      198,  198,  198,  201,  206,  248,  242,  198,  898,  193,
      193,  196,  196,  196,  196,  196,  196,  196,  892,  196,
      196,  196,  196,  196,  196,  196,  196,  199,  472,  199,
      472,  248,  242,  199,  202,  202,  202,  202,  203,  210,
      203,  202,  890,  886,  203,  210,  204,  204,  204,  204,
      882,  196,  196,  204,  207,  207,  207,  207,  211,  211,
      211,  207,  213,  213,  213,  211,  214,  879,  214,  213,
      397,  217,  214,  215,  215,  215,  215,  217,  871,  397,
      215,  218,  218,  218,  218,  219,  221,  219,  218,  257,

      867,  219,  221,  222,  222,  222,  222,  863,  859,  226,
      222,  223,  223,  223,  223,  226,  397,  257,  223,  228,
      228,  228,  229,  229,  229,  229,  228,  855,  851,  229,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  257,  231,  231,  232,  840,  232,  233,
      839,  233,  232,  245,  235,  233,  235,  234,  822,  234,
      235,  821,  236,  234,  236,  245,  806,  237,  236,  237,
      231,  231,  231,  237,  233,  234,  239,  238,  239,  238,
      730,  286,  239,  238,  730,  235,  240,  286,  240,  237,
      244,  245,  240,  236,  244,  241,  247,  241,  247,  249,

      233,  241,  234,  238,  251,  255,  238,  250,  239,  250,
      252,  235,  249,  256,  251,  262,  237,  254,  240,  236,
      241,  244,  253,  252,  255,  247,  256,  254,  253,  238,
      261,  262,  238,  265,  239,  260,  250,  261,  249,  799,
      254,  251,  263,  270,  240,  261,  241,  264,  267,  252,
      255,  260,  256,  264,  254,  253,  260,  262,  265,  269,
      263,  271,  280,  270,  261,  273,  254,  272,  264,  273,
      274,  261,  269,  267,  275,  272,  782,  260,  280,  271,
      264,  281,  260,  274,  265,  272,  263,  284,  278,  270,
      746,  279,  275,  284,  264,  279,  273,  281,  269,  267,

      718,  285,  272,  285,  280,  271,  278,  285,  288,  274,
      283,  272,  700,  292,  288,  283,  385,  687,  275,  292,
      284,  683,  279,  281,  294,  283,  287,  287,  287,  287,
      294,  385,  278,  287,  289,  289,  289,  290,  490,  290,
      490,  289,  681,  290,  291,  291,  291,  291,  296,  296,
      296,  291,  283,  293,  293,  293,  293,  385,  678,  299,
      293,  297,  297,  297,  297,  299,  300,  300,  300,  302,
      302,  302,  384,  300,  384,  668,  302,  305,  305,  305,
      305,  308,  308,  308,  305,  312,  313,  312,  349,  349,
      349,  312,  313,  314,  314,  314,  314,  315,  658,  657,

      314,  384,  319,  315,  316,  316,  316,  317,  319,  317,
      642,  316,  326,  317,  318,  318,  318,  318,  326,  638,
      330,  318,  320,  320,  320,  320,  330,  633,  630,  320,
      321,  321,  321,  321,  321,  321,  321,  564,  321,  321,
      321,  321,  321,  321,  321,  321,  322,  506,  322,  506,
      554,  395,  322,  323,  323,  323,  323,  325,  552,  325,
      323,  332,  328,  325,  328,  537,  395,  332,  328,  525,
      321,  321,  324,  324,  324,  324,  324,  324,  324,  509,
      324,  324,  324,  324,  324,  324,  324,  324,  327,  327,
      327,  327,  395,  508,  335,  327,  329,  329,  329,  329,

      335,  504,  493,  329,  331,  331,  331,  331,  333,  333,
      333,  331,  324,  324,  491,  333,  334,  334,  334,  337,
      337,  337,  338,  334,  338,  411,  337,  341,  338,  339,
      339,  339,  339,  341,  487,  344,  339,  342,  342,  342,
      342,  344,  411,  386,  342,  346,  346,  346,  347,  347,
      347,  347,  346,  386,  484,  347,  352,  352,  352,  355,
      355,  355,  355,  352,  358,  357,  355,  357,  411,  480,
      358,  357,  359,  359,  359,  359,  360,  476,  474,  359,
      386,  468,  360,  361,  361,  361,  362,  362,  362,  362,
      361,  409,  455,  362,  363,  363,  363,  363,  366,  366,

      366,  363,  690,  399,  409,  366,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  399,
      368,  368,  369,  370,  369,  370,  372,  690,  369,  370,
      409,  414,  372,  373,  373,  373,  373,  374,  389,  374,
      373,  406,  389,  374,  414,  399,  368,  368,  368,  375,
      376,  375,  376,  690,  453,  375,  376,  377,  378,  377,
      378,  406,  438,  377,  378,  379,  380,  379,  380,  389,
      414,  379,  380,  387,  381,  377,  381,  382,  387,  382,
      381,  376,  436,  382,  378,  428,  413,  406,  381,  405,
      402,  380,  388,  379,  391,  383,  381,  383,  388,  382,

      391,  383,  377,  398,  390,  387,  392,  376,  393,  390,
      378,  402,  393,  383,  390,  381,  392,  380,  394,  379,
      400,  396,  398,  381,  394,  388,  382,  391,  396,  403,
      400,  404,  410,  407,  408,  410,  390,  402,  407,  393,
      383,  390,  401,  392,  415,  364,  404,  403,  398,  418,
      408,  394,  412,  416,  415,  396,  418,  400,  412,  416,
      417,  419,  410,  419,  420,  407,  417,  421,  422,  421,
      420,  423,  404,  403,  424,  427,  408,  425,  429,  424,
      429,  415,  430,  418,  429,  412,  416,  422,  430,  432,
      419,  423,  356,  417,  427,  432,  421,  420,  425,  431,

      431,  431,  431,  433,  433,  433,  424,  435,  435,  435,
      435,  354,  447,  422,  439,  439,  439,  423,  447,  348,
      427,  440,  440,  440,  425,  437,  437,  437,  437,  441,
      441,  441,  441,  442,  442,  442,  444,  444,  444,  446,
      343,  446,  340,  336,  449,  446,  448,  448,  448,  448,
      449,  450,  450,  450,  452,  452,  452,  452,  454,  454,
      454,  454,  456,  456,  456,  457,  457,  457,  458,  458,
      458,  458,  459,  459,  459,  460,  464,  460,  459,  310,
      307,  460,  464,  459,  461,  461,  461,  461,  462,  462,
      462,  463,  470,  463,  462,  306,  303,  463,  470,  462,

      465,  465,  465,  465,  467,  467,  467,  467,  469,  469,
      469,  469,  471,  471,  471,  473,  473,  473,  473,  475,
      475,  475,  475,  477,  477,  477,  478,  478,  478,  478,
      479,  479,  479,  481,  481,  481,  483,  483,  483,  486,
      486,  486,  486,  488,  488,  488,  492,  492,  492,  492,
      494,  494,  494,  495,  495,  495,  495,  496,  496,  496,
      497,  497,  497,  497,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  298,  498,  498,
      499,  500,  499,  500,  501,  844,  499,  500,  844,  503,
      501,  502,  502,  502,  502,  503,  505,  505,  505,  507,

      507,  507,  507,  295,  498,  498,  498,  510,  510,  510,
      510,  511,  513,  511,  282,  844,  277,  511,  513,  514,
      514,  514,  514,  515,  516,  515,  516,  276,  539,  515,
      516,  517,  518,  517,  518,  529,  536,  517,  518,  519,
      520,  519,  520,  524,  539,  519,  520,  524,  521,  517,
      521,  526,  268,  526,  521,  529,  536,  519,  523,  518,
      523,  522,  520,  522,  523,  528,  532,  522,  521,  527,
      539,  527,  528,  530,  524,  521,  517,  522,  531,  530,
      526,  529,  536,  230,  519,  518,  534,  533,  534,  520,
      532,  542,  225,  224,  541,  521,  535,  531,  527,  528,

      535,  521,  533,  538,  522,  542,  530,  540,  543,  538,
      543,  540,  545,  535,  541,  534,  532,  544,  545,  548,
      546,  544,  547,  531,  551,  548,  547,  535,  533,  549,
      547,  542,  556,  553,  556,  220,  538,  543,  540,  535,
      541,  546,  551,  549,  550,  545,  555,  549,  544,  553,
      550,  559,  548,  547,  566,  558,  560,  547,  557,  563,
      566,  556,  558,  562,  555,  559,  560,  546,  551,  549,
      216,  557,  558,  549,  558,  553,  561,  550,  208,  563,
      561,  565,  568,  565,  562,  205,  572,  565,  568,  558,
      555,  559,  572,  560,  189,  188,  561,  557,  558,  656,

      558,  567,  567,  567,  567,  563,  656,  561,  567,  573,
      562,  569,  569,  569,  570,  573,  570,  823,  569,  654,
      570,  654,  561,  571,  571,  571,  571,  574,  574,  574,
      571,  823,  184,  656,  574,  575,  575,  575,  575,  576,
      576,  576,  575,  577,  578,  577,  576,  180,  654,  577,
      578,  579,  579,  579,  579,  580,  176,  823,  579,  129,
      584,  580,  581,  581,  581,  582,  584,  582,  651,  581,
      585,  582,  583,  583,  583,  583,  585,  124,  684,  583,
      586,  586,  586,  587,  587,  587,  587,  586,  651,  106,
      587,  588,  588,  588,  589,  589,  589,  103,  588,  684,

      589,  590,  590,  590,  590,  591,   92,  591,  590,  593,
      592,  591,  592,   76,  651,  593,  592,  594,  594,  594,
      594,  595,   74,  595,  594,  684,  597,  595,  596,  596,
      596,  596,  597,  598,   73,  596,  599,  599,  599,  598,
      600,   61,  600,  599,   27,  602,  600,  601,  601,  601,
      601,  602,  603,  666,  601,   26,   21,  605,  603,  604,
      604,  604,  604,  605,   19,  666,  604,  606,  606,  606,
      607,  607,  607,  607,  606,   18,   17,  607,  608,  608,
      608,  609,  609,  609,  611,  608,  611,  612,  609,  613,
      611,  666,    6,  612,    0,  613,  614,  614,  614,  614,

      615,  615,  615,  614,    0,    0,  620,  615,  616,  616,
      616,  616,  620,    0,    0,  616,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,    0,
      617,  617,  618,  619,  618,  619,    0,    0,  618,  619,
      621,  621,  621,  621,  622,    0,    0,  621,  652,  624,
      622,  624,  623,  623,  623,  624,  617,  617,  617,  623,
      625,  625,  625,  625,  626,  627,    0,  625,  652,    0,
      626,  627,  628,  628,  628,  632,  632,  632,  632,  628,
      635,  634,  632,  634,    0,    0,  635,  634,  636,  636,
      636,  636,  637,    0,  652,  636,    0,  643,  637,  639,

      639,  639,  640,  643,  640,    0,  639,    0,  640,  641,
      641,  641,  641,  644,  653,  644,  641,  660,  645,  644,
      645,  646,    0,  646,  645,  659,  647,  646,  647,  648,
      660,  648,  647,  661,  653,  648,  649,  650,  649,  650,
      644,  655,  649,  650,  659,  662,  664,  655,  663,  661,
      663,  650,    0,  647,  665,  667,  660,  646,  665,  669,
      653,  670,  648,  662,  664,  667,  644,  672,  671,  649,
      659,  676,  669,  674,  655,  661,  673,  663,  650,  647,
      672,  670,  673,  646,  677,  665,  671,  676,  648,  662,
      664,  674,  667,  675,  686,  649,  679,  675,  669,  680,

      677,  682,  679,  685,    0,  682,  672,  670,  688,  673,
      691,    0,  671,  676,  680,  686,  689,  674,  689,    0,
        0,  685,  694,  691,  675,  692,  677,    0,  694,  679,
      688,  693,  682,  693,    0,  692,  696,  693,  701,  832,
      680,  686,  696,    0,  701,  689,  832,  685,  703,  691,
      695,  695,  695,  695,  703,    0,  688,  695,  697,  697,
      697,  698,  692,  698,  815,  697,  712,  698,  699,  699,
      699,  699,  712,  832,  815,  699,  702,  702,  702,  702,
      704,  704,  704,  702,  706,  706,  706,  704,    0,    0,
        0,  706,  707,  707,  707,  707,  708,  708,  708,  707,

      843,  815,    0,  708,  709,  709,  709,  709,  710,  710,
      710,  709,  711,    0,  711,  710,  843,  714,  711,  713,
      713,  713,  713,  714,    0,  719,  713,  715,  715,  715,
      716,  719,  716,  827,  715,  721,  716,  717,  717,  717,
      717,  721,  843,  827,  717,  720,  720,  720,  720,  722,
      722,  722,  720,  724,  724,  724,  722,    0,    0,    0,
      724,  725,  725,  725,  725,  726,  726,  726,  725,    0,
      827,    0,  726,  727,  727,  727,  727,  728,  728,  728,
      727,  729,  819,  729,  728,  732,  737,  729,  731,  731,
      731,  732,  737,  947,  731,  733,  733,  733,  733,  734,

      819,  734,  733,    0,    0,  734,  735,  735,  735,  735,
      736,  947,  736,  735,    0,    0,  736,  738,  738,  738,
      738,  739,  740,  739,  738,    0,  819,  739,  740,  741,
      741,  741,  741,  742,    0,    0,  741,  947,  747,  742,
      743,  743,  743,  744,  747,  744,  847,  743,  750,  744,
      745,  745,  745,  745,  750,  846,    0,  745,  748,  748,
      748,  748,  749,  847,  749,  748,    0,  753,  749,  751,
      751,  751,  751,  753,  846,    0,  751,  752,  752,  752,
      752,  754,  754,  754,  752,  755,    0,    0,  754,  847,
        0,  755,  756,  756,  756,  758,  758,  758,    0,  756,

      846,  766,  758,  759,  759,  759,  759,  766,    0,    0,
      759,  760,  760,  760,  760,  761,  761,  761,  760,  817,
        0,  817,  761,  762,  762,  762,  762,  763,  763,  763,
      762,  764,  764,  764,  763,  765,    0,  765,  764,    0,
      768,  765,  767,  767,  767,  767,  768,    0,  817,  767,
      769,  769,  769,  770,  770,  770,  770,  769,    0,  831,
      770,  771,  771,  771,  772,  772,  772,  772,  771,  831,
        0,  772,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,    0,  773,  773,  774,  775,
      774,  775,  776,    0,  774,  775,  831,  778,  776,  777,

      777,  777,  777,  778,    0,  780,  777,  780,  779,  779,
      779,  780,  773,  773,  773,  779,  781,  781,  781,  781,
      783,  836,    0,  781,    0,  785,  783,  784,  784,  784,
      784,  785,    0,    0,  784,  786,  786,  786,  788,  788,
      788,  836,  786,    0,    0,  788,  789,  789,  789,  789,
      790,  790,  790,  789,    0,    0,    0,  790,  791,  791,
      791,  791,  792,  793,  792,  791,  818,  836,  792,  793,
      794,  794,  794,  794,  795,    0,    0,  794,    0,  800,
      795,  796,  796,  796,  797,  800,  797,  818,  796,  802,
      797,  798,  798,  798,  798,  802,    0,    0,  798,  801,

      801,  801,  801,  803,  803,  803,  801,  805,  805,  805,
      803,    0,    0,  818,  805,  807,  807,  807,  807,  809,
        0,  809,  807,  825,  810,  809,  810,  811,    0,  811,
      810,  830,  812,  811,  812,  813,  825,  813,  812,  816,
      814,  813,  814,    0,  830,  816,  814,  828,  824,  820,
      809,  820,  828,  813,  824,  826,    0,    0,  811,  829,
      812,  826,  825,  829,  834,  814,  835,  833,  835,  834,
      830,  838,  816,  833,    0,  977,  809,  837,  820,  828,
      813,  824,  837,  841,  811,  977,  812,  842,  826,  841,
      829,  814,  838,  845,  927,  835,  834,  848,  849,  845,

      833,    0,  842,  848,  850,  850,  850,  850,  866,  837,
      922,  850,  977,  849,  866,  927,  841,  869,  838,  869,
      852,  852,  852,  869,    0,  922,  845,  852,  842,    0,
      848,  854,  854,  854,  854,  856,  856,  856,  854,  849,
        0,  927,  856,  858,  858,  858,  858,  860,  860,  860,
      858,  922,    0,    0,  860,  862,  862,  862,  862,  864,
      864,  864,  862,  868,  868,  868,  864,  986,    0,  872,
      868,  870,  870,  870,  870,  872,    0,  986,  870,  873,
      873,  873,  873,  874,    0,  874,  873,    0,  875,  874,
      875,  876,  877,  876,  875,  878,  928,  876,  877,  883,

      880,  878,  880,    0,  986,  883,  880,  881,  881,  881,
      881,  943,    0,  928,  881,  884,  884,  884,  884,    0,
      939,    0,  884,  885,  885,  885,  885,  887,  887,  887,
      885,  943,    0,    0,  887,  889,  889,  889,  889,  928,
      981,  939,  889,  891,  891,  891,  891,  893,  893,  893,
      891,  895,  895,  895,  893,  981,    0,  943,  895,  897,
      897,  897,  897,  899,  899,  899,  897,  939,    0,    0,
      899,  901,  901,  901,  901,  903,  903,  903,  901,    0,
      925,  981,  903,  905,  905,  905,  905,  907,  907,  907,
      905,    0,    0,  925,  907,  909,  909,  909,  909,  911,

      911,  911,  909,  932,  973,  932,  911,  913,  913,  913,
      913,  915,  915,  915,  913,  917,    0,  917,  915,  925,
      918,  917,  918,  919,  973,  919,  918,  929,  920,  919,
      920,  929,  932,  921,  920,  921,  933,  917,  933,  921,
      934,  936,  934,  937,  945,  937,  940,  942,  945,  946,
      973, 1011, 1005,  946, 1005,  949,  919,  936,  929,    0,
      940,  949,    0,    0,  917,  933, 1011,  950,  942,  934,
      952,  953,  937,  950,    0,  945,  952,  953,  958,  963,
      946, 1005,  919,  936,  958,  963,  940,    0,  949,  954,
      954,  954, 1011,  974,  942,    0,  954,  956,  956,  956,

      950,  975,    0,  952,  956,  960,  960,  960,  961,  961,
      961,  961,  960,  974,  975,  961,  969,  969,  969,  969,
      971,  976,  971,  969,  978,  972,  971,  972,  980,  979,
      985,  972,  982,  983,  976,  987,  982,    0,  989,  974,
      975,  980,    0,  985,  978, 1001,  988, 1003,  971,  979,
        0,  983,  988,    0,  989,  987,  972,  993,  993,  993,
      976,    0,  999,  982,  993, 1001, 1003,  980,  999,  985,
      978,  995,  995,  995,  971,  979,    0,  983,  995,  988,
      989,  987,  972,  997,  998,  997,  998, 1002, 1004,  997,
      998, 1001, 1003, 1002, 1004,  999, 1008, 1009, 1010, 1016,

     1013, 1012, 1008, 1009, 1010, 1013, 1014, 1015, 1019, 1015,
      997, 1012, 1026, 1015, 1027, 1018, 1025, 1016, 1019,    0,
     1002, 1004, 1025,    0, 1028, 1031, 1029, 1014, 1026, 1008,
     1009, 1010, 1013, 1029,    0, 1027,  997, 1033, 1012, 1018,
     1034, 1031,    0, 1016, 1028, 1019, 1035, 1037, 1036, 1025,
     1036, 1040, 1033, 1014, 1026, 1041, 1035, 1039, 1034, 1041,
     1029, 1027, 1037, 1039,    0, 1018, 1040, 1031, 1044, 1045,
     1028,    0,    0,    0, 1044, 1045,    0, 1036, 1033,    0,
        0,    0,    0, 1035, 1034,    0, 1041,    0, 1037,    0,
     1039,    0, 1040,    0,    0,    0,    0,    0,    0,    0,

        0, 1044, 1045, 1049, 1049, 1049, 1049, 1049, 1050, 1050,
     1050, 1050, 1050, 1051, 1051, 1051, 1051, 1051, 1052, 1052,
     1052, 1052, 1052, 1053, 1053, 1053, 1053, 1053, 1054, 1054,
     1054, 1054, 1054, 1055, 1055, 1055, 1055, 1055, 1056, 1056,
     1056, 1056, 1056, 1057, 1057, 1058,    0, 1058, 1058, 1059,
     1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1061,
     1061, 1061, 1061, 1061, 1062, 1062, 1062, 1062, 1062, 1063,
     1063, 1063, 1063, 1063, 1064, 1064, 1064, 1064, 1064, 1065,
     1065, 1065, 1065, 1065, 1066, 1066, 1066, 1066, 1067,    0,
     1067, 1068,    0, 1068, 1069, 1069, 1069, 1069, 1069, 1070,

     1070, 1070, 1070, 1070, 1071, 1071, 1071, 1071, 1071, 1072,
     1072, 1072, 1072, 1072, 1073, 1073, 1073, 1073, 1073, 1074,
     1074, 1074, 1074, 1074, 1075, 1075, 1075, 1075, 1075, 1076,
     1076, 1076, 1076, 1076, 1077, 1077, 1077, 1077, 1077, 1078,
     1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079, 1079, 1080,
     1080, 1080, 1080, 1080, 1081, 1081, 1081, 1081, 1081, 1082,
     1082, 1082, 1082, 1082, 1083, 1083, 1083, 1083, 1083, 1084,
     1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1086,
     1086, 1086, 1086, 1086, 1087, 1087, 1087, 1087, 1087, 1088,
     1088, 1088, 1088, 1088, 1089, 1089, 1089, 1089, 1089, 1090,

     1090, 1090, 1090, 1090, 1091, 1091, 1091, 1091, 1091, 1092,
     1092, 1092, 1092, 1092, 1093, 1093, 1093, 1093, 1093, 1094,
     1094, 1094, 1094, 1094, 1095, 1095, 1095, 1095, 1095, 1096,
     1096, 1096, 1096, 1096, 1097, 1097, 1097, 1097, 1097, 1098,
     1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099, 1100,
     1100, 1100, 1100, 1100, 1101, 1101, 1101, 1101, 1101, 1102,
     1102, 1102, 1102, 1102, 1103, 1103, 1103, 1103, 1103, 1104,
     1104, 1104, 1104, 1104, 1105, 1105, 1105, 1105, 1105, 1106,
     1106, 1106, 1106, 1106, 1107, 1107, 1107, 1107, 1107, 1108,
     1108, 1108, 1108, 1108, 1109, 1109, 1109, 1109, 1109, 1110,

     1110, 1110, 1110, 1110, 1111, 1111, 1111, 1111, 1111, 1112,
     1112, 1112, 1112, 1112, 1113, 1113, 1113, 1113, 1113, 1114,
     1114, 1114, 1114, 1114, 1115, 1115, 1115, 1115, 1115, 1116,
     1116, 1116, 1116, 1116, 1117, 1117, 1117, 1117, 1117, 1118,
     1118, 1118, 1118, 1118, 1119, 1119, 1119, 1119, 1119, 1120,
     1120, 1120, 1120, 1120, 1121, 1121, 1121, 1121, 1121, 1122,
     1122, 1122, 1122, 1122, 1123, 1123, 1123, 1123, 1123, 1124,
     1124, 1124, 1124, 1124, 1125, 1125, 1125, 1125, 1125, 1126,
     1126, 1126, 1126, 1126, 1127, 1127, 1127, 1127, 1127, 1128,
     1128, 1128, 1128, 1128, 1129, 1129, 1129, 1129, 1129, 1130,

     1130, 1130, 1130, 1130, 1131, 1131, 1131, 1131, 1131, 1132,
     1132, 1132, 1132, 1132, 1133, 1133, 1133, 1133, 1133, 1134,
     1134, 1134, 1134, 1134, 1135, 1135, 1135, 1135, 1135, 1136,
     1136, 1136, 1136, 1136, 1137, 1137, 1137, 1137, 1137, 1138,
     1138, 1138, 1138, 1138, 1139, 1139, 1139, 1139, 1139, 1140,
     1140, 1140, 1140, 1140, 1141, 1141, 1141, 1141, 1141, 1142,
     1142, 1142, 1142, 1142, 1143, 1143, 1143, 1143, 1143, 1144,
     1144, 1144, 1144, 1144, 1145, 1145, 1145, 1145, 1145, 1146,
     1146, 1146, 1146, 1146, 1147, 1147, 1147, 1147, 1147, 1148,
     1148, 1148, 1148, 1148, 1149, 1149, 1149, 1149, 1149, 1150,

     1150, 1150, 1150, 1150, 1151, 1151, 1151, 1151, 1151, 1152,
     1152, 1152, 1152, 1152, 1153, 1153, 1153, 1153, 1153, 1154,
     1154, 1154, 1154, 1154, 1155, 1155, 1155, 1155, 1155, 1156,
     1156, 1156, 1156, 1156, 1157, 1157, 1157, 1157, 1157, 1158,
     1158, 1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159, 1160,
     1160, 1160, 1160, 1160, 1161, 1161, 1161, 1161, 1161, 1162,
     1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163, 1164,
     1164, 1164, 1164, 1164, 1165, 1165, 1165, 1165, 1165, 1166,
     1166, 1166, 1166, 1166, 1167, 1167, 1167, 1167, 1167, 1168,
     1168, 1168, 1168, 1168, 1169, 1169, 1169, 1169, 1169, 1170,

     1170, 1170, 1170, 1170, 1171, 1171, 1171, 1171, 1171, 1172,
     1172, 1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173, 1174,
     1174, 1174, 1174, 1174, 1175, 1175, 1175, 1175, 1175, 1176,
     1176, 1176, 1176, 1176, 1177, 1177, 1177, 1177, 1177, 1178,
     1178, 1178, 1178, 1178, 1179, 1179, 1179, 1179, 1179, 1180,
     1180, 1180, 1180, 1180, 1181, 1181, 1181, 1181, 1181, 1182,
     1182, 1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183, 1184,
     1184, 1184, 1184, 1184, 1185, 1185, 1185, 1185, 1185, 1186,
     1186, 1186, 1186, 1186, 1187, 1187, 1187, 1187, 1187, 1188,
     1188, 1188, 1188, 1188, 1189, 1189, 1189, 1189, 1189, 1190,

     1190, 1190, 1190, 1190, 1191, 1191, 1191, 1191, 1191, 1192,
     1192, 1192, 1192, 1192, 1193, 1193, 1193, 1193, 1193, 1194,
     1194, 1194, 1194, 1194, 1195, 1195, 1195, 1195, 1195, 1196,
     1196, 1196, 1196, 1196, 1197, 1197, 1197, 1197, 1197, 1198,
     1198, 1198, 1198, 1198, 1199, 1199, 1199, 1199, 1199, 1200,
     1200, 1200, 1200, 1200, 1201, 1201, 1201, 1201, 1201, 1202,
     1202, 1202, 1202, 1202, 1203, 1203, 1203, 1203, 1203, 1204,
     1204, 1204, 1204, 1204, 1205, 1205, 1205, 1205, 1205, 1206,
     1206, 1206, 1206, 1206, 1207, 1207, 1207, 1207, 1207, 1208,
     1208, 1208, 1208, 1208, 1209, 1209, 1209, 1209, 1209, 1210,

     1210, 1210, 1210, 1210, 1211, 1211, 1212, 1212, 1212, 1212,
     1212, 1213, 1213, 1213, 1213, 1213, 1214, 1214, 1214, 1214,
     1214, 1215, 1215, 1215, 1215, 1215, 1216, 1216, 1216, 1216,
     1216, 1217, 1217, 1217, 1217, 1217, 1218, 1218, 1218, 1218,
     1218, 1219, 1219, 1219, 1219, 1219, 1220, 1220, 1220, 1220,
     1220, 1221, 1221, 1221, 1221, 1221, 1222, 1222, 1222, 1222,
     1222, 1223, 1223,    0, 1223, 1223, 1224, 1224, 1224, 1224,
     1224, 1225, 1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226,
     1226, 1227, 1227, 1227, 1227, 1227, 1228, 1228, 1228, 1228,
     1228, 1229, 1229, 1229, 1229, 1229, 1048, 1048, 1048, 1048,

     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
// $Id: lexer.l 136 2016-11-06 11:12:38Z willem_vermin $
#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include "parser.h"
#include "findent.h"
#include "debug.h"
#define YY_DECL extern "C" int yylex()
std::stack<int>      start_stack;
std::string          lexer_name, lexer_stlabel, lexeri_number;
std::string          input_string;
int             lrlevel;
bool            lrreturn;
class line_prep pline;




//  following are keywords starting with c
#line 1855 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 29 "lexer.l"


#line 2088 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1049 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4397 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 34 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 51 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 56 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 74 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 77 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 85 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 100 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 104 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 120 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 125 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 82:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 195 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK

case 98:
YY_RULE_SETUP
#line 210 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.type_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.type_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.type_dot_operator)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 99:
/* rule 99 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 240 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 246 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 253 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 260 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 262 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 263 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 265 "lexer.l"
ECHO;
	YY_BREAK
#line 2805 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1049 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1049 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1048);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 265 "lexer.l"



void lexer_set(class line_prep p)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
}

void lexer_set(std::string s)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   BEGIN(state_findformat);
}

void lexer_enable(int k)
{
   switch(k)
   {
      case IDENTIFIER:  BEGIN(state_identifier);   break;
      case SKIPALL:     BEGIN(state_skipall);      break;
      case SKIP:        BEGIN(state_skip);         break;
      case SKIPNOOP:    BEGIN(state_skipnoop);     break;
      case KEYWORD:     BEGIN(state_keyword);      break;
      case FINDFORMAT:  BEGIN(state_findformat);   break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}

std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


